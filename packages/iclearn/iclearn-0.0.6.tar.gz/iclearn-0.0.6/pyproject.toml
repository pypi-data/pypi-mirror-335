[project]
name = "iclearn"
version = "0.0.6"
authors = [
  { name="James Grogan, Irish Centre for High End Computing", email="james.grogan@ichec.ie" },
]
description = "A collection of utilities for machine learning applications."
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Topic :: System :: Distributed Computing"
]
keywords = ["Machine Learning", "Workflow", "HPC"]

dependencies = ["icflow==0.1.4",
                "mlflow",
                "tensorboard",
                "opencv-python-headless"]
            
[project.urls]
Repository = "https://git.ichec.ie/performance/toolshed/iclearn"
Homepage = "https://git.ichec.ie/performance/toolshed/iclearn"

[project.scripts]
icflow = "iclearn.main_cli:main_cli"

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "pytest-sugar",
    "black",
    "flake8",
    "pylint",
    "mypy"
]

torch = ["torch", "torchvision"]

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.mypy]
ignore_missing_imports = true

[tool.setuptools.package-data]
"iclearn" = ["py.typed"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
testpaths = ["test",]
log_cli = 1
log_cli_level = "debug"
addopts = "--cov=iclearn --cov-report term --cov-report xml:coverage.xml --cov-report html"

[tool.tox]
legacy_tox_ini = """
[tox]
requires =
    tox>=4
env_list = unit, lint, type, style, py{311}, docs
skip_missing_interpreters = true

[testenv:unit]
description = run unit tests
allowlist_externals =
   bash
   ./infra/pip_torch_wrapper.sh
install_command =
    bash ./infra/pip_torch_wrapper.sh {opts} {packages}
deps =
    pytest
    pytest-sugar
    pytest-cov
    pillow
extras = torch
commands =
    pytest {posargs:test}

[testenv:lint]
description = run linters
skip_install = true
deps =
    black
commands = black {posargs:src test}

[testenv:style]
description = run style check
skip_install = true
deps =
    flake8
commands = flake8 {posargs:src}

[testenv:type]
description = run type checks
deps =
    mypy
    iccore[types]
commands =
    mypy {posargs:src}

[testenv:docs]
description = generate docs
changedir = docs
deps = sphinx
commands = sphinx-build -W -b html -d {envtmpdir}/doctrees . {envtmpdir}/html
"""
