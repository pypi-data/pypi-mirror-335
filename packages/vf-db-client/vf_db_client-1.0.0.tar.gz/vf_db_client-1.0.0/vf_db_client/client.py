# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template client.py.jinja --
import warnings
import logging
from datetime import timedelta
from pathlib import Path
from types import TracebackType
from typing_extensions import override

from pydantic import BaseModel

from . import types, models, errors, actions
from ._base_client import BasePrisma, UseClientDefault, USE_CLIENT_DEFAULT
from .types import DatasourceOverride, HttpConfig, MetricsFormat
from ._types import BaseModelT, PrismaMethod, TransactionId, Datasource
from .bases import _PrismaModel
from ._builder import QueryBuilder, dumps
from .generator.models import EngineType, OptionalValueFromEnvVar, BinaryPaths
from ._compat import removeprefix, model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED, DEFAULT_CONNECT_TIMEOUT, DEFAULT_TX_MAX_WAIT, DEFAULT_TX_TIMEOUT
from ._raw_query import deserialize_raw_results
from ._metrics import Metrics
from .metadata import PRISMA_MODELS, RELATIONAL_FIELD_MAPPINGS
from ._transactions import AsyncTransactionManager, SyncTransactionManager

# re-exports
from ._base_client import SyncBasePrisma, AsyncBasePrisma, load_env as load_env
from ._registry import (
    register as register,
    get_client as get_client,
    RegisteredClient as RegisteredClient,
)


__all__ = (
    'ENGINE_TYPE',
    'SCHEMA_PATH',
    'BINARY_PATHS',
    'Batch',
    'Prisma',
    'Client',
    'load_env',
    'register',
    'get_client',
)

log: logging.Logger = logging.getLogger(__name__)

SCHEMA_PATH = Path('/Users/jwalinthaker/Data/Projects/Velocifile/vf-infra/databases/schema_jt.prisma')
PACKAGED_SCHEMA_PATH = Path(__file__).parent.joinpath('schema.prisma')
ENGINE_TYPE: EngineType = EngineType.binary
BINARY_PATHS = model_parse(BinaryPaths, {'queryEngine': {'darwin-arm64': '/Users/jwalinthaker/.cache/prisma-python/binaries/5.17.0/393aa359c9ad4a4bb28630fb5613f9c281cde053/node_modules/prisma/query-engine-darwin-arm64'}, 'introspectionEngine': {}, 'migrationEngine': {}, 'libqueryEngine': {}, 'prismaFmt': {}})


class Prisma(AsyncBasePrisma):
    # Note: these property names can be customised using `/// @Python(instance_name: '...')`
    # https://prisma-client-py.readthedocs.io/en/stable/reference/schema-extensions/#instance_name
    filing: 'actions.FilingActions[models.Filing]'
    filingcompany: 'actions.FilingCompanyActions[models.FilingCompany]'
    filingtocompany: 'actions.FilingToCompanyActions[models.FilingToCompany]'
    document: 'actions.DocumentActions[models.Document]'
    page: 'actions.PageActions[models.Page]'
    chunk: 'actions.ChunkActions[models.Chunk]'
    block: 'actions.BlockActions[models.Block]'
    tenant: 'actions.TenantActions[models.Tenant]'
    plan: 'actions.PlanActions[models.Plan]'
    user: 'actions.UserActions[models.User]'
    message: 'actions.MessageActions[models.Message]'
    chat: 'actions.ChatActions[models.Chat]'

    __slots__ = (
        'filing',
        'filingcompany',
        'filingtocompany',
        'document',
        'page',
        'chunk',
        'block',
        'tenant',
        'plan',
        'user',
        'message',
        'chat',
    )

    def __init__(
        self,
        *,
        use_dotenv: bool = True,
        log_queries: bool = False,
        auto_register: bool = False,
        datasource: DatasourceOverride | None = None,
        connect_timeout: int | timedelta = DEFAULT_CONNECT_TIMEOUT,
        http: HttpConfig | None = None,
    ) -> None:
        super().__init__(
            http=http,
            use_dotenv=use_dotenv,
            log_queries=log_queries,
            datasource=datasource,
            connect_timeout=connect_timeout,
        )
        self._set_generated_properties(
            schema_path=SCHEMA_PATH,
            engine_type=ENGINE_TYPE,
            prisma_models=PRISMA_MODELS,
            packaged_schema_path=PACKAGED_SCHEMA_PATH,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
            preview_features=set(['multiSchema', 'postgresqlExtensions']),
            active_provider='postgresql',
            default_datasource_name='db',
        )

        self.filing = actions.FilingActions[models.Filing](self, models.Filing)
        self.filingcompany = actions.FilingCompanyActions[models.FilingCompany](self, models.FilingCompany)
        self.filingtocompany = actions.FilingToCompanyActions[models.FilingToCompany](self, models.FilingToCompany)
        self.document = actions.DocumentActions[models.Document](self, models.Document)
        self.page = actions.PageActions[models.Page](self, models.Page)
        self.chunk = actions.ChunkActions[models.Chunk](self, models.Chunk)
        self.block = actions.BlockActions[models.Block](self, models.Block)
        self.tenant = actions.TenantActions[models.Tenant](self, models.Tenant)
        self.plan = actions.PlanActions[models.Plan](self, models.Plan)
        self.user = actions.UserActions[models.User](self, models.User)
        self.message = actions.MessageActions[models.Message](self, models.Message)
        self.chat = actions.ChatActions[models.Chat](self, models.Chat)

        if auto_register:
            register(self)

    @property
    @override
    def _default_datasource(self) -> Datasource:
        return {
            'name': 'db',
            'url': OptionalValueFromEnvVar(**{'value': None, 'fromEnvVar': 'DATABASE_URL'}).resolve(),
            'source_file_path': '/Users/jwalinthaker/Data/Projects/Velocifile/vf-infra/databases/schema_jt.prisma',
        }

    async def execute_raw(self, query: LiteralString, *args: Any) -> int:
        resp = await self._execute(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=None,
        )
        return int(resp['data']['result'])

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> dict[str, Any]:
        ...

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> Optional[BaseModelT]:
        ...

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[Optional[BaseModelT], dict[str, Any]]:
        """This function is the exact same as `query_raw()` but returns the first result.

        If model is given, the returned record is converted to the pydantic model first,
        otherwise a raw dictionary will be returned.
        """
        results: Sequence[Union[BaseModelT, dict[str, Any]]]
        if model is not None:
            results = await self.query_raw(query, *args, model=model)
        else:
            results = await self.query_raw(query, *args)

        if not results:
            return None

        return results[0]

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[dict[str, Any]]:
        ...

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> List[BaseModelT]:
        ...

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[List[BaseModelT], List[dict[str, Any]]]:
        """Execute a raw SQL query against the database.

        If model is given, each returned record is converted to the pydantic model first,
        otherwise results will be raw dictionaries.
        """
        resp = await self._execute(
            method='query_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=model,
        )
        result = resp['data']['result']
        if model is not None:
            return deserialize_raw_results(result, model=model)

        return deserialize_raw_results(result)

    def batch_(self) -> Batch:
        """Returns a context manager for grouping write queries into a single transaction."""
        return Batch(client=self)

    def tx(
        self,
        *,
        max_wait: Union[int, timedelta] = DEFAULT_TX_MAX_WAIT,
        timeout: Union[int, timedelta] = DEFAULT_TX_TIMEOUT,
    ) -> TransactionManager:
        """Returns a context manager for executing queries within a database transaction.

        Entering the context manager returns a new Prisma instance wrapping all
        actions within a transaction, queries will be isolated to the Prisma instance and
        will not be commited to the database until the context manager exits.

        By default, Prisma will wait a maximum of 2 seconds to acquire a transaction from the database. You can modify this
        default with the `max_wait` argument which accepts a value in milliseconds or `datetime.timedelta`.

        By default, Prisma will cancel and rollback ay transactions that last longer than 5 seconds. You can modify this timeout
        with the `timeout` argument which accepts a value in milliseconds or `datetime.timedelta`.

        Example usage:

        ```py
        async with client.tx() as transaction:
            user1 = await client.user.create({'name': 'Robert'})
            user2 = await client.user.create({'name': 'Tegan'})
        ```

        In the above example, if the first database call succeeds but the second does not then neither of the records will be created.
        """
        return TransactionManager(
            client=self,
            max_wait=max_wait,
            timeout=timeout,
        )


TransactionManager = AsyncTransactionManager[Prisma]


# TODO: this should return the results as well
# TODO: don't require copy-pasting arguments between actions and batch actions
class Batch:
    filing: 'FilingBatchActions'
    filingcompany: 'FilingCompanyBatchActions'
    filingtocompany: 'FilingToCompanyBatchActions'
    document: 'DocumentBatchActions'
    page: 'PageBatchActions'
    chunk: 'ChunkBatchActions'
    block: 'BlockBatchActions'
    tenant: 'TenantBatchActions'
    plan: 'PlanBatchActions'
    user: 'UserBatchActions'
    message: 'MessageBatchActions'
    chat: 'ChatBatchActions'

    def __init__(self, client: Prisma) -> None:
        self.__client = client
        self.__queries: List[str] = []
        self._active_provider = client._active_provider
        self.filing = FilingBatchActions(self)
        self.filingcompany = FilingCompanyBatchActions(self)
        self.filingtocompany = FilingToCompanyBatchActions(self)
        self.document = DocumentBatchActions(self)
        self.page = PageBatchActions(self)
        self.chunk = ChunkBatchActions(self)
        self.block = BlockBatchActions(self)
        self.tenant = TenantBatchActions(self)
        self.plan = PlanBatchActions(self)
        self.user = UserBatchActions(self)
        self.message = MessageBatchActions(self)
        self.chat = ChatBatchActions(self)

    def _add(self, **kwargs: Any) -> None:
        builder = QueryBuilder(
            **kwargs,
            prisma_models=PRISMA_MODELS,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
        )
        self.__queries.append(builder.build_query())

    async def commit(self) -> None:
        """Execute the queries"""
        # TODO: normalise this, we should still call client._execute
        queries = self.__queries
        self.__queries = []

        payload = {
            'batch': [
                {
                    'query': query,
                    'variables': {},
                }
                for query in queries
            ],
            'transaction': True,
        }
        await self.__client._engine.query(
            dumps(payload),
            tx_id=self.__client._tx_id,
        )

    def execute_raw(self, query: LiteralString, *args: Any) -> None:
        self._add(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )

    async def __aenter__(self) -> 'Batch':
        return self

    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if exc is None:
            await self.commit()


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class FilingBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.FilingCreateInput,
        include: Optional[types.FilingInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Filing,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.FilingCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Filing,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.FilingWhereUniqueInput,
        include: Optional[types.FilingInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Filing,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.FilingUpdateInput,
        where: types.FilingWhereUniqueInput,
        include: Optional[types.FilingInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Filing,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.FilingWhereUniqueInput,
        data: types.FilingUpsertInput,
        include: Optional[types.FilingInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Filing,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.FilingUpdateManyMutationInput,
        where: types.FilingWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Filing,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.FilingWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Filing,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class FilingCompanyBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.FilingCompanyCreateInput,
        include: Optional[types.FilingCompanyInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.FilingCompany,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.FilingCompanyCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.FilingCompany,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.FilingCompanyWhereUniqueInput,
        include: Optional[types.FilingCompanyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.FilingCompany,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.FilingCompanyUpdateInput,
        where: types.FilingCompanyWhereUniqueInput,
        include: Optional[types.FilingCompanyInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.FilingCompany,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.FilingCompanyWhereUniqueInput,
        data: types.FilingCompanyUpsertInput,
        include: Optional[types.FilingCompanyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.FilingCompany,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.FilingCompanyUpdateManyMutationInput,
        where: types.FilingCompanyWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.FilingCompany,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.FilingCompanyWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.FilingCompany,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class FilingToCompanyBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.FilingToCompanyCreateInput,
        include: Optional[types.FilingToCompanyInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.FilingToCompany,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.FilingToCompanyCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.FilingToCompany,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.FilingToCompanyWhereUniqueInput,
        include: Optional[types.FilingToCompanyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.FilingToCompany,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.FilingToCompanyUpdateInput,
        where: types.FilingToCompanyWhereUniqueInput,
        include: Optional[types.FilingToCompanyInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.FilingToCompany,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.FilingToCompanyWhereUniqueInput,
        data: types.FilingToCompanyUpsertInput,
        include: Optional[types.FilingToCompanyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.FilingToCompany,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.FilingToCompanyUpdateManyMutationInput,
        where: types.FilingToCompanyWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.FilingToCompany,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.FilingToCompanyWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.FilingToCompany,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class DocumentBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.DocumentCreateInput,
        include: Optional[types.DocumentInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Document,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.DocumentCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Document,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.DocumentWhereUniqueInput,
        include: Optional[types.DocumentInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Document,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.DocumentUpdateInput,
        where: types.DocumentWhereUniqueInput,
        include: Optional[types.DocumentInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Document,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.DocumentWhereUniqueInput,
        data: types.DocumentUpsertInput,
        include: Optional[types.DocumentInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Document,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.DocumentUpdateManyMutationInput,
        where: types.DocumentWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Document,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.DocumentWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Document,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class PageBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.PageCreateInput,
        include: Optional[types.PageInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Page,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.PageCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Page,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.PageWhereUniqueInput,
        include: Optional[types.PageInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Page,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.PageUpdateInput,
        where: types.PageWhereUniqueInput,
        include: Optional[types.PageInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Page,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.PageWhereUniqueInput,
        data: types.PageUpsertInput,
        include: Optional[types.PageInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Page,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.PageUpdateManyMutationInput,
        where: types.PageWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Page,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.PageWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Page,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ChunkBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ChunkCreateInput,
        include: Optional[types.ChunkInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Chunk,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ChunkCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Chunk,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ChunkWhereUniqueInput,
        include: Optional[types.ChunkInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Chunk,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ChunkUpdateInput,
        where: types.ChunkWhereUniqueInput,
        include: Optional[types.ChunkInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Chunk,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ChunkWhereUniqueInput,
        data: types.ChunkUpsertInput,
        include: Optional[types.ChunkInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Chunk,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ChunkUpdateManyMutationInput,
        where: types.ChunkWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Chunk,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ChunkWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Chunk,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class BlockBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.BlockCreateInput,
        include: Optional[types.BlockInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Block,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.BlockCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Block,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.BlockWhereUniqueInput,
        include: Optional[types.BlockInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Block,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.BlockUpdateInput,
        where: types.BlockWhereUniqueInput,
        include: Optional[types.BlockInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Block,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.BlockWhereUniqueInput,
        data: types.BlockUpsertInput,
        include: Optional[types.BlockInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Block,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.BlockUpdateManyMutationInput,
        where: types.BlockWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Block,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.BlockWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Block,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class TenantBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.TenantCreateInput,
        include: Optional[types.TenantInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Tenant,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.TenantCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Tenant,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.TenantWhereUniqueInput,
        include: Optional[types.TenantInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Tenant,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.TenantUpdateInput,
        where: types.TenantWhereUniqueInput,
        include: Optional[types.TenantInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Tenant,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.TenantWhereUniqueInput,
        data: types.TenantUpsertInput,
        include: Optional[types.TenantInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Tenant,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.TenantUpdateManyMutationInput,
        where: types.TenantWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Tenant,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.TenantWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Tenant,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class PlanBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.PlanCreateInput,
        include: Optional[types.PlanInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Plan,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.PlanCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Plan,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.PlanWhereUniqueInput,
        include: Optional[types.PlanInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Plan,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.PlanUpdateInput,
        where: types.PlanWhereUniqueInput,
        include: Optional[types.PlanInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Plan,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.PlanWhereUniqueInput,
        data: types.PlanUpsertInput,
        include: Optional[types.PlanInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Plan,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.PlanUpdateManyMutationInput,
        where: types.PlanWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Plan,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.PlanWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Plan,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class UserBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.User,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.User,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.User,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.User,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.User,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.User,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.User,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class MessageBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.MessageCreateInput,
        include: Optional[types.MessageInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Message,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.MessageCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Message,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.MessageWhereUniqueInput,
        include: Optional[types.MessageInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Message,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.MessageUpdateInput,
        where: types.MessageWhereUniqueInput,
        include: Optional[types.MessageInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Message,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.MessageWhereUniqueInput,
        data: types.MessageUpsertInput,
        include: Optional[types.MessageInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Message,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.MessageUpdateManyMutationInput,
        where: types.MessageWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Message,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.MessageWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Message,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ChatBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ChatCreateInput,
        include: Optional[types.ChatInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Chat,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ChatCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Chat,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ChatWhereUniqueInput,
        include: Optional[types.ChatInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Chat,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ChatUpdateInput,
        where: types.ChatWhereUniqueInput,
        include: Optional[types.ChatInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Chat,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ChatWhereUniqueInput,
        data: types.ChatUpsertInput,
        include: Optional[types.ChatInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Chat,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ChatUpdateManyMutationInput,
        where: types.ChatWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Chat,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ChatWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Chat,
            arguments={'where': where},
            root_selection=['count'],
        )



Client = Prisma