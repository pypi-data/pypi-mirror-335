# coding: utf-8

"""
    Barion API

    Integrate with ease and get unbeatable fees and data that helps you grow your business.

    The version of the OpenAPI document: 0.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PaymentCompleteResponse(BaseModel):
    """
    PaymentCompleteResponse
    """ # noqa: E501
    payment_id: Optional[StrictStr] = Field(default=None, description="The identifier of the payment, generated by the Barion system.", alias="PaymentId")
    payment_request_id: Optional[StrictStr] = Field(default=None, description="The payment identifier supplied by the API caller in the request.", alias="PaymentRequestId")
    payment_status: Optional[StrictStr] = Field(default=None, description="The status of the payment in the Barion system.", alias="PaymentStatus")
    is_successful: Optional[StrictBool] = Field(default=None, description="Indicates whether the charge was successful.", alias="IsSuccessful")
    trace_id: Optional[StrictStr] = Field(default=None, description="Identifies the nature of the token payment.", alias="TraceId")
    __properties: ClassVar[List[str]] = ["PaymentId", "PaymentRequestId", "PaymentStatus", "IsSuccessful", "TraceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentCompleteResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentCompleteResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "PaymentId": obj.get("PaymentId"),
            "PaymentRequestId": obj.get("PaymentRequestId"),
            "PaymentStatus": obj.get("PaymentStatus"),
            "IsSuccessful": obj.get("IsSuccessful"),
            "TraceId": obj.get("TraceId")
        })
        return _obj


