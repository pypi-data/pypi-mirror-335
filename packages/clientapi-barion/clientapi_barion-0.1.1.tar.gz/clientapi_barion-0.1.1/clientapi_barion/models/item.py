# coding: utf-8

"""
    Barion API

    Integrate with ease and get unbeatable fees and data that helps you grow your business.

    The version of the OpenAPI document: 0.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Item(BaseModel):
    """
    Item
    """ # noqa: E501
    name: Annotated[str, Field(strict=True, max_length=250)] = Field(description="The short name of the item. Shown to the payer on the Barion Smart Gateway.", alias="Name")
    description: Annotated[str, Field(strict=True, max_length=500)] = Field(description="The detailed description of the item. Not shown to the payer on the Barion Smart Gateway.", alias="Description")
    image_url: Optional[StrictStr] = Field(default=None, description="A URL pointing to an image that shows the item. Optional and for UX purposes only.", alias="ImageUrl")
    quantity: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]] = Field(description="The total quantity of the item.", alias="Quantity")
    unit: Annotated[str, Field(strict=True, max_length=50)] = Field(description="The measurement unit of the item.", alias="Unit")
    unit_price: Union[StrictFloat, StrictInt] = Field(description="The price of one measurement unit of the item. It can be any value, even negative if it indicates e.g. discount.", alias="UnitPrice")
    item_total: Union[StrictFloat, StrictInt] = Field(description="The total price of the item. Doesn't necessarily equal `Quantity Ã— UnitPrice`.", alias="ItemTotal")
    sku: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="The SKU value of the item in the shop's inventory system. Optional.", alias="SKU")
    __properties: ClassVar[List[str]] = ["Name", "Description", "ImageUrl", "Quantity", "Unit", "UnitPrice", "ItemTotal", "SKU"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Item from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Item from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "Description": obj.get("Description"),
            "ImageUrl": obj.get("ImageUrl"),
            "Quantity": obj.get("Quantity"),
            "Unit": obj.get("Unit"),
            "UnitPrice": obj.get("UnitPrice"),
            "ItemTotal": obj.get("ItemTotal"),
            "SKU": obj.get("SKU")
        })
        return _obj


