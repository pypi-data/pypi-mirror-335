# coding: utf-8

"""
    Barion API

    Integrate with ease and get unbeatable fees and data that helps you grow your business.

    The version of the OpenAPI document: 0.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Error(BaseModel):
    """
    Error
    """ # noqa: E501
    error_code: Optional[StrictStr] = Field(default=None, description="The error code of the payment, can be interpreted as an error Id.", alias="ErrorCode")
    title: Optional[StrictStr] = Field(default=None, description="The title of the error, is a more readable form of the error.", alias="Title")
    description: Optional[StrictStr] = Field(default=None, description="The description of the error, more information about the error.", alias="Description")
    end_point: Optional[StrictStr] = Field(default=None, description="The URL of the API endpoint to help the reproduction of the error scenario.", alias="EndPoint")
    auth_data: Optional[StrictStr] = Field(default=None, description="The e-mail address of the caller to help the reproduction of the error scenario.", alias="AuthData")
    happened_at: Optional[datetime] = Field(default=None, description="The timestamp of the response.", alias="HappenedAt")
    payment_id: Optional[StrictStr] = Field(default=None, description="If the error is related to a business process that involves a given payment, the public identifier of the payment is supplied here. This property is not present for all errors.", alias="PaymentId")
    __properties: ClassVar[List[str]] = ["ErrorCode", "Title", "Description", "EndPoint", "AuthData", "HappenedAt", "PaymentId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Error from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Error from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ErrorCode": obj.get("ErrorCode"),
            "Title": obj.get("Title"),
            "Description": obj.get("Description"),
            "EndPoint": obj.get("EndPoint"),
            "AuthData": obj.get("AuthData"),
            "HappenedAt": obj.get("HappenedAt"),
            "PaymentId": obj.get("PaymentId")
        })
        return _obj


