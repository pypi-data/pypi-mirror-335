# coding: utf-8

"""
    Barion API

    Integrate with ease and get unbeatable fees and data that helps you grow your business.

    The version of the OpenAPI document: 0.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PayeeTransaction(BaseModel):
    """
    PayeeTransaction
    """ # noqa: E501
    pos_transaction_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="The unique identifier of the transaction at the shop that started the payment.", alias="POSTransactionId")
    payee: Annotated[str, Field(strict=True, max_length=256)] = Field(description="The recipient's e-mail address. Payees other than the shop owner's Barion Wallet can only be listed if the shop has Barion Bridge enabled.", alias="Payee")
    total: Union[Annotated[float, Field(strict=True, ge=0.01)], Annotated[int, Field(strict=True, ge=1)]] = Field(description="The total amount of the transaction.", alias="Total")
    comment: Optional[Annotated[str, Field(strict=True, max_length=640)]] = Field(default=None, description="Comment of the transaction. This is shown to the recipient.", alias="Comment")
    __properties: ClassVar[List[str]] = ["POSTransactionId", "Payee", "Total", "Comment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayeeTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayeeTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "POSTransactionId": obj.get("POSTransactionId"),
            "Payee": obj.get("Payee"),
            "Total": obj.get("Total"),
            "Comment": obj.get("Comment")
        })
        return _obj


