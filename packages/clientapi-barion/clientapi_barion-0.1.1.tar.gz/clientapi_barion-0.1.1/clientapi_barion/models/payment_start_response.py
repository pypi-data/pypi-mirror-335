# coding: utf-8

"""
    Barion API

    Integrate with ease and get unbeatable fees and data that helps you grow your business.

    The version of the OpenAPI document: 0.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from clientapi_barion.models.processed_transaction import ProcessedTransaction
from typing import Optional, Set
from typing_extensions import Self

class PaymentStartResponse(BaseModel):
    """
    PaymentStartResponse
    """ # noqa: E501
    payment_id: Optional[StrictStr] = Field(default=None, description="The identifier of the newly initialized payment, generated by the Barion system.", alias="PaymentId")
    payment_request_id: Optional[StrictStr] = Field(default=None, description="The payment identifier supplied by the API caller in the request.", alias="PaymentRequestId")
    status: Optional[StrictStr] = Field(default=None, description="The status of the payment in the Barion system.", alias="Status")
    qr_url: Optional[StrictStr] = Field(default=None, description="URL for a QR code representing the payment.", alias="QRUrl")
    recurrence_result: Optional[StrictStr] = Field(default=None, alias="RecurrenceResult")
    transactions: Optional[List[ProcessedTransaction]] = Field(default=None, description="An array containing all transactions associated with the payment. If the Barion system deducts fees from the shop after payments, this also contains these additional fee transactions beside the payment transactions that were sent in the request.", alias="Transactions")
    gateway_url: Optional[StrictStr] = Field(default=None, description="The URL of the Barion Smart Gateway (including the payment identifier), where the API caller should redirect the payer.", alias="GatewayUrl")
    callback_url: Optional[StrictStr] = Field(default=None, description="The URL (including the payment identifier) where the Barion system will send a request to whenever there is a change in the state of the payment. If an explicit URL was not supplied, this will be the callback URL associated with the shop that started the payment.", alias="CallbackUrl")
    redirect_url: Optional[StrictStr] = Field(default=None, description="The URL (including the payment identifier) where the payer gets redirected to after the payment is completed or cancelled. If an explicit URL was not supplied, this will be the redirect URL associated with the shop that started the payment.", alias="RedirectUrl")
    three_ds_auth_client_data: Optional[StrictStr] = Field(default=None, description="Encrypted client authentication data required for 3D Secure processing. This value can be used when the webshop first tried to complete the payment without user interaction, but the charge failed due to a 3D Secure challenge being mandatory.", alias="ThreeDSAuthClientData")
    trace_id: Optional[StrictStr] = Field(default=None, description="A unique value generated by the card issuer to track a chain of [recurring or token payments that require 3D Secure authentication](https://docs.barion.com/Token_payment_3D_Secure). This shall be used in such scenarios, otherwise it can be ignored.", alias="TraceId")
    is_successful: Optional[StrictBool] = Field(default=None, description="Indicates whether the payment was successful", alias="IsSuccessful")
    __properties: ClassVar[List[str]] = ["PaymentId", "PaymentRequestId", "Status", "QRUrl", "RecurrenceResult", "Transactions", "GatewayUrl", "CallbackUrl", "RedirectUrl", "ThreeDSAuthClientData", "TraceId", "IsSuccessful"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentStartResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item_transactions in self.transactions:
                if _item_transactions:
                    _items.append(_item_transactions.to_dict())
            _dict['Transactions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentStartResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "PaymentId": obj.get("PaymentId"),
            "PaymentRequestId": obj.get("PaymentRequestId"),
            "Status": obj.get("Status"),
            "QRUrl": obj.get("QRUrl"),
            "RecurrenceResult": obj.get("RecurrenceResult"),
            "Transactions": [ProcessedTransaction.from_dict(_item) for _item in obj["Transactions"]] if obj.get("Transactions") is not None else None,
            "GatewayUrl": obj.get("GatewayUrl"),
            "CallbackUrl": obj.get("CallbackUrl"),
            "RedirectUrl": obj.get("RedirectUrl"),
            "ThreeDSAuthClientData": obj.get("ThreeDSAuthClientData"),
            "TraceId": obj.get("TraceId"),
            "IsSuccessful": obj.get("IsSuccessful")
        })
        return _obj


