# coding: utf-8

"""
    Barion API

    Integrate with ease and get unbeatable fees and data that helps you grow your business.

    The version of the OpenAPI document: 0.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from clientapi_barion.models.detailed_payment_transaction_transaction_type import DetailedPaymentTransactionTransactionType
from clientapi_barion.models.item import Item
from clientapi_barion.models.user_information import UserInformation
from typing import Optional, Set
from typing_extensions import Self

class DetailedPaymentTransaction(BaseModel):
    """
    DetailedPaymentTransaction
    """ # noqa: E501
    transaction_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the transaction generated by the Barion system.", alias="TransactionId")
    pos_transaction_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the transaction at the shop that started the payment.", alias="POSTransactionId")
    transaction_time: Optional[datetime] = Field(default=None, description="The timestamp of the transaction.", alias="TransactionTime")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The original amount of the transaction. This is determined upon payment creation and is not affected by any later events. ", alias="Total")
    currency: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="The currency of the payment. Must be supplied in ISO 4217 format. This affects all transactions included in the payment; it is not possible to define multiple transactions in different currencies.", alias="Currency")
    payer: Optional[UserInformation] = Field(default=None, description="The user that paid the transaction.", alias="Payer")
    payee: Optional[UserInformation] = Field(default=None, description="The user that received the money from the transaction.", alias="Payee")
    comment: Optional[StrictStr] = Field(default=None, description="The comment of the transaction set by the shop when the payment was created.", alias="Comment")
    status: Optional[StrictStr] = Field(default=None, alias="Status")
    transaction_type: Optional[DetailedPaymentTransactionTransactionType] = Field(default=None, alias="TransactionType")
    items: Optional[List[Item]] = Field(default=None, description="The items included in the transaction.", alias="Items")
    related_id: Optional[StrictStr] = Field(default=None, description="The identifier of the related transaction, if it exists. For example, additional fee transactions have the identifier of the original payment transaction in this field. ", alias="RelatedId")
    __properties: ClassVar[List[str]] = ["TransactionId", "POSTransactionId", "TransactionTime", "Total", "Currency", "Payer", "Payee", "Comment", "Status", "TransactionType", "Items", "RelatedId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DetailedPaymentTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payer
        if self.payer:
            _dict['Payer'] = self.payer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payee
        if self.payee:
            _dict['Payee'] = self.payee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction_type
        if self.transaction_type:
            _dict['TransactionType'] = self.transaction_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['Items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DetailedPaymentTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "TransactionId": obj.get("TransactionId"),
            "POSTransactionId": obj.get("POSTransactionId"),
            "TransactionTime": obj.get("TransactionTime"),
            "Total": obj.get("Total"),
            "Currency": obj.get("Currency"),
            "Payer": UserInformation.from_dict(obj["Payer"]) if obj.get("Payer") is not None else None,
            "Payee": UserInformation.from_dict(obj["Payee"]) if obj.get("Payee") is not None else None,
            "Comment": obj.get("Comment"),
            "Status": obj.get("Status"),
            "TransactionType": DetailedPaymentTransactionTransactionType.from_dict(obj["TransactionType"]) if obj.get("TransactionType") is not None else None,
            "Items": [Item.from_dict(_item) for _item in obj["Items"]] if obj.get("Items") is not None else None,
            "RelatedId": obj.get("RelatedId")
        })
        return _obj


