# coding: utf-8

"""
    Barion API

    Integrate with ease and get unbeatable fees and data that helps you grow your business.

    The version of the OpenAPI document: 0.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from clientapi_barion.models.item import Item
from clientapi_barion.models.payee_transaction import PayeeTransaction
from typing import Optional, Set
from typing_extensions import Self

class PaymentTransaction(BaseModel):
    """
    PaymentTransaction
    """ # noqa: E501
    pos_transaction_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the transaction at the shop that started the payment.", alias="POSTransactionId")
    payee: Optional[StrictStr] = Field(default=None, description="The recipient user of the transaction. This Barion Wallet receives the money when the payment is completed by the payer.", alias="Payee")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of the transaction. This is the amount that is charged towards the payer when completing the payment. The final amount of the transactiom. This will overwrite the original amount. The allowed number of decimal digits depends on the currency of the payment containing this transaction:   - `CZK`: two digits  - `EUR`: two digits  - `HUF`: zero digits  - `USD`: two digits", alias="Total")
    comment: Optional[StrictStr] = Field(default=None, description="A comment associated with the transaction. This is NOT shown to the payer. Description of the transaction, this will overwrite the original description", alias="Comment")
    payee_transactions: Optional[List[PayeeTransaction]] = Field(default=None, description="An array containing possible sub-transactions, which are executed after the payment was completed.", alias="PayeeTransactions")
    items: Optional[List[Item]] = Field(default=None, description="An array containing the items (products or services) included in the transaction.", alias="Items")
    __properties: ClassVar[List[str]] = ["POSTransactionId", "Payee", "Total", "Comment", "PayeeTransactions", "Items"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payee_transactions (list)
        _items = []
        if self.payee_transactions:
            for _item_payee_transactions in self.payee_transactions:
                if _item_payee_transactions:
                    _items.append(_item_payee_transactions.to_dict())
            _dict['PayeeTransactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['Items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "POSTransactionId": obj.get("POSTransactionId"),
            "Payee": obj.get("Payee"),
            "Total": obj.get("Total"),
            "Comment": obj.get("Comment"),
            "PayeeTransactions": [PayeeTransaction.from_dict(_item) for _item in obj["PayeeTransactions"]] if obj.get("PayeeTransactions") is not None else None,
            "Items": [Item.from_dict(_item) for _item in obj["Items"]] if obj.get("Items") is not None else None
        })
        return _obj


