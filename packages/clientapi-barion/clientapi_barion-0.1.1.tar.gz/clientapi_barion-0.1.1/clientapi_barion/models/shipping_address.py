# coding: utf-8

"""
    Barion API

    Integrate with ease and get unbeatable fees and data that helps you grow your business.

    The version of the OpenAPI document: 0.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ShippingAddress(BaseModel):
    """
    ShippingAddress
    """ # noqa: E501
    country: StrictStr = Field(description="The payer's country code in ISO-3166-1 format (e.g., HU or DE). Use `ZZ` if shipping address is not available.", alias="Country")
    city: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Required if Region is specified. The complete name of the city of the recipient address.", alias="City")
    region: Optional[StrictStr] = Field(default=None, description="Send `null` if not applicable. The country subdivision code (state or county) in [ISO-3166-2](https://en.wikipedia.org/wiki/ISO_3166-2:HU) format.", alias="Region")
    zip: Optional[Annotated[str, Field(strict=True, max_length=16)]] = Field(default=None, description="The zip code of the recipient address.", alias="Zip")
    street: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The shipping street address with house number and other details.", alias="Street")
    street2: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The address, continued.", alias="Street2")
    street3: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The address, continued.", alias="Street3")
    full_name: Optional[Annotated[str, Field(strict=True, max_length=45)]] = Field(default=None, description="The name of the customer on the shipping address.", alias="FullName")
    __properties: ClassVar[List[str]] = ["Country", "City", "Region", "Zip", "Street", "Street2", "Street3", "FullName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShippingAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if region (nullable) is None
        # and model_fields_set contains the field
        if self.region is None and "region" in self.model_fields_set:
            _dict['Region'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShippingAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Country": obj.get("Country"),
            "City": obj.get("City"),
            "Region": obj.get("Region"),
            "Zip": obj.get("Zip"),
            "Street": obj.get("Street"),
            "Street2": obj.get("Street2"),
            "Street3": obj.get("Street3"),
            "FullName": obj.get("FullName")
        })
        return _obj


