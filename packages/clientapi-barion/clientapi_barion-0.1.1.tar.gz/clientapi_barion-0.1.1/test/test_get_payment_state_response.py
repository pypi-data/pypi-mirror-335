# coding: utf-8

"""
    Barion API

    Integrate with ease and get unbeatable fees and data that helps you grow your business.

    The version of the OpenAPI document: 0.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from clientapi_barion.models.get_payment_state_response import GetPaymentStateResponse

class TestGetPaymentStateResponse(unittest.TestCase):
    """GetPaymentStateResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetPaymentStateResponse:
        """Test GetPaymentStateResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetPaymentStateResponse`
        """
        model = GetPaymentStateResponse()
        if include_optional:
            return GetPaymentStateResponse(
                payment_id = '123e4567-e89b-12d3-a456-426614174001',
                payment_request_id = 'PAYMENT123',
                posid = '123e4567-e89b-12d3-a456-426614174002',
                pos_name = 'Example Shop',
                pos_owner_email = 'owner@example.com',
                pos_owner_country = 'HU',
                status = '',
                payment_type = 'Immediate',
                allowed_funding_sources = [
                    ''
                    ],
                funding_source = '',
                funding_information = clientapi_barion.models.funding_information.FundingInformation(
                    bank_card = clientapi_barion.models.bank_card.BankCard(
                        masked_pan = '', 
                        bank_card_type = '', 
                        valid_thru_year = '', 
                        valid_thru_month = '', ), 
                    authorization_code = '', 
                    process_result = '', ),
                recurrence_type = '',
                trace_id = 'trace123',
                guest_checkout = True,
                created_at = '2024-06-15T12:00:00Z',
                completed_at = '2024-06-15T12:30:00Z',
                valid_until = '2024-06-15T23:59:59Z',
                reserved_until = '2024-06-15T15:00:00Z',
                delayed_capture_until = '2024-06-15T16:00:00Z',
                transactions = [
                    clientapi_barion.models.detailed_payment_transaction.DetailedPaymentTransaction(
                        transaction_id = '', 
                        pos_transaction_id = '', 
                        transaction_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        total = 1.337, 
                        currency = '012', 
                        payer = clientapi_barion.models.user_information.UserInformation(
                            name = clientapi_barion.models.name_information.NameInformation(
                                login_name = '', 
                                first_name = '', 
                                last_name = '', 
                                organization_name = '', ), 
                            email = '', ), 
                        payee = clientapi_barion.models.user_information.UserInformation(
                            email = '', ), 
                        comment = '', 
                        status = '', 
                        transaction_type = null, 
                        items = [
                            clientapi_barion.models.item.Item(
                                name = '', 
                                description = '', 
                                image_url = '', 
                                quantity = 0, 
                                unit = '', 
                                unit_price = 1.337, 
                                item_total = 1.337, 
                                sku = '', )
                            ], 
                        related_id = '', )
                    ],
                total = 100.0,
                currency = '012',
                suggested_locale = 'hu-HU',
                fraud_risk_score = 15,
                callback_url = 'https://example.com/callback/barion',
                redirect_url = 'https://example.com/redirect/barion'
            )
        else:
            return GetPaymentStateResponse(
        )
        """

    def testGetPaymentStateResponse(self):
        """Test GetPaymentStateResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
