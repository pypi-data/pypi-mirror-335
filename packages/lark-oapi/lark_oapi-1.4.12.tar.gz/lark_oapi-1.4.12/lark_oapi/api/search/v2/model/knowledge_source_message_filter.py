# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .time_range import TimeRange


class KnowledgeSourceMessageFilter(object):
    _types = {
        "message_ids": List[str],
        "chat_ids": List[str],
        "time_range": TimeRange,
    }

    def __init__(self, d=None):
        self.message_ids: Optional[List[str]] = None
        self.chat_ids: Optional[List[str]] = None
        self.time_range: Optional[TimeRange] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "KnowledgeSourceMessageFilterBuilder":
        return KnowledgeSourceMessageFilterBuilder()


class KnowledgeSourceMessageFilterBuilder(object):
    def __init__(self) -> None:
        self._knowledge_source_message_filter = KnowledgeSourceMessageFilter()

    def message_ids(self, message_ids: List[str]) -> "KnowledgeSourceMessageFilterBuilder":
        self._knowledge_source_message_filter.message_ids = message_ids
        return self

    def chat_ids(self, chat_ids: List[str]) -> "KnowledgeSourceMessageFilterBuilder":
        self._knowledge_source_message_filter.chat_ids = chat_ids
        return self

    def time_range(self, time_range: TimeRange) -> "KnowledgeSourceMessageFilterBuilder":
        self._knowledge_source_message_filter.time_range = time_range
        return self

    def build(self) -> "KnowledgeSourceMessageFilter":
        return self._knowledge_source_message_filter
