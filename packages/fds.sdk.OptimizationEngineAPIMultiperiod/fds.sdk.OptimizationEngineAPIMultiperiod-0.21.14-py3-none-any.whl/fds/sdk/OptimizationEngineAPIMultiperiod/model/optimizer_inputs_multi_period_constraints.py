"""
    fpo_mp_input

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.OptimizationEngineAPIMultiperiod.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.OptimizationEngineAPIMultiperiod.exceptions import ApiAttributeError


def lazy_import():
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_diversification_constraint import OptimizerInputsMPDiversificationConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_expected_return_constraint import OptimizerInputsMPExpectedReturnConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_factor_exposure_constraint import OptimizerInputsMPFactorExposureConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_general_linear_constraint import OptimizerInputsMPGeneralLinearConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_holdings_threshold_constraint import OptimizerInputsMPHoldingsThresholdConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_holdings_weight_constraint import OptimizerInputsMPHoldingsWeightConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_leverage_constraint import OptimizerInputsMPLeverageConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_limit_tail_risk_constraint import OptimizerInputsMPLimitTailRiskConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_number_of_buys_constraint import OptimizerInputsMPNumberOfBuysConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_number_of_sells_constraint import OptimizerInputsMPNumberOfSellsConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_numberof_assets_constraint import OptimizerInputsMPNumberofAssetsConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_risk_contribution_constraint import OptimizerInputsMPRiskContributionConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_risk_volatility_constraint import OptimizerInputsMPRiskVolatilityConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_roundlots_constraint import OptimizerInputsMPRoundlotsConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_sensitivity_constraint import OptimizerInputsMPSensitivityConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_target_probability_constraint import OptimizerInputsMPTargetProbabilityConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_trade_threshold_constraint import OptimizerInputsMPTradeThresholdConstraint
    from fds.sdk.OptimizationEngineAPIMultiperiod.model.optimizer_inputs_mp_turnover_constraint import OptimizerInputsMPTurnoverConstraint
    globals()['OptimizerInputsMPDiversificationConstraint'] = OptimizerInputsMPDiversificationConstraint
    globals()['OptimizerInputsMPExpectedReturnConstraint'] = OptimizerInputsMPExpectedReturnConstraint
    globals()['OptimizerInputsMPFactorExposureConstraint'] = OptimizerInputsMPFactorExposureConstraint
    globals()['OptimizerInputsMPGeneralLinearConstraint'] = OptimizerInputsMPGeneralLinearConstraint
    globals()['OptimizerInputsMPHoldingsThresholdConstraint'] = OptimizerInputsMPHoldingsThresholdConstraint
    globals()['OptimizerInputsMPHoldingsWeightConstraint'] = OptimizerInputsMPHoldingsWeightConstraint
    globals()['OptimizerInputsMPLeverageConstraint'] = OptimizerInputsMPLeverageConstraint
    globals()['OptimizerInputsMPLimitTailRiskConstraint'] = OptimizerInputsMPLimitTailRiskConstraint
    globals()['OptimizerInputsMPNumberOfBuysConstraint'] = OptimizerInputsMPNumberOfBuysConstraint
    globals()['OptimizerInputsMPNumberOfSellsConstraint'] = OptimizerInputsMPNumberOfSellsConstraint
    globals()['OptimizerInputsMPNumberofAssetsConstraint'] = OptimizerInputsMPNumberofAssetsConstraint
    globals()['OptimizerInputsMPRiskContributionConstraint'] = OptimizerInputsMPRiskContributionConstraint
    globals()['OptimizerInputsMPRiskVolatilityConstraint'] = OptimizerInputsMPRiskVolatilityConstraint
    globals()['OptimizerInputsMPRoundlotsConstraint'] = OptimizerInputsMPRoundlotsConstraint
    globals()['OptimizerInputsMPSensitivityConstraint'] = OptimizerInputsMPSensitivityConstraint
    globals()['OptimizerInputsMPTargetProbabilityConstraint'] = OptimizerInputsMPTargetProbabilityConstraint
    globals()['OptimizerInputsMPTradeThresholdConstraint'] = OptimizerInputsMPTradeThresholdConstraint
    globals()['OptimizerInputsMPTurnoverConstraint'] = OptimizerInputsMPTurnoverConstraint


class OptimizerInputsMultiPeriodConstraints(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'expected_returns': ([OptimizerInputsMPExpectedReturnConstraint],),  # noqa: E501
            'diversification': ([OptimizerInputsMPDiversificationConstraint],),  # noqa: E501
            'factor_exposures': ([OptimizerInputsMPFactorExposureConstraint],),  # noqa: E501
            'general_linear': ([OptimizerInputsMPGeneralLinearConstraint],),  # noqa: E501
            'holding_threshold': ([OptimizerInputsMPHoldingsThresholdConstraint],),  # noqa: E501
            'leverage': ([OptimizerInputsMPLeverageConstraint],),  # noqa: E501
            'num_of_assets': ([OptimizerInputsMPNumberofAssetsConstraint],),  # noqa: E501
            'sensitivity': ([OptimizerInputsMPSensitivityConstraint],),  # noqa: E501
            'weight_constraint': ([OptimizerInputsMPHoldingsWeightConstraint],),  # noqa: E501
            'number_of_buys': ([OptimizerInputsMPNumberOfBuysConstraint],),  # noqa: E501
            'number_of_sells': ([OptimizerInputsMPNumberOfSellsConstraint],),  # noqa: E501
            'round_lots': ([OptimizerInputsMPRoundlotsConstraint],),  # noqa: E501
            'trade_threshold': ([OptimizerInputsMPTradeThresholdConstraint],),  # noqa: E501
            'trading_turnover': ([OptimizerInputsMPTurnoverConstraint],),  # noqa: E501
            'risk_contribution': ([OptimizerInputsMPRiskContributionConstraint],),  # noqa: E501
            'risk_volatility': ([OptimizerInputsMPRiskVolatilityConstraint],),  # noqa: E501
            'tail_risk': ([OptimizerInputsMPLimitTailRiskConstraint],),  # noqa: E501
            'target_probability': ([OptimizerInputsMPTargetProbabilityConstraint],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'expected_returns': 'expected_returns',  # noqa: E501
        'diversification': 'diversification',  # noqa: E501
        'factor_exposures': 'factor_exposures',  # noqa: E501
        'general_linear': 'general_linear',  # noqa: E501
        'holding_threshold': 'holding_threshold',  # noqa: E501
        'leverage': 'leverage',  # noqa: E501
        'num_of_assets': 'num_of_assets',  # noqa: E501
        'sensitivity': 'sensitivity',  # noqa: E501
        'weight_constraint': 'weight_constraint',  # noqa: E501
        'number_of_buys': 'number_of_buys',  # noqa: E501
        'number_of_sells': 'number_of_sells',  # noqa: E501
        'round_lots': 'round_lots',  # noqa: E501
        'trade_threshold': 'trade_threshold',  # noqa: E501
        'trading_turnover': 'trading_turnover',  # noqa: E501
        'risk_contribution': 'risk_contribution',  # noqa: E501
        'risk_volatility': 'risk_volatility',  # noqa: E501
        'tail_risk': 'tail_risk',  # noqa: E501
        'target_probability': 'target_probability',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """OptimizerInputsMultiPeriodConstraints - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            expected_returns ([OptimizerInputsMPExpectedReturnConstraint]): [optional]  # noqa: E501
            diversification ([OptimizerInputsMPDiversificationConstraint]): [optional]  # noqa: E501
            factor_exposures ([OptimizerInputsMPFactorExposureConstraint]): [optional]  # noqa: E501
            general_linear ([OptimizerInputsMPGeneralLinearConstraint]): [optional]  # noqa: E501
            holding_threshold ([OptimizerInputsMPHoldingsThresholdConstraint]): [optional]  # noqa: E501
            leverage ([OptimizerInputsMPLeverageConstraint]): [optional]  # noqa: E501
            num_of_assets ([OptimizerInputsMPNumberofAssetsConstraint]): [optional]  # noqa: E501
            sensitivity ([OptimizerInputsMPSensitivityConstraint]): [optional]  # noqa: E501
            weight_constraint ([OptimizerInputsMPHoldingsWeightConstraint]): [optional]  # noqa: E501
            number_of_buys ([OptimizerInputsMPNumberOfBuysConstraint]): [optional]  # noqa: E501
            number_of_sells ([OptimizerInputsMPNumberOfSellsConstraint]): [optional]  # noqa: E501
            round_lots ([OptimizerInputsMPRoundlotsConstraint]): [optional]  # noqa: E501
            trade_threshold ([OptimizerInputsMPTradeThresholdConstraint]): [optional]  # noqa: E501
            trading_turnover ([OptimizerInputsMPTurnoverConstraint]): [optional]  # noqa: E501
            risk_contribution ([OptimizerInputsMPRiskContributionConstraint]): [optional]  # noqa: E501
            risk_volatility ([OptimizerInputsMPRiskVolatilityConstraint]): [optional]  # noqa: E501
            tail_risk ([OptimizerInputsMPLimitTailRiskConstraint]): MultiPeriod-Specific. [optional]  # noqa: E501
            target_probability ([OptimizerInputsMPTargetProbabilityConstraint]): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """OptimizerInputsMultiPeriodConstraints - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            expected_returns ([OptimizerInputsMPExpectedReturnConstraint]): [optional]  # noqa: E501
            diversification ([OptimizerInputsMPDiversificationConstraint]): [optional]  # noqa: E501
            factor_exposures ([OptimizerInputsMPFactorExposureConstraint]): [optional]  # noqa: E501
            general_linear ([OptimizerInputsMPGeneralLinearConstraint]): [optional]  # noqa: E501
            holding_threshold ([OptimizerInputsMPHoldingsThresholdConstraint]): [optional]  # noqa: E501
            leverage ([OptimizerInputsMPLeverageConstraint]): [optional]  # noqa: E501
            num_of_assets ([OptimizerInputsMPNumberofAssetsConstraint]): [optional]  # noqa: E501
            sensitivity ([OptimizerInputsMPSensitivityConstraint]): [optional]  # noqa: E501
            weight_constraint ([OptimizerInputsMPHoldingsWeightConstraint]): [optional]  # noqa: E501
            number_of_buys ([OptimizerInputsMPNumberOfBuysConstraint]): [optional]  # noqa: E501
            number_of_sells ([OptimizerInputsMPNumberOfSellsConstraint]): [optional]  # noqa: E501
            round_lots ([OptimizerInputsMPRoundlotsConstraint]): [optional]  # noqa: E501
            trade_threshold ([OptimizerInputsMPTradeThresholdConstraint]): [optional]  # noqa: E501
            trading_turnover ([OptimizerInputsMPTurnoverConstraint]): [optional]  # noqa: E501
            risk_contribution ([OptimizerInputsMPRiskContributionConstraint]): [optional]  # noqa: E501
            risk_volatility ([OptimizerInputsMPRiskVolatilityConstraint]): [optional]  # noqa: E501
            tail_risk ([OptimizerInputsMPLimitTailRiskConstraint]): MultiPeriod-Specific. [optional]  # noqa: E501
            target_probability ([OptimizerInputsMPTargetProbabilityConstraint]): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
