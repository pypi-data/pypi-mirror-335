# coding: utf-8

"""
    Klines Service API

         API for retrieving OHLCV data, funding rates, and symbol information from Binance.          ## WebSocket Support     Connect to `/ws` to receive real-time OHLCV updates.          Example subscription message:     ```json     {         \"action\": \"subscribe\",         \"market\": \"spot\",         \"symbol\": \"BTCUSDT\",         \"timeframe\": \"15m\"     }     ```     

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from crypticorn.klines.client.models.udf_config_response import UDFConfigResponse

class TestUDFConfigResponse(unittest.TestCase):
    """UDFConfigResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UDFConfigResponse:
        """Test UDFConfigResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UDFConfigResponse`
        """
        model = UDFConfigResponse()
        if include_optional:
            return UDFConfigResponse(
                supported_resolutions = [
                    ''
                    ],
                supports_group_request = True,
                supports_marks = True,
                supports_search = True,
                supports_timescale_marks = True,
                supports_time = True,
                exchanges = [
                    client.models.exchange.Exchange(
                        value = '', 
                        name = '', 
                        desc = '', )
                    ],
                symbols_types = [
                    client.models.symbol_type.SymbolType(
                        name = '', 
                        value = '', )
                    ],
                currency_codes = [
                    ''
                    ],
                supported_markets = [
                    ''
                    ]
            )
        else:
            return UDFConfigResponse(
                supported_resolutions = [
                    ''
                    ],
                exchanges = [
                    client.models.exchange.Exchange(
                        value = '', 
                        name = '', 
                        desc = '', )
                    ],
                symbols_types = [
                    client.models.symbol_type.SymbolType(
                        name = '', 
                        value = '', )
                    ],
                currency_codes = [
                    ''
                    ],
                supported_markets = [
                    ''
                    ],
        )
        """

    def testUDFConfigResponse(self):
        """Test UDFConfigResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
