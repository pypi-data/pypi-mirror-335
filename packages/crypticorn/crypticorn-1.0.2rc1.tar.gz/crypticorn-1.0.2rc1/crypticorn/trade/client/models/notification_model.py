# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from crypticorn.trade.client.models.api_error_identifier import ApiErrorIdentifier
from crypticorn.trade.client.models.notification_type import NotificationType
from typing import Optional, Set
from typing_extensions import Self

class NotificationModel(BaseModel):
    """
    NotificationModel
    """ # noqa: E501
    created_at: Optional[StrictInt] = Field(default=1742340838, description="Timestamp of creation")
    updated_at: Optional[StrictInt] = Field(default=1742340838, description="Timestamp of last update")
    id: Optional[StrictStr] = None
    identifier: ApiErrorIdentifier = Field(description="Identifier string. Must match the mapping key in the frontend.")
    user_id: Optional[StrictStr] = None
    viewed: Optional[StrictBool] = Field(default=False, description="Whether the notification has been marked as seen")
    sent: Optional[StrictBool] = Field(default=False, description="Whether the notification has been sent as an email")
    type: NotificationType = Field(description="The type of the notification.")
    __properties: ClassVar[List[str]] = ["created_at", "updated_at", "id", "identifier", "user_id", "viewed", "sent", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NotificationModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NotificationModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at") if obj.get("created_at") is not None else 1742340838,
            "updated_at": obj.get("updated_at") if obj.get("updated_at") is not None else 1742340838,
            "id": obj.get("id"),
            "identifier": obj.get("identifier"),
            "user_id": obj.get("user_id"),
            "viewed": obj.get("viewed") if obj.get("viewed") is not None else False,
            "sent": obj.get("sent") if obj.get("sent") is not None else False,
            "type": obj.get("type")
        })
        return _obj


