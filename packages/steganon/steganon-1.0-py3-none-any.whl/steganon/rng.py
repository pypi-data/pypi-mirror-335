from abc import ABC, abstractmethod
from random import Random as MT19937_Py_G
try:
    from numpy.random import (Generator,
        PCG64DXSM as PCG64DXSM_G,
        MT19937 as MT19937_G,
        Philox as Philox_G,
        SFC64 as SFC64_G,
        PCG64 as PCG64_G,
    )
    NUMPY_AVAILABLE = True
except ImportError:
    NUMPY_AVAILABLE = False

__all__ = ['MT19937_Py', 'PCG64DXSM']


class PRNG(ABC):
    """
    This is an abstract class for SteganoN PRNG
    implementations. If you want to create your
    own, then you need to inherit this class,
    write required methods and add it into the
    ``SUPPORTED_PRNG`` dict from this module.

    For optimization reasons there is some
    required quirks. See __init__ docstring.
    """
    @abstractmethod
    def __init__(self, seed: bytes, cachesize: int):
        """
        Inherited ``__init__`` MUST have self.position
        as integer=0 and self.array with random 2D
        integers generated by ``gen2D(x,y)`` method.

        We will access those values directly to omit
        Python's function call overhead as:

        prng = PRNG(seed, cachesize)
        prng.gen2D(x,y)

        prng.array[prng.position]
        prng.position += 1

        See docstring for ``gen2D()``.

        Arguments:
            seed (``bytes``):
                Seed for PRNG.

            cachesize (``int``):
                Cachesize is an amount of (x,y) random tuples in
                ``self.array``. In other words, it's an amount of
                tuples you should generate per one call in your
                ``gen2D()`` method.
        """

    @abstractmethod
    def gen2D(self, x: int, y: int) -> None:
        """
        This method should generate ``self.cachesize``
        amount of random tuples in ``self.array``. You
        should clear() (or just re-assign) your array
        each call, so its length is always equals to
        ``self.cachesize``. You also NEED TO RESET
        ``self.position`` to 0 EACH CALL.

        X and Y are coords for Image, and you should generate
        random integers accordingly. For example, for Image
        of 500(X)x1000(Y), max value of X is 499 and Y 999.

        See pseudocode example:

        x = randrange(x)
        y = randrange(y)
        array.append((x,y))

        Arguments:
            x (``int``):
                X (Width) of Image.

            y (``int``):
                Y (Height) of Image.
        """

class MT19937_Py(PRNG):
    """
    This is the implementation of Mersenne Twister from
    the default ``random`` Python module. ``MT19937_Py``
    is the only supported generator here without NumPy.

    Although same name, Twister from Python are different
    from one from NumPy (``MT19937_NumPy`` here), so they
    are NOT compatible. Although it's kinda possible to
    change their states, it would be not stable. Thus,
    if you used ``MT19937_Py`` to hide data, you always
    should use the ``MT19937_Py`` to extract it back,
    even if ``MT19937_NumPy`` is available.
    """
    def __init__(self, seed: bytes, cachesize: int):
        """
        Arguments:
            seed (``bytes``):
                Seed for PRNG.

            cachesize (``int``):
                Cachesize is an amount of (x,y)
                random tuples in ``self.array``.
        """
        self.generator = MT19937_Py_G(seed)
        self.cachesize = cachesize
        self.position = 0
        self.array = []

    def gen2D(self, x: int, y: int) -> None:
        """
        Arguments:
            x (``int``):
                X (Width) of Image.

            y (``int``):
                Y (Height) of Image.
        """
        self.array = [
            (
                self.generator.randrange(x),
                self.generator.randrange(y)
            )
            for _ in range(self.cachesize)
        ]
        self.position = 0

class _NumPyPRNG(PRNG):
    """
    This is a parent class for all NumPy-related
    PRNGs. They are typically faster and less
    RAM-intensive. Quite obviously, available
    only if ``numpy`` library is installed.
    """
    def __init__(self, seed: bytes, cachesize: int, algo):
        """
        Arguments:
            seed (``bytes``):
                Seed for PRNG.

            cachesize (``int``):
                Cachesize is an amount of (x,y)
                random tuples in ``self.array``.
        """
        if not NUMPY_AVAILABLE:
            raise ModuleNotFoundError(
                'NumPy package is not installed. Your only '
                'possible choice for now is MT19937_Py.')

        seed_int = 0
        for byte in seed:
            seed_int = (seed_int << 8) | byte

        self.generator = Generator(algo(seed_int))
        self.cachesize = cachesize
        self.position = 0
        self.array = []

    def gen2D(self, x: int, y: int) -> None:
        """
        Arguments:
            x (``int``):
                X (Width) of Image.

            y (``int``):
                Y (Height) of Image.
        """
        self.array = self.generator.integers(
            [0,0], [x,y], (self.cachesize, 2)
        )
        self.position = 0

class PCG64DXSM(_NumPyPRNG):
    """(NumPy only) PCG64DXSM PRNG generator"""
    def __init__(self, seed: bytes, cachesize: int):
        super().__init__(seed, cachesize, PCG64DXSM_G)

class PCG64(_NumPyPRNG):
    """(NumPy only) PCG64 PRNG generator"""
    def __init__(self, seed: bytes, cachesize: int):
        super().__init__(seed, cachesize, PCG64_G)

class MT19937_NumPy(_NumPyPRNG):
    """(NumPy only) MT19937 PRNG generator"""
    def __init__(self, seed: bytes, cachesize: int):
        super().__init__(seed, cachesize, MT19937_G)

class SFC64(_NumPyPRNG):
    """(NumPy only) SFC64 PRNG generator"""
    def __init__(self, seed: bytes, cachesize: int):
        super().__init__(seed, cachesize, SFC64_G)

class Philox(_NumPyPRNG):
    """(NumPy only) Philox PRNG generator"""
    def __init__(self, seed: bytes, cachesize: int):
        super().__init__(seed, cachesize, Philox_G)


SUPPORTED_PRNG: dict = {
    'PCG64DXSM': PCG64DXSM,
    'MT19937_Py': MT19937_Py,
    'PCG64': PCG64,
    'SFC64': SFC64,
    'Philox': Philox,

    '__default__': PCG64DXSM if NUMPY_AVAILABLE else MT19937_Py
}
