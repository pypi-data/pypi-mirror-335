"""
    Open:FactSet - Partners

    This service provides the capability to search and download unstructured content provided by <a href=\"https://open.factset.com/catalog/en-us\">Open:FactSet Partners</a>.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.OpenFactSetPartnersDocuments.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.OpenFactSetPartnersDocuments.exceptions import ApiAttributeError



class DataFiles(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'trial_id': (str,),  # noqa: E501
            'version': (int,),  # noqa: E501
            'file_name': (str,),  # noqa: E501
            'clinical_trial_id': (str,),  # noqa: E501
            'unique_protocol_id': (str,),  # noqa: E501
            'official_title': (str,),  # noqa: E501
            'overall_status': (str,),  # noqa: E501
            'primary_completion': (datetime,),  # noqa: E501
            'study_completion': (datetime,),  # noqa: E501
            'first_posted': (datetime,),  # noqa: E501
            'last_posted': (datetime,),  # noqa: E501
            'sponsor': (str,),  # noqa: E501
            'responsible_party': (str,),  # noqa: E501
            'data_monitoring': (str,),  # noqa: E501
            'study_type': (str,),  # noqa: E501
            'primary_purpose': (str,),  # noqa: E501
            'study_phase': (str,),  # noqa: E501
            'interventional_model': (str,),  # noqa: E501
            'number_of_arms': (int,),  # noqa: E501
            'masking': (str,),  # noqa: E501
            'allocation': (str,),  # noqa: E501
            'enrollment': (int,),  # noqa: E501
            'minimum_age': (str,),  # noqa: E501
            'maximum_age': (str,),  # noqa: E501
            'sex': (str,),  # noqa: E501
            'gender_based': (str,),  # noqa: E501
            'accepts_volunteers': (str,),  # noqa: E501
            'date': (datetime,),  # noqa: E501
            'record_verification': (datetime,),  # noqa: E501
            'study_start': (datetime,),  # noqa: E501
            'first_submitted': (datetime,),  # noqa: E501
            'first_submit_met_qx_crite': (datetime,),  # noqa: E501
            'last_submit_met_qx_crite': (datetime,),  # noqa: E501
            'primary_comp_date_type': (str,),  # noqa: E501
            'study_completion_date_type': (str,),  # noqa: E501
            'first_posted_date_type': (str,),  # noqa: E501
            'last_posted_date_type': (str,),  # noqa: E501
            'enrollment_type': (str,),  # noqa: E501
            'beam_probability_of_trial_success': (float,),  # noqa: E501
            'beam_probability_of_launch': (float,),  # noqa: E501
            'url': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'trial_id': 'trialId',  # noqa: E501
        'version': 'version',  # noqa: E501
        'file_name': 'fileName',  # noqa: E501
        'clinical_trial_id': 'clinicalTrialId',  # noqa: E501
        'unique_protocol_id': 'uniqueProtocolId',  # noqa: E501
        'official_title': 'officialTitle',  # noqa: E501
        'overall_status': 'overallStatus',  # noqa: E501
        'primary_completion': 'primaryCompletion',  # noqa: E501
        'study_completion': 'studyCompletion',  # noqa: E501
        'first_posted': 'firstPosted',  # noqa: E501
        'last_posted': 'lastPosted',  # noqa: E501
        'sponsor': 'sponsor',  # noqa: E501
        'responsible_party': 'responsibleParty',  # noqa: E501
        'data_monitoring': 'dataMonitoring',  # noqa: E501
        'study_type': 'studyType',  # noqa: E501
        'primary_purpose': 'primaryPurpose',  # noqa: E501
        'study_phase': 'studyPhase',  # noqa: E501
        'interventional_model': 'interventionalModel',  # noqa: E501
        'number_of_arms': 'numberOfArms',  # noqa: E501
        'masking': 'masking',  # noqa: E501
        'allocation': 'allocation',  # noqa: E501
        'enrollment': 'enrollment',  # noqa: E501
        'minimum_age': 'minimumAge',  # noqa: E501
        'maximum_age': 'maximumAge',  # noqa: E501
        'sex': 'sex',  # noqa: E501
        'gender_based': 'genderBased',  # noqa: E501
        'accepts_volunteers': 'acceptsVolunteers',  # noqa: E501
        'date': 'date',  # noqa: E501
        'record_verification': 'recordVerification',  # noqa: E501
        'study_start': 'studyStart',  # noqa: E501
        'first_submitted': 'firstSubmitted',  # noqa: E501
        'first_submit_met_qx_crite': 'firstSubmitMetQxCrite',  # noqa: E501
        'last_submit_met_qx_crite': 'lastSubmitMetQxCrite',  # noqa: E501
        'primary_comp_date_type': 'primaryCompDateType',  # noqa: E501
        'study_completion_date_type': 'studyCompletionDateType',  # noqa: E501
        'first_posted_date_type': 'firstPostedDateType',  # noqa: E501
        'last_posted_date_type': 'lastPostedDateType',  # noqa: E501
        'enrollment_type': 'enrollmentType',  # noqa: E501
        'beam_probability_of_trial_success': 'beamProbabilityOfTrialSuccess',  # noqa: E501
        'beam_probability_of_launch': 'beamProbabilityOfLaunch',  # noqa: E501
        'url': 'url',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """DataFiles - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            trial_id (str): ID of the trial assigned by the trial registry.. [optional]  # noqa: E501
            version (int): Specifies the version of a trial.. [optional]  # noqa: E501
            file_name (str): The filename of the trial data.. [optional]  # noqa: E501
            clinical_trial_id (str): Specifies Ozmosi unique ID for each historical version of a trial.. [optional]  # noqa: E501
            unique_protocol_id (str): ID assigned by the sponsor of a trial.. [optional]  # noqa: E501
            official_title (str): Full scientific title of a trial.. [optional]  # noqa: E501
            overall_status (str): Defines the current stage of a trial's activity.. [optional]  # noqa: E501
            primary_completion (datetime): The date where the final patient is examined or treated for the purpose of collecting data on the trial's primary outcome measures. Trial Sponsors may publicly announce the data. results after this date. [optional]  # noqa: E501
            study_completion (datetime): The date that treatment will complete in the trial and data will be fully collected for secondary outcome measures and adverse events.. [optional]  # noqa: E501
            first_posted (datetime): The date on which the trial was first available on ClinicalTrials.gov. Specifically, this date refers to version 1 of a trial. [optional]  # noqa: E501
            last_posted (datetime): The date on which this version of a trial was officially updated and publicly visible on the registry.. [optional]  # noqa: E501
            sponsor (str): The primary sponsor of the trial.. [optional]  # noqa: E501
            responsible_party (str): Identifies if the responsible party of the trial is the Sponsor (The entity that initiates the study), the Principal Investigator (An individual designated by the Sponsor) or Sponsor-Investigator (An individual both initiating and conduct the trial). [optional]  # noqa: E501
            data_monitoring (str): Identifies if the trial involves a group of independent scientists who monitor the safety and scientific integrity of a clinical trial.. [optional]  # noqa: E501
            study_type (str): Describes the nature of a clinical study.. [optional]  # noqa: E501
            primary_purpose (str): Describes the main reason for the clinical trial.. [optional]  # noqa: E501
            study_phase (str): Specifies the stage of a clinical trial studying a drug or biological product.. [optional]  # noqa: E501
            interventional_model (str): Describes the general design of the strategy for assigning interventions to participants in a clinical study.. [optional]  # noqa: E501
            number_of_arms (int): The number of clinical arms for study.. [optional]  # noqa: E501
            masking (str): Defines the type of masking.. [optional]  # noqa: E501
            allocation (str): Identifies the method used to assign participants to an arm of a clinical study.. [optional]  # noqa: E501
            enrollment (int): Number of patients enrolled.. [optional]  # noqa: E501
            minimum_age (str): Minimum age of participants.. [optional]  # noqa: E501
            maximum_age (str): Maximum age of participants.. [optional]  # noqa: E501
            sex (str): A type of eligibility criteria that indicates the sex of people who may participate in a clinical study.. [optional]  # noqa: E501
            gender_based (str): Defines if study is gender specific.. [optional]  # noqa: E501
            accepts_volunteers (str): A type of eligibility criteria that indicates whether people who do not have the condition/disease being studied can participate in that clinical study.. [optional]  # noqa: E501
            date (datetime): Specifies the timestamp of each version of a trial.. [optional]  # noqa: E501
            record_verification (datetime): The date on which the responsible party last verified the clinical study information in the entire ClinicalTrials.gov record for the clinical study, even if no additional or updated information is being submitted. [optional]  # noqa: E501
            study_start (datetime): Date that the trial becomes open for recruitment or the date on which the first patient was enrolled.. [optional]  # noqa: E501
            first_submitted (datetime): The date that the trial was submitted to the registry.. [optional]  # noqa: E501
            first_submit_met_qx_crite (datetime): The date on which a submitted study record is confirmed to be consistent with National Library of Medicine (NLM) quality control (QC) review criteria.. [optional]  # noqa: E501
            last_submit_met_qx_crite (datetime): The most recent date on which the study sponsor or investigator submitted changes to a study record.. [optional]  # noqa: E501
            primary_comp_date_type (str): Designates if primary completion date is actual or anticipated.. [optional]  # noqa: E501
            study_completion_date_type (str): Designates if study completion date is actual or anticipated.. [optional]  # noqa: E501
            first_posted_date_type (str): Designates if the first posted date is actual or anticipated.. [optional]  # noqa: E501
            last_posted_date_type (str): Designates if the last update posted date is actual or anticipated.. [optional]  # noqa: E501
            enrollment_type (str): Identifies if the enrollment number is the anticipated or actual amount.. [optional]  # noqa: E501
            beam_probability_of_trial_success (float): Probability of trial success.. [optional]  # noqa: E501
            beam_probability_of_launch (float): Probability of trial being launched.. [optional]  # noqa: E501
            url (str): Download link for the clinical trials provided by the Ozmosi feed.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """DataFiles - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            trial_id (str): ID of the trial assigned by the trial registry.. [optional]  # noqa: E501
            version (int): Specifies the version of a trial.. [optional]  # noqa: E501
            file_name (str): The filename of the trial data.. [optional]  # noqa: E501
            clinical_trial_id (str): Specifies Ozmosi unique ID for each historical version of a trial.. [optional]  # noqa: E501
            unique_protocol_id (str): ID assigned by the sponsor of a trial.. [optional]  # noqa: E501
            official_title (str): Full scientific title of a trial.. [optional]  # noqa: E501
            overall_status (str): Defines the current stage of a trial's activity.. [optional]  # noqa: E501
            primary_completion (datetime): The date where the final patient is examined or treated for the purpose of collecting data on the trial's primary outcome measures. Trial Sponsors may publicly announce the data. results after this date. [optional]  # noqa: E501
            study_completion (datetime): The date that treatment will complete in the trial and data will be fully collected for secondary outcome measures and adverse events.. [optional]  # noqa: E501
            first_posted (datetime): The date on which the trial was first available on ClinicalTrials.gov. Specifically, this date refers to version 1 of a trial. [optional]  # noqa: E501
            last_posted (datetime): The date on which this version of a trial was officially updated and publicly visible on the registry.. [optional]  # noqa: E501
            sponsor (str): The primary sponsor of the trial.. [optional]  # noqa: E501
            responsible_party (str): Identifies if the responsible party of the trial is the Sponsor (The entity that initiates the study), the Principal Investigator (An individual designated by the Sponsor) or Sponsor-Investigator (An individual both initiating and conduct the trial). [optional]  # noqa: E501
            data_monitoring (str): Identifies if the trial involves a group of independent scientists who monitor the safety and scientific integrity of a clinical trial.. [optional]  # noqa: E501
            study_type (str): Describes the nature of a clinical study.. [optional]  # noqa: E501
            primary_purpose (str): Describes the main reason for the clinical trial.. [optional]  # noqa: E501
            study_phase (str): Specifies the stage of a clinical trial studying a drug or biological product.. [optional]  # noqa: E501
            interventional_model (str): Describes the general design of the strategy for assigning interventions to participants in a clinical study.. [optional]  # noqa: E501
            number_of_arms (int): The number of clinical arms for study.. [optional]  # noqa: E501
            masking (str): Defines the type of masking.. [optional]  # noqa: E501
            allocation (str): Identifies the method used to assign participants to an arm of a clinical study.. [optional]  # noqa: E501
            enrollment (int): Number of patients enrolled.. [optional]  # noqa: E501
            minimum_age (str): Minimum age of participants.. [optional]  # noqa: E501
            maximum_age (str): Maximum age of participants.. [optional]  # noqa: E501
            sex (str): A type of eligibility criteria that indicates the sex of people who may participate in a clinical study.. [optional]  # noqa: E501
            gender_based (str): Defines if study is gender specific.. [optional]  # noqa: E501
            accepts_volunteers (str): A type of eligibility criteria that indicates whether people who do not have the condition/disease being studied can participate in that clinical study.. [optional]  # noqa: E501
            date (datetime): Specifies the timestamp of each version of a trial.. [optional]  # noqa: E501
            record_verification (datetime): The date on which the responsible party last verified the clinical study information in the entire ClinicalTrials.gov record for the clinical study, even if no additional or updated information is being submitted. [optional]  # noqa: E501
            study_start (datetime): Date that the trial becomes open for recruitment or the date on which the first patient was enrolled.. [optional]  # noqa: E501
            first_submitted (datetime): The date that the trial was submitted to the registry.. [optional]  # noqa: E501
            first_submit_met_qx_crite (datetime): The date on which a submitted study record is confirmed to be consistent with National Library of Medicine (NLM) quality control (QC) review criteria.. [optional]  # noqa: E501
            last_submit_met_qx_crite (datetime): The most recent date on which the study sponsor or investigator submitted changes to a study record.. [optional]  # noqa: E501
            primary_comp_date_type (str): Designates if primary completion date is actual or anticipated.. [optional]  # noqa: E501
            study_completion_date_type (str): Designates if study completion date is actual or anticipated.. [optional]  # noqa: E501
            first_posted_date_type (str): Designates if the first posted date is actual or anticipated.. [optional]  # noqa: E501
            last_posted_date_type (str): Designates if the last update posted date is actual or anticipated.. [optional]  # noqa: E501
            enrollment_type (str): Identifies if the enrollment number is the anticipated or actual amount.. [optional]  # noqa: E501
            beam_probability_of_trial_success (float): Probability of trial success.. [optional]  # noqa: E501
            beam_probability_of_launch (float): Probability of trial being launched.. [optional]  # noqa: E501
            url (str): Download link for the clinical trials provided by the Ozmosi feed.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
