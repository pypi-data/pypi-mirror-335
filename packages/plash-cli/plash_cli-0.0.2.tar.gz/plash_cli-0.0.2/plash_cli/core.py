"""The Plash CLI tool"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['PLASH_CONFIG_HOME', 'get_global_cfg', 'is_included', 'create_tar_archive', 'validate_app', 'deploy']

# %% ../nbs/00_core.ipynb 2
from fastcore.all import *
from fastcore.xdg import *
from httpx import post as xpost
from pathlib import Path
from uuid import uuid4

import io, sys, tarfile

# %% ../nbs/00_core.ipynb 3
PLASH_CONFIG_HOME = xdg_config_home() / 'plash.env'

# %% ../nbs/00_core.ipynb 4
def get_global_cfg():
    """Works for all operating systems."""
    try: return parse_env(fn=Path(PLASH_CONFIG_HOME))
    except FileNotFoundError: 
        Path(PLASH_CONFIG_HOME).touch()
    return parse_env(fn=Path(PLASH_CONFIG_HOME))

# %% ../nbs/00_core.ipynb 5
def is_included(path):
    "Returns True if path should be included in deployment"
    if path.name.startswith('.'): return False
    if path.suffix == '.pyc': return False
    excludes = {'.git', '__pycache__', '.gitignore', '.env', 
                '.pytest_cache', '.venv', 'venv', '.ipynb_checkpoints',
                '.vscode', '.idea', '.sesskey'}
    return not any(p in excludes for p in path.parts)

# %% ../nbs/00_core.ipynb 6
def create_tar_archive(path # Path to directory containing FastHTML app
                      )->io.BytesIO: # Buffer of tar directory
    "Creates a tar archive of a directory, excluding files based on is_included"
    buf = io.BytesIO()
    files = L(Path(path).iterdir()).filter(is_included)

    with tarfile.open(fileobj=buf, mode='w:gz') as tar:
        for f in files: tar.add(f, arcname=f.name)
    buf.seek(0)
    return buf, len(files)

# %% ../nbs/00_core.ipynb 7
def validate_app(path):
    "Validates that the app in the directory `path` is deployable as a FastHTML app"
    print("Analyzing project structure...")

    main_file = Path(path) / "main.py"
    if not main_file.exists():
        print('[red bold]ERROR: Your FastHTML app must have a main.py[/red bold]')
        print(f'Your path is: [bold]{path}[/bold]')
        sys.exit(1)

# %% ../nbs/00_core.ipynb 8
@call_parse
def deploy(
    path:Path=Path('.'), # Path to project
    local:bool=False,  # local dev
    port:int=5002):
    """ðŸš€ Ship your app to production"""
    print('Initializing deployment...')
    validate_app(path)
    tarz, filecount = create_tar_archive(path)

    plash_app = Path(path) / '.plash'
    if not plash_app.exists():
        # Create the .plash file and write the app name
        plash_app.write_text(f'export PLASH_APP_ID=fasthtml-app-{str(uuid4())[:8]}')
    
    aid = parse_env(fn=plash_app)['PLASH_APP_ID']
    cfg = get_global_cfg()
    url = 'https://pla.sh/upload'
    if local: url = f'http://localhost:{port}/upload'
    headers = {'Authorization': f'Bearer {cfg["PLASH_TOKEN"]}'}
    print(f'Uploading {filecount} files...')
    resp = xpost(url, headers=headers, files={'file': tarz}, timeout=300.0,
                data={'aid': aid, 'email': cfg['PLASH_EMAIL']})
    if resp.status_code == 200: 
        print('âœ… Upload complete! Your app is currently being built.')
        print(f'It will be live at https://{aid}.pla.sh')
    else:
        print(f'Failure {resp.status_code}')
        print(f'Failure {resp.text}')
