import pytest

pytestmark = pytest.mark.asyncio


async def test_list_exploitations(api_client):
    """Test list_exploitations() API call (async)."""
    response = await api_client.exploitations.list_exploitations(limit=5)

    assert isinstance(response, dict)
    assert "data" in response and isinstance(response["data"], list)
    assert "total" in response and isinstance(response["total"], int)
    assert "offset" in response and isinstance(response["offset"], int)
    assert "limit" in response and isinstance(response["limit"], int)

    if response["data"]:
        first_config = response["data"][0]
        required_fields = [
            "uuid",
            "begins_at",
            "ends_at",
            "count",
            "created_at",
            "updated_at",
            "detection_signature_uuid",
            "detection_signature_name",
            "detection_signature_source",
            "detection_signature_method",
        ]
        for field in required_fields:
            assert field in first_config, f"Missing expected field: {field}"


async def test_get_exploitation(api_client):
    """Test get_exploitation() API call (async)."""
    exploitation = await api_client.exploitations.list_exploitations(limit=1)
    response = await api_client.exploitations.get_exploitation(
        exploitation["data"][0]["uuid"]
    )

    assert isinstance(response, dict)
    required_fields = [
        "uuid",
        "begins_at",
        "ends_at",
        "count",
        "created_at",
        "updated_at",
        "detection_signature_uuid",
        "detection_signature_name",
    ]
    for field in required_fields:
        assert field in response, f"Missing expected field: {field}"


def test_list_exploitations_sync(api_client):
    """Test list_exploitations_sync() API call (sync)."""
    response = api_client.exploitations.list_exploitations_sync(limit=5)

    assert isinstance(response, dict)
    assert "data" in response and isinstance(response["data"], list)
    assert "total" in response and isinstance(response["total"], int)
    assert "offset" in response and isinstance(response["offset"], int)
    assert "limit" in response and isinstance(response["limit"], int)

    if response["data"]:
        first_config = response["data"][0]
        required_fields = [
            "uuid",
            "begins_at",
            "ends_at",
            "count",
            "created_at",
            "updated_at",
            "detection_signature_uuid",
            "detection_signature_name",
            "detection_signature_source",
            "detection_signature_method",
        ]
        for field in required_fields:
            assert field in first_config, f"Missing expected field: {field}"


def test_get_exploitation_sync(api_client):
    """Test get_exploitation_sync() API call (sync)."""
    exploitation = api_client.exploitations.list_exploitations_sync(limit=1)
    response = api_client.exploitations.get_exploitation_sync(
        exploitation["data"][0]["uuid"]
    )

    assert isinstance(response, dict)
    required_fields = [
        "uuid",
        "begins_at",
        "ends_at",
        "count",
        "created_at",
        "updated_at",
        "detection_signature_uuid",
        "detection_signature_name",
    ]
    for field in required_fields:
        assert field in response, f"Missing expected field: {field}"
