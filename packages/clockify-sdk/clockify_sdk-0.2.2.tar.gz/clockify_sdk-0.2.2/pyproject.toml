[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "clockify-sdk"
description = "A Python SDK for interacting with the Clockify API"
authors = [{ name = "Fraqtory", email = "fraqtory@gmail.com" }]
version = "0.2.2"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = ["clockify", "api", "sdk", "time tracking"]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pydantic>=2.6.0",
    "python-dateutil>=2.8.2",
    "requests>=2.31.0",
    "typing-extensions>=4.8.0",
    "urllib3>=2.1.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.7.0",
    "black>=23.9.1",
    "isort>=5.12.0",
    "ruff>=0.1.3",
    "bandit>=1.7.5",
    "types-requests>=2.31.0.20240311",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
]

[project.urls]
Repository = "https://github.com/fraqtory/clockify-sdk"
Documentation = "https://clockify-sdk.readthedocs.io"

[tool.hatch.build]
packages = ["clockify_sdk"]
exclude = [
    "tests/*",
    "docs/*",
    ".github/*",
    ".gitignore",
    ".env",
    ".env.example",
    "*.pyc",
    "__pycache__",
    "*.so",
    "*.dylib",
    "*.dll",
    ".pytest_cache",
    ".coverage",
    ".ruff_cache",
    ".mypy_cache",
    "coverage.xml",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "B",   # flake8-bugbear
    "C90", # mccabe complexity
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=clockify_sdk --cov-report=term-missing"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.coverage.run]
source = ["clockify_sdk"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
ignore_errors = true
omit = [
    "tests/*",
    "setup.py",
    "*/__init__.py",
] 