Metadata-Version: 2.4
Name: temporal_disagg
Version: 0.1.0
Summary: Library for time series temporal disaggregation
Author-email: Jaime Vera-Jaramillo <jaimevera1107@gmail.com>
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: numpy
Requires-Dist: pandas
Requires-Dist: scipy
Requires-Dist: joblib
Requires-Dist: matplotlib
Requires-Dist: scikit-learn

# Temporal Disaggregation

A **Python library** for **temporal disaggregation** of time series data using various statistical and econometric methods.

This library enables **high-frequency estimation** from low-frequency data, ensuring consistency with the original aggregated series. It includes **multiple disaggregation methods**, such as:

- **Chow-Lin** (and variations: maxlog, minrss, fixed, ecotrim, quilis)
- **Denton** and **Denton-Cholette**
- **Fernandez**
- **Litterman**
- **OLS-based methods**
- **Machine Learning-based retropolation**
- **Exponential Smoothing**
- **Ensemble Predictions**

## üöÄ **Features**
‚úÖ Disaggregate **low-frequency time series** into **higher frequencies** (e.g., annual ‚Üí quarterly).  
‚úÖ Supports **multiple statistical and econometric methods** for temporal disaggregation.  
‚úÖ Includes **machine learning models** for time series retropolation.  
‚úÖ Provides **interpolation and missing value handling**.  
‚úÖ Compatible with **pandas**, **numpy**, and **scikit-learn**.  

---

## üì¶ **Installation**
You can install the package using **pip**:

```bash
pip install git+https://github.com/jaimevera1107/temp_disagg.git
```

## ‚öôÔ∏è **Example of usage**:

```python
import pandas as pd
import numpy as np
from temporal_disagg import TempDisModel

# Create sample data
df = pd.DataFrame({
    "Index": np.repeat(np.arange(2000, 2010), 4),  # Years (low frequency)
    "Grain": np.tile(np.arange(1, 5), 10),  # Quarterly data
    "X": np.random.rand(40) * 100,  # High-frequency indicator
    "y": np.repeat(np.random.rand(10) * 1000, 4)  # Low-frequency series
})

# Instantiate the model
model = TempDisModel(
    df, 
    conversion="average", 
    method="chow-lin-opt", 
    ensemble=True, 
    adjust_negative_values=True
)

# Run prediction
df_pred = model.predict()

# Display results
print(df_pred.head())

```
