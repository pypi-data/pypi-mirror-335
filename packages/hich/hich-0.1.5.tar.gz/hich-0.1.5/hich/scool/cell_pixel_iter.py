from abc import ABC, abstractmethod
from typing import *
import pandas

class CellPixelIter(ABC):
    def pre_cell_iter(self) -> Any:
        """Called before iteration through pixels dicts begins for the cell
        """
        pass

    def post_cell_iter(self) -> Any:
        """Called after iteration through pixels dicts ends for the cell
        """
        pass

    def __iter__(self) -> Generator[pandas.DataFrame, None, None]:
        """Yield pixels as pandas.DataFrame when create_scool iterates through this object, generated by subclass's create_scool_iter() method

        Returns:
            Generator yielding pandas.DataFrames with at least the columns bin1_id (int), bin2_id (int), count (int)
        """
        self.pre_cell_iter()
        try:
            yield from self.create_scool_iter()
        finally:
            self.post_cell_iter()

    @abstractmethod
    def create_scool_iter(self) -> Generator[pandas.DataFrame, None, Any]:
        """Yield pixels as pandas.DataFrame when create_scool iterates through this object

        Returns:
            Generator yielding pandas.DataFrames with at least the columns bin1_id (int), bin2_id (int), count (int)
        """
        pass