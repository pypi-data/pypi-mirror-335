# autogenerated by ssc-gen DO NOT_EDIT
"""Thanks https://github.com/barsikus007 for researches and decoder impl

NOTE: for extract Search and Ongoing items use rest-api requests:

Ongoing:

POST https://dreamerscast.com/"

{'search': "", "status": "", "pageSize": 16, 'pageNumber': 1}

Search:

POST https://dreamerscast.com/"

{'search': "<QUERY>", "status": "", "pageSize": 16, 'pageNumber': 1}
"""

from __future__ import annotations
import re
from typing import TypedDict, Union, Optional
from contextlib import suppress
import sys

if sys.version_info >= (3, 10):
    from types import NoneType
else:
    NoneType = type(None)

from parsel import Selector
from parsel.selector import _SelectorType  # noqa

T_AnimePage = TypedDict(
    "T_AnimePage",
    {
        "title": str,
        "description": Optional[str],
        "thumbnail": str,
        "player_js_encoded": str,
        "player_js_url": str,
    },
)


class AnimePage:
    """

        Usage example:

        GET https://dreamerscast.com/home/release/323-tensei-kizoku-kantei-skill-de-nariagaru-2

        Encoding (24.12.24 actual step-by-step)

        decoding and extract playlist:

        - GET <player_js_url>
        - unpack, extract encoded symbols
        - by <player_js_encoded> and <player_js_url> values decrypt it (implement logic from original source code)


    {
        "title": "String",
        "description": "String",
        "thumbnail": "String",
        "player_js_encoded": "String",
        "player_js_url": "String"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css("h3")
        return "".join(value1.css("::text").getall())

    def _parse_description(self, value: Selector) -> Optional[str]:
        value1 = value
        with suppress(Exception):
            value2 = value1.css(".postDesc")
            return "".join(value2.css("::text").getall())
        return None

    def _parse_thumbnail(self, value: Selector) -> str:
        value1 = value.css(".details_poster img")
        value2 = value1.attrib["src"]
        return f"https:{value2}" if value2 else value2

    def _parse_player_js_encoded(self, value: Selector) -> str:
        value1 = value.get()
        return re.search('new Playerjs\("(.*?)"\)', value1)[1]

    def _parse_player_js_url(self, value: Selector) -> str:
        value1 = value.get()
        value2 = re.search('<script[^>]+src="(/js/playerjs.*?)"', value1)[1]
        return f"https://dreamerscast.com{value2}" if value2 else value2

    def parse(self) -> T_AnimePage:
        return {
            "title": self._parse_title(self._doc),
            "description": self._parse_description(self._doc),
            "thumbnail": self._parse_thumbnail(self._doc),
            "player_js_encoded": self._parse_player_js_encoded(self._doc),
            "player_js_url": self._parse_player_js_url(self._doc),
        }
