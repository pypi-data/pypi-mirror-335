# autogenerated by ssc-gen DO NOT_EDIT
from __future__ import annotations
import re
from typing import List, TypedDict, Union, Optional
from contextlib import suppress
import sys

if sys.version_info >= (3, 10):
    from types import NoneType
else:
    NoneType = type(None)

from parsel import Selector, SelectorList
from parsel.selector import _SelectorType  # noqa

T_OngoingPage = TypedDict(
    "T_OngoingPage",
    {
        "thumbnail": str,
        "url": str,
        "episode": int,
        "title": str,
    },
)
T_SearchPage = TypedDict(
    "T_SearchPage",
    {
        "title": str,
        "thumbnail": str,
        "url": str,
    },
)
T_AnimePage = TypedDict(
    "T_AnimePage",
    {
        "title": str,
        "alt_title": Optional[str],
        "description": str,
        "thumbnail": str,
        "player_url": Optional[str],
    },
)


class OngoingPage:
    """Get all available ongoings from the main page

        USAGE:

            GET https://yummy-anime.org/



    [
        {
            "thumbnail": "String",
            "url": "String",
            "episode": "Int",
            "title": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css(".ksupdate_block a")

    def _parse_thumbnail(self, value: Selector) -> str:
        value1 = value.css(".xfieldimage")
        value2 = value1.attrib["src"]
        return f"https://yummy-anime.org{value2}" if value2 else value2

    def _parse_url(self, value: Selector) -> str:
        value1 = value.attrib["href"]
        return f"https://yummy-anime.org{value1}" if value1 else value1

    def _parse_episode(self, value: Selector) -> int:
        value1 = value.css(".cell-2")
        value2 = "".join(value1.css("::text").getall())
        value3 = re.search("(\\d+)\\s", value2)[1]
        return int(value3)

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css(".xfieldimage")
        return value1.attrib["alt"]

    def parse(self) -> List[T_OngoingPage]:
        return [
            {
                "thumbnail": self._parse_thumbnail(e),
                "url": self._parse_url(e),
                "episode": self._parse_episode(e),
                "title": self._parse_title(e),
            }
            for e in self._split_doc(self._doc)
        ]


class SearchPage:
    """Get search results

        USAGE:

            POST https://yummy-anime.org
            do=search&subaction=search&story=<QUERY>

        EXAMPLE:

            POST https://yummy-anime.org/index.php
            do=search&subaction=search=from_page=0story=ван-пис


    [
        {
            "title": "String",
            "thumbnail": "String",
            "url": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css("a.has-overlay")

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css(".poster__title")
        return "".join(value1.css("::text").getall())

    def _parse_thumbnail(self, value: Selector) -> str:
        value1 = value.css(".xfieldimage")
        value2 = value1.attrib["data-src"]
        return f"https://yummy-anime.org{value2}" if value2 else value2

    def _parse_url(self, value: Selector) -> str:
        return value.attrib["href"]

    def parse(self) -> List[T_SearchPage]:
        return [
            {"title": self._parse_title(e), "thumbnail": self._parse_thumbnail(e), "url": self._parse_url(e)}
            for e in self._split_doc(self._doc)
        ]


class AnimePage:
    """get anime page

        USAGE:

            GET https://yummy-anime.org/<...>.html

        EXAMPLE:

            GET https://yummy-anime.org/4790-vedma-i-chudovische.html



    {
        "title": "String",
        "alt_title": "String",
        "description": "String",
        "thumbnail": "String",
        "player_url": "String"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css(".anime__title h1")
        return "".join(value1.css("::text").getall())

    def _parse_alt_title(self, value: Selector) -> Optional[str]:
        value1 = value
        with suppress(Exception):
            value2 = value1.css(".anime__title .pmovie__original-title")
            return "".join(value2.css("::text").getall())
        return None

    def _parse_description(self, value: Selector) -> str:
        value1 = value
        with suppress(Exception):
            value2 = value1.css(".page__text p")
            value3 = value2.css("::text").getall()
            return "".join(value3)
        return ""

    def _parse_thumbnail(self, value: Selector) -> str:
        value1 = value.css(".pmovie__poster .xfieldimage")
        value2 = value1.attrib["data-src"]
        return f"https://yummy-anime.org{value2}" if value2 else value2

    def _parse_player_url(self, value: Selector) -> Optional[str]:
        value1 = value
        with suppress(Exception):
            value2 = value1.css(".pmovie__player iframe")
            value3 = value2.attrib["src"]
            return f"https:{value3}" if value3 else value3
        return None

    def parse(self) -> T_AnimePage:
        return {
            "title": self._parse_title(self._doc),
            "alt_title": self._parse_alt_title(self._doc),
            "description": self._parse_description(self._doc),
            "thumbnail": self._parse_thumbnail(self._doc),
            "player_url": self._parse_player_url(self._doc),
        }
