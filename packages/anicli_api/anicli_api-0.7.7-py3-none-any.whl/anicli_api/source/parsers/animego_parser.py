# autogenerated by ssc-gen DO NOT_EDIT
from __future__ import annotations
import re
import json
from typing import List, Dict, TypedDict, Union
from contextlib import suppress
import sys

if sys.version_info >= (3, 10):
    from types import NoneType
else:
    NoneType = type(None)

from parsel import Selector, SelectorList
from parsel.selector import _SelectorType  # noqa

J_AggregateRating = TypedDict(
    "J_AggregateRating",
    {
        "type": str,
        "ratingCount": int,
        "bestRating": int,
        "ratingValue": str,
    },
)
J_Director = TypedDict(
    "J_Director",
    {
        "type": str,
        "url": str,
        "name": str,
    },
)
J_Actor = TypedDict(
    "J_Actor",
    {
        "type": str,
        "url": str,
        "name": str,
    },
)
J_Creator = TypedDict(
    "J_Creator",
    {
        "type": str,
        "url": str,
        "name": str,
    },
)
J_Content = TypedDict(
    "J_Content",
    {
        "context": str,
        "type": str,
        "url": str,
        "name": str,
        "contentRating": str,
        "description": str,
        "aggregateRating": J_AggregateRating,
        "startDate": str,
        "image": str,
        "genre": List[str],
        "alternativeHeadline": List[str],
        "director": List[J_Director],
        "actor": List[J_Actor],
        "creator": List[J_Creator],
    },
)
T_OngoingPage = TypedDict(
    "T_OngoingPage",
    {
        "url": str,
        "title": str,
        "thumbnail": str,
        "episode": str,
        "dub": str,
    },
)
T_SearchPage = TypedDict(
    "T_SearchPage",
    {
        "title": str,
        "thumbnail": str,
        "url": str,
    },
)
T_AnimePage = TypedDict(
    "T_AnimePage",
    {
        "title": str,
        "description": str,
        "thumbnail": str,
        "id": str,
        "raw_json": J_Content,
    },
)
T_EpisodeDubbersView = Dict[str, str]
T_EpisodesView = TypedDict(
    "T_EpisodesView",
    {
        "num": str,
        "title": str,
        "id": str,
    },
)
T_EpisodePage = TypedDict(
    "T_EpisodePage",
    {
        "dubbers": T_EpisodeDubbersView,
        "episodes": List[T_EpisodesView],
    },
)
T_EpisodeVideoPlayersView = TypedDict(
    "T_EpisodeVideoPlayersView",
    {
        "player": str,
        "data_provider": str,
        "data_provide_dubbing": str,
    },
)
T_EpisodeVideoDubbersView = Dict[str, str]
T_EpisodeVideoPage = TypedDict(
    "T_EpisodeVideoPage",
    {
        "dubbers": T_EpisodeVideoDubbersView,
        "videos": List[T_EpisodeVideoPlayersView],
    },
)
T_SourceVideoView = TypedDict(
    "T_SourceVideoView",
    {
        "title": str,
        "url": str,
        "data_provider": str,
        "data_provide_dubbing": str,
    },
)
T_SourceDubbersView = Dict[str, str]
T_SourcePage = TypedDict(
    "T_SourcePage",
    {
        "dubbers": T_SourceDubbersView,
        "videos": List[T_SourceVideoView],
    },
)


class OngoingPage:
    """Get all available ongoings from the main page

        GET https://animego.club


    [
        {
            "url": "String",
            "title": "String",
            "thumbnail": "String",
            "episode": "String",
            "dub": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css(".border-bottom-0.cursor-pointer")

    def _parse_url(self, value: Selector) -> str:
        value1 = value.attrib["onclick"]
        value2 = value1.lstrip("location.href=")
        value3 = value2.strip("'")
        return f"https://animego.club{value3}" if value3 else value3

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css(".last-update-title")
        return "".join(value1.css("::text").getall())

    def _parse_thumbnail(self, value: Selector) -> str:
        value1 = value.css(".lazy")
        value2 = value1.attrib["style"]
        value3 = value2.lstrip("background-image: url(")
        return value3.rstrip(");")

    def _parse_episode(self, value: Selector) -> str:
        value1 = value.css(".text-truncate")
        value2 = "".join(value1.css("::text").getall())
        return re.search("(\d+)\s", value2)[1]

    def _parse_dub(self, value: Selector) -> str:
        value1 = value.css(".text-gray-dark-6")
        value2 = "".join(value1.css("::text").getall())
        value3 = value2.replace(")", "")
        return value3.replace("(", "")

    def parse(self) -> List[T_OngoingPage]:
        return [
            {
                "url": self._parse_url(e),
                "title": self._parse_title(e),
                "thumbnail": self._parse_thumbnail(e),
                "episode": self._parse_episode(e),
                "dub": self._parse_dub(e),
            }
            for e in self._split_doc(self._doc)
        ]


class SearchPage:
    """Get all search results by query

        USAGE:

            GET https://animego.club/search/anime
            q={QUERY}

        EXAMPLE:

            GET https://animego.club/search/anime?q=LAIN


    [
        {
            "title": "String",
            "thumbnail": "String",
            "url": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css(".row > .col-ul-2")

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css(".text-truncate a")
        return value1.attrib["title"]

    def _parse_thumbnail(self, value: Selector) -> str:
        value1 = value.css(".lazy")
        return value1.attrib["data-original"]

    def _parse_url(self, value: Selector) -> str:
        value1 = value.css(".text-truncate a")
        return value1.attrib["href"]

    def parse(self) -> List[T_SearchPage]:
        return [
            {"title": self._parse_title(e), "thumbnail": self._parse_thumbnail(e), "url": self._parse_url(e)}
            for e in self._split_doc(self._doc)
        ]


class AnimePage:
    """Anime page information. anime path contains in SearchView.url or Ongoing.url

        - id needed for next API requests
        - raw_json used for extract extra metadata (unescape required)

        USAGE:

            GET https://animego.club/anime/<ANIME_PATH>

        EXAMPLE:

            GET https://animego.club/anime/eksperimenty-leyn-1114


    {
        "title": "String",
        "description": "String",
        "thumbnail": "String",
        "id": "String",
        "raw_json": {
            "context": "String",
            "type": "String",
            "url": "String",
            "name": "String",
            "contentRating": "String",
            "description": "String",
            "aggregateRating": {
                "type": "String",
                "ratingCount": "Int",
                "bestRating": "Int",
                "ratingValue": "String"
            },
            "startDate": "String",
            "image": "String",
            "genre": "String",
            "alternativeHeadline": "String",
            "director": {
                "type": "String",
                "url": "String",
                "name": "String"
            },
            "actor": {
                "type": "String",
                "url": "String",
                "name": "String"
            },
            "creator": {
                "type": "String",
                "url": "String",
                "name": "String"
            }
        }
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css(".anime-title h1")
        return "".join(value1.css("::text").getall())

    def _parse_description(self, value: Selector) -> str:
        value1 = value
        with suppress(Exception):
            value2 = value1.css(".description")
            value3 = value2.css("::text").getall()
            value4 = "".join(value3)
            return re.sub("^\s+|\s+$", "", value4)
        return ""

    def _parse_thumbnail(self, value: Selector) -> str:
        value1 = value.css("#content img")
        return value1.attrib["src"]

    def _parse_id(self, value: Selector) -> str:
        value1 = value.css(".br-2 .my-list-anime")
        value2 = value1.attrib["id"]
        return value2.lstrip("my-list-")

    def _parse_raw_json(self, value: Selector) -> J_Content:
        value1 = value.css("script[type='application/ld+json']")
        value2 = "".join(value1.css("::text").getall())
        value3 = value2.replace('"@type"', '"type"')
        value4 = value3.replace('"@context"', '"context"')
        return json.loads(value4)

    def parse(self) -> T_AnimePage:
        return {
            "title": self._parse_title(self._doc),
            "description": self._parse_description(self._doc),
            "thumbnail": self._parse_thumbnail(self._doc),
            "id": self._parse_id(self._doc),
            "raw_json": self._parse_raw_json(self._doc),
        }


class EpisodeDubbersView:
    """

    {
        "<dubber_id>": "<dubber_name>",
        "<id>": "..."
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css("#video-dubbing .mb-1")

    def _parse_key(self, value: Selector) -> str:
        return value.attrib["data-dubbing"]

    def _parse_value(self, value: Selector) -> str:
        value1 = value.css("span")
        value2 = "".join(value1.css("::text").getall())
        return re.sub("^\s+|\s+$", "", value2)

    def parse(self) -> T_EpisodeDubbersView:
        return {self._parse_key(e): self._parse_value(e) for e in self._split_doc(self._doc)}


class EpisodesView:
    """

    [
        {
            "num": "String",
            "title": "String",
            "id": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css("#video-carousel .mb-0")

    def _parse_num(self, value: Selector) -> str:
        return value.attrib["data-episode"]

    def _parse_title(self, value: Selector) -> str:
        return value.attrib["data-episode-title"]

    def _parse_id(self, value: Selector) -> str:
        return value.attrib["data-id"]

    def parse(self) -> List[T_EpisodesView]:
        return [
            {"num": self._parse_num(e), "title": self._parse_title(e), "id": self._parse_id(e)}
            for e in self._split_doc(self._doc)
        ]


class EpisodePage:
    """Representation episodes

        NOTE:
            film pages does not exist video-carousel feature: test by `#video-carousel` CSS selector
            or match by '<div id="video-carousel"' substring

        Prepare:
          1. get id from Anime object
          2. GET 'https://animego.club/anime/{Anime.id}/player?_allow=true'
          3. extract html from json by ['content'] key
          4. OPTIONAL: unescape HTML

        EXAMPLE:
            GET https://animego.club/anime/anime/1114//player?_allow=true


    {
        "dubbers": {
            "<dubber_id>": "<dubber_name>",
            "<id>": "..."
        },
        "episodes": [
            {
                "num": "String",
                "title": "String",
                "id": "String"
            },
            "..."
        ]
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _parse_dubbers(self, value: Selector) -> T_EpisodeDubbersView:
        return EpisodeDubbersView(value).parse()

    def _parse_episodes(self, value: Selector) -> List[T_EpisodesView]:
        return EpisodesView(value).parse()

    def parse(self) -> T_EpisodePage:
        return {"dubbers": self._parse_dubbers(self._doc), "episodes": self._parse_episodes(self._doc)}


class EpisodeVideoPlayersView:
    """

    [
        {
            "player": "String",
            "data_provider": "String",
            "data_provide_dubbing": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css("#video-players > .mb-1")

    def _parse_player(self, value: Selector) -> str:
        value1 = value.attrib["data-player"]
        value2 = re.sub("^https?", "", value1)
        return f"https:{value2}" if value2 else value2

    def _parse_data_provider(self, value: Selector) -> str:
        return value.attrib["data-provider"]

    def _parse_data_provide_dubbing(self, value: Selector) -> str:
        value1 = value.attrib["data-provide-dubbing"]
        value2 = re.sub("^/s*", "", value1)
        return re.sub("/s*$", "", value2)

    def parse(self) -> List[T_EpisodeVideoPlayersView]:
        return [
            {
                "player": self._parse_player(e),
                "data_provider": self._parse_data_provider(e),
                "data_provide_dubbing": self._parse_data_provide_dubbing(e),
            }
            for e in self._split_doc(self._doc)
        ]


class EpisodeVideoDubbersView:
    """

    {
        "<dubber_id>": "<dubber_name>",
        "<id>": "..."
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css("#video-dubbing .mb-1")

    def _parse_key(self, value: Selector) -> str:
        return value.attrib["data-dubbing"]

    def _parse_value(self, value: Selector) -> str:
        value1 = value.css("span")
        value2 = "".join(value1.css("::text").getall())
        return re.sub("^\s+|\s+$", "", value2)

    def parse(self) -> T_EpisodeVideoDubbersView:
        return {self._parse_key(e): self._parse_value(e) for e in self._split_doc(self._doc)}


class EpisodeVideoPage:
    """Represent Episode object for film (it have not same signatures)

        NOTE:
            film pages does not exist video-carousel feature: test by `#video-carousel` CSS selector
            or match by '<div id="video-carousel"' substring

        Prepare:
          1. get id from Anime object
          2. GET 'https://animego.club/anime/{Anime.id}/player?_allow=true'
          3. extract html from json by ['content'] key
          4. OPTIONAL: unescape HTML

        EXAMPLE:
            GET https://animego.club/anime/315/player?_allow=true


    {
        "dubbers": {
            "<dubber_id>": "<dubber_name>",
            "<id>": "..."
        },
        "videos": [
            {
                "player": "String",
                "data_provider": "String",
                "data_provide_dubbing": "String"
            },
            "..."
        ]
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _parse_dubbers(self, value: Selector) -> T_EpisodeVideoDubbersView:
        return EpisodeVideoDubbersView(value).parse()

    def _parse_videos(self, value: Selector) -> List[T_EpisodeVideoPlayersView]:
        return EpisodeVideoPlayersView(value).parse()

    def parse(self) -> T_EpisodeVideoPage:
        return {"dubbers": self._parse_dubbers(self._doc), "videos": self._parse_videos(self._doc)}


class SourceVideoView:
    """

    [
        {
            "title": "String",
            "url": "String",
            "data_provider": "String",
            "data_provide_dubbing": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css("#video-players > span")

    def _parse_title(self, value: Selector) -> str:
        return "".join(value.css("::text").getall())

    def _parse_url(self, value: Selector) -> str:
        value1 = value.attrib["data-player"]
        return f"https:{value1}" if value1 else value1

    def _parse_data_provider(self, value: Selector) -> str:
        return value.attrib["data-provider"]

    def _parse_data_provide_dubbing(self, value: Selector) -> str:
        return value.attrib["data-provide-dubbing"]

    def parse(self) -> List[T_SourceVideoView]:
        return [
            {
                "title": self._parse_title(e),
                "url": self._parse_url(e),
                "data_provider": self._parse_data_provider(e),
                "data_provide_dubbing": self._parse_data_provide_dubbing(e),
            }
            for e in self._split_doc(self._doc)
        ]


class SourceDubbersView:
    """

    {
        "<dubber_id>": "<dubber_name>",
        "...": "..."
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css("#video-dubbing > span")

    def _parse_key(self, value: Selector) -> str:
        return value.attrib["data-dubbing"]

    def _parse_value(self, value: Selector) -> str:
        value1 = "".join(value.css("::text").getall())
        value2 = re.sub("^\\s+", "", value1)
        return re.sub("\s+$", "", value2)

    def parse(self) -> T_SourceDubbersView:
        return {self._parse_key(e): self._parse_value(e) for e in self._split_doc(self._doc)}


class SourcePage:
    """representation player urls

        Prepare:
          1. get num and id from Episode

          2.

          GET https://animego.club/anime/series
          dubbing=2&provider=24&episode={Episode.num}id={Episode.id}

          3. extract html from json by ["content"] key

          4. OPTIONAL: unescape document

        EXAMPLE:

            GET https://animego.club/anime/series?dubbing=2&provider=24&episode=2&id=15837


    {
        "dubbers": {
            "<dubber_id>": "<dubber_name>",
            "...": "..."
        },
        "videos": [
            {
                "title": "String",
                "url": "String",
                "data_provider": "String",
                "data_provide_dubbing": "String"
            },
            "..."
        ]
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _parse_dubbers(self, value: Selector) -> T_SourceDubbersView:
        return SourceDubbersView(value).parse()

    def _parse_videos(self, value: Selector) -> List[T_SourceVideoView]:
        return SourceVideoView(value).parse()

    def parse(self) -> T_SourcePage:
        return {"dubbers": self._parse_dubbers(self._doc), "videos": self._parse_videos(self._doc)}
