# autogenerated by ssc-gen DO NOT_EDIT
from __future__ import annotations
import re
from typing import List, Dict, TypedDict, Union, Optional
from contextlib import suppress
import sys

if sys.version_info >= (3, 10):
    from types import NoneType
else:
    NoneType = type(None)

from parsel import Selector, SelectorList
from parsel.selector import _SelectorType  # noqa

T_OngoingPage = TypedDict(
    "T_OngoingPage",
    {
        "url": str,
        "title": str,
        "thumbnail": str,
        "counts": str,
    },
)
T_SearchPage = TypedDict(
    "T_SearchPage",
    {
        "url": str,
        "title": str,
        "thumbnail": str,
        "counts": str,
    },
)
T_EpisodesView = TypedDict(
    "T_EpisodesView",
    {
        "title": str,
        "url": str,
    },
)
T_AnimePage = TypedDict(
    "T_AnimePage",
    {
        "title": str,
        "description": str,
        "thumbnail": str,
        "episodes": List[T_EpisodesView],
    },
)
T_SourceView = Dict[str, Optional[str]]
T_SourcePage = TypedDict(
    "T_SourcePage",
    {
        "videos": T_SourceView,
    },
)


class OngoingPage:
    """usage:

        POST https://jut.su/anime/ongoing/
        ajax_load=yes&start_from_page=1&show_search=&anime_of_user=



    [
        {
            "url": "String",
            "title": "String",
            "thumbnail": "String",
            "counts": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css(".all_anime_global")

    def _parse_url(self, value: Selector) -> str:
        value1 = value.css("a")
        value2 = value1.attrib["href"]
        return f"https://jut.su{value2}" if value2 else value2

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css(".aaname")
        return "".join(value1.css("::text").getall())

    def _parse_thumbnail(self, value: Selector) -> str:
        value1 = value.css(".all_anime_image")
        value2 = value1.attrib["style"]
        return re.search("'(https?://.*?)'", value2)[1]

    def _parse_counts(self, value: Selector) -> str:
        value1 = value.css(".aailines")
        value2 = value1.css("::text").getall()
        value3 = [e.strip("\r\n") for e in value2]
        return " ".join(value3)

    def parse(self) -> List[T_OngoingPage]:
        return [
            {
                "url": self._parse_url(e),
                "title": self._parse_title(e),
                "thumbnail": self._parse_thumbnail(e),
                "counts": self._parse_counts(e),
            }
            for e in self._split_doc(self._doc)
        ]


class SearchPage:
    """
        POST https://jut.su/anime/
        ajax_load=yes&start_from_page=1&show_search=<QUERY>&anime_of_user=

        EXAMPLE:
            POST https://jut.su/anime/
            ajax_load=yes&start_from_page=1&show_search=LA&anime_of_user=


    [
        {
            "url": "String",
            "title": "String",
            "thumbnail": "String",
            "counts": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css(".all_anime_global")

    def _parse_url(self, value: Selector) -> str:
        value1 = value.css("a")
        value2 = value1.attrib["href"]
        return f"https://jut.su{value2}" if value2 else value2

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css(".aaname")
        return "".join(value1.css("::text").getall())

    def _parse_thumbnail(self, value: Selector) -> str:
        value1 = value.css(".all_anime_image")
        value2 = value1.attrib["style"]
        return re.search("'(https?://.*?)'", value2)[1]

    def _parse_counts(self, value: Selector) -> str:
        value1 = value.css(".aailines")
        value2 = value1.css("::text").getall()
        value3 = [e.strip("\r\n") for e in value2]
        return " ".join(value3)

    def parse(self) -> List[T_SearchPage]:
        return [
            {
                "url": self._parse_url(e),
                "title": self._parse_title(e),
                "thumbnail": self._parse_thumbnail(e),
                "counts": self._parse_counts(e),
            }
            for e in self._split_doc(self._doc)
        ]


class EpisodesView:
    """

    [
        {
            "title": "String",
            "url": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css(".video")

    def _parse_title(self, value: Selector) -> str:
        value1 = "".join(value.css("::text").getall())
        return value1.strip(" ")

    def _parse_url(self, value: Selector) -> str:
        value1 = value.attrib["href"]
        return f"https://jut.su{value1}" if value1 else value1

    def parse(self) -> List[T_EpisodesView]:
        return [{"title": self._parse_title(e), "url": self._parse_url(e)} for e in self._split_doc(self._doc)]


class AnimePage:
    """
        GET https://jut.su/<ANIME PATH>

        EXAMPLE:
            GET https://jut.su/kime-no-yaiba/


    {
        "title": "String",
        "description": "String",
        "thumbnail": "String",
        "episodes": [
            {
                "title": "String",
                "url": "String"
            },
            "..."
        ]
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css(".anime_padding_for_title")
        value2 = "".join(value1.css("::text").getall())
        return re.search("Смотреть (.*?) все", value2)[1]

    def _parse_description(self, value: Selector) -> str:
        value1 = value.css(".uv_rounded_bottom span")
        value2 = value1.css("::text").getall()
        return " ".join(value2)

    def _parse_thumbnail(self, value: Selector) -> str:
        value1 = value.css(".all_anime_title")
        value2 = value1.attrib["style"]
        return re.search("'(https?://.*?)'", value2)[1]

    def _parse_episodes(self, value: Selector) -> List[T_EpisodesView]:
        return EpisodesView(value).parse()

    def parse(self) -> T_AnimePage:
        return {
            "title": self._parse_title(self._doc),
            "description": self._parse_description(self._doc),
            "thumbnail": self._parse_thumbnail(self._doc),
            "episodes": self._parse_episodes(self._doc),
        }


class SourceView:
    """

    {
        "QUALITY": "URL"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css("#my-player > source")

    def _parse_key(self, value: Selector) -> str:
        value1 = value
        with suppress(Exception):
            return value1.attrib["res"]
        return "null"

    def _parse_value(self, value: Selector) -> Optional[str]:
        value1 = value
        with suppress(Exception):
            return value1.attrib["src"]
        return None

    def parse(self) -> T_SourceView:
        return {self._parse_key(e): self._parse_value(e) for e in self._split_doc(self._doc)}


class SourcePage:
    """
        GET https://jut.su/<ANIME PATH>/<SEASON?>/episode-<NUM>.html

        NOTE: VIDEO PLAY REQUEST SHOULD HAVE THE SAME USER-AGENT AS AN API CLIENT

        eg:

        cl = Client(headers={"user-agent": "X"})

        ...

        s = SourcePage(doc).parse()

        mpv s["url_1080"] # 403, FORBIDDEN

        mpv s["url_1080"] --user-agent="Y" # 403, FORBIDDEN

        mpv s["url_1080"] --user-agent="X" # 200, OK

        EXAMPLE:
            GET https://jut.su/kime-no-yaiba/season-1/episode-1.html

        ISSUES:
            CHECK 'null' KEY in 'video'. if it contains - videos not available

            check block reasons regex patterns:

            - 'block_video_text_str_everywhere\\+' - К сожалению, это видео недоступно.
            - 'block_video_text_str\\+' - К сожалению, в России это видео недоступно.


    {
        "videos": {
            "QUALITY": "URL"
        }
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = Selector(document) if isinstance(document, str) else document

    def _parse_videos(self, value: Selector) -> T_SourceView:
        return SourceView(value).parse()

    def parse(self) -> T_SourcePage:
        return {"videos": self._parse_videos(self._doc)}
