# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: scann/scann_ops/scann_assets.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\"scann/scann_ops/scann_assets.proto\x12\x0eresearch_scann\"\xd1\x03\n\nScannAsset\x12\x38\n\nasset_type\x18\x01 \x01(\x0e\x32$.research_scann.ScannAsset.AssetType\x12\x12\n\nasset_path\x18\x02 \x01(\t\"\xf4\x02\n\tAssetType\x12\x14\n\x10UNSPECIFIED_TYPE\x10\x00\x12\x0b\n\x07\x44\x41TASET\x10\x01\x12\x10\n\x0cINT8_DATASET\x10\x02\x12\x0e\n\nAH_DATASET\x10\x03\x12\x10\n\x0cTOKENIZATION\x10\x04\x12\x1f\n\x1bREORDERING_INT8_MULTIPLIERS\x10\x05\x12 \n\x1c\x42RUTE_FORCE_INT8_MULTIPLIERS\x10\x06\x12\x0e\n\nAH_CENTERS\x10\x07\x12\x0f\n\x0bPARTITIONER\x10\x08\x12\x0f\n\x0b\x44\x41TASET_NPY\x10\t\x12\x14\n\x10INT8_DATASET_NPY\x10\n\x12\x12\n\x0e\x41H_DATASET_NPY\x10\x0b\x12\x17\n\x13\x41H_DATASET_SOAR_NPY\x10\x10\x12\x14\n\x10TOKENIZATION_NPY\x10\x0c\x12\x18\n\x14INT8_MULTIPLIERS_NPY\x10\r\x12\x12\n\x0eINT8_NORMS_NPY\x10\x0e\x12\x14\n\x10\x42\x46\x31\x36_DATASET_NPY\x10\x0f\"[\n\x0bScannAssets\x12*\n\x06\x61ssets\x18\x01 \x03(\x0b\x32\x1a.research_scann.ScannAsset\x12 \n\x12trained_on_the_fly\x18\x02 \x01(\x08:\x04true')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'scann.scann_ops.scann_assets_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _SCANNASSET._serialized_start=55
  _SCANNASSET._serialized_end=520
  _SCANNASSET_ASSETTYPE._serialized_start=148
  _SCANNASSET_ASSETTYPE._serialized_end=520
  _SCANNASSETS._serialized_start=522
  _SCANNASSETS._serialized_end=613
# @@protoc_insertion_point(module_scope)
