name: Tests And Linting

on:
  pull_request:
  merge_group:
  push:
    branches:
      - main
      - v1.51

env:
  UV_LOCKED: 1

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: Install Pre-Commit
        run: python -m pip install pre-commit

      - name: Load cached Pre-Commit Dependencies
        id: cached-pre-commit-dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit-4|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Execute Pre-Commit
        run: pre-commit run --show-diff-on-failure --color=always --all-files

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
          allow-prereleases: true

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.6"
          enable-cache: true

      - name: Run mypy
        run: uv run mypy

  test:
    name: "test (${{ matrix.python-version }})"
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    uses: ./.github/workflows/test.yaml
    with:
      coverage: ${{ (matrix.python-version == '3.12' || matrix.python-version == '3.8') }}
      python-version: ${{ matrix.python-version }}

  # add an aggregate step here to check if any of the steps of the matrix 'test' job
  # failed. this allows us to have dynamic or diverging steps in the matrix, while still
  # being able to mark the 'test' step as a required check for a PR to be considered
  # mergeable, without having to specify each individual matrix item.
  test_success:
    needs: test
    # ensure this step always runs
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Report success or fail
        run: exit ${{ needs.test.result == 'success' && '0' || '1' }}

  upload-test-coverage:
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data*
          merge-multiple: true

      - name: Combine coverage files
        run: |
          python -Im pip install coverage covdefaults
          python -Im coverage combine
          python -Im coverage xml -i

      - name: Fix coverage file name
        run: sed -i "s/home\/runner\/work\/niekkeijzer\/litestar-oidc/github\/workspace/g" coverage.xml

      #- name: Upload coverage reports to Codecov
      #  uses: codecov/codecov-action@v5
      #  with:
      #    files: coverage.xml
      #    token: ${{ secrets.CODECOV_TOKEN }}
