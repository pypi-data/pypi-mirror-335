#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
.. module:: {{ modname }}
.. moduleauthor:: {{ config['author'] }}
.. created:: {{ creation_date.strftime('%B %Y') }}

Module containing all SQLAlchemy classes.
'''

from sqlalchemy.orm import sessionmaker
from sqlalchemy import (
    create_engine,
    Column, String, Integer,
    Date, ForeignKey
)
# from sqlalchemy import (BigInteger, SmallInteger, Float,
#                         Boolean, DateTime, Table)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
# from sqlalchemy.exc import IntegrityError
# from sqlalchemy.sql import select, func, and_

__version__ = '0.0'

Base = declarative_base()


class StatusType(Base):
    '''The `status_types` Table contains possible statuses
    '''
    __tablename__ = 'status_types'

    status_id = Column(Integer, primary_key=True)
    status_name = Column(String(32), nullable=False, unique=True)


class User(Base):
    '''The `users` Table contains all users and their information.
    '''
    __tablename__ = 'users'

    user_id = Column(Integer, primary_key=True)
    name = Column(String(50), nullable=False)
    account_creation_date = Column(Date)

    status_id = Column(Integer, ForeignKey('status_types.status_id'))
    status = relationship(StatusType)

if __name__ == '__main__':

    #     import sys
    #     def usage(exit_status):
    #         msg = '\n ... \n'
    #
    #         print(msg)
    #         sys.exit(exit_status)
    #
    #     import getopt
    #
    #    # parse command line options/arguments
    #     try:
    #         opts, args = getopt.getopt(sys.argv[1:],
    #                                    'hd:', ['help', 'dir='])
    #     except getopt.GetoptError:
    #         usage(3)
    #
    #     for opt, arg in opts:
    #         if opt in ('-h', '--help'):
    #             usage(0)
    #         if opt in ('-d', '--dir'):
    #             thedir = arg

    engine = create_engine('sqlite:///test.sqlite')
    Base.metadata.create_all(engine)

    Session = sessionmaker(bind=engine)
    session = Session()

    obj = StatusType(status_name='Active')
    session.add(obj)
    session.commit()
