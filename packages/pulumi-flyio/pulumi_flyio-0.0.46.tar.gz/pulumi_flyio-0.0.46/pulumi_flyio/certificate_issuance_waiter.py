# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from . import time as _time

__all__ = ['CertificateIssuanceWaiterArgs', 'CertificateIssuanceWaiter']

@pulumi.input_type
class CertificateIssuanceWaiterArgs:
    def __init__(__self__, *,
                 app: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 timeout: pulumi.Input[int]):
        """
        The set of arguments for constructing a CertificateIssuanceWaiter resource.
        :param pulumi.Input[str] app: The name of the Fly app that the certificate is associated with.
        :param pulumi.Input[str] hostname: The hostname for the certificate (e.g., example.com).
        :param pulumi.Input[int] timeout: The maximum time to wait for the certificate to be fully issued. Formatted like 5s, 5m, etc.
        """
        pulumi.set(__self__, "app", app)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def app(self) -> pulumi.Input[str]:
        """
        The name of the Fly app that the certificate is associated with.
        """
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: pulumi.Input[str]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        """
        The hostname for the certificate (e.g., example.com).
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Input[int]:
        """
        The maximum time to wait for the certificate to be fully issued. Formatted like 5s, 5m, etc.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "timeout", value)


class CertificateIssuanceWaiter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        A component that waits for a Fly.io SSL/TLS certificate to be fully issued.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app: The name of the Fly app that the certificate is associated with.
        :param pulumi.Input[str] hostname: The hostname for the certificate (e.g., example.com).
        :param pulumi.Input[int] timeout: The maximum time to wait for the certificate to be fully issued. Formatted like 5s, 5m, etc.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CertificateIssuanceWaiterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A component that waits for a Fly.io SSL/TLS certificate to be fully issued.

        :param str resource_name: The name of the resource.
        :param CertificateIssuanceWaiterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CertificateIssuanceWaiterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CertificateIssuanceWaiterArgs.__new__(CertificateIssuanceWaiterArgs)

            if app is None and not opts.urn:
                raise TypeError("Missing required property 'app'")
            __props__.__dict__["app"] = app
            if hostname is None and not opts.urn:
                raise TypeError("Missing required property 'hostname'")
            __props__.__dict__["hostname"] = hostname
            if timeout is None and not opts.urn:
                raise TypeError("Missing required property 'timeout'")
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["certificate_authority"] = None
            __props__.__dict__["certificate_id"] = None
            __props__.__dict__["client_status"] = None
            __props__.__dict__["ecdsa_expires_at"] = None
            __props__.__dict__["input"] = None
            __props__.__dict__["is_fully_issued"] = None
            __props__.__dict__["issued_at"] = None
            __props__.__dict__["rsa_expires_at"] = None
        super(CertificateIssuanceWaiter, __self__).__init__(
            'flyio:index:CertificateIssuanceWaiter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CertificateIssuanceWaiter':
        """
        Get an existing CertificateIssuanceWaiter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CertificateIssuanceWaiterArgs.__new__(CertificateIssuanceWaiterArgs)

        __props__.__dict__["app"] = None
        __props__.__dict__["certificate_authority"] = None
        __props__.__dict__["certificate_id"] = None
        __props__.__dict__["client_status"] = None
        __props__.__dict__["ecdsa_expires_at"] = None
        __props__.__dict__["hostname"] = None
        __props__.__dict__["input"] = None
        __props__.__dict__["is_fully_issued"] = None
        __props__.__dict__["issued_at"] = None
        __props__.__dict__["rsa_expires_at"] = None
        __props__.__dict__["timeout"] = None
        return CertificateIssuanceWaiter(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def app(self) -> pulumi.Output[str]:
        """
        The name of the Fly app.
        """
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> pulumi.Output[str]:
        """
        The certificate authority used.
        """
        return pulumi.get(self, "certificate_authority")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[str]:
        """
        The Fly.io certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="clientStatus")
    def client_status(self) -> pulumi.Output[str]:
        """
        The status of the certificate.
        """
        return pulumi.get(self, "client_status")

    @property
    @pulumi.getter(name="ecdsaExpiresAt")
    def ecdsa_expires_at(self) -> pulumi.Output[Optional['_time.outputs.Time']]:
        """
        Expiration time for the ECDSA certificate.
        """
        return pulumi.get(self, "ecdsa_expires_at")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        """
        The hostname for the certificate.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def input(self) -> pulumi.Output['outputs.CertificateIssuanceWaiterArgs']:
        """
        The input arguments used for the certificate issuance waiter.
        """
        return pulumi.get(self, "input")

    @property
    @pulumi.getter(name="isFullyIssued")
    def is_fully_issued(self) -> pulumi.Output[bool]:
        """
        Whether the certificate is fully issued (has both ECDSA and RSA certificates).
        """
        return pulumi.get(self, "is_fully_issued")

    @property
    @pulumi.getter(name="issuedAt")
    def issued_at(self) -> pulumi.Output['_time.outputs.Time']:
        """
        When the certificate was fully issued.
        """
        return pulumi.get(self, "issued_at")

    @property
    @pulumi.getter(name="rsaExpiresAt")
    def rsa_expires_at(self) -> pulumi.Output[Optional['_time.outputs.Time']]:
        """
        Expiration time for the RSA certificate.
        """
        return pulumi.get(self, "rsa_expires_at")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[int]:
        """
        The timeout duration used for waiting.
        """
        return pulumi.get(self, "timeout")

