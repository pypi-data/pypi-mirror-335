# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import flyio as _flyio
from . import outputs

__all__ = ['MachineArgs', 'Machine']

@pulumi.input_type
class MachineArgs:
    def __init__(__self__, *,
                 app: pulumi.Input[str],
                 config: pulumi.Input['_flyio.FlyMachineConfigArgs'],
                 deployment_strategy: Optional[pulumi.Input[str]] = None,
                 lease_ttl: Optional[pulumi.Input[int]] = None,
                 lsvd: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 skip_launch: Optional[pulumi.Input[bool]] = None,
                 skip_service_registration: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Machine resource.
        :param pulumi.Input[str] app: The Fly.io application to deploy the machine to.
        :param pulumi.Input[str] deployment_strategy: The deployment strategy for the machine.
        """
        pulumi.set(__self__, "app", app)
        pulumi.set(__self__, "config", config)
        if deployment_strategy is not None:
            pulumi.set(__self__, "deployment_strategy", deployment_strategy)
        if lease_ttl is not None:
            pulumi.set(__self__, "lease_ttl", lease_ttl)
        if lsvd is not None:
            pulumi.set(__self__, "lsvd", lsvd)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if skip_launch is not None:
            pulumi.set(__self__, "skip_launch", skip_launch)
        if skip_service_registration is not None:
            pulumi.set(__self__, "skip_service_registration", skip_service_registration)

    @property
    @pulumi.getter
    def app(self) -> pulumi.Input[str]:
        """
        The Fly.io application to deploy the machine to.
        """
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: pulumi.Input[str]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Input['_flyio.FlyMachineConfigArgs']:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input['_flyio.FlyMachineConfigArgs']):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="deploymentStrategy")
    def deployment_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        The deployment strategy for the machine.
        """
        return pulumi.get(self, "deployment_strategy")

    @deployment_strategy.setter
    def deployment_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_strategy", value)

    @property
    @pulumi.getter(name="leaseTtl")
    def lease_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lease_ttl")

    @lease_ttl.setter
    def lease_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lease_ttl", value)

    @property
    @pulumi.getter
    def lsvd(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "lsvd")

    @lsvd.setter
    def lsvd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lsvd", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="skipLaunch")
    def skip_launch(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_launch")

    @skip_launch.setter
    def skip_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_launch", value)

    @property
    @pulumi.getter(name="skipServiceRegistration")
    def skip_service_registration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_service_registration")

    @skip_service_registration.setter
    def skip_service_registration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_service_registration", value)


class Machine(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[Union['_flyio.FlyMachineConfigArgs', '_flyio.FlyMachineConfigArgsDict']]] = None,
                 deployment_strategy: Optional[pulumi.Input[str]] = None,
                 lease_ttl: Optional[pulumi.Input[int]] = None,
                 lsvd: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 skip_launch: Optional[pulumi.Input[bool]] = None,
                 skip_service_registration: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        A Fly.io machine represents a VM instance that runs your application.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app: The Fly.io application to deploy the machine to.
        :param pulumi.Input[str] deployment_strategy: The deployment strategy for the machine.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MachineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Fly.io machine represents a VM instance that runs your application.

        :param str resource_name: The name of the resource.
        :param MachineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MachineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[Union['_flyio.FlyMachineConfigArgs', '_flyio.FlyMachineConfigArgsDict']]] = None,
                 deployment_strategy: Optional[pulumi.Input[str]] = None,
                 lease_ttl: Optional[pulumi.Input[int]] = None,
                 lsvd: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 skip_launch: Optional[pulumi.Input[bool]] = None,
                 skip_service_registration: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MachineArgs.__new__(MachineArgs)

            if app is None and not opts.urn:
                raise TypeError("Missing required property 'app'")
            __props__.__dict__["app"] = app
            if config is None and not opts.urn:
                raise TypeError("Missing required property 'config'")
            __props__.__dict__["config"] = config
            __props__.__dict__["deployment_strategy"] = deployment_strategy
            __props__.__dict__["lease_ttl"] = lease_ttl
            __props__.__dict__["lsvd"] = lsvd
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["skip_launch"] = skip_launch
            __props__.__dict__["skip_service_registration"] = skip_service_registration
            __props__.__dict__["checks"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["events"] = None
            __props__.__dict__["fly_id"] = None
            __props__.__dict__["host_status"] = None
            __props__.__dict__["image_ref"] = None
            __props__.__dict__["incomplete_config"] = None
            __props__.__dict__["input"] = None
            __props__.__dict__["instance_id"] = None
            __props__.__dict__["nonce"] = None
            __props__.__dict__["private_ip"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["updated_at"] = None
        super(Machine, __self__).__init__(
            'flyio:index:Machine',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Machine':
        """
        Get an existing Machine resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = MachineArgs.__new__(MachineArgs)

        __props__.__dict__["app"] = None
        __props__.__dict__["checks"] = None
        __props__.__dict__["config"] = None
        __props__.__dict__["created_at"] = None
        __props__.__dict__["deployment_strategy"] = None
        __props__.__dict__["events"] = None
        __props__.__dict__["fly_id"] = None
        __props__.__dict__["host_status"] = None
        __props__.__dict__["image_ref"] = None
        __props__.__dict__["incomplete_config"] = None
        __props__.__dict__["input"] = None
        __props__.__dict__["instance_id"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["nonce"] = None
        __props__.__dict__["private_ip"] = None
        __props__.__dict__["region"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["updated_at"] = None
        return Machine(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def app(self) -> pulumi.Output[str]:
        """
        The Fly.io application the machine belongs to.
        """
        return pulumi.get(self, "app")

    @property
    @pulumi.getter
    def checks(self) -> pulumi.Output[Optional[Sequence['_flyio.outputs.CheckStatus']]]:
        return pulumi.get(self, "checks")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output['_flyio.outputs.FlyMachineConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deploymentStrategy")
    def deployment_strategy(self) -> pulumi.Output[Optional[str]]:
        """
        The deployment strategy used for the machine.
        """
        return pulumi.get(self, "deployment_strategy")

    @property
    @pulumi.getter
    def events(self) -> pulumi.Output[Optional[Sequence['_flyio.outputs.MachineEvent']]]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="flyId")
    def fly_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fly_id")

    @property
    @pulumi.getter(name="hostStatus")
    def host_status(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "host_status")

    @property
    @pulumi.getter(name="imageRef")
    def image_ref(self) -> pulumi.Output[Optional['_flyio.outputs.ImageRef']]:
        return pulumi.get(self, "image_ref")

    @property
    @pulumi.getter(name="incompleteConfig")
    def incomplete_config(self) -> pulumi.Output[Optional['_flyio.outputs.FlyMachineConfig']]:
        return pulumi.get(self, "incomplete_config")

    @property
    @pulumi.getter
    def input(self) -> pulumi.Output['outputs.MachineArgs']:
        """
        The input arguments used to create the machine.
        """
        return pulumi.get(self, "input")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nonce(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "nonce")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "updated_at")

