# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class StaticRouteParams(BaseModel):
    """
    Specifies the static route parameters.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Specifies a description of the Static Route.")
    destination_network: Optional[StrictStr] = Field(description="Specifies the destination network of the Static Route.", alias="destinationNetwork")
    id: Optional[StrictStr] = Field(default=None, description="Specifies the unique identifier for the route.")
    interface: Optional[StrictStr] = Field(default=None, description="Specifies the network interface name to use for communicating with the destination network.")
    interface_group: Optional[StrictStr] = Field(description="Specifies the network interfaces name to use for communicating with the destination network.", alias="interfaceGroup")
    mtu: Optional[StrictInt] = Field(default=None, description="Specifies MTU setting per route.")
    next_hop: Optional[StrictStr] = Field(description="Specifies the next hop to the destination network.", alias="nextHop")
    node_group_name: Optional[StrictStr] = Field(default=None, description="Specifies the network node group to represent a group of nodes.", alias="nodeGroupName")
    __properties: ClassVar[List[str]] = ["description", "destinationNetwork", "id", "interface", "interfaceGroup", "mtu", "nextHop", "nodeGroupName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StaticRouteParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if destination_network (nullable) is None
        # and model_fields_set contains the field
        if self.destination_network is None and "destination_network" in self.model_fields_set:
            _dict['destinationNetwork'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if interface (nullable) is None
        # and model_fields_set contains the field
        if self.interface is None and "interface" in self.model_fields_set:
            _dict['interface'] = None

        # set to None if interface_group (nullable) is None
        # and model_fields_set contains the field
        if self.interface_group is None and "interface_group" in self.model_fields_set:
            _dict['interfaceGroup'] = None

        # set to None if mtu (nullable) is None
        # and model_fields_set contains the field
        if self.mtu is None and "mtu" in self.model_fields_set:
            _dict['mtu'] = None

        # set to None if next_hop (nullable) is None
        # and model_fields_set contains the field
        if self.next_hop is None and "next_hop" in self.model_fields_set:
            _dict['nextHop'] = None

        # set to None if node_group_name (nullable) is None
        # and model_fields_set contains the field
        if self.node_group_name is None and "node_group_name" in self.model_fields_set:
            _dict['nodeGroupName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StaticRouteParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "destinationNetwork": obj.get("destinationNetwork"),
            "id": obj.get("id"),
            "interface": obj.get("interface"),
            "interfaceGroup": obj.get("interfaceGroup"),
            "mtu": obj.get("mtu"),
            "nextHop": obj.get("nextHop"),
            "nodeGroupName": obj.get("nodeGroupName")
        })
        return _obj


