# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self

class CancelProtectionGroupRunRequest(BaseModel):
    """
    Specifies the request to cancel a protection run.
    """ # noqa: E501
    archival_task_id: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="Specifies the task id of the archival run.", alias="archivalTaskId")
    cloud_spin_task_id: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="Specifies the task id of the cloudSpin run.", alias="cloudSpinTaskId")
    local_task_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Specifies the task id of the local run.", alias="localTaskId")
    object_ids: Optional[List[StrictInt]] = Field(default=None, description="List of entity ids for which we need to cancel the backup tasks. If this is provided it will not cancel the complete run but will cancel only subset of backup tasks (if backup tasks are cancelled correspoding copy task will also get cancelled). If the backup tasks are completed successfully it will not cancel those backup tasks.", alias="objectIds")
    replication_task_id: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="Specifies the task id of the replication run.", alias="replicationTaskId")
    run_id: Optional[Annotated[str, Field(strict=True)]] = Field(description="Specifies a unique run id of the Protection Group run.", alias="runId")
    __properties: ClassVar[List[str]] = ["archivalTaskId", "cloudSpinTaskId", "localTaskId", "objectIds", "replicationTaskId", "runId"]

    @field_validator('local_task_id')
    def local_task_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+:\d+:\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+:\d+:\d+$/")
        return value

    @field_validator('run_id')
    def run_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+:\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+:\d+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CancelProtectionGroupRunRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if archival_task_id (nullable) is None
        # and model_fields_set contains the field
        if self.archival_task_id is None and "archival_task_id" in self.model_fields_set:
            _dict['archivalTaskId'] = None

        # set to None if cloud_spin_task_id (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_spin_task_id is None and "cloud_spin_task_id" in self.model_fields_set:
            _dict['cloudSpinTaskId'] = None

        # set to None if local_task_id (nullable) is None
        # and model_fields_set contains the field
        if self.local_task_id is None and "local_task_id" in self.model_fields_set:
            _dict['localTaskId'] = None

        # set to None if object_ids (nullable) is None
        # and model_fields_set contains the field
        if self.object_ids is None and "object_ids" in self.model_fields_set:
            _dict['objectIds'] = None

        # set to None if replication_task_id (nullable) is None
        # and model_fields_set contains the field
        if self.replication_task_id is None and "replication_task_id" in self.model_fields_set:
            _dict['replicationTaskId'] = None

        # set to None if run_id (nullable) is None
        # and model_fields_set contains the field
        if self.run_id is None and "run_id" in self.model_fields_set:
            _dict['runId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CancelProtectionGroupRunRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archivalTaskId": obj.get("archivalTaskId"),
            "cloudSpinTaskId": obj.get("cloudSpinTaskId"),
            "localTaskId": obj.get("localTaskId"),
            "objectIds": obj.get("objectIds"),
            "replicationTaskId": obj.get("replicationTaskId"),
            "runId": obj.get("runId")
        })
        return _obj


