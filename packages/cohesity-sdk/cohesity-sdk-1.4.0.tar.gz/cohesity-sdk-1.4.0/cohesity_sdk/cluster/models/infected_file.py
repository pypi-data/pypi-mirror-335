# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class InfectedFile(BaseModel):
    """
    Specifies an infected file.
    """ # noqa: E501
    antivirus_service_group_name: Optional[StrictStr] = Field(default=None, description="Specifies the Antivirus Service group which detected the threats.", alias="antivirusServiceGroupName")
    antivirus_service_icap_uri: Optional[StrictStr] = Field(default=None, description="Specifies the ICAP Uri of the Antivirus Service which detected the threats.", alias="antivirusServiceIcapUri")
    detected_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the timestamp in microseconds when the threats were detected.", alias="detectedTimeUsecs")
    entity_id: Optional[StrictInt] = Field(description="Specifies the entity id of the infected file.", alias="entityId")
    last_modified_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the timestamp in microseconds when this file was last modified.", alias="lastModifiedTimeUsecs")
    path: Optional[StrictStr] = Field(default=None, description="Specifies the infected file path.")
    root_inode_id: Optional[StrictInt] = Field(description="Specifies the root inode id of the file system which the infected file belongs to.", alias="rootInodeId")
    scanned_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the timestamp in microseconds when inode was scanned for viruses.", alias="scannedTimeUsecs")
    state: Optional[StrictStr] = Field(default=None, description="Specifies the state of the infected file.")
    threat_descriptions: Optional[List[StrictStr]] = Field(default=None, description="Specifies a list of virus threat descriptions found in the file.", alias="threatDescriptions")
    view_id: Optional[StrictInt] = Field(description="Specifies the view id which the infected file belongs to.", alias="viewId")
    view_name: Optional[StrictStr] = Field(default=None, description="Specifies the View name to which the infected file belongs to.", alias="viewName")
    __properties: ClassVar[List[str]] = ["antivirusServiceGroupName", "antivirusServiceIcapUri", "detectedTimeUsecs", "entityId", "lastModifiedTimeUsecs", "path", "rootInodeId", "scannedTimeUsecs", "state", "threatDescriptions", "viewId", "viewName"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Quarantined', 'Unquarantined']):
            raise ValueError("must be one of enum values ('Quarantined', 'Unquarantined')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InfectedFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if antivirus_service_group_name (nullable) is None
        # and model_fields_set contains the field
        if self.antivirus_service_group_name is None and "antivirus_service_group_name" in self.model_fields_set:
            _dict['antivirusServiceGroupName'] = None

        # set to None if antivirus_service_icap_uri (nullable) is None
        # and model_fields_set contains the field
        if self.antivirus_service_icap_uri is None and "antivirus_service_icap_uri" in self.model_fields_set:
            _dict['antivirusServiceIcapUri'] = None

        # set to None if detected_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.detected_time_usecs is None and "detected_time_usecs" in self.model_fields_set:
            _dict['detectedTimeUsecs'] = None

        # set to None if entity_id (nullable) is None
        # and model_fields_set contains the field
        if self.entity_id is None and "entity_id" in self.model_fields_set:
            _dict['entityId'] = None

        # set to None if last_modified_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_time_usecs is None and "last_modified_time_usecs" in self.model_fields_set:
            _dict['lastModifiedTimeUsecs'] = None

        # set to None if path (nullable) is None
        # and model_fields_set contains the field
        if self.path is None and "path" in self.model_fields_set:
            _dict['path'] = None

        # set to None if root_inode_id (nullable) is None
        # and model_fields_set contains the field
        if self.root_inode_id is None and "root_inode_id" in self.model_fields_set:
            _dict['rootInodeId'] = None

        # set to None if scanned_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.scanned_time_usecs is None and "scanned_time_usecs" in self.model_fields_set:
            _dict['scannedTimeUsecs'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if threat_descriptions (nullable) is None
        # and model_fields_set contains the field
        if self.threat_descriptions is None and "threat_descriptions" in self.model_fields_set:
            _dict['threatDescriptions'] = None

        # set to None if view_id (nullable) is None
        # and model_fields_set contains the field
        if self.view_id is None and "view_id" in self.model_fields_set:
            _dict['viewId'] = None

        # set to None if view_name (nullable) is None
        # and model_fields_set contains the field
        if self.view_name is None and "view_name" in self.model_fields_set:
            _dict['viewName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InfectedFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "antivirusServiceGroupName": obj.get("antivirusServiceGroupName"),
            "antivirusServiceIcapUri": obj.get("antivirusServiceIcapUri"),
            "detectedTimeUsecs": obj.get("detectedTimeUsecs"),
            "entityId": obj.get("entityId"),
            "lastModifiedTimeUsecs": obj.get("lastModifiedTimeUsecs"),
            "path": obj.get("path"),
            "rootInodeId": obj.get("rootInodeId"),
            "scannedTimeUsecs": obj.get("scannedTimeUsecs"),
            "state": obj.get("state"),
            "threatDescriptions": obj.get("threatDescriptions"),
            "viewId": obj.get("viewId"),
            "viewName": obj.get("viewName")
        })
        return _obj


