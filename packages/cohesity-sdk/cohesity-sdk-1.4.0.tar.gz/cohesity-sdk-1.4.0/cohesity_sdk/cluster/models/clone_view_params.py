# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.nis_netgroups import NisNetgroups
from cohesity_sdk.cluster.models.qo_s import QoS
from cohesity_sdk.cluster.models.storage_policy_override import StoragePolicyOverride
from cohesity_sdk.cluster.models.subnet import Subnet
from cohesity_sdk.cluster.models.view_protocol import ViewProtocol
from typing import Set
from typing_extensions import Self

class CloneViewParams(BaseModel):
    """
    Specifies the parameters to clone a View.
    """ # noqa: E501
    data_lock_expiry_usecs: Optional[StrictInt] = Field(default=None, description="DataLock (Write Once Read Many) lock expiry epoch time in microseconds. If a view is marked as a DataLock view, only a Data Security Officer (a user having Data Security Privilege) can delete the view until the lock expiry time.", alias="dataLockExpiryUsecs")
    description: Optional[StrictStr] = Field(default=None, description="Specifies the description of the cloned View.")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Specifies if the view is a read only view. User will no longer be able to write to this view if this is set to true.", alias="isReadOnly")
    name: Optional[StrictStr] = Field(description="Specifies the name of the cloned View.")
    netgroup_whitelist: Optional[NisNetgroups] = Field(default=None, alias="netgroupWhitelist")
    protocol_access: Optional[List[ViewProtocol]] = Field(default=None, description="Specifies the supported Protocols for the View.", alias="protocolAccess")
    qos: Optional[QoS] = None
    storage_policy_override: Optional[StoragePolicyOverride] = Field(default=None, alias="storagePolicyOverride")
    subnet_whitelist: Optional[List[Subnet]] = Field(default=None, description="Array of Subnets. Specifies a list of Subnets with IP addresses that have permissions to access the View. (Overrides or extends the Subnets specified at the global Cohesity Cluster level.)", alias="subnetWhitelist")
    __properties: ClassVar[List[str]] = ["dataLockExpiryUsecs", "description", "isReadOnly", "name", "netgroupWhitelist", "protocolAccess", "qos", "storagePolicyOverride", "subnetWhitelist"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloneViewParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of netgroup_whitelist
        if self.netgroup_whitelist:
            _dict['netgroupWhitelist'] = self.netgroup_whitelist.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in protocol_access (list)
        _items = []
        if self.protocol_access:
            for _item_protocol_access in self.protocol_access:
                if _item_protocol_access:
                    _items.append(_item_protocol_access.to_dict())
            _dict['protocolAccess'] = _items
        # override the default output from pydantic by calling `to_dict()` of qos
        if self.qos:
            _dict['qos'] = self.qos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_policy_override
        if self.storage_policy_override:
            _dict['storagePolicyOverride'] = self.storage_policy_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subnet_whitelist (list)
        _items = []
        if self.subnet_whitelist:
            for _item_subnet_whitelist in self.subnet_whitelist:
                if _item_subnet_whitelist:
                    _items.append(_item_subnet_whitelist.to_dict())
            _dict['subnetWhitelist'] = _items
        # set to None if data_lock_expiry_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.data_lock_expiry_usecs is None and "data_lock_expiry_usecs" in self.model_fields_set:
            _dict['dataLockExpiryUsecs'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if is_read_only (nullable) is None
        # and model_fields_set contains the field
        if self.is_read_only is None and "is_read_only" in self.model_fields_set:
            _dict['isReadOnly'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if protocol_access (nullable) is None
        # and model_fields_set contains the field
        if self.protocol_access is None and "protocol_access" in self.model_fields_set:
            _dict['protocolAccess'] = None

        # set to None if storage_policy_override (nullable) is None
        # and model_fields_set contains the field
        if self.storage_policy_override is None and "storage_policy_override" in self.model_fields_set:
            _dict['storagePolicyOverride'] = None

        # set to None if subnet_whitelist (nullable) is None
        # and model_fields_set contains the field
        if self.subnet_whitelist is None and "subnet_whitelist" in self.model_fields_set:
            _dict['subnetWhitelist'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloneViewParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataLockExpiryUsecs": obj.get("dataLockExpiryUsecs"),
            "description": obj.get("description"),
            "isReadOnly": obj.get("isReadOnly"),
            "name": obj.get("name"),
            "netgroupWhitelist": NisNetgroups.from_dict(obj["netgroupWhitelist"]) if obj.get("netgroupWhitelist") is not None else None,
            "protocolAccess": [ViewProtocol.from_dict(_item) for _item in obj["protocolAccess"]] if obj.get("protocolAccess") is not None else None,
            "qos": QoS.from_dict(obj["qos"]) if obj.get("qos") is not None else None,
            "storagePolicyOverride": StoragePolicyOverride.from_dict(obj["storagePolicyOverride"]) if obj.get("storagePolicyOverride") is not None else None,
            "subnetWhitelist": [Subnet.from_dict(_item) for _item in obj["subnetWhitelist"]] if obj.get("subnetWhitelist") is not None else None
        })
        return _obj


