# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.run_archival_config import RunArchivalConfig
from cohesity_sdk.cluster.models.run_cloud_replication_config import RunCloudReplicationConfig
from cohesity_sdk.cluster.models.run_replication_config import RunReplicationConfig
from typing import Set
from typing_extensions import Self

class RunTargetsConfiguration(BaseModel):
    """
    Specifies the replication and archival targets.
    """ # noqa: E501
    archivals: Optional[List[RunArchivalConfig]] = Field(default=None, description="Specifies a list of archival targets configurations.")
    cloud_replications: Optional[List[RunCloudReplicationConfig]] = Field(default=None, description="Specifies a list of cloud replication targets configurations.", alias="cloudReplications")
    replications: Optional[List[RunReplicationConfig]] = Field(default=None, description="Specifies a list of replication targets configurations.")
    use_policy_defaults: Optional[StrictBool] = Field(default=False, description="Specifies whether to use default policy settings or not. If specified as true then 'replications' and 'arcihvals' should not be specified. In case of true value, replicatioan targets congfigured in the policy will be added internally.", alias="usePolicyDefaults")
    __properties: ClassVar[List[str]] = ["archivals", "cloudReplications", "replications", "usePolicyDefaults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunTargetsConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in archivals (list)
        _items = []
        if self.archivals:
            for _item_archivals in self.archivals:
                if _item_archivals:
                    _items.append(_item_archivals.to_dict())
            _dict['archivals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cloud_replications (list)
        _items = []
        if self.cloud_replications:
            for _item_cloud_replications in self.cloud_replications:
                if _item_cloud_replications:
                    _items.append(_item_cloud_replications.to_dict())
            _dict['cloudReplications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in replications (list)
        _items = []
        if self.replications:
            for _item_replications in self.replications:
                if _item_replications:
                    _items.append(_item_replications.to_dict())
            _dict['replications'] = _items
        # set to None if archivals (nullable) is None
        # and model_fields_set contains the field
        if self.archivals is None and "archivals" in self.model_fields_set:
            _dict['archivals'] = None

        # set to None if cloud_replications (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_replications is None and "cloud_replications" in self.model_fields_set:
            _dict['cloudReplications'] = None

        # set to None if replications (nullable) is None
        # and model_fields_set contains the field
        if self.replications is None and "replications" in self.model_fields_set:
            _dict['replications'] = None

        # set to None if use_policy_defaults (nullable) is None
        # and model_fields_set contains the field
        if self.use_policy_defaults is None and "use_policy_defaults" in self.model_fields_set:
            _dict['usePolicyDefaults'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunTargetsConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archivals": [RunArchivalConfig.from_dict(_item) for _item in obj["archivals"]] if obj.get("archivals") is not None else None,
            "cloudReplications": [RunCloudReplicationConfig.from_dict(_item) for _item in obj["cloudReplications"]] if obj.get("cloudReplications") is not None else None,
            "replications": [RunReplicationConfig.from_dict(_item) for _item in obj["replications"]] if obj.get("replications") is not None else None,
            "usePolicyDefaults": obj.get("usePolicyDefaults") if obj.get("usePolicyDefaults") is not None else False
        })
        return _obj


