# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class IamRoleAwsCredentials(BaseModel):
    """
    Specifies the credentials to register a commercial AWS
    """ # noqa: E501
    cp_iam_role_arn: Optional[StrictStr] = Field(default=None, description="This is only applicable in case of DMaaS. Control plane IAM role ARN, this is first assumed by the dataplane(cluster). Then we assume the iam_role_arn which is tenant's IAM role with all required permissions.", alias="cpIamRoleArn")
    iam_role_arn: Optional[StrictStr] = Field(description="Specifies the IAM role which will be used to access the security credentials required for API calls. This should have all the permissions required for the tenant's use case. In case of DMaaS this will be the Tenant's IAM role ARN. This is assumed only after the cp_iam_role_arn(control plane role) is assumed", alias="iamRoleArn")
    __properties: ClassVar[List[str]] = ["cpIamRoleArn", "iamRoleArn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IamRoleAwsCredentials from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cp_iam_role_arn (nullable) is None
        # and model_fields_set contains the field
        if self.cp_iam_role_arn is None and "cp_iam_role_arn" in self.model_fields_set:
            _dict['cpIamRoleArn'] = None

        # set to None if iam_role_arn (nullable) is None
        # and model_fields_set contains the field
        if self.iam_role_arn is None and "iam_role_arn" in self.model_fields_set:
            _dict['iamRoleArn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IamRoleAwsCredentials from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpIamRoleArn": obj.get("cpIamRoleArn"),
            "iamRoleArn": obj.get("iamRoleArn")
        })
        return _obj


