# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class UpdateObjectSnapshotRequest(BaseModel):
    """
    Specifies the parameters to update an object snapshot.
    """ # noqa: E501
    data_lock_type: Optional[StrictStr] = Field(default=None, description="Specifies the snapshot data lock type.", alias="dataLockType")
    expiry_time_secs: Optional[StrictInt] = Field(default=None, description="Specifies the expiry time of the snapshot in Unix timestamp epoch in seconds.", alias="expiryTimeSecs")
    set_legal_hold: Optional[StrictBool] = Field(default=None, description="Whether to set the snapshot on legal hold. If set to true, the run cannot be deleted during the retention period.", alias="setLegalHold")
    __properties: ClassVar[List[str]] = ["dataLockType", "expiryTimeSecs", "setLegalHold"]

    @field_validator('data_lock_type')
    def data_lock_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Compliance', 'Administrative']):
            raise ValueError("must be one of enum values ('Compliance', 'Administrative')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateObjectSnapshotRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if data_lock_type (nullable) is None
        # and model_fields_set contains the field
        if self.data_lock_type is None and "data_lock_type" in self.model_fields_set:
            _dict['dataLockType'] = None

        # set to None if expiry_time_secs (nullable) is None
        # and model_fields_set contains the field
        if self.expiry_time_secs is None and "expiry_time_secs" in self.model_fields_set:
            _dict['expiryTimeSecs'] = None

        # set to None if set_legal_hold (nullable) is None
        # and model_fields_set contains the field
        if self.set_legal_hold is None and "set_legal_hold" in self.model_fields_set:
            _dict['setLegalHold'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateObjectSnapshotRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataLockType": obj.get("dataLockType"),
            "expiryTimeSecs": obj.get("expiryTimeSecs"),
            "setLegalHold": obj.get("setLegalHold")
        })
        return _obj


