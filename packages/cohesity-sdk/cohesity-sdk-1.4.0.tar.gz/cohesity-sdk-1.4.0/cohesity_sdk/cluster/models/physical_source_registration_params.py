# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class PhysicalSourceRegistrationParams(BaseModel):
    """
    Specifies parameters to register physical server.
    """ # noqa: E501
    applications: Optional[List[StrictStr]] = Field(default=None, description="Specifies the list of applications to be registered with Physical Source.")
    endpoint: StrictStr = Field(description="Specifies the endpoint IPaddress, URL or hostname of the physical host.")
    force_register: Optional[StrictBool] = Field(default=None, description="The agent running on a physical host will fail the registration if it is already registered as part of another cluster. By setting this option to true, agent can be forced to register with the current cluster.", alias="forceRegister")
    host_type: Optional[StrictStr] = Field(default=None, description="Specifies the type of host.", alias="hostType")
    physical_type: Optional[StrictStr] = Field(default=None, description="Specifies the type of physical server.", alias="physicalType")
    __properties: ClassVar[List[str]] = ["applications", "endpoint", "forceRegister", "hostType", "physicalType"]

    @field_validator('applications')
    def applications_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['kSQL', 'kOracle']):
                raise ValueError("each list item must be one of ('kSQL', 'kOracle')")
        return value

    @field_validator('host_type')
    def host_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kLinux', 'kWindows', 'kAix', 'kSolaris', 'kSapHana', 'kOther', 'kHPUX', 'kVOS']):
            raise ValueError("must be one of enum values ('kLinux', 'kWindows', 'kAix', 'kSolaris', 'kSapHana', 'kOther', 'kHPUX', 'kVOS')")
        return value

    @field_validator('physical_type')
    def physical_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kGroup', 'kHost', 'kWindowsCluster', 'kOracleRACCluster', 'kOracleAPCluster']):
            raise ValueError("must be one of enum values ('kGroup', 'kHost', 'kWindowsCluster', 'kOracleRACCluster', 'kOracleAPCluster')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PhysicalSourceRegistrationParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if applications (nullable) is None
        # and model_fields_set contains the field
        if self.applications is None and "applications" in self.model_fields_set:
            _dict['applications'] = None

        # set to None if force_register (nullable) is None
        # and model_fields_set contains the field
        if self.force_register is None and "force_register" in self.model_fields_set:
            _dict['forceRegister'] = None

        # set to None if host_type (nullable) is None
        # and model_fields_set contains the field
        if self.host_type is None and "host_type" in self.model_fields_set:
            _dict['hostType'] = None

        # set to None if physical_type (nullable) is None
        # and model_fields_set contains the field
        if self.physical_type is None and "physical_type" in self.model_fields_set:
            _dict['physicalType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PhysicalSourceRegistrationParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applications": obj.get("applications"),
            "endpoint": obj.get("endpoint"),
            "forceRegister": obj.get("forceRegister"),
            "hostType": obj.get("hostType"),
            "physicalType": obj.get("physicalType")
        })
        return _obj


