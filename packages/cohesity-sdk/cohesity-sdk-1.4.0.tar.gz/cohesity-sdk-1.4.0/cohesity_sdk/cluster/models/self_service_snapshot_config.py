# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class SelfServiceSnapshotConfig(BaseModel):
    """
    Specifies the self service snapshot config of a view.
    """ # noqa: E501
    allow_access_sids: Optional[List[StrictStr]] = Field(default=None, description="Specifies a list of sids who has access to the snapshots.", alias="allowAccessSids")
    alternate_snapshot_directory_name: Optional[StrictStr] = Field(default=None, description="Specifies the alternate directory name for the snapshots. If it is not set, this feature for SMB protocol will not work.", alias="alternateSnapshotDirectoryName")
    deny_access_sids: Optional[List[StrictStr]] = Field(default=None, description="Specifies a list of sids who does not have access to the snapshots. This field overrides 'allowAccessSids'.", alias="denyAccessSids")
    enabled: Optional[StrictBool] = Field(default=None, description="Specifies if self service snapshot feature is enabled. If this is set to true, the feature will also be enabled for NFS protocol. This field is deprecated.")
    nfs_access_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if self service snapshot feature is enabled for NFS protocol.", alias="nfsAccessEnabled")
    previous_versions_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if previouse versions feature is enabled with SMB protocol.", alias="previousVersionsEnabled")
    smb_access_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if self service snapshot feature is enabled for SMB protocol.", alias="smbAccessEnabled")
    snapshot_directory_name: Optional[StrictStr] = Field(default=None, description="Specifies the directory name for the snapshots.", alias="snapshotDirectoryName")
    __properties: ClassVar[List[str]] = ["allowAccessSids", "alternateSnapshotDirectoryName", "denyAccessSids", "enabled", "nfsAccessEnabled", "previousVersionsEnabled", "smbAccessEnabled", "snapshotDirectoryName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SelfServiceSnapshotConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if alternate_snapshot_directory_name (nullable) is None
        # and model_fields_set contains the field
        if self.alternate_snapshot_directory_name is None and "alternate_snapshot_directory_name" in self.model_fields_set:
            _dict['alternateSnapshotDirectoryName'] = None

        # set to None if enabled (nullable) is None
        # and model_fields_set contains the field
        if self.enabled is None and "enabled" in self.model_fields_set:
            _dict['enabled'] = None

        # set to None if nfs_access_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.nfs_access_enabled is None and "nfs_access_enabled" in self.model_fields_set:
            _dict['nfsAccessEnabled'] = None

        # set to None if previous_versions_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.previous_versions_enabled is None and "previous_versions_enabled" in self.model_fields_set:
            _dict['previousVersionsEnabled'] = None

        # set to None if smb_access_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.smb_access_enabled is None and "smb_access_enabled" in self.model_fields_set:
            _dict['smbAccessEnabled'] = None

        # set to None if snapshot_directory_name (nullable) is None
        # and model_fields_set contains the field
        if self.snapshot_directory_name is None and "snapshot_directory_name" in self.model_fields_set:
            _dict['snapshotDirectoryName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SelfServiceSnapshotConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowAccessSids": obj.get("allowAccessSids"),
            "alternateSnapshotDirectoryName": obj.get("alternateSnapshotDirectoryName"),
            "denyAccessSids": obj.get("denyAccessSids"),
            "enabled": obj.get("enabled"),
            "nfsAccessEnabled": obj.get("nfsAccessEnabled"),
            "previousVersionsEnabled": obj.get("previousVersionsEnabled"),
            "smbAccessEnabled": obj.get("smbAccessEnabled"),
            "snapshotDirectoryName": obj.get("snapshotDirectoryName")
        })
        return _obj


