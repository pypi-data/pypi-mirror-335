# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.device_tree_node import DeviceTreeNode
from typing import Set
from typing_extensions import Self

class LogicalVolumeInfo(BaseModel):
    """
    Specifies the logical volume info for LVM or LDM volume.
    """ # noqa: E501
    device_tree: Optional[DeviceTreeNode] = Field(default=None, alias="deviceTree")
    logical_volume_name: Optional[StrictStr] = Field(default=None, description="Specifies the logical volume name.", alias="logicalVolumeName")
    logical_volume_uuid: Optional[StrictStr] = Field(default=None, description="Specifies the logical volume uuid.", alias="logicalVolumeUuid")
    volume_group_name: Optional[StrictStr] = Field(default=None, description="Specifies the volume group name.", alias="volumeGroupName")
    volume_group_uuid: Optional[StrictStr] = Field(default=None, description="Specifies the volume group uuid.", alias="volumeGroupUuid")
    __properties: ClassVar[List[str]] = ["deviceTree", "logicalVolumeName", "logicalVolumeUuid", "volumeGroupName", "volumeGroupUuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogicalVolumeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device_tree
        if self.device_tree:
            _dict['deviceTree'] = self.device_tree.to_dict()
        # set to None if logical_volume_name (nullable) is None
        # and model_fields_set contains the field
        if self.logical_volume_name is None and "logical_volume_name" in self.model_fields_set:
            _dict['logicalVolumeName'] = None

        # set to None if logical_volume_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.logical_volume_uuid is None and "logical_volume_uuid" in self.model_fields_set:
            _dict['logicalVolumeUuid'] = None

        # set to None if volume_group_name (nullable) is None
        # and model_fields_set contains the field
        if self.volume_group_name is None and "volume_group_name" in self.model_fields_set:
            _dict['volumeGroupName'] = None

        # set to None if volume_group_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.volume_group_uuid is None and "volume_group_uuid" in self.model_fields_set:
            _dict['volumeGroupUuid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogicalVolumeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceTree": DeviceTreeNode.from_dict(obj["deviceTree"]) if obj.get("deviceTree") is not None else None,
            "logicalVolumeName": obj.get("logicalVolumeName"),
            "logicalVolumeUuid": obj.get("logicalVolumeUuid"),
            "volumeGroupName": obj.get("volumeGroupName"),
            "volumeGroupUuid": obj.get("volumeGroupUuid")
        })
        return _obj


