# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.cancel_object_run_params import CancelObjectRunParams
from typing import Set
from typing_extensions import Self

class CancelObjectRunsParams(BaseModel):
    """
    Request to cancel object runs.
    """ # noqa: E501
    object_id: Optional[StrictInt] = Field(description="Specifies object id", alias="objectId")
    runs_config: Optional[List[CancelObjectRunParams]] = Field(default=None, description="Specifies a list of runs to cancel. If no runs are specified, then all the outstanding runs will be canceled.", alias="runsConfig")
    snapshot_backend_types: Optional[List[StrictStr]] = Field(default=None, description="Specifies the protections type on which action to be performed. This is used when an object is protected by multiple protection types. If not specified action will be performed on all protection types.", alias="snapshotBackendTypes")
    __properties: ClassVar[List[str]] = ["objectId", "runsConfig", "snapshotBackendTypes"]

    @field_validator('snapshot_backend_types')
    def snapshot_backend_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['kAWSNative', 'kAWSSnapshotManager', 'kPhysical', 'kSQL', 'kOracle', 'kRDSSnapshotManager', 'kAuroraSnapshotManager', 'kAwsS3', 'kAwsRDSPostgresBackup', 'kAzureNative', 'kAzureSnapshotManager', 'kAzureSQL']):
                raise ValueError("each list item must be one of ('kAWSNative', 'kAWSSnapshotManager', 'kPhysical', 'kSQL', 'kOracle', 'kRDSSnapshotManager', 'kAuroraSnapshotManager', 'kAwsS3', 'kAwsRDSPostgresBackup', 'kAzureNative', 'kAzureSnapshotManager', 'kAzureSQL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CancelObjectRunsParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in runs_config (list)
        _items = []
        if self.runs_config:
            for _item_runs_config in self.runs_config:
                if _item_runs_config:
                    _items.append(_item_runs_config.to_dict())
            _dict['runsConfig'] = _items
        # set to None if object_id (nullable) is None
        # and model_fields_set contains the field
        if self.object_id is None and "object_id" in self.model_fields_set:
            _dict['objectId'] = None

        # set to None if runs_config (nullable) is None
        # and model_fields_set contains the field
        if self.runs_config is None and "runs_config" in self.model_fields_set:
            _dict['runsConfig'] = None

        # set to None if snapshot_backend_types (nullable) is None
        # and model_fields_set contains the field
        if self.snapshot_backend_types is None and "snapshot_backend_types" in self.model_fields_set:
            _dict['snapshotBackendTypes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CancelObjectRunsParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "objectId": obj.get("objectId"),
            "runsConfig": [CancelObjectRunParams.from_dict(_item) for _item in obj["runsConfig"]] if obj.get("runsConfig") is not None else None,
            "snapshotBackendTypes": obj.get("snapshotBackendTypes")
        })
        return _obj


