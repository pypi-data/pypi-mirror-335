# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.recovered_or_cloned_vms_rename_config import RecoveredOrClonedVmsRenameConfig
from cohesity_sdk.cluster.models.recovery_vlan_config import RecoveryVlanConfig
from cohesity_sdk.cluster.models.vmware_v_app_template_recovery_target_config import VmwareVAppTemplateRecoveryTargetConfig
from typing import Set
from typing_extensions import Self

class VmwareTargetParamsForRecoverVAppTemplate(BaseModel):
    """
    Specifies the parameters for a VMware recovery target when recovering a vApp Template.
    """ # noqa: E501
    attempt_differential_restore: Optional[StrictBool] = Field(default=None, description="Specifies whether to attempt differential restore.", alias="attemptDifferentialRestore")
    continue_on_error: Optional[StrictBool] = Field(default=None, description="Specifies whether to continue recovering other vms if one of vms failed to recover. Default value is false.", alias="continueOnError")
    disk_provision_type: Optional[StrictStr] = Field(default=None, description="Specifies the Virtual Disk Provisioning Policies for Vmware VM", alias="diskProvisionType")
    enable_nbdssl_fallback: Optional[StrictBool] = Field(default=None, description="If this field is set to true and SAN transport recovery fails, then recovery will fallback to use NBDSSL transport. This field only applies if 'leverageSanTransport' is set to true.", alias="enableNBDSSLFallback")
    leverage_san_transport: Optional[StrictBool] = Field(default=None, description="Specifies whether to enable SAN transport for copy recovery or not", alias="leverageSanTransport")
    recovery_process_type: Optional[StrictStr] = Field(default=None, description="Specifies type of Recovery Process to be used. InstantRecovery/CopyRecovery etc... Default value is InstantRecovery.", alias="recoveryProcessType")
    recovery_target_config: Optional[VmwareVAppTemplateRecoveryTargetConfig] = Field(default=None, alias="recoveryTargetConfig")
    rename_recovered_v_app_template_params: Optional[RecoveredOrClonedVmsRenameConfig] = Field(default=None, alias="renameRecoveredVAppTemplateParams")
    rename_recovered_vms_params: Optional[RecoveredOrClonedVmsRenameConfig] = Field(default=None, alias="renameRecoveredVmsParams")
    vlan_config: Optional[RecoveryVlanConfig] = Field(default=None, alias="vlanConfig")
    __properties: ClassVar[List[str]] = ["attemptDifferentialRestore", "continueOnError", "diskProvisionType", "enableNBDSSLFallback", "leverageSanTransport", "recoveryProcessType", "recoveryTargetConfig", "renameRecoveredVAppTemplateParams", "renameRecoveredVmsParams", "vlanConfig"]

    @field_validator('disk_provision_type')
    def disk_provision_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kThickLazyZeroed', 'kThickEagerZero', 'kThin', 'kBackedUpDiskType', 'originalBackUpDisk']):
            raise ValueError("must be one of enum values ('kThickLazyZeroed', 'kThickEagerZero', 'kThin', 'kBackedUpDiskType', 'originalBackUpDisk')")
        return value

    @field_validator('recovery_process_type')
    def recovery_process_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['InstantRecovery', 'CopyRecovery']):
            raise ValueError("must be one of enum values ('InstantRecovery', 'CopyRecovery')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmwareTargetParamsForRecoverVAppTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of recovery_target_config
        if self.recovery_target_config:
            _dict['recoveryTargetConfig'] = self.recovery_target_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rename_recovered_v_app_template_params
        if self.rename_recovered_v_app_template_params:
            _dict['renameRecoveredVAppTemplateParams'] = self.rename_recovered_v_app_template_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rename_recovered_vms_params
        if self.rename_recovered_vms_params:
            _dict['renameRecoveredVmsParams'] = self.rename_recovered_vms_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vlan_config
        if self.vlan_config:
            _dict['vlanConfig'] = self.vlan_config.to_dict()
        # set to None if attempt_differential_restore (nullable) is None
        # and model_fields_set contains the field
        if self.attempt_differential_restore is None and "attempt_differential_restore" in self.model_fields_set:
            _dict['attemptDifferentialRestore'] = None

        # set to None if continue_on_error (nullable) is None
        # and model_fields_set contains the field
        if self.continue_on_error is None and "continue_on_error" in self.model_fields_set:
            _dict['continueOnError'] = None

        # set to None if disk_provision_type (nullable) is None
        # and model_fields_set contains the field
        if self.disk_provision_type is None and "disk_provision_type" in self.model_fields_set:
            _dict['diskProvisionType'] = None

        # set to None if enable_nbdssl_fallback (nullable) is None
        # and model_fields_set contains the field
        if self.enable_nbdssl_fallback is None and "enable_nbdssl_fallback" in self.model_fields_set:
            _dict['enableNBDSSLFallback'] = None

        # set to None if leverage_san_transport (nullable) is None
        # and model_fields_set contains the field
        if self.leverage_san_transport is None and "leverage_san_transport" in self.model_fields_set:
            _dict['leverageSanTransport'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmwareTargetParamsForRecoverVAppTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attemptDifferentialRestore": obj.get("attemptDifferentialRestore"),
            "continueOnError": obj.get("continueOnError"),
            "diskProvisionType": obj.get("diskProvisionType"),
            "enableNBDSSLFallback": obj.get("enableNBDSSLFallback"),
            "leverageSanTransport": obj.get("leverageSanTransport"),
            "recoveryProcessType": obj.get("recoveryProcessType"),
            "recoveryTargetConfig": VmwareVAppTemplateRecoveryTargetConfig.from_dict(obj["recoveryTargetConfig"]) if obj.get("recoveryTargetConfig") is not None else None,
            "renameRecoveredVAppTemplateParams": RecoveredOrClonedVmsRenameConfig.from_dict(obj["renameRecoveredVAppTemplateParams"]) if obj.get("renameRecoveredVAppTemplateParams") is not None else None,
            "renameRecoveredVmsParams": RecoveredOrClonedVmsRenameConfig.from_dict(obj["renameRecoveredVmsParams"]) if obj.get("renameRecoveredVmsParams") is not None else None,
            "vlanConfig": RecoveryVlanConfig.from_dict(obj["vlanConfig"]) if obj.get("vlanConfig") is not None else None
        })
        return _obj


