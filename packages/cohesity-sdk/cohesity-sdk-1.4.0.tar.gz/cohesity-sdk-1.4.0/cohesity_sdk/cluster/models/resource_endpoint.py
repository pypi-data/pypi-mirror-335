# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class ResourceEndpoint(BaseModel):
    """
    Specifies the details about the resource endpoint.
    """ # noqa: E501
    fqdn: Optional[StrictStr] = Field(default=None, description="Specifies the fqdn of this endpoint.")
    ipv4addr: Optional[StrictStr] = Field(default=None, description="Specifies the ipv4 address of this endpoint.")
    ipv6addr: Optional[StrictStr] = Field(default=None, description="Specifies the ipv6 address of this endpoint.")
    is_preferred_endpoint: Optional[StrictBool] = Field(default=None, description="Whether to use this endpoint to connect.", alias="isPreferredEndpoint")
    preferred_address: Optional[StrictStr] = Field(default=None, description="Specifies the preferred address to use for connecting.", alias="preferredAddress")
    subnet_ip4addr: Optional[StrictStr] = Field(default=None, description="Specifies the subnet Ip4 address of this endpoint.", alias="subnetIp4addr")
    __properties: ClassVar[List[str]] = ["fqdn", "ipv4addr", "ipv6addr", "isPreferredEndpoint", "preferredAddress", "subnetIp4addr"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceEndpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if fqdn (nullable) is None
        # and model_fields_set contains the field
        if self.fqdn is None and "fqdn" in self.model_fields_set:
            _dict['fqdn'] = None

        # set to None if ipv4addr (nullable) is None
        # and model_fields_set contains the field
        if self.ipv4addr is None and "ipv4addr" in self.model_fields_set:
            _dict['ipv4addr'] = None

        # set to None if ipv6addr (nullable) is None
        # and model_fields_set contains the field
        if self.ipv6addr is None and "ipv6addr" in self.model_fields_set:
            _dict['ipv6addr'] = None

        # set to None if is_preferred_endpoint (nullable) is None
        # and model_fields_set contains the field
        if self.is_preferred_endpoint is None and "is_preferred_endpoint" in self.model_fields_set:
            _dict['isPreferredEndpoint'] = None

        # set to None if preferred_address (nullable) is None
        # and model_fields_set contains the field
        if self.preferred_address is None and "preferred_address" in self.model_fields_set:
            _dict['preferredAddress'] = None

        # set to None if subnet_ip4addr (nullable) is None
        # and model_fields_set contains the field
        if self.subnet_ip4addr is None and "subnet_ip4addr" in self.model_fields_set:
            _dict['subnetIp4addr'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceEndpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fqdn": obj.get("fqdn"),
            "ipv4addr": obj.get("ipv4addr"),
            "ipv6addr": obj.get("ipv6addr"),
            "isPreferredEndpoint": obj.get("isPreferredEndpoint"),
            "preferredAddress": obj.get("preferredAddress"),
            "subnetIp4addr": obj.get("subnetIp4addr")
        })
        return _obj


