# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class NetappRecoverFileAndFolderInfo(BaseModel):
    """
    Specifies the info about the netapp files and folders to be recovered.
    """ # noqa: E501
    absolute_path: Optional[StrictStr] = Field(description="Specifies the absolute path to the file or folder.", alias="absolutePath")
    destination_dir: Optional[StrictStr] = Field(default=None, description="Specifies the destination directory where the file/directory was copied.", alias="destinationDir")
    is_directory: Optional[StrictBool] = Field(default=None, description="Specifies whether this is a directory or not.", alias="isDirectory")
    is_view_file_recovery: Optional[StrictBool] = Field(default=None, description="Specify if the recovery is of type view file/folder.", alias="isViewFileRecovery")
    messages: Optional[List[StrictStr]] = Field(default=None, description="Specify error messages about the file during recovery.")
    status: Optional[StrictStr] = Field(default=None, description="Specifies the recovery status for this file or folder.")
    inode_id: Optional[StrictInt] = Field(default=None, description="Specifies the source inode number of the file being recovered.", alias="inodeId")
    __properties: ClassVar[List[str]] = ["absolutePath", "destinationDir", "isDirectory", "isViewFileRecovery", "messages", "status", "inodeId"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotStarted', 'EstimationInProgress', 'EstimationDone', 'CopyInProgress', 'Finished']):
            raise ValueError("must be one of enum values ('NotStarted', 'EstimationInProgress', 'EstimationDone', 'CopyInProgress', 'Finished')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetappRecoverFileAndFolderInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "destination_dir",
            "messages",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if absolute_path (nullable) is None
        # and model_fields_set contains the field
        if self.absolute_path is None and "absolute_path" in self.model_fields_set:
            _dict['absolutePath'] = None

        # set to None if destination_dir (nullable) is None
        # and model_fields_set contains the field
        if self.destination_dir is None and "destination_dir" in self.model_fields_set:
            _dict['destinationDir'] = None

        # set to None if is_directory (nullable) is None
        # and model_fields_set contains the field
        if self.is_directory is None and "is_directory" in self.model_fields_set:
            _dict['isDirectory'] = None

        # set to None if is_view_file_recovery (nullable) is None
        # and model_fields_set contains the field
        if self.is_view_file_recovery is None and "is_view_file_recovery" in self.model_fields_set:
            _dict['isViewFileRecovery'] = None

        # set to None if messages (nullable) is None
        # and model_fields_set contains the field
        if self.messages is None and "messages" in self.model_fields_set:
            _dict['messages'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if inode_id (nullable) is None
        # and model_fields_set contains the field
        if self.inode_id is None and "inode_id" in self.model_fields_set:
            _dict['inodeId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetappRecoverFileAndFolderInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "absolutePath": obj.get("absolutePath"),
            "destinationDir": obj.get("destinationDir"),
            "isDirectory": obj.get("isDirectory"),
            "isViewFileRecovery": obj.get("isViewFileRecovery"),
            "messages": obj.get("messages"),
            "status": obj.get("status"),
            "inodeId": obj.get("inodeId")
        })
        return _obj


