# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.cdp_object_last_run_info import CdpObjectLastRunInfo
from typing import Set
from typing_extensions import Self

class VmwareCdpObject(BaseModel):
    """
    Specifies the VMware specific CDP object details.
    """ # noqa: E501
    allow_re_enable_cdp: Optional[StrictBool] = Field(default=None, description="Specifies if re-enabling CDP is allowed or not through UI without any job or policy update through API.", alias="allowReEnableCdp")
    cdp_enabled: Optional[StrictBool] = Field(default=None, description="Specifies whether CDP is currently active or not. CDP might have been active on this object before, but it might not be anymore.", alias="cdpEnabled")
    last_run_info: Optional[CdpObjectLastRunInfo] = Field(default=None, alias="lastRunInfo")
    protection_group_id: Optional[StrictStr] = Field(default=None, description="Specifies the protection group id to which this CDP object belongs.", alias="protectionGroupId")
    guardrails_error_message: Optional[StrictStr] = Field(default=None, description="Specifies the error message from the guardrails info from cdp state if any.", alias="guardrailsErrorMessage")
    io_filter_error_message: Optional[StrictStr] = Field(default=None, description="Specifies the error message related to IO filter if there is any.", alias="ioFilterErrorMessage")
    io_filter_status: Optional[StrictStr] = Field(default=None, description="Specifies the state of CDP IO filter. CDP IO filter is an agent which will be installed on the object for performing continuous backup. <br> 1. 'kNotInstalled' specifies that CDP is enabled on this object but filter is not installed. <br> 2. 'kInstallFilterInProgress' specifies that IO filter installation is triggered and in progress. <br> 3. 'kFilterInstalledIOInactive' specifies that IO filter is installed but IO streaming is disabled due to missing backup or explicitly disabled by the user. <br> 4. 'kIOActivationInProgress' specifies that IO filter is activated to start streaming. <br> 5. 'kIOActive' specifies that filter is attached to the object and started streaming. <br> 6. 'kIODeactivationInProgress' specifies that deactivation has been initiated to stop the IO streaming. <br> 7. 'kUninstallFilterInProgress' specifies that uninstallation of IO filter is in progress.", alias="ioFilterStatus")
    pre_processing_error_message: Optional[StrictStr] = Field(default=None, description="Specifies the error message from the cdp pre-processing stage if any.", alias="preProcessingErrorMessage")
    __properties: ClassVar[List[str]] = ["allowReEnableCdp", "cdpEnabled", "lastRunInfo", "protectionGroupId", "guardrailsErrorMessage", "ioFilterErrorMessage", "ioFilterStatus", "preProcessingErrorMessage"]

    @field_validator('io_filter_status')
    def io_filter_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotInstalled', 'InstallFilterInProgress', 'FilterInstalledIOInactive', 'FilterInstalled', 'IOInactive', 'IOActivationInProgress', 'IOActive', 'IODeactivationInProgress', 'UninstallFilterInProgress', 'UpgradeFilterInProgress', 'UpgradeFilterFailed', 'WaitingForCDPPolicyAttach']):
            raise ValueError("must be one of enum values ('NotInstalled', 'InstallFilterInProgress', 'FilterInstalledIOInactive', 'FilterInstalled', 'IOInactive', 'IOActivationInProgress', 'IOActive', 'IODeactivationInProgress', 'UninstallFilterInProgress', 'UpgradeFilterInProgress', 'UpgradeFilterFailed', 'WaitingForCDPPolicyAttach')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmwareCdpObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "protection_group_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_run_info
        if self.last_run_info:
            _dict['lastRunInfo'] = self.last_run_info.to_dict()
        # set to None if allow_re_enable_cdp (nullable) is None
        # and model_fields_set contains the field
        if self.allow_re_enable_cdp is None and "allow_re_enable_cdp" in self.model_fields_set:
            _dict['allowReEnableCdp'] = None

        # set to None if cdp_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.cdp_enabled is None and "cdp_enabled" in self.model_fields_set:
            _dict['cdpEnabled'] = None

        # set to None if protection_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.protection_group_id is None and "protection_group_id" in self.model_fields_set:
            _dict['protectionGroupId'] = None

        # set to None if guardrails_error_message (nullable) is None
        # and model_fields_set contains the field
        if self.guardrails_error_message is None and "guardrails_error_message" in self.model_fields_set:
            _dict['guardrailsErrorMessage'] = None

        # set to None if io_filter_error_message (nullable) is None
        # and model_fields_set contains the field
        if self.io_filter_error_message is None and "io_filter_error_message" in self.model_fields_set:
            _dict['ioFilterErrorMessage'] = None

        # set to None if io_filter_status (nullable) is None
        # and model_fields_set contains the field
        if self.io_filter_status is None and "io_filter_status" in self.model_fields_set:
            _dict['ioFilterStatus'] = None

        # set to None if pre_processing_error_message (nullable) is None
        # and model_fields_set contains the field
        if self.pre_processing_error_message is None and "pre_processing_error_message" in self.model_fields_set:
            _dict['preProcessingErrorMessage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmwareCdpObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowReEnableCdp": obj.get("allowReEnableCdp"),
            "cdpEnabled": obj.get("cdpEnabled"),
            "lastRunInfo": CdpObjectLastRunInfo.from_dict(obj["lastRunInfo"]) if obj.get("lastRunInfo") is not None else None,
            "protectionGroupId": obj.get("protectionGroupId"),
            "guardrailsErrorMessage": obj.get("guardrailsErrorMessage"),
            "ioFilterErrorMessage": obj.get("ioFilterErrorMessage"),
            "ioFilterStatus": obj.get("ioFilterStatus"),
            "preProcessingErrorMessage": obj.get("preProcessingErrorMessage")
        })
        return _obj


