# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class SyslogServer(BaseModel):
    """
    Specifies information about syslog server.
    """ # noqa: E501
    ca_certificate: Optional[StrictStr] = Field(default=None, description="Syslog server CA certificate.", alias="caCertificate")
    enabled: Optional[StrictBool] = Field(default=None, description="Specifies whether to enable the syslog server on the Cluster.")
    facility_list: Optional[List[StrictStr]] = Field(default=None, description="Send enabled syslog facilities related logs to logging server.", alias="facilityList")
    id: Optional[StrictInt] = Field(default=None, description="The id of the syslog server.")
    ip: Optional[StrictStr] = Field(default=None, description="Specifies the IP address or hostname of the syslog server.")
    is_tls_enabled: Optional[StrictBool] = Field(default=None, description="Specify whether to enable tls support.", alias="isTlsEnabled")
    msg_pattern_list: Optional[List[StrictStr]] = Field(default=None, description="Send logs including the msg patterns to logging server.", alias="msgPatternList")
    name: Optional[StrictStr] = Field(default=None, description="Specifies a unique name for the syslog server on the Cluster.")
    port: Optional[StrictInt] = Field(default=None, description="Specifies the port where the syslog server listens.")
    program_name_list: Optional[List[StrictStr]] = Field(default=None, description="Send programes related logs to logging server.", alias="programNameList")
    protocol: Optional[StrictStr] = Field(default=None, description="Specifies the protocol used to send the logs.")
    raw_msg_pattern_list: Optional[List[StrictStr]] = Field(default=None, description="Send logs including the msg patterns to logging server.", alias="rawMsgPatternList")
    token_id: Optional[StrictStr] = Field(default=None, description="TokenId used for filtering messages on a relay or collector", alias="tokenId")
    __properties: ClassVar[List[str]] = ["caCertificate", "enabled", "facilityList", "id", "ip", "isTlsEnabled", "msgPatternList", "name", "port", "programNameList", "protocol", "rawMsgPatternList", "tokenId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyslogServer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if ca_certificate (nullable) is None
        # and model_fields_set contains the field
        if self.ca_certificate is None and "ca_certificate" in self.model_fields_set:
            _dict['caCertificate'] = None

        # set to None if enabled (nullable) is None
        # and model_fields_set contains the field
        if self.enabled is None and "enabled" in self.model_fields_set:
            _dict['enabled'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if ip (nullable) is None
        # and model_fields_set contains the field
        if self.ip is None and "ip" in self.model_fields_set:
            _dict['ip'] = None

        # set to None if is_tls_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.is_tls_enabled is None and "is_tls_enabled" in self.model_fields_set:
            _dict['isTlsEnabled'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if port (nullable) is None
        # and model_fields_set contains the field
        if self.port is None and "port" in self.model_fields_set:
            _dict['port'] = None

        # set to None if protocol (nullable) is None
        # and model_fields_set contains the field
        if self.protocol is None and "protocol" in self.model_fields_set:
            _dict['protocol'] = None

        # set to None if token_id (nullable) is None
        # and model_fields_set contains the field
        if self.token_id is None and "token_id" in self.model_fields_set:
            _dict['tokenId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyslogServer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caCertificate": obj.get("caCertificate"),
            "enabled": obj.get("enabled"),
            "facilityList": obj.get("facilityList"),
            "id": obj.get("id"),
            "ip": obj.get("ip"),
            "isTlsEnabled": obj.get("isTlsEnabled"),
            "msgPatternList": obj.get("msgPatternList"),
            "name": obj.get("name"),
            "port": obj.get("port"),
            "programNameList": obj.get("programNameList"),
            "protocol": obj.get("protocol"),
            "rawMsgPatternList": obj.get("rawMsgPatternList"),
            "tokenId": obj.get("tokenId")
        })
        return _obj


