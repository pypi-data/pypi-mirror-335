# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self

class AddedActiveDirectoryPrincipal(BaseModel):
    """
    Specifies a group or user added to the Cohesity Cluster for an Active Directory principal.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Specifies a description about the user or group.")
    domain_name: Optional[Annotated[str, Field(strict=True)]] = Field(description="Specifies the domain of the Active Directory where the referenced principal is stored.", alias="domainName")
    name: Optional[StrictStr] = Field(description="Specifies the name of the Active Directory principal, that will be referenced by the group or user. The name of the Active Directory principal is used for naming the new group or user on the Cohesity Cluster.")
    object_class: Optional[StrictStr] = Field(description="Specifies the type of Active Directory principal.<br> 'User' specifies a user object class.<br> 'Group' specifies a group object class.<br> 'ServiceAccount' specifies a service account object class.", alias="objectClass")
    restricted: Optional[StrictBool] = Field(default=None, description="Whether the principal is a restricted principal. A restricted principal can only view the objects he has permissions to.")
    roles: Optional[List[StrictStr]] = Field(default=None, description="Specifies the Cohesity roles to associate with this user or group such as 'Admin', 'Ops' or 'View'. The Cohesity roles determine privileges on the Cohesity Cluster for this group or user. For example if the 'joe' user is added form the Active Directory and is associated with the Cohesity 'View' role,'joe' can log in to the Cohesity Dashboard and has a read-only view of the data on the Cohesity Cluster.")
    created_time_msecs: Optional[StrictInt] = Field(default=None, description="Specifies the epoch time in milliseconds when the group or user was added to the Cohesity Cluster.", alias="createdTimeMsecs")
    last_updated_time_msecs: Optional[StrictInt] = Field(default=None, description="Specifies the epoch time in milliseconds when the group or user was last modified on the Cohesity Cluster.", alias="lastUpdatedTimeMsecs")
    sid: Optional[StrictStr] = Field(default=None, description="Specifies the unique Security ID (SID) of the Active Directory principal associated with this group or user.")
    __properties: ClassVar[List[str]] = ["description", "domainName", "name", "objectClass", "restricted", "roles", "createdTimeMsecs", "lastUpdatedTimeMsecs", "sid"]

    @field_validator('domain_name')
    def domain_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9]))*$", value):
            raise ValueError(r"must validate the regular expression /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9]))*$/")
        return value

    @field_validator('object_class')
    def object_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['User', 'Group', 'Computer', 'WellKnownPrincipal', 'ServiceAccount']):
            raise ValueError("must be one of enum values ('User', 'Group', 'Computer', 'WellKnownPrincipal', 'ServiceAccount')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddedActiveDirectoryPrincipal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if domain_name (nullable) is None
        # and model_fields_set contains the field
        if self.domain_name is None and "domain_name" in self.model_fields_set:
            _dict['domainName'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if object_class (nullable) is None
        # and model_fields_set contains the field
        if self.object_class is None and "object_class" in self.model_fields_set:
            _dict['objectClass'] = None

        # set to None if restricted (nullable) is None
        # and model_fields_set contains the field
        if self.restricted is None and "restricted" in self.model_fields_set:
            _dict['restricted'] = None

        # set to None if roles (nullable) is None
        # and model_fields_set contains the field
        if self.roles is None and "roles" in self.model_fields_set:
            _dict['roles'] = None

        # set to None if created_time_msecs (nullable) is None
        # and model_fields_set contains the field
        if self.created_time_msecs is None and "created_time_msecs" in self.model_fields_set:
            _dict['createdTimeMsecs'] = None

        # set to None if last_updated_time_msecs (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated_time_msecs is None and "last_updated_time_msecs" in self.model_fields_set:
            _dict['lastUpdatedTimeMsecs'] = None

        # set to None if sid (nullable) is None
        # and model_fields_set contains the field
        if self.sid is None and "sid" in self.model_fields_set:
            _dict['sid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddedActiveDirectoryPrincipal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "domainName": obj.get("domainName"),
            "name": obj.get("name"),
            "objectClass": obj.get("objectClass"),
            "restricted": obj.get("restricted"),
            "roles": obj.get("roles"),
            "createdTimeMsecs": obj.get("createdTimeMsecs"),
            "lastUpdatedTimeMsecs": obj.get("lastUpdatedTimeMsecs"),
            "sid": obj.get("sid")
        })
        return _obj


