# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.audit_log_config import AuditLogConfig
from cohesity_sdk.cluster.models.cluster_audit_log_config import ClusterAuditLogConfig
from cohesity_sdk.cluster.models.cluster_create_network_config import ClusterCreateNetworkConfig
from cohesity_sdk.cluster.models.cluster_proxy_server_config import ClusterProxyServerConfig
from cohesity_sdk.cluster.models.rigel_cluster_config_params import RigelClusterConfigParams
from cohesity_sdk.cluster.models.views_global_settings import ViewsGlobalSettings
from typing import Set
from typing_extensions import Self

class Cluster(BaseModel):
    """
    Specifies the cluster details.
    """ # noqa: E501
    cluster_audit_log_config: Optional[ClusterAuditLogConfig] = Field(default=None, alias="clusterAuditLogConfig")
    cluster_size: Optional[StrictStr] = Field(default=None, description="Specifies the size of the cloud platforms.", alias="clusterSize")
    description: Optional[StrictStr] = Field(default=None, description="Description of the cluster.")
    enable_encryption: Optional[StrictBool] = Field(default=None, description="Specifies whether or not encryption is enabled. If encryption is enabled, all data on the Cluster will be encrypted.", alias="enableEncryption")
    file_services_audit_log_config: Optional[AuditLogConfig] = Field(default=None, alias="fileServicesAuditLogConfig")
    id: Optional[StrictInt] = Field(default=None, description="Specifies the cluster id of the new cluster.")
    incarnation_id: Optional[StrictInt] = Field(default=None, description="Specifies the incarnation id of the new cluster.", alias="incarnationId")
    local_tenant_id: Optional[StrictStr] = Field(default=None, description="Specifies the local tenant id. Only applicable on Helios.", alias="localTenantId")
    name: Optional[StrictStr] = Field(default=None, description="Name of the new cluster.")
    network_config: Optional[ClusterCreateNetworkConfig] = Field(default=None, alias="networkConfig")
    proxy_server_config: Optional[ClusterProxyServerConfig] = Field(default=None, alias="proxyServerConfig")
    region_id: Optional[StrictStr] = Field(default=None, description="Specifies the region id on which this cluster is present. Only applicable on Helios for DMaaS clusters.", alias="regionId")
    rigel_cluster_params: Optional[RigelClusterConfigParams] = Field(default=None, alias="rigelClusterParams")
    sw_version: Optional[StrictStr] = Field(default=None, description="Software version of the new cluster.", alias="swVersion")
    tenant_id: Optional[StrictStr] = Field(default=None, description="Specifies the globally unique tenant id. Only applicable on Helios.", alias="tenantId")
    type: Optional[StrictStr] = Field(default=None, description="Specifies the type of the new cluster.")
    views_global_settings: Optional[ViewsGlobalSettings] = Field(default=None, alias="viewsGlobalSettings")
    __properties: ClassVar[List[str]] = ["clusterAuditLogConfig", "clusterSize", "description", "enableEncryption", "fileServicesAuditLogConfig", "id", "incarnationId", "localTenantId", "name", "networkConfig", "proxyServerConfig", "regionId", "rigelClusterParams", "swVersion", "tenantId", "type", "viewsGlobalSettings"]

    @field_validator('cluster_size')
    def cluster_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Small', 'Medium', 'Large', 'XLarge', 'NextGen']):
            raise ValueError("must be one of enum values ('Small', 'Medium', 'Large', 'XLarge', 'NextGen')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Physical', 'Virtual', 'Cloud', 'Rigel', 'Unknown', 'HeliosOnPremVM']):
            raise ValueError("must be one of enum values ('Physical', 'Virtual', 'Cloud', 'Rigel', 'Unknown', 'HeliosOnPremVM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Cluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster_size",
            "enable_encryption",
            "id",
            "incarnation_id",
            "local_tenant_id",
            "region_id",
            "sw_version",
            "tenant_id",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cluster_audit_log_config
        if self.cluster_audit_log_config:
            _dict['clusterAuditLogConfig'] = self.cluster_audit_log_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_services_audit_log_config
        if self.file_services_audit_log_config:
            _dict['fileServicesAuditLogConfig'] = self.file_services_audit_log_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_config
        if self.network_config:
            _dict['networkConfig'] = self.network_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proxy_server_config
        if self.proxy_server_config:
            _dict['proxyServerConfig'] = self.proxy_server_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rigel_cluster_params
        if self.rigel_cluster_params:
            _dict['rigelClusterParams'] = self.rigel_cluster_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of views_global_settings
        if self.views_global_settings:
            _dict['viewsGlobalSettings'] = self.views_global_settings.to_dict()
        # set to None if cluster_size (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_size is None and "cluster_size" in self.model_fields_set:
            _dict['clusterSize'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if enable_encryption (nullable) is None
        # and model_fields_set contains the field
        if self.enable_encryption is None and "enable_encryption" in self.model_fields_set:
            _dict['enableEncryption'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if incarnation_id (nullable) is None
        # and model_fields_set contains the field
        if self.incarnation_id is None and "incarnation_id" in self.model_fields_set:
            _dict['incarnationId'] = None

        # set to None if local_tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.local_tenant_id is None and "local_tenant_id" in self.model_fields_set:
            _dict['localTenantId'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if proxy_server_config (nullable) is None
        # and model_fields_set contains the field
        if self.proxy_server_config is None and "proxy_server_config" in self.model_fields_set:
            _dict['proxyServerConfig'] = None

        # set to None if region_id (nullable) is None
        # and model_fields_set contains the field
        if self.region_id is None and "region_id" in self.model_fields_set:
            _dict['regionId'] = None

        # set to None if rigel_cluster_params (nullable) is None
        # and model_fields_set contains the field
        if self.rigel_cluster_params is None and "rigel_cluster_params" in self.model_fields_set:
            _dict['rigelClusterParams'] = None

        # set to None if sw_version (nullable) is None
        # and model_fields_set contains the field
        if self.sw_version is None and "sw_version" in self.model_fields_set:
            _dict['swVersion'] = None

        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenantId'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Cluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterAuditLogConfig": ClusterAuditLogConfig.from_dict(obj["clusterAuditLogConfig"]) if obj.get("clusterAuditLogConfig") is not None else None,
            "clusterSize": obj.get("clusterSize"),
            "description": obj.get("description"),
            "enableEncryption": obj.get("enableEncryption"),
            "fileServicesAuditLogConfig": AuditLogConfig.from_dict(obj["fileServicesAuditLogConfig"]) if obj.get("fileServicesAuditLogConfig") is not None else None,
            "id": obj.get("id"),
            "incarnationId": obj.get("incarnationId"),
            "localTenantId": obj.get("localTenantId"),
            "name": obj.get("name"),
            "networkConfig": ClusterCreateNetworkConfig.from_dict(obj["networkConfig"]) if obj.get("networkConfig") is not None else None,
            "proxyServerConfig": ClusterProxyServerConfig.from_dict(obj["proxyServerConfig"]) if obj.get("proxyServerConfig") is not None else None,
            "regionId": obj.get("regionId"),
            "rigelClusterParams": RigelClusterConfigParams.from_dict(obj["rigelClusterParams"]) if obj.get("rigelClusterParams") is not None else None,
            "swVersion": obj.get("swVersion"),
            "tenantId": obj.get("tenantId"),
            "type": obj.get("type"),
            "viewsGlobalSettings": ViewsGlobalSettings.from_dict(obj["viewsGlobalSettings"]) if obj.get("viewsGlobalSettings") is not None else None
        })
        return _obj


