# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class CassandraPortInfo(BaseModel):
    """
    Contains info about specific cassandra ports.
    """ # noqa: E501
    jmx_port: Optional[StrictInt] = Field(default=None, description="Cassandra management port.", alias="jmxPort")
    native_transport_port: Optional[StrictInt] = Field(default=None, description="Port for the CQL native transport.", alias="nativeTransportPort")
    rpc_port: Optional[StrictInt] = Field(default=None, description="Remote Procedure Call (RPC) port for general mechanism for client-server applications.", alias="rpcPort")
    ssl_storage_port: Optional[StrictInt] = Field(default=None, description="SSL port for encrypted communication. Internally used by the Cassandra bulk loader.", alias="sslStoragePort")
    storage_port: Optional[StrictInt] = Field(default=None, description="TCP port for data. Internally used by Cassandra bulk loader.", alias="storagePort")
    __properties: ClassVar[List[str]] = ["jmxPort", "nativeTransportPort", "rpcPort", "sslStoragePort", "storagePort"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CassandraPortInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if jmx_port (nullable) is None
        # and model_fields_set contains the field
        if self.jmx_port is None and "jmx_port" in self.model_fields_set:
            _dict['jmxPort'] = None

        # set to None if native_transport_port (nullable) is None
        # and model_fields_set contains the field
        if self.native_transport_port is None and "native_transport_port" in self.model_fields_set:
            _dict['nativeTransportPort'] = None

        # set to None if rpc_port (nullable) is None
        # and model_fields_set contains the field
        if self.rpc_port is None and "rpc_port" in self.model_fields_set:
            _dict['rpcPort'] = None

        # set to None if ssl_storage_port (nullable) is None
        # and model_fields_set contains the field
        if self.ssl_storage_port is None and "ssl_storage_port" in self.model_fields_set:
            _dict['sslStoragePort'] = None

        # set to None if storage_port (nullable) is None
        # and model_fields_set contains the field
        if self.storage_port is None and "storage_port" in self.model_fields_set:
            _dict['storagePort'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CassandraPortInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "jmxPort": obj.get("jmxPort"),
            "nativeTransportPort": obj.get("nativeTransportPort"),
            "rpcPort": obj.get("rpcPort"),
            "sslStoragePort": obj.get("sslStoragePort"),
            "storagePort": obj.get("storagePort")
        })
        return _obj


