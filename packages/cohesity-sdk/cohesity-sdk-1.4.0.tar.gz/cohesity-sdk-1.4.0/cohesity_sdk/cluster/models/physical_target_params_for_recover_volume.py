# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.recover_volume_mapping import RecoverVolumeMapping
from cohesity_sdk.cluster.models.recovery_object_identifier import RecoveryObjectIdentifier
from cohesity_sdk.cluster.models.recovery_vlan_config import RecoveryVlanConfig
from typing import Set
from typing_extensions import Self

class PhysicalTargetParamsForRecoverVolume(BaseModel):
    """
    Specifies the parameters for a physical recovery target.
    """ # noqa: E501
    force_unmount_volume: Optional[StrictBool] = Field(default=None, description="Specifies whether volume would be dismounted first during LockVolume failure. If not specified, default is false.", alias="forceUnmountVolume")
    mount_target: RecoveryObjectIdentifier = Field(alias="mountTarget")
    vlan_config: Optional[RecoveryVlanConfig] = Field(default=None, alias="vlanConfig")
    volume_mapping: Optional[List[RecoverVolumeMapping]] = Field(description="Specifies the mapping from source volumes to destination volumes.", alias="volumeMapping")
    __properties: ClassVar[List[str]] = ["forceUnmountVolume", "mountTarget", "vlanConfig", "volumeMapping"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PhysicalTargetParamsForRecoverVolume from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of mount_target
        if self.mount_target:
            _dict['mountTarget'] = self.mount_target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vlan_config
        if self.vlan_config:
            _dict['vlanConfig'] = self.vlan_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in volume_mapping (list)
        _items = []
        if self.volume_mapping:
            for _item_volume_mapping in self.volume_mapping:
                if _item_volume_mapping:
                    _items.append(_item_volume_mapping.to_dict())
            _dict['volumeMapping'] = _items
        # set to None if force_unmount_volume (nullable) is None
        # and model_fields_set contains the field
        if self.force_unmount_volume is None and "force_unmount_volume" in self.model_fields_set:
            _dict['forceUnmountVolume'] = None

        # set to None if volume_mapping (nullable) is None
        # and model_fields_set contains the field
        if self.volume_mapping is None and "volume_mapping" in self.model_fields_set:
            _dict['volumeMapping'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PhysicalTargetParamsForRecoverVolume from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "forceUnmountVolume": obj.get("forceUnmountVolume"),
            "mountTarget": RecoveryObjectIdentifier.from_dict(obj["mountTarget"]) if obj.get("mountTarget") is not None else None,
            "vlanConfig": RecoveryVlanConfig.from_dict(obj["vlanConfig"]) if obj.get("vlanConfig") is not None else None,
            "volumeMapping": [RecoverVolumeMapping.from_dict(_item) for _item in obj["volumeMapping"]] if obj.get("volumeMapping") is not None else None
        })
        return _obj


