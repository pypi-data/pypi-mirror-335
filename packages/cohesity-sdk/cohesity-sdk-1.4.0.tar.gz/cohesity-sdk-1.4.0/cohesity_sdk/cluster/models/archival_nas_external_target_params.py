# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class ArchivalNasExternalTargetParams(BaseModel):
    """
    Specifies the parameters which are specific to Nas related External Targets of archival purpose type.
    """ # noqa: E501
    host: Optional[StrictStr] = Field(description="Specifies the host of the NAS external target.")
    is_forever_incremental_archival_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if Forever Incremental Archival setting is enabled or not.", alias="isForeverIncrementalArchivalEnabled")
    is_incremental_archival_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if Incremental Archival setting is enabled or not.", alias="isIncrementalArchivalEnabled")
    kerberos_realm_name: Optional[StrictStr] = Field(default=None, description="Specifies the Kerberos realm name for a Kerberos-secured target.", alias="kerberosRealmName")
    mount_path: Optional[StrictStr] = Field(description="Specifies the mount path of the NAS external target.", alias="mountPath")
    nfs_security_type: Optional[StrictStr] = Field(default=None, description="Specifies the NFS security type of the target.", alias="nfsSecurityType")
    nfs_version_number: Optional[StrictStr] = Field(default=None, description="Specifies the NFS version number of the target.", alias="nfsVersionNumber")
    share_type: Optional[StrictStr] = Field(default=None, description="Specifies the share type of the NAS external target.", alias="shareType")
    source_side_deduplication: Optional[StrictBool] = Field(default=None, description="Specifies the Source Side Deduplication setting for the Nas external target", alias="sourceSideDeduplication")
    __properties: ClassVar[List[str]] = ["host", "isForeverIncrementalArchivalEnabled", "isIncrementalArchivalEnabled", "kerberosRealmName", "mountPath", "nfsSecurityType", "nfsVersionNumber", "shareType", "sourceSideDeduplication"]

    @field_validator('nfs_security_type')
    def nfs_security_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Default', 'None', 'System', 'KRB5', 'KRB5I', 'KRB5P']):
            raise ValueError("must be one of enum values ('Default', 'None', 'System', 'KRB5', 'KRB5I', 'KRB5P')")
        return value

    @field_validator('nfs_version_number')
    def nfs_version_number_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NFSv3', 'NFSv4', 'NFSv4_0', 'NFSv4_1', 'NFSv4_2']):
            raise ValueError("must be one of enum values ('NFSv3', 'NFSv4', 'NFSv4_0', 'NFSv4_1', 'NFSv4_2')")
        return value

    @field_validator('share_type')
    def share_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CIFS', 'NFS']):
            raise ValueError("must be one of enum values ('CIFS', 'NFS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArchivalNasExternalTargetParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "share_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if host (nullable) is None
        # and model_fields_set contains the field
        if self.host is None and "host" in self.model_fields_set:
            _dict['host'] = None

        # set to None if is_forever_incremental_archival_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.is_forever_incremental_archival_enabled is None and "is_forever_incremental_archival_enabled" in self.model_fields_set:
            _dict['isForeverIncrementalArchivalEnabled'] = None

        # set to None if is_incremental_archival_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.is_incremental_archival_enabled is None and "is_incremental_archival_enabled" in self.model_fields_set:
            _dict['isIncrementalArchivalEnabled'] = None

        # set to None if kerberos_realm_name (nullable) is None
        # and model_fields_set contains the field
        if self.kerberos_realm_name is None and "kerberos_realm_name" in self.model_fields_set:
            _dict['kerberosRealmName'] = None

        # set to None if mount_path (nullable) is None
        # and model_fields_set contains the field
        if self.mount_path is None and "mount_path" in self.model_fields_set:
            _dict['mountPath'] = None

        # set to None if nfs_security_type (nullable) is None
        # and model_fields_set contains the field
        if self.nfs_security_type is None and "nfs_security_type" in self.model_fields_set:
            _dict['nfsSecurityType'] = None

        # set to None if nfs_version_number (nullable) is None
        # and model_fields_set contains the field
        if self.nfs_version_number is None and "nfs_version_number" in self.model_fields_set:
            _dict['nfsVersionNumber'] = None

        # set to None if share_type (nullable) is None
        # and model_fields_set contains the field
        if self.share_type is None and "share_type" in self.model_fields_set:
            _dict['shareType'] = None

        # set to None if source_side_deduplication (nullable) is None
        # and model_fields_set contains the field
        if self.source_side_deduplication is None and "source_side_deduplication" in self.model_fields_set:
            _dict['sourceSideDeduplication'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArchivalNasExternalTargetParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "host": obj.get("host"),
            "isForeverIncrementalArchivalEnabled": obj.get("isForeverIncrementalArchivalEnabled"),
            "isIncrementalArchivalEnabled": obj.get("isIncrementalArchivalEnabled"),
            "kerberosRealmName": obj.get("kerberosRealmName"),
            "mountPath": obj.get("mountPath"),
            "nfsSecurityType": obj.get("nfsSecurityType"),
            "nfsVersionNumber": obj.get("nfsVersionNumber"),
            "shareType": obj.get("shareType"),
            "sourceSideDeduplication": obj.get("sourceSideDeduplication")
        })
        return _obj


