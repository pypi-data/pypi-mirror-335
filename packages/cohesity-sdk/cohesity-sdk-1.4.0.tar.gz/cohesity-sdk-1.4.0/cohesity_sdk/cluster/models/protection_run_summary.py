# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class ProtectionRunSummary(BaseModel):
    """
    Specifies the summary of a protection run.
    """ # noqa: E501
    bytes_written: Optional[StrictInt] = Field(default=None, description="Specifies total size of data in bytes written after taking backup.", alias="bytesWritten")
    end_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the end time of backup run in Unix epoch Timestamp(in microseconds).", alias="endTimeUsecs")
    environment: Optional[StrictStr] = Field(default=None, description="Specifies the environment type of the Protection Group.")
    id: Optional[StrictStr] = Field(default=None, description="Specifies the ID of the Protection Group run.")
    is_full_run: Optional[StrictBool] = Field(default=None, description="Specifies if the protection run is a full run.", alias="isFullRun")
    is_sla_violated: Optional[StrictBool] = Field(default=None, description="Indicated if SLA has been violated for this run.", alias="isSlaViolated")
    logical_size_bytes: Optional[StrictInt] = Field(default=None, description="Specifies total logical size of object(s) in bytes.", alias="logicalSizeBytes")
    protection_group_id: Optional[StrictStr] = Field(default=None, description="ProtectionGroupId to which this run belongs.", alias="protectionGroupId")
    protection_group_name: Optional[StrictStr] = Field(default=None, description="Name of the Protection Group to which this run belongs.", alias="protectionGroupName")
    start_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the start time of backup run in Unix epoch Timestamp(in microseconds).", alias="startTimeUsecs")
    status: Optional[StrictStr] = Field(default=None, description="Status of the backup run. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being canceled. 'Paused' indicates that the ongoing run has been paused. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages. 'Skipped' indicates that the run was skipped.")
    success_objects_count: Optional[StrictInt] = Field(default=None, description="Specifies the number of objects which are successfully protected in this run.", alias="successObjectsCount")
    total_objects_count: Optional[StrictInt] = Field(default=None, description="Specifies the total number of objects protected in this run.", alias="totalObjectsCount")
    __properties: ClassVar[List[str]] = ["bytesWritten", "endTimeUsecs", "environment", "id", "isFullRun", "isSlaViolated", "logicalSizeBytes", "protectionGroupId", "protectionGroupName", "startTimeUsecs", "status", "successObjectsCount", "totalObjectsCount"]

    @field_validator('environment')
    def environment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kVMware', 'kHyperV', 'kVCD', 'kAzure', 'kGCP', 'kKVM', 'kAcropolis', 'kAWS', 'kAWSNative', 'kAwsS3', 'kAWSSnapshotManager', 'kRDSSnapshotManager', 'kAuroraSnapshotManager', 'kAwsRDSPostgresBackup', 'kAzureNative', 'kAzureSQL', 'kAzureSnapshotManager', 'kPhysical', 'kPhysicalFiles', 'kGPFS', 'kElastifile', 'kNetapp', 'kGenericNas', 'kIsilon', 'kFlashBlade', 'kPure', 'kIbmFlashSystem', 'kSQL', 'kExchange', 'kAD', 'kOracle', 'kView', 'kRemoteAdapter', 'kO365', 'kO365PublicFolders', 'kO365Teams', 'kO365Group', 'kO365Exchange', 'kO365OneDrive', 'kO365Sharepoint', 'kKubernetes', 'kCassandra', 'kMongoDB', 'kCouchbase', 'kHdfs', 'kHive', 'kHBase', 'kUDA', 'kSfdc']):
            raise ValueError("must be one of enum values ('kVMware', 'kHyperV', 'kVCD', 'kAzure', 'kGCP', 'kKVM', 'kAcropolis', 'kAWS', 'kAWSNative', 'kAwsS3', 'kAWSSnapshotManager', 'kRDSSnapshotManager', 'kAuroraSnapshotManager', 'kAwsRDSPostgresBackup', 'kAzureNative', 'kAzureSQL', 'kAzureSnapshotManager', 'kPhysical', 'kPhysicalFiles', 'kGPFS', 'kElastifile', 'kNetapp', 'kGenericNas', 'kIsilon', 'kFlashBlade', 'kPure', 'kIbmFlashSystem', 'kSQL', 'kExchange', 'kAD', 'kOracle', 'kView', 'kRemoteAdapter', 'kO365', 'kO365PublicFolders', 'kO365Teams', 'kO365Group', 'kO365Exchange', 'kO365OneDrive', 'kO365Sharepoint', 'kKubernetes', 'kCassandra', 'kMongoDB', 'kCouchbase', 'kHdfs', 'kHive', 'kHBase', 'kUDA', 'kSfdc')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped', 'Paused']):
            raise ValueError("must be one of enum values ('Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped', 'Paused')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProtectionRunSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if bytes_written (nullable) is None
        # and model_fields_set contains the field
        if self.bytes_written is None and "bytes_written" in self.model_fields_set:
            _dict['bytesWritten'] = None

        # set to None if end_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.end_time_usecs is None and "end_time_usecs" in self.model_fields_set:
            _dict['endTimeUsecs'] = None

        # set to None if environment (nullable) is None
        # and model_fields_set contains the field
        if self.environment is None and "environment" in self.model_fields_set:
            _dict['environment'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if is_full_run (nullable) is None
        # and model_fields_set contains the field
        if self.is_full_run is None and "is_full_run" in self.model_fields_set:
            _dict['isFullRun'] = None

        # set to None if is_sla_violated (nullable) is None
        # and model_fields_set contains the field
        if self.is_sla_violated is None and "is_sla_violated" in self.model_fields_set:
            _dict['isSlaViolated'] = None

        # set to None if logical_size_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.logical_size_bytes is None and "logical_size_bytes" in self.model_fields_set:
            _dict['logicalSizeBytes'] = None

        # set to None if protection_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.protection_group_id is None and "protection_group_id" in self.model_fields_set:
            _dict['protectionGroupId'] = None

        # set to None if protection_group_name (nullable) is None
        # and model_fields_set contains the field
        if self.protection_group_name is None and "protection_group_name" in self.model_fields_set:
            _dict['protectionGroupName'] = None

        # set to None if start_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.start_time_usecs is None and "start_time_usecs" in self.model_fields_set:
            _dict['startTimeUsecs'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if success_objects_count (nullable) is None
        # and model_fields_set contains the field
        if self.success_objects_count is None and "success_objects_count" in self.model_fields_set:
            _dict['successObjectsCount'] = None

        # set to None if total_objects_count (nullable) is None
        # and model_fields_set contains the field
        if self.total_objects_count is None and "total_objects_count" in self.model_fields_set:
            _dict['totalObjectsCount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProtectionRunSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bytesWritten": obj.get("bytesWritten"),
            "endTimeUsecs": obj.get("endTimeUsecs"),
            "environment": obj.get("environment"),
            "id": obj.get("id"),
            "isFullRun": obj.get("isFullRun"),
            "isSlaViolated": obj.get("isSlaViolated"),
            "logicalSizeBytes": obj.get("logicalSizeBytes"),
            "protectionGroupId": obj.get("protectionGroupId"),
            "protectionGroupName": obj.get("protectionGroupName"),
            "startTimeUsecs": obj.get("startTimeUsecs"),
            "status": obj.get("status"),
            "successObjectsCount": obj.get("successObjectsCount"),
            "totalObjectsCount": obj.get("totalObjectsCount")
        })
        return _obj


