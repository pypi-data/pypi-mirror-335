# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self

class OracleRangeMetaInfo(BaseModel):
    """
    Specifies Range related information for an oracle db
    """ # noqa: E501
    end_of_range: Optional[StrictInt] = Field(default=None, description="Specifies ending value of the range in time (usecs), SCN or sequence no.", alias="endOfRange")
    incarnation_id: Optional[StrictInt] = Field(default=None, description="Specifies incarnation id associated with the oracle db for which the restore range belongs. Only applicable for ranges of type SCN and sequence no.", alias="incarnationId")
    protection_group_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Specifies id of the Protection Group corresponding to this oracle range", alias="protectionGroupId")
    reset_log_id: Optional[StrictInt] = Field(default=None, description="Specifies resetlogs identifier associated with the oracle range. Only applicable for ranges of type SCN and sequence no.", alias="resetLogId")
    start_of_range: Optional[StrictInt] = Field(default=None, description="Specifies starting value of the range in time (usecs), SCN or sequence no.", alias="startOfRange")
    thread_id: Optional[StrictInt] = Field(default=None, description="Specifies thread id associated with the oracle db for which the restore range belongs. Only applicable for ranges of type sequence no.", alias="threadId")
    __properties: ClassVar[List[str]] = ["endOfRange", "incarnationId", "protectionGroupId", "resetLogId", "startOfRange", "threadId"]

    @field_validator('protection_group_id')
    def protection_group_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+:\d+:\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+:\d+:\d+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OracleRangeMetaInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if end_of_range (nullable) is None
        # and model_fields_set contains the field
        if self.end_of_range is None and "end_of_range" in self.model_fields_set:
            _dict['endOfRange'] = None

        # set to None if incarnation_id (nullable) is None
        # and model_fields_set contains the field
        if self.incarnation_id is None and "incarnation_id" in self.model_fields_set:
            _dict['incarnationId'] = None

        # set to None if protection_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.protection_group_id is None and "protection_group_id" in self.model_fields_set:
            _dict['protectionGroupId'] = None

        # set to None if reset_log_id (nullable) is None
        # and model_fields_set contains the field
        if self.reset_log_id is None and "reset_log_id" in self.model_fields_set:
            _dict['resetLogId'] = None

        # set to None if start_of_range (nullable) is None
        # and model_fields_set contains the field
        if self.start_of_range is None and "start_of_range" in self.model_fields_set:
            _dict['startOfRange'] = None

        # set to None if thread_id (nullable) is None
        # and model_fields_set contains the field
        if self.thread_id is None and "thread_id" in self.model_fields_set:
            _dict['threadId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OracleRangeMetaInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endOfRange": obj.get("endOfRange"),
            "incarnationId": obj.get("incarnationId"),
            "protectionGroupId": obj.get("protectionGroupId"),
            "resetLogId": obj.get("resetLogId"),
            "startOfRange": obj.get("startOfRange"),
            "threadId": obj.get("threadId")
        })
        return _obj


