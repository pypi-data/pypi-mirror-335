# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.failover_object import FailoverObject
from typing import Set
from typing_extensions import Self

class ReplicationBackupActivation(BaseModel):
    """
    Specifies the request parmeters to activate the backup of failover entities on replication cluster.
    """ # noqa: E501
    create_object_backup: Optional[StrictBool] = Field(default=None, description="If set to true then object based backups will be created for the failed over VMs.", alias="createObjectBackup")
    do_not_protect: Optional[StrictBool] = Field(default=None, description="Whether to skip protecting the failed over entities previously specified via Initiate Failover API.", alias="doNotProtect")
    enable_reverse_replication: Optional[StrictBool] = Field(default=None, description="If this is specifed as true, then reverse replication of failover objects will be enabled from replication cluster to source cluster. If source cluster is not reachable, then replications will fail until source cluster comes up again. Here orchastrator should also ensure that storage domain on replication cluster is correctly mapped to the same storage domain on the source cluster.", alias="enableReverseReplication")
    objects: Optional[List[FailoverObject]] = Field(default=None, description="Specifies the list of failover object that need to be protected on replication cluster. If the object set that was sent earlier is provided again then API will return an error. If this objects list is not specified then internally it will be inferred if '/objectLinkage' API has been called previously.")
    protection_group_id: Optional[StrictStr] = Field(default=None, description="Specifies the protection group id that will be used for backing up the failover entities on replication cluster. This is a optional argument and only need to be passed if user wants to use the existing job for the backup. If specified then Orchastrator should enusre that protection group is compatible to handle all provided failover objects.", alias="protectionGroupId")
    target_failover_environment: Optional[StrictStr] = Field(default=None, description="If this is specified, then the protection environment of the failed over objects will be set to this. Otherwise, the protection environment of the failed over objects is determined by the objects' environment.", alias="targetFailoverEnvironment")
    target_failover_policy_id: Optional[StrictStr] = Field(default=None, description="Policy which will be used in the protection of the failed over objects.", alias="targetFailoverPolicyId")
    __properties: ClassVar[List[str]] = ["createObjectBackup", "doNotProtect", "enableReverseReplication", "objects", "protectionGroupId", "targetFailoverEnvironment", "targetFailoverPolicyId"]

    @field_validator('target_failover_environment')
    def target_failover_environment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kVMware', 'kHyperV', 'kVCD', 'kAzure', 'kGCP', 'kKVM', 'kAcropolis', 'kAWS', 'kAWSNative', 'kAwsS3', 'kAWSSnapshotManager', 'kRDSSnapshotManager', 'kAuroraSnapshotManager', 'kAwsRDSPostgresBackup', 'kAzureNative', 'kAzureSQL', 'kAzureSnapshotManager', 'kPhysical', 'kPhysicalFiles', 'kGPFS', 'kElastifile', 'kNetapp', 'kGenericNas', 'kIsilon', 'kFlashBlade', 'kPure', 'kIbmFlashSystem', 'kSQL', 'kExchange', 'kAD', 'kOracle', 'kView', 'kRemoteAdapter', 'kO365', 'kO365PublicFolders', 'kO365Teams', 'kO365Group', 'kO365Exchange', 'kO365OneDrive', 'kO365Sharepoint', 'kKubernetes', 'kCassandra', 'kMongoDB', 'kCouchbase', 'kHdfs', 'kHive', 'kHBase', 'kUDA', 'kSfdc']):
            raise ValueError("must be one of enum values ('kVMware', 'kHyperV', 'kVCD', 'kAzure', 'kGCP', 'kKVM', 'kAcropolis', 'kAWS', 'kAWSNative', 'kAwsS3', 'kAWSSnapshotManager', 'kRDSSnapshotManager', 'kAuroraSnapshotManager', 'kAwsRDSPostgresBackup', 'kAzureNative', 'kAzureSQL', 'kAzureSnapshotManager', 'kPhysical', 'kPhysicalFiles', 'kGPFS', 'kElastifile', 'kNetapp', 'kGenericNas', 'kIsilon', 'kFlashBlade', 'kPure', 'kIbmFlashSystem', 'kSQL', 'kExchange', 'kAD', 'kOracle', 'kView', 'kRemoteAdapter', 'kO365', 'kO365PublicFolders', 'kO365Teams', 'kO365Group', 'kO365Exchange', 'kO365OneDrive', 'kO365Sharepoint', 'kKubernetes', 'kCassandra', 'kMongoDB', 'kCouchbase', 'kHdfs', 'kHive', 'kHBase', 'kUDA', 'kSfdc')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicationBackupActivation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in objects (list)
        _items = []
        if self.objects:
            for _item_objects in self.objects:
                if _item_objects:
                    _items.append(_item_objects.to_dict())
            _dict['objects'] = _items
        # set to None if create_object_backup (nullable) is None
        # and model_fields_set contains the field
        if self.create_object_backup is None and "create_object_backup" in self.model_fields_set:
            _dict['createObjectBackup'] = None

        # set to None if do_not_protect (nullable) is None
        # and model_fields_set contains the field
        if self.do_not_protect is None and "do_not_protect" in self.model_fields_set:
            _dict['doNotProtect'] = None

        # set to None if enable_reverse_replication (nullable) is None
        # and model_fields_set contains the field
        if self.enable_reverse_replication is None and "enable_reverse_replication" in self.model_fields_set:
            _dict['enableReverseReplication'] = None

        # set to None if objects (nullable) is None
        # and model_fields_set contains the field
        if self.objects is None and "objects" in self.model_fields_set:
            _dict['objects'] = None

        # set to None if protection_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.protection_group_id is None and "protection_group_id" in self.model_fields_set:
            _dict['protectionGroupId'] = None

        # set to None if target_failover_environment (nullable) is None
        # and model_fields_set contains the field
        if self.target_failover_environment is None and "target_failover_environment" in self.model_fields_set:
            _dict['targetFailoverEnvironment'] = None

        # set to None if target_failover_policy_id (nullable) is None
        # and model_fields_set contains the field
        if self.target_failover_policy_id is None and "target_failover_policy_id" in self.model_fields_set:
            _dict['targetFailoverPolicyId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicationBackupActivation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createObjectBackup": obj.get("createObjectBackup"),
            "doNotProtect": obj.get("doNotProtect"),
            "enableReverseReplication": obj.get("enableReverseReplication"),
            "objects": [FailoverObject.from_dict(_item) for _item in obj["objects"]] if obj.get("objects") is not None else None,
            "protectionGroupId": obj.get("protectionGroupId"),
            "targetFailoverEnvironment": obj.get("targetFailoverEnvironment"),
            "targetFailoverPolicyId": obj.get("targetFailoverPolicyId")
        })
        return _obj


