# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class TenantNetwork(BaseModel):
    """
    Networking information about a Tenant on a Cluster.
    """ # noqa: E501
    cluster_hostname: Optional[StrictStr] = Field(default=None, description="The hostname for Cohesity cluster as seen by tenants and as is routable from the tenant's network. Tenant's VLAN's hostname, if available can be used instead but it is mandatory to provide this value if there's no VLAN hostname to use. Also, when set, this field would take precedence over VLAN hostname.", alias="clusterHostname")
    cluster_ips: Optional[List[StrictStr]] = Field(default=None, description="Set of IPs as seen from the tenant's network for the Cohesity cluster. Only one from 'clusterHostname' and 'clusterIps' is needed.", alias="clusterIps")
    connector_enabled: Optional[StrictBool] = Field(description="Whether connector (hybrid extender) is enabled.", alias="connectorEnabled")
    __properties: ClassVar[List[str]] = ["clusterHostname", "clusterIps", "connectorEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TenantNetwork from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cluster_hostname (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_hostname is None and "cluster_hostname" in self.model_fields_set:
            _dict['clusterHostname'] = None

        # set to None if cluster_ips (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_ips is None and "cluster_ips" in self.model_fields_set:
            _dict['clusterIps'] = None

        # set to None if connector_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.connector_enabled is None and "connector_enabled" in self.model_fields_set:
            _dict['connectorEnabled'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TenantNetwork from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterHostname": obj.get("clusterHostname"),
            "clusterIps": obj.get("clusterIps"),
            "connectorEnabled": obj.get("connectorEnabled")
        })
        return _obj


