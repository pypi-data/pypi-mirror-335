# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class VMFilter(BaseModel):
    """
    Specifies the VM filter details.
    """ # noqa: E501
    filter_string: Optional[StrictStr] = Field(default=None, description="Specifies the filter string using wildcard supported strings or regular expressions.", alias="filterString")
    is_regular_expression: Optional[StrictBool] = Field(default=False, description="Specifies whether the provided filter string is a regular expression or not. This needs to be explicitly set to true if user is trying to filter by regular expressions. Not providing this value in case of regular expression can result in unintended results. The default value is assumed to be false.", alias="isRegularExpression")
    case_sensitive: Optional[StrictBool] = Field(default=False, description="Specifies whether the provided filter string is case sensitive or not. This needs to be explicitly set to true if user is trying to filter by case sensitive expressions. The default value is assumed to be false.", alias="caseSensitive")
    __properties: ClassVar[List[str]] = ["filterString", "isRegularExpression", "caseSensitive"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VMFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if filter_string (nullable) is None
        # and model_fields_set contains the field
        if self.filter_string is None and "filter_string" in self.model_fields_set:
            _dict['filterString'] = None

        # set to None if is_regular_expression (nullable) is None
        # and model_fields_set contains the field
        if self.is_regular_expression is None and "is_regular_expression" in self.model_fields_set:
            _dict['isRegularExpression'] = None

        # set to None if case_sensitive (nullable) is None
        # and model_fields_set contains the field
        if self.case_sensitive is None and "case_sensitive" in self.model_fields_set:
            _dict['caseSensitive'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VMFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filterString": obj.get("filterString"),
            "isRegularExpression": obj.get("isRegularExpression") if obj.get("isRegularExpression") is not None else False,
            "caseSensitive": obj.get("caseSensitive") if obj.get("caseSensitive") is not None else False
        })
        return _obj


