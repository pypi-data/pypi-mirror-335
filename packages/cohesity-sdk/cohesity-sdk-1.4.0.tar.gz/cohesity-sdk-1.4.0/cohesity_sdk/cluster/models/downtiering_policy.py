# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.data_tiering_tag_object import DataTieringTagObject
from cohesity_sdk.cluster.models.downtiering_file_age_policy import DowntieringFileAgePolicy
from cohesity_sdk.cluster.models.downtiering_target import DowntieringTarget
from cohesity_sdk.cluster.models.file_filtering_policy import FileFilteringPolicy
from cohesity_sdk.cluster.models.file_size_policy import FileSizePolicy
from cohesity_sdk.cluster.models.indexing_policy import IndexingPolicy
from cohesity_sdk.cluster.models.retention import Retention
from typing import Set
from typing_extensions import Self

class DowntieringPolicy(BaseModel):
    """
    Specifies the data downtiering policy.
    """ # noqa: E501
    enable_audit_logging: Optional[StrictBool] = Field(default=False, description="Specifies whether to audit log the file tiering activity.", alias="enableAuditLogging")
    file_path: Optional[FileFilteringPolicy] = Field(default=None, alias="filePath")
    file_size: Optional[FileSizePolicy] = Field(default=None, alias="fileSize")
    auto_orphan_data_cleanup: Optional[StrictBool] = Field(default=True, description="Specifies whether to remove the orphan data from the target if the symlink is removed from the source.", alias="autoOrphanDataCleanup")
    file_age: Optional[DowntieringFileAgePolicy] = Field(default=None, alias="fileAge")
    indexing_policy: Optional[IndexingPolicy] = Field(default=None, alias="indexingPolicy")
    qos_policy: Optional[StrictStr] = Field(default=None, description="Specifies whether the data tiering task will be written to HDD or SSD.", alias="qosPolicy")
    retention: Optional[Retention] = None
    skip_back_symlink: Optional[StrictBool] = Field(default=True, description="Specifies whether to create a symlink for the migrated data from source to target.", alias="skipBackSymlink")
    tags_info: Optional[List[DataTieringTagObject]] = Field(default=None, description="Array of Tag objects used to represent different file based policies", alias="tagsInfo")
    target: Optional[DowntieringTarget] = None
    tiering_goal: Optional[StrictInt] = Field(default=None, description="Specifies the maximum amount of data that should be present on source after downtiering.", alias="tieringGoal")
    __properties: ClassVar[List[str]] = ["enableAuditLogging", "filePath", "fileSize", "autoOrphanDataCleanup", "fileAge", "indexingPolicy", "qosPolicy", "retention", "skipBackSymlink", "tagsInfo", "target", "tieringGoal"]

    @field_validator('qos_policy')
    def qos_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kBackupHDD', 'kBackupSSD', 'kTestAndDevHigh', 'kBackupAll']):
            raise ValueError("must be one of enum values ('kBackupHDD', 'kBackupSSD', 'kTestAndDevHigh', 'kBackupAll')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DowntieringPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file_path
        if self.file_path:
            _dict['filePath'] = self.file_path.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_size
        if self.file_size:
            _dict['fileSize'] = self.file_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_age
        if self.file_age:
            _dict['fileAge'] = self.file_age.to_dict()
        # override the default output from pydantic by calling `to_dict()` of indexing_policy
        if self.indexing_policy:
            _dict['indexingPolicy'] = self.indexing_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retention
        if self.retention:
            _dict['retention'] = self.retention.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags_info (list)
        _items = []
        if self.tags_info:
            for _item_tags_info in self.tags_info:
                if _item_tags_info:
                    _items.append(_item_tags_info.to_dict())
            _dict['tagsInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        # set to None if enable_audit_logging (nullable) is None
        # and model_fields_set contains the field
        if self.enable_audit_logging is None and "enable_audit_logging" in self.model_fields_set:
            _dict['enableAuditLogging'] = None

        # set to None if auto_orphan_data_cleanup (nullable) is None
        # and model_fields_set contains the field
        if self.auto_orphan_data_cleanup is None and "auto_orphan_data_cleanup" in self.model_fields_set:
            _dict['autoOrphanDataCleanup'] = None

        # set to None if qos_policy (nullable) is None
        # and model_fields_set contains the field
        if self.qos_policy is None and "qos_policy" in self.model_fields_set:
            _dict['qosPolicy'] = None

        # set to None if skip_back_symlink (nullable) is None
        # and model_fields_set contains the field
        if self.skip_back_symlink is None and "skip_back_symlink" in self.model_fields_set:
            _dict['skipBackSymlink'] = None

        # set to None if tags_info (nullable) is None
        # and model_fields_set contains the field
        if self.tags_info is None and "tags_info" in self.model_fields_set:
            _dict['tagsInfo'] = None

        # set to None if target (nullable) is None
        # and model_fields_set contains the field
        if self.target is None and "target" in self.model_fields_set:
            _dict['target'] = None

        # set to None if tiering_goal (nullable) is None
        # and model_fields_set contains the field
        if self.tiering_goal is None and "tiering_goal" in self.model_fields_set:
            _dict['tieringGoal'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DowntieringPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableAuditLogging": obj.get("enableAuditLogging") if obj.get("enableAuditLogging") is not None else False,
            "filePath": FileFilteringPolicy.from_dict(obj["filePath"]) if obj.get("filePath") is not None else None,
            "fileSize": FileSizePolicy.from_dict(obj["fileSize"]) if obj.get("fileSize") is not None else None,
            "autoOrphanDataCleanup": obj.get("autoOrphanDataCleanup") if obj.get("autoOrphanDataCleanup") is not None else True,
            "fileAge": DowntieringFileAgePolicy.from_dict(obj["fileAge"]) if obj.get("fileAge") is not None else None,
            "indexingPolicy": IndexingPolicy.from_dict(obj["indexingPolicy"]) if obj.get("indexingPolicy") is not None else None,
            "qosPolicy": obj.get("qosPolicy"),
            "retention": Retention.from_dict(obj["retention"]) if obj.get("retention") is not None else None,
            "skipBackSymlink": obj.get("skipBackSymlink") if obj.get("skipBackSymlink") is not None else True,
            "tagsInfo": [DataTieringTagObject.from_dict(_item) for _item in obj["tagsInfo"]] if obj.get("tagsInfo") is not None else None,
            "target": DowntieringTarget.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "tieringGoal": obj.get("tieringGoal")
        })
        return _obj


