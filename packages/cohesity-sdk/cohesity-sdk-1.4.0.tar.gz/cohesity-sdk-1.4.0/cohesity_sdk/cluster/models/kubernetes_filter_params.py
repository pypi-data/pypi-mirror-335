# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.kubernetes_label import KubernetesLabel
from typing import Set
from typing_extensions import Self

class KubernetesFilterParams(BaseModel):
    """
    Specifies the parameters to in/exclude objects (e.g.: volumes). An object satisfying any of these criteria will be included by this filter.
    """ # noqa: E501
    label_combination_method: Optional[StrictStr] = Field(default=None, description="Whether to include all the labels or any of them while performing inclusion/exclusion of objects.", alias="labelCombinationMethod")
    label_vector: Optional[List[Optional[KubernetesLabel]]] = Field(default=None, description="Array of Object to represent Label that Specify Objects (e.g.: Persistent Volumes and Persistent Volume Claims) to Include or Exclude.It will be a two-dimensional array, where each inner array will consist of a key and value representing labels. Using this two dimensional array of Labels, the Cluster generates a list of items to include in the filter, which are derived from intersections or the union of these labels, as decided by operation parameter.", alias="labelVector")
    objects: Optional[List[StrictInt]] = Field(default=None, description="Array of objects that are to be included.")
    __properties: ClassVar[List[str]] = ["labelCombinationMethod", "labelVector", "objects"]

    @field_validator('label_combination_method')
    def label_combination_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AND', 'OR']):
            raise ValueError("must be one of enum values ('AND', 'OR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KubernetesFilterParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in label_vector (list)
        _items = []
        if self.label_vector:
            for _item_label_vector in self.label_vector:
                if _item_label_vector:
                    _items.append(_item_label_vector.to_dict())
            _dict['labelVector'] = _items
        # set to None if label_combination_method (nullable) is None
        # and model_fields_set contains the field
        if self.label_combination_method is None and "label_combination_method" in self.model_fields_set:
            _dict['labelCombinationMethod'] = None

        # set to None if label_vector (nullable) is None
        # and model_fields_set contains the field
        if self.label_vector is None and "label_vector" in self.model_fields_set:
            _dict['labelVector'] = None

        # set to None if objects (nullable) is None
        # and model_fields_set contains the field
        if self.objects is None and "objects" in self.model_fields_set:
            _dict['objects'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KubernetesFilterParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "labelCombinationMethod": obj.get("labelCombinationMethod"),
            "labelVector": [KubernetesLabel.from_dict(_item) for _item in obj["labelVector"]] if obj.get("labelVector") is not None else None,
            "objects": obj.get("objects")
        })
        return _obj


