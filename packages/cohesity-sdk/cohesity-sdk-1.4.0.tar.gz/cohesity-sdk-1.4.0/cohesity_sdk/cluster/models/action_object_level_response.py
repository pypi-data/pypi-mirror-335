# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.pause_action_object_level_response import PauseActionObjectLevelResponse
from cohesity_sdk.cluster.models.resume_action_object_level_response import ResumeActionObjectLevelResponse
from cohesity_sdk.cluster.models.run_now_action_object_level_response import RunNowActionObjectLevelResponse
from cohesity_sdk.cluster.models.unprotect_action_object_level_response import UnprotectActionObjectLevelResponse
from typing import Set
from typing_extensions import Self

class ActionObjectLevelResponse(BaseModel):
    """
    Specifies the object level response params after performing an action on a protected object.
    """ # noqa: E501
    id: Optional[StrictInt] = Field(description="Specifies the ID of the object.")
    name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the object.")
    pause_status: Optional[PauseActionObjectLevelResponse] = Field(default=None, alias="pauseStatus")
    resume_status: Optional[ResumeActionObjectLevelResponse] = Field(default=None, alias="resumeStatus")
    run_now_status: Optional[RunNowActionObjectLevelResponse] = Field(default=None, alias="runNowStatus")
    un_protect_status: Optional[UnprotectActionObjectLevelResponse] = Field(default=None, alias="unProtectStatus")
    __properties: ClassVar[List[str]] = ["id", "name", "pauseStatus", "resumeStatus", "runNowStatus", "unProtectStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActionObjectLevelResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pause_status
        if self.pause_status:
            _dict['pauseStatus'] = self.pause_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resume_status
        if self.resume_status:
            _dict['resumeStatus'] = self.resume_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of run_now_status
        if self.run_now_status:
            _dict['runNowStatus'] = self.run_now_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of un_protect_status
        if self.un_protect_status:
            _dict['unProtectStatus'] = self.un_protect_status.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActionObjectLevelResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "pauseStatus": PauseActionObjectLevelResponse.from_dict(obj["pauseStatus"]) if obj.get("pauseStatus") is not None else None,
            "resumeStatus": ResumeActionObjectLevelResponse.from_dict(obj["resumeStatus"]) if obj.get("resumeStatus") is not None else None,
            "runNowStatus": RunNowActionObjectLevelResponse.from_dict(obj["runNowStatus"]) if obj.get("runNowStatus") is not None else None,
            "unProtectStatus": UnprotectActionObjectLevelResponse.from_dict(obj["unProtectStatus"]) if obj.get("unProtectStatus") is not None else None
        })
        return _obj


