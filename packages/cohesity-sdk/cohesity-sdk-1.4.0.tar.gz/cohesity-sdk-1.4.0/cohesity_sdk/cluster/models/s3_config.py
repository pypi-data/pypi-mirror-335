# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.acl_config import AclConfig
from cohesity_sdk.cluster.models.bucket_policy import BucketPolicy
from cohesity_sdk.cluster.models.s3_config_owner_info import S3ConfigOwnerInfo
from cohesity_sdk.cluster.models.s3_lifecycle_management import S3LifecycleManagement
from typing import Set
from typing_extensions import Self

class S3Config(BaseModel):
    """
    Specifies the S3 config settings for this View.
    """ # noqa: E501
    acl_config: Optional[AclConfig] = Field(default=None, alias="aclConfig")
    bucket_policy: Optional[BucketPolicy] = Field(default=None, alias="bucketPolicy")
    enable_abac: Optional[StrictBool] = Field(default=None, description="Specifies if this View has S3 ABAC enabled. This can only be set while creating a view. The ABAC server corresponding the tenant will be used for authentication and authorization checks. ", alias="enableAbac")
    lifecycle_management: Optional[S3LifecycleManagement] = Field(default=None, alias="lifecycleManagement")
    owner_info: Optional[S3ConfigOwnerInfo] = Field(default=None, alias="ownerInfo")
    s3_access_path: Optional[StrictStr] = Field(default=None, description="Specifies the path to access this View as an S3 share.", alias="s3AccessPath")
    versioning: Optional[StrictStr] = Field(default=None, description="Specifies the versioning state of S3 bucket. Buckets can be in one of three states: UnVersioned (default), VersioningEnabled, or VersioningSuspended. Once versioning is enabled for a bucket, it can never return to an UnVersioned state. However, versioning on the bucket can be suspended.")
    __properties: ClassVar[List[str]] = ["aclConfig", "bucketPolicy", "enableAbac", "lifecycleManagement", "ownerInfo", "s3AccessPath", "versioning"]

    @field_validator('versioning')
    def versioning_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UnVersioned', 'Enabled', 'Suspended']):
            raise ValueError("must be one of enum values ('UnVersioned', 'Enabled', 'Suspended')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of S3Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "s3_access_path",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of acl_config
        if self.acl_config:
            _dict['aclConfig'] = self.acl_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bucket_policy
        if self.bucket_policy:
            _dict['bucketPolicy'] = self.bucket_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lifecycle_management
        if self.lifecycle_management:
            _dict['lifecycleManagement'] = self.lifecycle_management.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner_info
        if self.owner_info:
            _dict['ownerInfo'] = self.owner_info.to_dict()
        # set to None if enable_abac (nullable) is None
        # and model_fields_set contains the field
        if self.enable_abac is None and "enable_abac" in self.model_fields_set:
            _dict['enableAbac'] = None

        # set to None if s3_access_path (nullable) is None
        # and model_fields_set contains the field
        if self.s3_access_path is None and "s3_access_path" in self.model_fields_set:
            _dict['s3AccessPath'] = None

        # set to None if versioning (nullable) is None
        # and model_fields_set contains the field
        if self.versioning is None and "versioning" in self.model_fields_set:
            _dict['versioning'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of S3Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aclConfig": AclConfig.from_dict(obj["aclConfig"]) if obj.get("aclConfig") is not None else None,
            "bucketPolicy": BucketPolicy.from_dict(obj["bucketPolicy"]) if obj.get("bucketPolicy") is not None else None,
            "enableAbac": obj.get("enableAbac"),
            "lifecycleManagement": S3LifecycleManagement.from_dict(obj["lifecycleManagement"]) if obj.get("lifecycleManagement") is not None else None,
            "ownerInfo": S3ConfigOwnerInfo.from_dict(obj["ownerInfo"]) if obj.get("ownerInfo") is not None else None,
            "s3AccessPath": obj.get("s3AccessPath"),
            "versioning": obj.get("versioning")
        })
        return _obj


