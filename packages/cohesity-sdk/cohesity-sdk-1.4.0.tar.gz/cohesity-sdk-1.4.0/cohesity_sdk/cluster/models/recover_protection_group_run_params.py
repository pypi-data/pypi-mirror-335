# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self

class RecoverProtectionGroupRunParams(BaseModel):
    """
    Specifies the Protection Group Run params to recover. All the VM's that are successfully backed up by specified Runs will be recovered.
    """ # noqa: E501
    archival_target_id: Optional[StrictInt] = Field(default=None, description="Specifies the archival target id. If specified and Protection Group run has an archival snapshot then VMs are recovered from the specified archival snapshot. If not specified (default), VMs are recovered from local snapshot.", alias="archivalTargetId")
    protection_group_id: Optional[StrictStr] = Field(default=None, description="Specifies the local Protection Group id. In case of recovering a replication Run, this field should be provided with local Protection Group id.", alias="protectionGroupId")
    protection_group_instance_id: Optional[StrictInt] = Field(description="Specifies the Protection Group Instance id.", alias="protectionGroupInstanceId")
    protection_group_run_id: Optional[Annotated[str, Field(strict=True)]] = Field(description="Specifies the Protection Group Run id from which to recover VMs. All the VM's that are successfully protected by this Run will be recovered.", alias="protectionGroupRunId")
    __properties: ClassVar[List[str]] = ["archivalTargetId", "protectionGroupId", "protectionGroupInstanceId", "protectionGroupRunId"]

    @field_validator('protection_group_run_id')
    def protection_group_run_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+:\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+:\d+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecoverProtectionGroupRunParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if archival_target_id (nullable) is None
        # and model_fields_set contains the field
        if self.archival_target_id is None and "archival_target_id" in self.model_fields_set:
            _dict['archivalTargetId'] = None

        # set to None if protection_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.protection_group_id is None and "protection_group_id" in self.model_fields_set:
            _dict['protectionGroupId'] = None

        # set to None if protection_group_instance_id (nullable) is None
        # and model_fields_set contains the field
        if self.protection_group_instance_id is None and "protection_group_instance_id" in self.model_fields_set:
            _dict['protectionGroupInstanceId'] = None

        # set to None if protection_group_run_id (nullable) is None
        # and model_fields_set contains the field
        if self.protection_group_run_id is None and "protection_group_run_id" in self.model_fields_set:
            _dict['protectionGroupRunId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecoverProtectionGroupRunParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archivalTargetId": obj.get("archivalTargetId"),
            "protectionGroupId": obj.get("protectionGroupId"),
            "protectionGroupInstanceId": obj.get("protectionGroupInstanceId"),
            "protectionGroupRunId": obj.get("protectionGroupRunId")
        })
        return _obj


