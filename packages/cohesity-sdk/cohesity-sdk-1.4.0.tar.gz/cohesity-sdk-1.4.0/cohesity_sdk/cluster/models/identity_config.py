# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.o_auth2_provider import OAuth2Provider
from cohesity_sdk.cluster.models.open_id_provider import OpenIdProvider
from typing import Set
from typing_extensions import Self

class IdentityConfig(BaseModel):
    """
    Identity Provider Configuration
    """ # noqa: E501
    domain: Optional[StrictStr] = Field(description="Specifies domain of idp configuration")
    id: Optional[StrictInt] = Field(default=None, description="Specifies the ID of the IDP.")
    identity_provider_type: Optional[StrictStr] = Field(description="Specifies the type of identity provider.", alias="identityProviderType")
    is_enabled: Optional[StrictBool] = Field(default=True, description="Specifies a flag to enable or disable this idp service. When it is set to true, idp service is enabled. When it is set to false, idp service is disabled. By defaut idp is enabled i.e the value is true.", alias="isEnabled")
    last_modified_timestamp_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the last time this configuration was modified in microseconds since the epoch. This is may be specified for PUT operations to prevent stale requests from being written. If it is specified during a PUT operation then the request will be rejected if the specified time does not match the actual last modified time.", alias="lastModifiedTimestampUsecs")
    o_auth2_params: Optional[OAuth2Provider] = Field(default=None, alias="oAuth2Params")
    open_id_connect_params: Optional[OpenIdProvider] = Field(default=None, alias="openIdConnectParams")
    tenant_id: Optional[StrictStr] = Field(default=None, description="Specifies the tenant id if the idp is configured for a tenant. If this is not set, this idp configuration is used for the cluster level users and for all users of tenants not having an idp configuration.", alias="tenantId")
    __properties: ClassVar[List[str]] = ["domain", "id", "identityProviderType", "isEnabled", "lastModifiedTimestampUsecs", "oAuth2Params", "openIdConnectParams", "tenantId"]

    @field_validator('identity_provider_type')
    def identity_provider_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OpenIdConnect', 'OAuth2']):
            raise ValueError("must be one of enum values ('OpenIdConnect', 'OAuth2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentityConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of o_auth2_params
        if self.o_auth2_params:
            _dict['oAuth2Params'] = self.o_auth2_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_id_connect_params
        if self.open_id_connect_params:
            _dict['openIdConnectParams'] = self.open_id_connect_params.to_dict()
        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if identity_provider_type (nullable) is None
        # and model_fields_set contains the field
        if self.identity_provider_type is None and "identity_provider_type" in self.model_fields_set:
            _dict['identityProviderType'] = None

        # set to None if is_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.is_enabled is None and "is_enabled" in self.model_fields_set:
            _dict['isEnabled'] = None

        # set to None if last_modified_timestamp_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_timestamp_usecs is None and "last_modified_timestamp_usecs" in self.model_fields_set:
            _dict['lastModifiedTimestampUsecs'] = None

        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenantId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentityConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain": obj.get("domain"),
            "id": obj.get("id"),
            "identityProviderType": obj.get("identityProviderType"),
            "isEnabled": obj.get("isEnabled") if obj.get("isEnabled") is not None else True,
            "lastModifiedTimestampUsecs": obj.get("lastModifiedTimestampUsecs"),
            "oAuth2Params": OAuth2Provider.from_dict(obj["oAuth2Params"]) if obj.get("oAuth2Params") is not None else None,
            "openIdConnectParams": OpenIdProvider.from_dict(obj["openIdConnectParams"]) if obj.get("openIdConnectParams") is not None else None,
            "tenantId": obj.get("tenantId")
        })
        return _obj


