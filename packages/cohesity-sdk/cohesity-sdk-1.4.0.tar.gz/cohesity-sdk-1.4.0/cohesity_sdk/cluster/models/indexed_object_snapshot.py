# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.archival_target_summary_info import ArchivalTargetSummaryInfo
from typing import Set
from typing_extensions import Self

class IndexedObjectSnapshot(BaseModel):
    """
    Specifies a snapshot containing the indexed object.
    """ # noqa: E501
    attempts: Optional[StrictInt] = Field(default=None, description="Specifies the number of runs have been executed before the run completed successfully.")
    external_target_info: Optional[ArchivalTargetSummaryInfo] = Field(default=None, alias="externalTargetInfo")
    indexed_object_name: Optional[StrictStr] = Field(default=None, description="Specifies the indexed object name.", alias="indexedObjectName")
    indexed_object_source_uuid: Optional[StrictStr] = Field(default=None, description="Specifies the unique identifier from the source of the item associated with this particular snapshot. It can get changed between the snapshots and therefore will be required for recovery.", alias="indexedObjectSourceUuid")
    inode_id: Optional[StrictInt] = Field(default=None, description="Specifies the source inode number of the file being recovered.", alias="inodeId")
    last_modified_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the last time file was modified in unix timestamp.", alias="lastModifiedTimeUsecs")
    object_snapshotid: Optional[StrictStr] = Field(default=None, description="Specifies snapshot id of the object containing this indexed object.", alias="objectSnapshotid")
    protection_group_id: Optional[StrictStr] = Field(default=None, description="Specifies the protection group id which contains this snapshot.", alias="protectionGroupId")
    protection_group_name: Optional[StrictStr] = Field(default=None, description="Specifies the protection group name which contains this snapshot.", alias="protectionGroupName")
    run_type: Optional[StrictStr] = Field(default=None, description="Specifies the type of protection run created this snapshot.", alias="runType")
    size_bytes: Optional[StrictInt] = Field(default=None, description="Specifies the indexed object size in bytes.", alias="sizeBytes")
    snapshot_timestamp_usecs: Optional[StrictInt] = Field(default=None, description="Specifies a unix timestamp when the object snapshot was taken in micro seconds.", alias="snapshotTimestampUsecs")
    storage_domain_id: Optional[StrictInt] = Field(default=None, description="Specifies the storage domain id containing this snapshot.", alias="storageDomainId")
    __properties: ClassVar[List[str]] = ["attempts", "externalTargetInfo", "indexedObjectName", "indexedObjectSourceUuid", "inodeId", "lastModifiedTimeUsecs", "objectSnapshotid", "protectionGroupId", "protectionGroupName", "runType", "sizeBytes", "snapshotTimestampUsecs", "storageDomainId"]

    @field_validator('run_type')
    def run_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kRegular', 'kFull', 'kLog', 'kSystem', 'kHydrateCDP', 'kStorageArraySnapshot']):
            raise ValueError("must be one of enum values ('kRegular', 'kFull', 'kLog', 'kSystem', 'kHydrateCDP', 'kStorageArraySnapshot')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndexedObjectSnapshot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "inode_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of external_target_info
        if self.external_target_info:
            _dict['externalTargetInfo'] = self.external_target_info.to_dict()
        # set to None if attempts (nullable) is None
        # and model_fields_set contains the field
        if self.attempts is None and "attempts" in self.model_fields_set:
            _dict['attempts'] = None

        # set to None if indexed_object_name (nullable) is None
        # and model_fields_set contains the field
        if self.indexed_object_name is None and "indexed_object_name" in self.model_fields_set:
            _dict['indexedObjectName'] = None

        # set to None if indexed_object_source_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.indexed_object_source_uuid is None and "indexed_object_source_uuid" in self.model_fields_set:
            _dict['indexedObjectSourceUuid'] = None

        # set to None if inode_id (nullable) is None
        # and model_fields_set contains the field
        if self.inode_id is None and "inode_id" in self.model_fields_set:
            _dict['inodeId'] = None

        # set to None if last_modified_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_time_usecs is None and "last_modified_time_usecs" in self.model_fields_set:
            _dict['lastModifiedTimeUsecs'] = None

        # set to None if object_snapshotid (nullable) is None
        # and model_fields_set contains the field
        if self.object_snapshotid is None and "object_snapshotid" in self.model_fields_set:
            _dict['objectSnapshotid'] = None

        # set to None if protection_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.protection_group_id is None and "protection_group_id" in self.model_fields_set:
            _dict['protectionGroupId'] = None

        # set to None if protection_group_name (nullable) is None
        # and model_fields_set contains the field
        if self.protection_group_name is None and "protection_group_name" in self.model_fields_set:
            _dict['protectionGroupName'] = None

        # set to None if run_type (nullable) is None
        # and model_fields_set contains the field
        if self.run_type is None and "run_type" in self.model_fields_set:
            _dict['runType'] = None

        # set to None if size_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.size_bytes is None and "size_bytes" in self.model_fields_set:
            _dict['sizeBytes'] = None

        # set to None if snapshot_timestamp_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.snapshot_timestamp_usecs is None and "snapshot_timestamp_usecs" in self.model_fields_set:
            _dict['snapshotTimestampUsecs'] = None

        # set to None if storage_domain_id (nullable) is None
        # and model_fields_set contains the field
        if self.storage_domain_id is None and "storage_domain_id" in self.model_fields_set:
            _dict['storageDomainId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndexedObjectSnapshot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attempts": obj.get("attempts"),
            "externalTargetInfo": ArchivalTargetSummaryInfo.from_dict(obj["externalTargetInfo"]) if obj.get("externalTargetInfo") is not None else None,
            "indexedObjectName": obj.get("indexedObjectName"),
            "indexedObjectSourceUuid": obj.get("indexedObjectSourceUuid"),
            "inodeId": obj.get("inodeId"),
            "lastModifiedTimeUsecs": obj.get("lastModifiedTimeUsecs"),
            "objectSnapshotid": obj.get("objectSnapshotid"),
            "protectionGroupId": obj.get("protectionGroupId"),
            "protectionGroupName": obj.get("protectionGroupName"),
            "runType": obj.get("runType"),
            "sizeBytes": obj.get("sizeBytes"),
            "snapshotTimestampUsecs": obj.get("snapshotTimestampUsecs"),
            "storageDomainId": obj.get("storageDomainId")
        })
        return _obj


