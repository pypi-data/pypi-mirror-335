# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cohesity_sdk.cluster.models.flash_blade_registration_info import FlashBladeRegistrationInfo
from typing import Set
from typing_extensions import Self

class FlashbladeParams(BaseModel):
    """
    Specifies the information related to Registered Pure Flashblade.
    """ # noqa: E501
    assigned_capacity_bytes: Optional[StrictInt] = Field(default=None, description="Specifies the capacity in bytes assigned on pure flashblade for remote storage usage on cohesity cluster.", alias="assignedCapacityBytes")
    assigned_data_vips: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = Field(default=None, description="Specifies list of data vips that are assigned to cohesity cluster to create nfs share mountpoints.", alias="assignedDataVips")
    available_capacity: Optional[StrictInt] = Field(default=None, description="Available capacity on pure flashblade.", alias="availableCapacity")
    available_data_vips: Optional[List[Optional[StrictStr]]] = Field(default=None, description="Available data vips configured on pure flashblade.", alias="availableDataVips")
    created_file_system_count: Optional[StrictInt] = Field(default=None, description="Number of new file systems created on pure flashblade when assignedCapacityBytes is updated.", alias="createdFileSystemCount")
    is_dedicated_storage: Optional[StrictBool] = Field(default=None, description="If true, cohesity cluster uses all available capacity on pure flashblade for remote storage.", alias="isDedicatedStorage")
    name: Optional[StrictStr] = Field(default=None, description="Name of the pure flashblade specified on pure storage.")
    registration_params: Optional[FlashBladeRegistrationInfo] = Field(default=None, alias="registrationParams")
    software_os_version: Optional[StrictStr] = Field(default=None, description="Software OS and version running on pure flashblade", alias="softwareOsVersion")
    total_capacity: Optional[StrictInt] = Field(default=None, description="Total capacity of pure flashblade.", alias="totalCapacity")
    updated_file_system_count: Optional[StrictInt] = Field(default=None, description="Number of file systems that are updated on pure flashblade when assignedCapacityBytes is updated.", alias="updatedFileSystemCount")
    uuid: Optional[StrictStr] = Field(default=None, description="Specifies uuid of the pure flashblade server.")
    __properties: ClassVar[List[str]] = ["assignedCapacityBytes", "assignedDataVips", "availableCapacity", "availableDataVips", "createdFileSystemCount", "isDedicatedStorage", "name", "registrationParams", "softwareOsVersion", "totalCapacity", "updatedFileSystemCount", "uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FlashbladeParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "available_capacity",
            "available_data_vips",
            "created_file_system_count",
            "name",
            "software_os_version",
            "total_capacity",
            "updated_file_system_count",
            "uuid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of registration_params
        if self.registration_params:
            _dict['registrationParams'] = self.registration_params.to_dict()
        # set to None if assigned_capacity_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.assigned_capacity_bytes is None and "assigned_capacity_bytes" in self.model_fields_set:
            _dict['assignedCapacityBytes'] = None

        # set to None if assigned_data_vips (nullable) is None
        # and model_fields_set contains the field
        if self.assigned_data_vips is None and "assigned_data_vips" in self.model_fields_set:
            _dict['assignedDataVips'] = None

        # set to None if available_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.available_capacity is None and "available_capacity" in self.model_fields_set:
            _dict['availableCapacity'] = None

        # set to None if created_file_system_count (nullable) is None
        # and model_fields_set contains the field
        if self.created_file_system_count is None and "created_file_system_count" in self.model_fields_set:
            _dict['createdFileSystemCount'] = None

        # set to None if is_dedicated_storage (nullable) is None
        # and model_fields_set contains the field
        if self.is_dedicated_storage is None and "is_dedicated_storage" in self.model_fields_set:
            _dict['isDedicatedStorage'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if software_os_version (nullable) is None
        # and model_fields_set contains the field
        if self.software_os_version is None and "software_os_version" in self.model_fields_set:
            _dict['softwareOsVersion'] = None

        # set to None if total_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.total_capacity is None and "total_capacity" in self.model_fields_set:
            _dict['totalCapacity'] = None

        # set to None if updated_file_system_count (nullable) is None
        # and model_fields_set contains the field
        if self.updated_file_system_count is None and "updated_file_system_count" in self.model_fields_set:
            _dict['updatedFileSystemCount'] = None

        # set to None if uuid (nullable) is None
        # and model_fields_set contains the field
        if self.uuid is None and "uuid" in self.model_fields_set:
            _dict['uuid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FlashbladeParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignedCapacityBytes": obj.get("assignedCapacityBytes"),
            "assignedDataVips": obj.get("assignedDataVips"),
            "availableCapacity": obj.get("availableCapacity"),
            "availableDataVips": obj.get("availableDataVips"),
            "createdFileSystemCount": obj.get("createdFileSystemCount"),
            "isDedicatedStorage": obj.get("isDedicatedStorage"),
            "name": obj.get("name"),
            "registrationParams": FlashBladeRegistrationInfo.from_dict(obj["registrationParams"]) if obj.get("registrationParams") is not None else None,
            "softwareOsVersion": obj.get("softwareOsVersion"),
            "totalCapacity": obj.get("totalCapacity"),
            "updatedFileSystemCount": obj.get("updatedFileSystemCount"),
            "uuid": obj.get("uuid")
        })
        return _obj


