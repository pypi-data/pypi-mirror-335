# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.upgrade_check_node_result import UpgradeCheckNodeResult
from typing import Set
from typing_extensions import Self

class UpgradeChecksResults(BaseModel):
    """
    Specifies upgrade checks results from cluster.
    """ # noqa: E501
    error: Optional[StrictStr] = Field(default=None, description="Error message if test results could not be fetched.")
    finish_time_secs: Optional[StrictInt] = Field(default=None, description="Specifies unix epoch finish time of checks(in seconds).", alias="finishTimeSecs")
    node_results: Optional[List[UpgradeCheckNodeResult]] = Field(default=None, description="The healthcheck result for node.", alias="nodeResults")
    request_type: Optional[StrictStr] = Field(default=None, description="Type of the check(preupgrade/postupgrade).", alias="requestType")
    result_status: Optional[StrictStr] = Field(default=None, description="Final result (running/pass/fail) of run.", alias="resultStatus")
    start_time_secs: Optional[StrictInt] = Field(default=None, description="Specifies unix epoch start time of checks(in seconds).", alias="startTimeSecs")
    test_run_instance_id: Optional[StrictStr] = Field(default=None, description="Specifies test run instance of upgrade checks.", alias="testRunInstanceId")
    __properties: ClassVar[List[str]] = ["error", "finishTimeSecs", "nodeResults", "requestType", "resultStatus", "startTimeSecs", "testRunInstanceId"]

    @field_validator('result_status')
    def result_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Running', 'Passed', 'Failed', 'NotAvailable']):
            raise ValueError("must be one of enum values ('Running', 'Passed', 'Failed', 'NotAvailable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpgradeChecksResults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in node_results (list)
        _items = []
        if self.node_results:
            for _item_node_results in self.node_results:
                if _item_node_results:
                    _items.append(_item_node_results.to_dict())
            _dict['nodeResults'] = _items
        # set to None if finish_time_secs (nullable) is None
        # and model_fields_set contains the field
        if self.finish_time_secs is None and "finish_time_secs" in self.model_fields_set:
            _dict['finishTimeSecs'] = None

        # set to None if start_time_secs (nullable) is None
        # and model_fields_set contains the field
        if self.start_time_secs is None and "start_time_secs" in self.model_fields_set:
            _dict['startTimeSecs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpgradeChecksResults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "error": obj.get("error"),
            "finishTimeSecs": obj.get("finishTimeSecs"),
            "nodeResults": [UpgradeCheckNodeResult.from_dict(_item) for _item in obj["nodeResults"]] if obj.get("nodeResults") is not None else None,
            "requestType": obj.get("requestType"),
            "resultStatus": obj.get("resultStatus"),
            "startTimeSecs": obj.get("startTimeSecs"),
            "testRunInstanceId": obj.get("testRunInstanceId")
        })
        return _obj


