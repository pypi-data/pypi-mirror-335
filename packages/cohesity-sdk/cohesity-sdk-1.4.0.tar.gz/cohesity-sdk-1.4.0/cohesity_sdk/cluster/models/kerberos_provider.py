# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self

class KerberosProvider(BaseModel):
    """
    Specifies the the Kerberos Provider details.
    """ # noqa: E501
    admin_server: Optional[StrictStr] = Field(description="Specifies the admin server used for registration from the list of KDC servers.", alias="adminServer")
    host_alias: List[Annotated[str, Field(strict=True)]] = Field(description="Specifies the DNS routable host alias names.", alias="hostAlias")
    id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Specifies the id.")
    kdc_servers: List[StrictStr] = Field(description="Specifies a list of Key distribution Centre(KDC) Severs.", alias="kdcServers")
    ldap_provider_id: Optional[StrictInt] = Field(default=None, description="Specifies the LDAP provider id to be mapped", alias="ldapProviderId")
    overwritehost_alias: Optional[StrictBool] = Field(default=None, description="Specifies if specified host alias should overwrite existing host alias.", alias="overwritehostAlias")
    realm_name: Optional[StrictStr] = Field(description="Specifies the realm name.", alias="realmName")
    __properties: ClassVar[List[str]] = ["adminServer", "hostAlias", "id", "kdcServers", "ldapProviderId", "overwritehostAlias", "realmName"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+:\d+:\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+:\d+:\d+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KerberosProvider from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if admin_server (nullable) is None
        # and model_fields_set contains the field
        if self.admin_server is None and "admin_server" in self.model_fields_set:
            _dict['adminServer'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if ldap_provider_id (nullable) is None
        # and model_fields_set contains the field
        if self.ldap_provider_id is None and "ldap_provider_id" in self.model_fields_set:
            _dict['ldapProviderId'] = None

        # set to None if overwritehost_alias (nullable) is None
        # and model_fields_set contains the field
        if self.overwritehost_alias is None and "overwritehost_alias" in self.model_fields_set:
            _dict['overwritehostAlias'] = None

        # set to None if realm_name (nullable) is None
        # and model_fields_set contains the field
        if self.realm_name is None and "realm_name" in self.model_fields_set:
            _dict['realmName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KerberosProvider from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminServer": obj.get("adminServer"),
            "hostAlias": obj.get("hostAlias"),
            "id": obj.get("id"),
            "kdcServers": obj.get("kdcServers"),
            "ldapProviderId": obj.get("ldapProviderId"),
            "overwritehostAlias": obj.get("overwritehostAlias"),
            "realmName": obj.get("realmName")
        })
        return _obj


