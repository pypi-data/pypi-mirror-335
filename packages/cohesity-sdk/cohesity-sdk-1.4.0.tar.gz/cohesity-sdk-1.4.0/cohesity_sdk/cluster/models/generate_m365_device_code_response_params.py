# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class GenerateM365DeviceCodeResponseParams(BaseModel):
    """
    Specifies the response containing the user and device codes along with the verification URI needed for Device Authorization grant.
    """ # noqa: E501
    device_code: Optional[StrictStr] = Field(default=None, description="Specifies the string used to verify the session between the client and the authorization server. The client uses this parameter to request the access token from the authorization server.", alias="deviceCode")
    expires_in_secs: Optional[StrictInt] = Field(default=None, description="The number of seconds before the deviceCode and userCode expire.", alias="expiresInSecs")
    interval_secs: Optional[StrictInt] = Field(default=None, description="The number of seconds the client should wait between polling requests to check for token.", alias="intervalSecs")
    user_code: Optional[StrictStr] = Field(default=None, description="A short string shown to the user that's used to identify the session on a secondary device.", alias="userCode")
    verification_uri: Optional[StrictStr] = Field(default=None, description="The URI the user should go to with the userCode in order to sign in.", alias="verificationUri")
    __properties: ClassVar[List[str]] = ["deviceCode", "expiresInSecs", "intervalSecs", "userCode", "verificationUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerateM365DeviceCodeResponseParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if device_code (nullable) is None
        # and model_fields_set contains the field
        if self.device_code is None and "device_code" in self.model_fields_set:
            _dict['deviceCode'] = None

        # set to None if expires_in_secs (nullable) is None
        # and model_fields_set contains the field
        if self.expires_in_secs is None and "expires_in_secs" in self.model_fields_set:
            _dict['expiresInSecs'] = None

        # set to None if interval_secs (nullable) is None
        # and model_fields_set contains the field
        if self.interval_secs is None and "interval_secs" in self.model_fields_set:
            _dict['intervalSecs'] = None

        # set to None if user_code (nullable) is None
        # and model_fields_set contains the field
        if self.user_code is None and "user_code" in self.model_fields_set:
            _dict['userCode'] = None

        # set to None if verification_uri (nullable) is None
        # and model_fields_set contains the field
        if self.verification_uri is None and "verification_uri" in self.model_fields_set:
            _dict['verificationUri'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerateM365DeviceCodeResponseParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceCode": obj.get("deviceCode"),
            "expiresInSecs": obj.get("expiresInSecs"),
            "intervalSecs": obj.get("intervalSecs"),
            "userCode": obj.get("userCode"),
            "verificationUri": obj.get("verificationUri")
        })
        return _obj


