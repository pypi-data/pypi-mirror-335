# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class ErasureCodingParams(BaseModel):
    """
    Specifies parameters for erasure coding.
    """ # noqa: E501
    delay_secs: Optional[StrictInt] = Field(default=None, description="Specifies the time in seconds when erasure coding starts.", alias="delaySecs")
    enabled: Optional[StrictBool] = Field(description="Specifies whether to enable erasure coding on a Storage Domain.")
    inline_enabled: Optional[StrictBool] = Field(default=None, description="Specifies whether inline erasure coding is enabled. This field is appliciable only if enabled is set to true.", alias="inlineEnabled")
    num_coded_stripes: Optional[StrictInt] = Field(description="Specifies the number of coded stripes.", alias="numCodedStripes")
    num_data_stripes: Optional[StrictInt] = Field(description="Specifies the number of data stripes.", alias="numDataStripes")
    __properties: ClassVar[List[str]] = ["delaySecs", "enabled", "inlineEnabled", "numCodedStripes", "numDataStripes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ErasureCodingParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if delay_secs (nullable) is None
        # and model_fields_set contains the field
        if self.delay_secs is None and "delay_secs" in self.model_fields_set:
            _dict['delaySecs'] = None

        # set to None if enabled (nullable) is None
        # and model_fields_set contains the field
        if self.enabled is None and "enabled" in self.model_fields_set:
            _dict['enabled'] = None

        # set to None if inline_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.inline_enabled is None and "inline_enabled" in self.model_fields_set:
            _dict['inlineEnabled'] = None

        # set to None if num_coded_stripes (nullable) is None
        # and model_fields_set contains the field
        if self.num_coded_stripes is None and "num_coded_stripes" in self.model_fields_set:
            _dict['numCodedStripes'] = None

        # set to None if num_data_stripes (nullable) is None
        # and model_fields_set contains the field
        if self.num_data_stripes is None and "num_data_stripes" in self.model_fields_set:
            _dict['numDataStripes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ErasureCodingParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "delaySecs": obj.get("delaySecs"),
            "enabled": obj.get("enabled"),
            "inlineEnabled": obj.get("inlineEnabled"),
            "numCodedStripes": obj.get("numCodedStripes"),
            "numDataStripes": obj.get("numDataStripes")
        })
        return _obj


