# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.office365_preservation_hold_library_params import Office365PreservationHoldLibraryParams
from typing import Set
from typing_extensions import Self

class Office365OneDriveProtectionGroupParams(BaseModel):
    """
    Specifies the parameters which are specific to Office 365 OneDrive related Protection Groups.
    """ # noqa: E501
    exclude_folders: Optional[List[StrictStr]] = Field(default=None, description="Array of Excluded OneDrive folders. Specifies filters to match OneDrive folders which should be excluded when backing up Office 365 source. Two kinds of filters are supported. a) prefix which always starts with '/'. b) posix which always starts with empty quotes(''). Regular expressions are not supported. If not specified, all the mailboxes will be protected.", alias="excludeFolders")
    preservation_hold_library_params: Optional[Office365PreservationHoldLibraryParams] = Field(default=None, alias="preservationHoldLibraryParams")
    __properties: ClassVar[List[str]] = ["excludeFolders", "preservationHoldLibraryParams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Office365OneDriveProtectionGroupParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of preservation_hold_library_params
        if self.preservation_hold_library_params:
            _dict['preservationHoldLibraryParams'] = self.preservation_hold_library_params.to_dict()
        # set to None if exclude_folders (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_folders is None and "exclude_folders" in self.model_fields_set:
            _dict['excludeFolders'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Office365OneDriveProtectionGroupParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "excludeFolders": obj.get("excludeFolders"),
            "preservationHoldLibraryParams": Office365PreservationHoldLibraryParams.from_dict(obj["preservationHoldLibraryParams"]) if obj.get("preservationHoldLibraryParams") is not None else None
        })
        return _obj


