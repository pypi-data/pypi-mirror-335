# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class AlertGroupSummary(BaseModel):
    """
    Specifies alerts summary grouped for an alert category.
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="Category of alerts by which summary is grouped.")
    critical_count: Optional[StrictInt] = Field(default=None, description="Specifies count of critical alerts.", alias="criticalCount")
    info_count: Optional[StrictInt] = Field(default=None, description="Specifies count of info alerts.", alias="infoCount")
    total_count: Optional[StrictInt] = Field(default=None, description="Specifies count of total alerts.", alias="totalCount")
    type: Optional[StrictStr] = Field(default=None, description="Type/bucket that this alert category belongs to.")
    warning_count: Optional[StrictInt] = Field(default=None, description="Specifies count of warning alerts.", alias="warningCount")
    __properties: ClassVar[List[str]] = ["category", "criticalCount", "infoCount", "totalCount", "type", "warningCount"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kDisk', 'kNode', 'kCluster', 'kChassis', 'kPowerSupply', 'kCPU', 'kMemory', 'kTemperature', 'kFan', 'kNIC', 'kFirmware', 'kNodeHealth', 'kOperatingSystem', 'kDataPath', 'kMetadata', 'kIndexing', 'kHelios', 'kAppMarketPlace', 'kSystemService', 'kLicense', 'kSecurity', 'kUpgrade', 'kClusterManagement', 'kAuditLog', 'kNetworking', 'kConfiguration', 'kStorageUsage', 'kFaultTolerance', 'kBackupRestore', 'kArchivalRestore', 'kRemoteReplication', 'kQuota', 'kCDP', 'kViewFailover', 'kDisasterRecovery']):
            raise ValueError("must be one of enum values ('kDisk', 'kNode', 'kCluster', 'kChassis', 'kPowerSupply', 'kCPU', 'kMemory', 'kTemperature', 'kFan', 'kNIC', 'kFirmware', 'kNodeHealth', 'kOperatingSystem', 'kDataPath', 'kMetadata', 'kIndexing', 'kHelios', 'kAppMarketPlace', 'kSystemService', 'kLicense', 'kSecurity', 'kUpgrade', 'kClusterManagement', 'kAuditLog', 'kNetworking', 'kConfiguration', 'kStorageUsage', 'kFaultTolerance', 'kBackupRestore', 'kArchivalRestore', 'kRemoteReplication', 'kQuota', 'kCDP', 'kViewFailover', 'kDisasterRecovery')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertGroupSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if critical_count (nullable) is None
        # and model_fields_set contains the field
        if self.critical_count is None and "critical_count" in self.model_fields_set:
            _dict['criticalCount'] = None

        # set to None if info_count (nullable) is None
        # and model_fields_set contains the field
        if self.info_count is None and "info_count" in self.model_fields_set:
            _dict['infoCount'] = None

        # set to None if total_count (nullable) is None
        # and model_fields_set contains the field
        if self.total_count is None and "total_count" in self.model_fields_set:
            _dict['totalCount'] = None

        # set to None if warning_count (nullable) is None
        # and model_fields_set contains the field
        if self.warning_count is None and "warning_count" in self.model_fields_set:
            _dict['warningCount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertGroupSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "criticalCount": obj.get("criticalCount"),
            "infoCount": obj.get("infoCount"),
            "totalCount": obj.get("totalCount"),
            "type": obj.get("type"),
            "warningCount": obj.get("warningCount")
        })
        return _obj


