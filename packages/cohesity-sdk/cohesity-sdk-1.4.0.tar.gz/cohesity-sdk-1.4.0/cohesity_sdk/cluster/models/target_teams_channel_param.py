# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.recovery_object_identifier import RecoveryObjectIdentifier
from typing import Set
from typing_extensions import Self

class TargetTeamsChannelParam(BaseModel):
    """
    Specifies the target Microsoft 365 Team channel to recover to in case of granular restore
    """ # noqa: E501
    channel_owners: Optional[List[RecoveryObjectIdentifier]] = Field(default=None, description="List of owners for the private channel. At least one owner is needed to create a private channel", alias="channelOwners")
    channel_type: Optional[StrictStr] = Field(default=None, description="Specifies whether to create a public or private channel", alias="channelType")
    create_new_channel: Optional[StrictBool] = Field(default=None, description="Specifies whether we should create a new channel. If this is true name must not be empty", alias="createNewChannel")
    id: Optional[StrictStr] = Field(default=None, description="Specifies the id of the target channel.")
    name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the target channel.")
    __properties: ClassVar[List[str]] = ["channelOwners", "channelType", "createNewChannel", "id", "name"]

    @field_validator('channel_type')
    def channel_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Private', 'Public']):
            raise ValueError("must be one of enum values ('Private', 'Public')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TargetTeamsChannelParam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in channel_owners (list)
        _items = []
        if self.channel_owners:
            for _item_channel_owners in self.channel_owners:
                if _item_channel_owners:
                    _items.append(_item_channel_owners.to_dict())
            _dict['channelOwners'] = _items
        # set to None if channel_owners (nullable) is None
        # and model_fields_set contains the field
        if self.channel_owners is None and "channel_owners" in self.model_fields_set:
            _dict['channelOwners'] = None

        # set to None if create_new_channel (nullable) is None
        # and model_fields_set contains the field
        if self.create_new_channel is None and "create_new_channel" in self.model_fields_set:
            _dict['createNewChannel'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TargetTeamsChannelParam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channelOwners": [RecoveryObjectIdentifier.from_dict(_item) for _item in obj["channelOwners"]] if obj.get("channelOwners") is not None else None,
            "channelType": obj.get("channelType"),
            "createNewChannel": obj.get("createNewChannel"),
            "id": obj.get("id"),
            "name": obj.get("name")
        })
        return _obj


