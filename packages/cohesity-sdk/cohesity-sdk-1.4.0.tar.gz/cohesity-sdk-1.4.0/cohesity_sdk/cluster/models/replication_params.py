# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.bandwidth_throttling import BandwidthThrottling
from cohesity_sdk.cluster.models.storage_domain_pair import StorageDomainPair
from typing import Set
from typing_extensions import Self

class ReplicationParams(BaseModel):
    """
    Specifies the replication config for a Remote Cluster.
    """ # noqa: E501
    all_endpoints_reachable: Optional[StrictBool] = Field(default=False, description="Specifies if all endpoints on Remote Cluster are reachable.", alias="allEndpointsReachable")
    bandwidth_limit: Optional[BandwidthThrottling] = Field(default=None, alias="bandwidthLimit")
    compression_enabled: Optional[StrictBool] = Field(default=True, description="Specifies whether to compress the outbound data when transferring the replication data over the network to the Remote Cluster.", alias="compressionEnabled")
    encryption_key: Optional[StrictStr] = Field(default=None, description="Specifies the encryption key used for encrypting the replication data from a local Cluster to a Remote Cluster. If a key is not specified, replication traffic encryption is disabled. When Snapshots are replicated from a local Cluster to a Remote Cluster, the encryption key specified on the local Cluster must be the same as the key specified on the Remote Cluster.", alias="encryptionKey")
    storage_domain_pairs: Optional[List[StorageDomainPair]] = Field(default=None, description="Specifies a list of Storage Domain pairs.", alias="storageDomainPairs")
    __properties: ClassVar[List[str]] = ["allEndpointsReachable", "bandwidthLimit", "compressionEnabled", "encryptionKey", "storageDomainPairs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicationParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bandwidth_limit
        if self.bandwidth_limit:
            _dict['bandwidthLimit'] = self.bandwidth_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in storage_domain_pairs (list)
        _items = []
        if self.storage_domain_pairs:
            for _item_storage_domain_pairs in self.storage_domain_pairs:
                if _item_storage_domain_pairs:
                    _items.append(_item_storage_domain_pairs.to_dict())
            _dict['storageDomainPairs'] = _items
        # set to None if all_endpoints_reachable (nullable) is None
        # and model_fields_set contains the field
        if self.all_endpoints_reachable is None and "all_endpoints_reachable" in self.model_fields_set:
            _dict['allEndpointsReachable'] = None

        # set to None if compression_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.compression_enabled is None and "compression_enabled" in self.model_fields_set:
            _dict['compressionEnabled'] = None

        # set to None if encryption_key (nullable) is None
        # and model_fields_set contains the field
        if self.encryption_key is None and "encryption_key" in self.model_fields_set:
            _dict['encryptionKey'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicationParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allEndpointsReachable": obj.get("allEndpointsReachable") if obj.get("allEndpointsReachable") is not None else False,
            "bandwidthLimit": BandwidthThrottling.from_dict(obj["bandwidthLimit"]) if obj.get("bandwidthLimit") is not None else None,
            "compressionEnabled": obj.get("compressionEnabled") if obj.get("compressionEnabled") is not None else True,
            "encryptionKey": obj.get("encryptionKey"),
            "storageDomainPairs": [StorageDomainPair.from_dict(_item) for _item in obj["storageDomainPairs"]] if obj.get("storageDomainPairs") is not None else None
        })
        return _obj


