# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class ClusterUpradeParams(BaseModel):
    """
    Specifies the parameters to upgrade the software on the cluster.
    """ # noqa: E501
    abort_upgrade_on_checks_failure: Optional[StrictBool] = Field(default=True, description="Specifies if pre upgrade healthchecks failure will cause upgrade to be aborted. By default we abort upgrade if there are healthchecks failures .Cluster will stop the upgrade.and present the failures which need to be resolved before proceeding with upgrade. If set to false upgrade will not be aborted on healthchecks failure.", alias="abortUpgradeOnChecksFailure")
    type: StrictStr = Field(description="The operation type. 'Upgrade' indicates to upgrade the software on the cluster. 'UploadPackageAndUpgrade' indicates to first upload the package using the url where package is hosted and then upgrade the cluster.")
    url: Optional[StrictStr] = Field(default=None, description="The URL where the package is hosted. This is required when the operation type is 'UploadPackageAndUpgrade'")
    version_name: Optional[StrictStr] = Field(default=None, description="Version name of the package. Example: 6.3.1h_release-20210714_0fad884e. This is required when the operation type is 'Upgrade'", alias="versionName")
    __properties: ClassVar[List[str]] = ["abortUpgradeOnChecksFailure", "type", "url", "versionName"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Upgrade', 'UploadPackageAndUpgrade']):
            raise ValueError("must be one of enum values ('Upgrade', 'UploadPackageAndUpgrade')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterUpradeParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterUpradeParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "abortUpgradeOnChecksFailure": obj.get("abortUpgradeOnChecksFailure") if obj.get("abortUpgradeOnChecksFailure") is not None else True,
            "type": obj.get("type"),
            "url": obj.get("url"),
            "versionName": obj.get("versionName")
        })
        return _obj


