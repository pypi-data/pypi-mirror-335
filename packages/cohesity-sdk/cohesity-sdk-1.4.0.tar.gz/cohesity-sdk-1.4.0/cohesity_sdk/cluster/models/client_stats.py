# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.client_stats_in_last_hours import ClientStatsInLastHours
from typing import Set
from typing_extensions import Self

class ClientStats(BaseModel):
    """
    Specifies the Client stats.
    """ # noqa: E501
    metric: Optional[StrictStr] = Field(default=None, description="Specifies the stats metric.")
    value: Optional[StrictInt] = Field(default=None, description="Specifies the stats value.")
    value_in_last_hours: Optional[List[ClientStatsInLastHours]] = Field(default=None, description="Specifies the stats value in last hours.", alias="valueInLastHours")
    __properties: ClassVar[List[str]] = ["metric", "value", "valueInLastHours"]

    @field_validator('metric')
    def metric_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kNumBytesRead', 'kNumBytesWritten', 'kReadIos', 'kWriteIos', 'kReadLatencyUsecs', 'kWriteLatencyUsecs', 'kNumReadErrors', 'kNumWriteErrors', 'kNFSv3MntLatUsecs', 'kNFSv3MntOps', 'kNFSv3MntErr', 'kNFSv3UmntLatUsecs', 'kNFSv3UmntOps', 'kNFSv3UmntErr', 'kNFSv3CreateLatUsecs', 'kNFSv3CreateOps', 'kNFSv3CreateErr', 'kNFSv3RemoveLatUsecs', 'kNFSv3RemoveOps', 'kNFSv3RemoveErr', 'kNFSv3MkdirLatUsecs', 'kNFSv3MkdirOps', 'kNFSv3MkdirErr', 'kNFSv3RmdirLatUsecs', 'kNFSv3RmdirOps', 'kNFSv3RmdirErr', 'kNFSv3LookupLatUsecs', 'kNFSv3LookupOps', 'kNFSv3LookupErr', 'kNFSv3ReaddirLatUsecs', 'kNFSv3ReaddirOps', 'kNFSv3ReaddirErr', 'kNFSv3ReaddirplusLatUsecs', 'kNFSv3ReaddirplusOps', 'kNFSv3ReaddirplusErr', 'kNFSv3SymlinkLatUsecs', 'kNFSv3SymlinkOps', 'kNFSv3SymlinkErr', 'kNFSv3RenameLatUsecs', 'kNFSv3RenameOps', 'kNFSv3RenameErr', 'kSMBSessionSetupLatUsecs', 'kSMBSessionSetupOps', 'kSMBSessionSetupErr', 'kSMBLogoffLatUsecs', 'kSMBLogoffOps', 'kSMBLogoffErr', 'kSMBTreeConnectLatUsecs', 'kSMBTreeConnectOps', 'kSMBTreeConnectErr', 'kSMBTreeDisconnectLatUsecs', 'kSMBTreeDisconnectOps', 'kSMBTreeDisconnectErr', 'kSMBOpenLatUsecs', 'kSMBOpenOps', 'kSMBOpenErr', 'kSMBCloseLatUsecs', 'kSMBCloseOps', 'kSMBCloseErr', 'kSMBCreateFileLatUsecs', 'kSMBCreateFileOps', 'kSMBCreateFileErr', 'kSMBDeleteFileLatUsecs', 'kSMBDeleteFileOps', 'kSMBDeleteFileErr', 'kSMBMkdirLatUsecs', 'kSMBMkdirOps', 'kSMBMkdirErr', 'kSMBRmdirLatUsecs', 'kSMBRmdirOps', 'kSMBRmdirErr', 'kSMBReaddirLatUsecs', 'kSMBReaddirOps', 'kSMBReaddirErr', 'kSMBGetInfoLatUsecs', 'kSMBGetInfoOps', 'kSMBGetInfoErr', 'kSMBSetInfoLatUsecs', 'kSMBSetInfoOps', 'kSMBSetInfoErr', 'kSMBRenameLatUsecs', 'kSMBRenameOps', 'kSMBRenameErr']):
            raise ValueError("must be one of enum values ('kNumBytesRead', 'kNumBytesWritten', 'kReadIos', 'kWriteIos', 'kReadLatencyUsecs', 'kWriteLatencyUsecs', 'kNumReadErrors', 'kNumWriteErrors', 'kNFSv3MntLatUsecs', 'kNFSv3MntOps', 'kNFSv3MntErr', 'kNFSv3UmntLatUsecs', 'kNFSv3UmntOps', 'kNFSv3UmntErr', 'kNFSv3CreateLatUsecs', 'kNFSv3CreateOps', 'kNFSv3CreateErr', 'kNFSv3RemoveLatUsecs', 'kNFSv3RemoveOps', 'kNFSv3RemoveErr', 'kNFSv3MkdirLatUsecs', 'kNFSv3MkdirOps', 'kNFSv3MkdirErr', 'kNFSv3RmdirLatUsecs', 'kNFSv3RmdirOps', 'kNFSv3RmdirErr', 'kNFSv3LookupLatUsecs', 'kNFSv3LookupOps', 'kNFSv3LookupErr', 'kNFSv3ReaddirLatUsecs', 'kNFSv3ReaddirOps', 'kNFSv3ReaddirErr', 'kNFSv3ReaddirplusLatUsecs', 'kNFSv3ReaddirplusOps', 'kNFSv3ReaddirplusErr', 'kNFSv3SymlinkLatUsecs', 'kNFSv3SymlinkOps', 'kNFSv3SymlinkErr', 'kNFSv3RenameLatUsecs', 'kNFSv3RenameOps', 'kNFSv3RenameErr', 'kSMBSessionSetupLatUsecs', 'kSMBSessionSetupOps', 'kSMBSessionSetupErr', 'kSMBLogoffLatUsecs', 'kSMBLogoffOps', 'kSMBLogoffErr', 'kSMBTreeConnectLatUsecs', 'kSMBTreeConnectOps', 'kSMBTreeConnectErr', 'kSMBTreeDisconnectLatUsecs', 'kSMBTreeDisconnectOps', 'kSMBTreeDisconnectErr', 'kSMBOpenLatUsecs', 'kSMBOpenOps', 'kSMBOpenErr', 'kSMBCloseLatUsecs', 'kSMBCloseOps', 'kSMBCloseErr', 'kSMBCreateFileLatUsecs', 'kSMBCreateFileOps', 'kSMBCreateFileErr', 'kSMBDeleteFileLatUsecs', 'kSMBDeleteFileOps', 'kSMBDeleteFileErr', 'kSMBMkdirLatUsecs', 'kSMBMkdirOps', 'kSMBMkdirErr', 'kSMBRmdirLatUsecs', 'kSMBRmdirOps', 'kSMBRmdirErr', 'kSMBReaddirLatUsecs', 'kSMBReaddirOps', 'kSMBReaddirErr', 'kSMBGetInfoLatUsecs', 'kSMBGetInfoOps', 'kSMBGetInfoErr', 'kSMBSetInfoLatUsecs', 'kSMBSetInfoOps', 'kSMBSetInfoErr', 'kSMBRenameLatUsecs', 'kSMBRenameOps', 'kSMBRenameErr')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in value_in_last_hours (list)
        _items = []
        if self.value_in_last_hours:
            for _item_value_in_last_hours in self.value_in_last_hours:
                if _item_value_in_last_hours:
                    _items.append(_item_value_in_last_hours.to_dict())
            _dict['valueInLastHours'] = _items
        # set to None if metric (nullable) is None
        # and model_fields_set contains the field
        if self.metric is None and "metric" in self.model_fields_set:
            _dict['metric'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if value_in_last_hours (nullable) is None
        # and model_fields_set contains the field
        if self.value_in_last_hours is None and "value_in_last_hours" in self.model_fields_set:
            _dict['valueInLastHours'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metric": obj.get("metric"),
            "value": obj.get("value"),
            "valueInLastHours": [ClientStatsInLastHours.from_dict(_item) for _item in obj["valueInLastHours"]] if obj.get("valueInLastHours") is not None else None
        })
        return _obj


