# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class PlannedRunPollStatus(BaseModel):
    """
    Specifies whether run has been scheduled or not and also returns the unique run id along with failoverId upon scheduling the run.
    """ # noqa: E501
    backup_task_status: Optional[StrictStr] = Field(default=None, description="Status of the backup job. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being canceled. 'Paused' indicates that the ongoing run has been paused. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages. 'Skipped' indicates that the run was skipped.", alias="backupTaskStatus")
    failover_id: Optional[StrictStr] = Field(default=None, description="Specifies the unique failover Id which will be generated by orchestrator. This Id will be used to uniquely identify current failover operation.", alias="failoverId")
    on_prem_deploy_task_status: Optional[StrictStr] = Field(default=None, description="Status of the OnPrem deploy task. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being canceled. 'Paused' indicates that the ongoing run has been paused. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages. 'Skipped' indicates that the run was skipped.", alias="onPremDeployTaskStatus")
    protection_group_id: Optional[StrictStr] = Field(default=None, description="Specifies the protection group id to which this run belongs.", alias="protectionGroupId")
    run_id: Optional[StrictStr] = Field(default=None, description="If run has been scheduled then this field will be populated with unique run id.", alias="runId")
    waiting_on_other_run_cancellations: Optional[StrictBool] = Field(default=None, description="If cancelNonFailoverRuns was passed as true during creation of run for current failover then this will return the status of other run cacellations. If other runs are still pending for cancellations then this will be returned as true otherwise it will be return as false.", alias="waitingOnOtherRunCancellations")
    __properties: ClassVar[List[str]] = ["backupTaskStatus", "failoverId", "onPremDeployTaskStatus", "protectionGroupId", "runId", "waitingOnOtherRunCancellations"]

    @field_validator('backup_task_status')
    def backup_task_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped', 'Paused']):
            raise ValueError("must be one of enum values ('Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped', 'Paused')")
        return value

    @field_validator('on_prem_deploy_task_status')
    def on_prem_deploy_task_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped', 'Paused']):
            raise ValueError("must be one of enum values ('Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped', 'Paused')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlannedRunPollStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if backup_task_status (nullable) is None
        # and model_fields_set contains the field
        if self.backup_task_status is None and "backup_task_status" in self.model_fields_set:
            _dict['backupTaskStatus'] = None

        # set to None if failover_id (nullable) is None
        # and model_fields_set contains the field
        if self.failover_id is None and "failover_id" in self.model_fields_set:
            _dict['failoverId'] = None

        # set to None if on_prem_deploy_task_status (nullable) is None
        # and model_fields_set contains the field
        if self.on_prem_deploy_task_status is None and "on_prem_deploy_task_status" in self.model_fields_set:
            _dict['onPremDeployTaskStatus'] = None

        # set to None if protection_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.protection_group_id is None and "protection_group_id" in self.model_fields_set:
            _dict['protectionGroupId'] = None

        # set to None if run_id (nullable) is None
        # and model_fields_set contains the field
        if self.run_id is None and "run_id" in self.model_fields_set:
            _dict['runId'] = None

        # set to None if waiting_on_other_run_cancellations (nullable) is None
        # and model_fields_set contains the field
        if self.waiting_on_other_run_cancellations is None and "waiting_on_other_run_cancellations" in self.model_fields_set:
            _dict['waitingOnOtherRunCancellations'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlannedRunPollStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupTaskStatus": obj.get("backupTaskStatus"),
            "failoverId": obj.get("failoverId"),
            "onPremDeployTaskStatus": obj.get("onPremDeployTaskStatus"),
            "protectionGroupId": obj.get("protectionGroupId"),
            "runId": obj.get("runId"),
            "waitingOnOtherRunCancellations": obj.get("waitingOnOtherRunCancellations")
        })
        return _obj


