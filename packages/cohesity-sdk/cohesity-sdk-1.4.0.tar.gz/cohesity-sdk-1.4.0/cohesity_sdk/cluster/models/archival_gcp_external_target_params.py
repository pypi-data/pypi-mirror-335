# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class ArchivalGcpExternalTargetParams(BaseModel):
    """
    Specifies the parameters which are specific to GCP related External Targets of archival purpose type.
    """ # noqa: E501
    bucket_name: Optional[StrictStr] = Field(description="Specifies the bucket name of the external target.", alias="bucketName")
    client_email_address: Optional[StrictStr] = Field(description="Specifies the client email address of the external target.", alias="clientEmailAddress")
    client_private_key: Optional[StrictStr] = Field(default=None, description="Specifies the client private key of the external target.", alias="clientPrivateKey")
    project_id: Optional[StrictStr] = Field(description="Specifies the project Id of the external target.", alias="projectId")
    is_forever_incremental_archival_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if Forever Incremental Archival setting is enabled or not.", alias="isForeverIncrementalArchivalEnabled")
    is_incremental_archival_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if Incremental Archival setting is enabled or not.", alias="isIncrementalArchivalEnabled")
    source_side_deduplication: Optional[StrictBool] = Field(default=None, description="Specifies the Source Side Deduplication setting for the GCP external target", alias="sourceSideDeduplication")
    storage_class: Optional[StrictStr] = Field(description="Specifies the GCP External Target storage class.", alias="storageClass")
    __properties: ClassVar[List[str]] = ["bucketName", "clientEmailAddress", "clientPrivateKey", "projectId", "isForeverIncrementalArchivalEnabled", "isIncrementalArchivalEnabled", "sourceSideDeduplication", "storageClass"]

    @field_validator('storage_class')
    def storage_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GCPStandard', 'GCPColdline', 'GCPNearline']):
            raise ValueError("must be one of enum values ('GCPStandard', 'GCPColdline', 'GCPNearline')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArchivalGcpExternalTargetParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if bucket_name (nullable) is None
        # and model_fields_set contains the field
        if self.bucket_name is None and "bucket_name" in self.model_fields_set:
            _dict['bucketName'] = None

        # set to None if client_email_address (nullable) is None
        # and model_fields_set contains the field
        if self.client_email_address is None and "client_email_address" in self.model_fields_set:
            _dict['clientEmailAddress'] = None

        # set to None if client_private_key (nullable) is None
        # and model_fields_set contains the field
        if self.client_private_key is None and "client_private_key" in self.model_fields_set:
            _dict['clientPrivateKey'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['projectId'] = None

        # set to None if is_forever_incremental_archival_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.is_forever_incremental_archival_enabled is None and "is_forever_incremental_archival_enabled" in self.model_fields_set:
            _dict['isForeverIncrementalArchivalEnabled'] = None

        # set to None if is_incremental_archival_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.is_incremental_archival_enabled is None and "is_incremental_archival_enabled" in self.model_fields_set:
            _dict['isIncrementalArchivalEnabled'] = None

        # set to None if source_side_deduplication (nullable) is None
        # and model_fields_set contains the field
        if self.source_side_deduplication is None and "source_side_deduplication" in self.model_fields_set:
            _dict['sourceSideDeduplication'] = None

        # set to None if storage_class (nullable) is None
        # and model_fields_set contains the field
        if self.storage_class is None and "storage_class" in self.model_fields_set:
            _dict['storageClass'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArchivalGcpExternalTargetParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bucketName": obj.get("bucketName"),
            "clientEmailAddress": obj.get("clientEmailAddress"),
            "clientPrivateKey": obj.get("clientPrivateKey"),
            "projectId": obj.get("projectId"),
            "isForeverIncrementalArchivalEnabled": obj.get("isForeverIncrementalArchivalEnabled"),
            "isIncrementalArchivalEnabled": obj.get("isIncrementalArchivalEnabled"),
            "sourceSideDeduplication": obj.get("sourceSideDeduplication"),
            "storageClass": obj.get("storageClass")
        })
        return _obj


