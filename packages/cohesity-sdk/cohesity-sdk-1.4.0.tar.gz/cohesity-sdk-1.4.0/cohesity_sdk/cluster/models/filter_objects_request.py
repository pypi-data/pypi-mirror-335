# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cohesity_sdk.cluster.models.filter import Filter
from typing import Set
from typing_extensions import Self

class FilterObjectsRequest(BaseModel):
    """
    Specifies the filter details.
    """ # noqa: E501
    application_environment: Optional[StrictStr] = Field(default=None, description="Specifies the type of application enviornment needed for filtering to be applied on. This is needed because in case of applications like SQL, Oracle, a single source can contain multiple application enviornments.", alias="applicationEnvironment")
    filter_type: Optional[StrictStr] = Field(description="Specifies the type of filtering user wants to perform. Currently, we only support exclude type of filter.", alias="filterType")
    filters: Optional[Annotated[List[Filter], Field(min_length=1)]] = Field(description="Specifies the list of filters that need to be applied on given list of discovered objects.")
    include_tenants: Optional[StrictBool] = Field(default=False, description="If true, the response will include objects which belongs to all tenants which the current user has permission to see. Default value is false.", alias="includeTenants")
    object_ids: Optional[Annotated[List[StrictInt], Field(min_length=1)]] = Field(description="Specifies a list of non leaf object ids to filter the leaf level objects. Non leaf object such host (physical or vm) or database instance can be specified.", alias="objectIds")
    tenant_ids: Optional[List[StrictStr]] = Field(default=None, description="TenantIds contains list of the tenant for which objects are to be returned.", alias="tenantIds")
    __properties: ClassVar[List[str]] = ["applicationEnvironment", "filterType", "filters", "includeTenants", "objectIds", "tenantIds"]

    @field_validator('application_environment')
    def application_environment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kSQL']):
            raise ValueError("must be one of enum values ('kSQL')")
        return value

    @field_validator('filter_type')
    def filter_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['exclude']):
            raise ValueError("must be one of enum values ('exclude')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilterObjectsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        # set to None if application_environment (nullable) is None
        # and model_fields_set contains the field
        if self.application_environment is None and "application_environment" in self.model_fields_set:
            _dict['applicationEnvironment'] = None

        # set to None if filter_type (nullable) is None
        # and model_fields_set contains the field
        if self.filter_type is None and "filter_type" in self.model_fields_set:
            _dict['filterType'] = None

        # set to None if filters (nullable) is None
        # and model_fields_set contains the field
        if self.filters is None and "filters" in self.model_fields_set:
            _dict['filters'] = None

        # set to None if include_tenants (nullable) is None
        # and model_fields_set contains the field
        if self.include_tenants is None and "include_tenants" in self.model_fields_set:
            _dict['includeTenants'] = None

        # set to None if object_ids (nullable) is None
        # and model_fields_set contains the field
        if self.object_ids is None and "object_ids" in self.model_fields_set:
            _dict['objectIds'] = None

        # set to None if tenant_ids (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_ids is None and "tenant_ids" in self.model_fields_set:
            _dict['tenantIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilterObjectsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationEnvironment": obj.get("applicationEnvironment"),
            "filterType": obj.get("filterType"),
            "filters": [Filter.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "includeTenants": obj.get("includeTenants") if obj.get("includeTenants") is not None else False,
            "objectIds": obj.get("objectIds"),
            "tenantIds": obj.get("tenantIds")
        })
        return _obj


