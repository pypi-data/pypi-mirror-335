# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class SmbPermission(BaseModel):
    """
    Specifies information about a single SMB permission.
    """ # noqa: E501
    access: Optional[StrictStr] = Field(default=None, description="Specifies the read/write access to the SMB share. 'ReadyOnly' indicates read only access to the SMB share. 'ReadWrite' indicates read and write access to the SMB share. 'FullControl' indicates full administrative control of the SMB share. 'SpecialAccess' indicates custom permissions to the SMB share using  access masks structures. 'SuperUser' indicates root permissions ignoring all SMB ACLs.")
    mode: Optional[StrictStr] = Field(default=None, description="Specifies how the permission should be applied to folders and/or files. 'FolderSubFoldersAndFiles' indicates that permissions are applied to a Folder and it's sub folders and files. 'FolderAndSubFolders' indicates that permissions are applied to a Folder and it's sub folders. 'FolderAndSubFiles' indicates that permissions are applied to a Folder and it's sub files. 'FolderOnly' indicates that permsission are applied to folder only. 'SubFoldersAndFilesOnly' indicates that permissions are applied to sub folders and files only. 'SubFoldersOnly' indicates that permissiona are applied to sub folders only. 'FilesOnly' indicates that permissions are applied to files only.")
    sid: Optional[StrictStr] = Field(default=None, description="Specifies the security identifier (SID) of the principal.")
    special_access_mask: Optional[StrictInt] = Field(default=None, description="Specifies custom access permissions. When the access mask from the Access Control Entry (ACE) cannot be mapped to one of the enums in 'access', this field is populated with the custom mask derived from the ACE and 'access' is set to kSpecialAccess. This is a placeholder for storing an unmapped access permission and should not be set when creating and editing a View.", alias="specialAccessMask")
    special_type: Optional[StrictInt] = Field(default=None, description="Specifies a custom type. When the type from the Access Control Entry (ACE) cannot be mapped to one of the enums in 'type', this field is populated with the custom type derived from the ACE and 'type' is set to kSpecialType. This is a placeholder for storing an unmapped type and should not be set when creating and editing a View.", alias="specialType")
    type: Optional[StrictStr] = Field(default=None, description="Specifies the type of permission. 'Allow' indicates access is allowed. 'Deny' indicates access is denied. 'SpecialType' indicates a type defined in the Access Control Entry (ACE) does not map to 'Allow' or 'Deny'.")
    __properties: ClassVar[List[str]] = ["access", "mode", "sid", "specialAccessMask", "specialType", "type"]

    @field_validator('access')
    def access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ReadOnly', 'ReadWrite', 'Modify', 'FullControl', 'SpecialAccess']):
            raise ValueError("must be one of enum values ('ReadOnly', 'ReadWrite', 'Modify', 'FullControl', 'SpecialAccess')")
        return value

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FolderSubFoldersAndFiles', 'FolderAndSubFolders', 'FolderAndFiles', 'FolderOnly', 'SubFoldersAndFilesOnly', 'SubFoldersOnly', 'FilesOnly']):
            raise ValueError("must be one of enum values ('FolderSubFoldersAndFiles', 'FolderAndSubFolders', 'FolderAndFiles', 'FolderOnly', 'SubFoldersAndFilesOnly', 'SubFoldersOnly', 'FilesOnly')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Allow', 'Deny', 'SpecialType']):
            raise ValueError("must be one of enum values ('Allow', 'Deny', 'SpecialType')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SmbPermission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if access (nullable) is None
        # and model_fields_set contains the field
        if self.access is None and "access" in self.model_fields_set:
            _dict['access'] = None

        # set to None if mode (nullable) is None
        # and model_fields_set contains the field
        if self.mode is None and "mode" in self.model_fields_set:
            _dict['mode'] = None

        # set to None if sid (nullable) is None
        # and model_fields_set contains the field
        if self.sid is None and "sid" in self.model_fields_set:
            _dict['sid'] = None

        # set to None if special_access_mask (nullable) is None
        # and model_fields_set contains the field
        if self.special_access_mask is None and "special_access_mask" in self.model_fields_set:
            _dict['specialAccessMask'] = None

        # set to None if special_type (nullable) is None
        # and model_fields_set contains the field
        if self.special_type is None and "special_type" in self.model_fields_set:
            _dict['specialType'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SmbPermission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access": obj.get("access"),
            "mode": obj.get("mode"),
            "sid": obj.get("sid"),
            "specialAccessMask": obj.get("specialAccessMask"),
            "specialType": obj.get("specialType"),
            "type": obj.get("type")
        })
        return _obj


