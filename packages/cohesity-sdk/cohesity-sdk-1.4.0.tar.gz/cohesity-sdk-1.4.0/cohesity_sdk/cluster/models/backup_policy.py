# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.bmr_backup_policy import BmrBackupPolicy
from cohesity_sdk.cluster.models.cancellation_timeout_params import CancellationTimeoutParams
from cohesity_sdk.cluster.models.cdp_backup_policy import CdpBackupPolicy
from cohesity_sdk.cluster.models.log_backup_policy import LogBackupPolicy
from cohesity_sdk.cluster.models.regular_backup_policy import RegularBackupPolicy
from cohesity_sdk.cluster.models.storage_array_snapshot_backup_policy import StorageArraySnapshotBackupPolicy
from typing import Set
from typing_extensions import Self

class BackupPolicy(BaseModel):
    """
    Specifies the backup schedule and retentions of a Protection Policy.
    """ # noqa: E501
    bmr: Optional[BmrBackupPolicy] = None
    cdp: Optional[CdpBackupPolicy] = None
    log: Optional[LogBackupPolicy] = None
    regular: RegularBackupPolicy
    run_timeouts: Optional[List[CancellationTimeoutParams]] = Field(default=None, description="Specifies the backup timeouts for different type of runs(kFull, kRegular etc.).", alias="runTimeouts")
    storage_array_snapshot: Optional[StorageArraySnapshotBackupPolicy] = Field(default=None, alias="storageArraySnapshot")
    __properties: ClassVar[List[str]] = ["bmr", "cdp", "log", "regular", "runTimeouts", "storageArraySnapshot"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bmr
        if self.bmr:
            _dict['bmr'] = self.bmr.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cdp
        if self.cdp:
            _dict['cdp'] = self.cdp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of log
        if self.log:
            _dict['log'] = self.log.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regular
        if self.regular:
            _dict['regular'] = self.regular.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in run_timeouts (list)
        _items = []
        if self.run_timeouts:
            for _item_run_timeouts in self.run_timeouts:
                if _item_run_timeouts:
                    _items.append(_item_run_timeouts.to_dict())
            _dict['runTimeouts'] = _items
        # override the default output from pydantic by calling `to_dict()` of storage_array_snapshot
        if self.storage_array_snapshot:
            _dict['storageArraySnapshot'] = self.storage_array_snapshot.to_dict()
        # set to None if run_timeouts (nullable) is None
        # and model_fields_set contains the field
        if self.run_timeouts is None and "run_timeouts" in self.model_fields_set:
            _dict['runTimeouts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bmr": BmrBackupPolicy.from_dict(obj["bmr"]) if obj.get("bmr") is not None else None,
            "cdp": CdpBackupPolicy.from_dict(obj["cdp"]) if obj.get("cdp") is not None else None,
            "log": LogBackupPolicy.from_dict(obj["log"]) if obj.get("log") is not None else None,
            "regular": RegularBackupPolicy.from_dict(obj["regular"]) if obj.get("regular") is not None else None,
            "runTimeouts": [CancellationTimeoutParams.from_dict(_item) for _item in obj["runTimeouts"]] if obj.get("runTimeouts") is not None else None,
            "storageArraySnapshot": StorageArraySnapshotBackupPolicy.from_dict(obj["storageArraySnapshot"]) if obj.get("storageArraySnapshot") is not None else None
        })
        return _obj


