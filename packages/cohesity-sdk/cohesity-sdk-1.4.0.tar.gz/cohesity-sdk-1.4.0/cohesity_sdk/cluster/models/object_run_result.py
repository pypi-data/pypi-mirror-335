# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.archival_run import ArchivalRun
from cohesity_sdk.cluster.models.backup_run import BackupRun
from cohesity_sdk.cluster.models.cloud_spin_run import CloudSpinRun
from cohesity_sdk.cluster.models.object_summary import ObjectSummary
from cohesity_sdk.cluster.models.replication_run import ReplicationRun
from typing import Set
from typing_extensions import Self

class ObjectRunResult(BaseModel):
    """
    Snapshot, replication, archival results for an object.
    """ # noqa: E501
    archival_info: Optional[ArchivalRun] = Field(default=None, alias="archivalInfo")
    cloud_spin_info: Optional[CloudSpinRun] = Field(default=None, alias="cloudSpinInfo")
    local_snapshot_info: Optional[BackupRun] = Field(default=None, alias="localSnapshotInfo")
    object: Optional[ObjectSummary] = None
    on_legal_hold: Optional[StrictBool] = Field(default=None, description="Specifies if object's snapshot is on legal hold.", alias="onLegalHold")
    original_backup_info: Optional[BackupRun] = Field(default=None, alias="originalBackupInfo")
    replication_info: Optional[ReplicationRun] = Field(default=None, alias="replicationInfo")
    __properties: ClassVar[List[str]] = ["archivalInfo", "cloudSpinInfo", "localSnapshotInfo", "object", "onLegalHold", "originalBackupInfo", "replicationInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjectRunResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of archival_info
        if self.archival_info:
            _dict['archivalInfo'] = self.archival_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_spin_info
        if self.cloud_spin_info:
            _dict['cloudSpinInfo'] = self.cloud_spin_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of local_snapshot_info
        if self.local_snapshot_info:
            _dict['localSnapshotInfo'] = self.local_snapshot_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object
        if self.object:
            _dict['object'] = self.object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of original_backup_info
        if self.original_backup_info:
            _dict['originalBackupInfo'] = self.original_backup_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replication_info
        if self.replication_info:
            _dict['replicationInfo'] = self.replication_info.to_dict()
        # set to None if on_legal_hold (nullable) is None
        # and model_fields_set contains the field
        if self.on_legal_hold is None and "on_legal_hold" in self.model_fields_set:
            _dict['onLegalHold'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjectRunResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archivalInfo": ArchivalRun.from_dict(obj["archivalInfo"]) if obj.get("archivalInfo") is not None else None,
            "cloudSpinInfo": CloudSpinRun.from_dict(obj["cloudSpinInfo"]) if obj.get("cloudSpinInfo") is not None else None,
            "localSnapshotInfo": BackupRun.from_dict(obj["localSnapshotInfo"]) if obj.get("localSnapshotInfo") is not None else None,
            "object": ObjectSummary.from_dict(obj["object"]) if obj.get("object") is not None else None,
            "onLegalHold": obj.get("onLegalHold"),
            "originalBackupInfo": BackupRun.from_dict(obj["originalBackupInfo"]) if obj.get("originalBackupInfo") is not None else None,
            "replicationInfo": ReplicationRun.from_dict(obj["replicationInfo"]) if obj.get("replicationInfo") is not None else None
        })
        return _obj


