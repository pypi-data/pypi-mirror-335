# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.agent_upgrade_info_object import AgentUpgradeInfoObject
from cohesity_sdk.cluster.models.error import Error
from typing import Set
from typing_extensions import Self

class AgentUpgradeTaskState(BaseModel):
    """
    Specifies the state of an agent upgrade task.
    """ # noqa: E501
    agent_ids: Optional[List[StrictInt]] = Field(default=None, description="Specifies the agents upgraded in the task.", alias="agentIDs")
    agents: Optional[List[AgentUpgradeInfoObject]] = Field(default=None, description="Specifies the upgrade information for each agent.")
    cluster_version: Optional[StrictStr] = Field(default=None, description="Specifies the version to which agents are upgraded.", alias="clusterVersion")
    description: Optional[StrictStr] = Field(default=None, description="Specifies the description of the task.")
    end_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the time when the upgrade task completed execution as a Unix epoch Timestamp (in microseconds).", alias="endTimeUsecs")
    error: Optional[Error] = None
    id: Optional[StrictInt] = Field(default=None, description="Specifies the ID of the task.")
    is_retryable: Optional[StrictBool] = Field(default=None, description="Specifies if a task can be retried.", alias="isRetryable")
    name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the task.")
    retried_task_id: Optional[StrictInt] = Field(default=None, description="Specifies ID of a task which was retried if type is 'Retry'.", alias="retriedTaskID")
    schedule_end_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the time before which the upgrade task should start execution as a Unix epoch Timestamp (in microseconds). If this is not specified the task will start anytime after scheduleTimeUsecs.", alias="scheduleEndTimeUsecs")
    schedule_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the time when the task should start execution as a Unix epoch Timestamp (in microseconds). If no schedule is specified, the task will start immediately.", alias="scheduleTimeUsecs")
    start_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the time, as a Unix epoch timestamp in microseconds, when the task started execution.", alias="startTimeUsecs")
    status: Optional[StrictStr] = Field(default=None, description="Specifies the status of the task.<br> 'Scheduled' indicates that the upgrade task is yet to start.<br> 'Running' indicates that the upgrade task has started execution.<br> 'Succeeded' indicates that the upgrade task completed without an error.<br> 'Failed' indicates that upgrade has failed for all agents. 'PartiallyFailed' indicates that upgrade has failed for some agents.")
    type: Optional[StrictStr] = Field(default=None, description="Specifes the type of task.<br> 'Auto' indicates an auto agent upgrade task which is started after a cluster upgrade.<br> 'Manual' indicates a schedule based agent upgrade task.<br> 'Retry' indicates an agent upgrade task which was retried.")
    __properties: ClassVar[List[str]] = ["agentIDs", "agents", "clusterVersion", "description", "endTimeUsecs", "error", "id", "isRetryable", "name", "retriedTaskID", "scheduleEndTimeUsecs", "scheduleTimeUsecs", "startTimeUsecs", "status", "type"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Scheduled', 'Running', 'Succeeded', 'Failed', 'PartiallyFailed', 'Canceled']):
            raise ValueError("must be one of enum values ('Scheduled', 'Running', 'Succeeded', 'Failed', 'PartiallyFailed', 'Canceled')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Auto', 'Manual', 'Retry']):
            raise ValueError("must be one of enum values ('Auto', 'Manual', 'Retry')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentUpgradeTaskState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in agents (list)
        _items = []
        if self.agents:
            for _item_agents in self.agents:
                if _item_agents:
                    _items.append(_item_agents.to_dict())
            _dict['agents'] = _items
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # set to None if agent_ids (nullable) is None
        # and model_fields_set contains the field
        if self.agent_ids is None and "agent_ids" in self.model_fields_set:
            _dict['agentIDs'] = None

        # set to None if agents (nullable) is None
        # and model_fields_set contains the field
        if self.agents is None and "agents" in self.model_fields_set:
            _dict['agents'] = None

        # set to None if cluster_version (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_version is None and "cluster_version" in self.model_fields_set:
            _dict['clusterVersion'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if end_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.end_time_usecs is None and "end_time_usecs" in self.model_fields_set:
            _dict['endTimeUsecs'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if is_retryable (nullable) is None
        # and model_fields_set contains the field
        if self.is_retryable is None and "is_retryable" in self.model_fields_set:
            _dict['isRetryable'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if retried_task_id (nullable) is None
        # and model_fields_set contains the field
        if self.retried_task_id is None and "retried_task_id" in self.model_fields_set:
            _dict['retriedTaskID'] = None

        # set to None if schedule_end_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_end_time_usecs is None and "schedule_end_time_usecs" in self.model_fields_set:
            _dict['scheduleEndTimeUsecs'] = None

        # set to None if schedule_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_time_usecs is None and "schedule_time_usecs" in self.model_fields_set:
            _dict['scheduleTimeUsecs'] = None

        # set to None if start_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.start_time_usecs is None and "start_time_usecs" in self.model_fields_set:
            _dict['startTimeUsecs'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentUpgradeTaskState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentIDs": obj.get("agentIDs"),
            "agents": [AgentUpgradeInfoObject.from_dict(_item) for _item in obj["agents"]] if obj.get("agents") is not None else None,
            "clusterVersion": obj.get("clusterVersion"),
            "description": obj.get("description"),
            "endTimeUsecs": obj.get("endTimeUsecs"),
            "error": Error.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "id": obj.get("id"),
            "isRetryable": obj.get("isRetryable"),
            "name": obj.get("name"),
            "retriedTaskID": obj.get("retriedTaskID"),
            "scheduleEndTimeUsecs": obj.get("scheduleEndTimeUsecs"),
            "scheduleTimeUsecs": obj.get("scheduleTimeUsecs"),
            "startTimeUsecs": obj.get("startTimeUsecs"),
            "status": obj.get("status"),
            "type": obj.get("type")
        })
        return _obj


