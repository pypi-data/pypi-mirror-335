# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cohesity_sdk.cluster.models.azure_application_credentials import AzureApplicationCredentials
from cohesity_sdk.cluster.models.azure_subscription import AzureSubscription
from typing import Set
from typing_extensions import Self

class AzureSourceRegistrationParams(BaseModel):
    """
    Specifies the paramaters to register an Azure source.
    """ # noqa: E501
    application_credentials: Optional[List[AzureApplicationCredentials]] = Field(default=None, description="Specifies the credentials for a list of applications from azure active directory.", alias="applicationCredentials")
    azure_tenant_id: Optional[StrictStr] = Field(default=None, description="Specifies Tenant Id of the active directory of Azure account. Accpets both Azure tanant Id and tenant domain name.", alias="azureTenantId")
    registration_level: Optional[StrictStr] = Field(description="Specifies whether the registration is at tenant level or subscription level.", alias="registrationLevel")
    registration_workflow: Optional[StrictStr] = Field(description="Specifies whether the type of registration is express or manual.", alias="registrationWorkflow")
    subscription_details: Optional[Annotated[List[AzureSubscription], Field(min_length=1)]] = Field(default=None, description="Specifies the list subscription ids to be registered.", alias="subscriptionDetails")
    use_cases: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = Field(default=None, description="The use cases for which the source is to be registered.", alias="useCases")
    __properties: ClassVar[List[str]] = ["applicationCredentials", "azureTenantId", "registrationLevel", "registrationWorkflow", "subscriptionDetails", "useCases"]

    @field_validator('registration_level')
    def registration_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kTenant', 'kSubscription']):
            raise ValueError("must be one of enum values ('kTenant', 'kSubscription')")
        return value

    @field_validator('registration_workflow')
    def registration_workflow_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kExpress', 'kManual']):
            raise ValueError("must be one of enum values ('kExpress', 'kManual')")
        return value

    @field_validator('use_cases')
    def use_cases_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['kVirtualMachine', 'kSQL']):
                raise ValueError("each list item must be one of ('kVirtualMachine', 'kSQL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureSourceRegistrationParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in application_credentials (list)
        _items = []
        if self.application_credentials:
            for _item_application_credentials in self.application_credentials:
                if _item_application_credentials:
                    _items.append(_item_application_credentials.to_dict())
            _dict['applicationCredentials'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subscription_details (list)
        _items = []
        if self.subscription_details:
            for _item_subscription_details in self.subscription_details:
                if _item_subscription_details:
                    _items.append(_item_subscription_details.to_dict())
            _dict['subscriptionDetails'] = _items
        # set to None if azure_tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.azure_tenant_id is None and "azure_tenant_id" in self.model_fields_set:
            _dict['azureTenantId'] = None

        # set to None if registration_level (nullable) is None
        # and model_fields_set contains the field
        if self.registration_level is None and "registration_level" in self.model_fields_set:
            _dict['registrationLevel'] = None

        # set to None if registration_workflow (nullable) is None
        # and model_fields_set contains the field
        if self.registration_workflow is None and "registration_workflow" in self.model_fields_set:
            _dict['registrationWorkflow'] = None

        # set to None if use_cases (nullable) is None
        # and model_fields_set contains the field
        if self.use_cases is None and "use_cases" in self.model_fields_set:
            _dict['useCases'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureSourceRegistrationParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationCredentials": [AzureApplicationCredentials.from_dict(_item) for _item in obj["applicationCredentials"]] if obj.get("applicationCredentials") is not None else None,
            "azureTenantId": obj.get("azureTenantId"),
            "registrationLevel": obj.get("registrationLevel"),
            "registrationWorkflow": obj.get("registrationWorkflow"),
            "subscriptionDetails": [AzureSubscription.from_dict(_item) for _item in obj["subscriptionDetails"]] if obj.get("subscriptionDetails") is not None else None,
            "useCases": obj.get("useCases")
        })
        return _obj


