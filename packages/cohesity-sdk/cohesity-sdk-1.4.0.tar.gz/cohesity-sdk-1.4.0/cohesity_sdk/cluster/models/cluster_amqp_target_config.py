# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class ClusterAMQPTargetConfig(BaseModel):
    """
    Specifies the AMQP target config.
    """ # noqa: E501
    certificate: Optional[StrictStr] = Field(default=None, description="Specifies the certificate.")
    exchange: Optional[StrictStr] = Field(default=None, description="Specifies the exchange.")
    filer_id: Optional[StrictInt] = Field(default=None, description="Specifies the filer id.", alias="filerId")
    password: Optional[StrictStr] = Field(default=None, description="Specifies the password.")
    server_ip: Optional[StrictStr] = Field(default=None, description="Specifies the server ip.", alias="serverIp")
    username: Optional[StrictStr] = Field(default=None, description="Specifies the username.")
    virtual_host: Optional[StrictStr] = Field(default=None, description="Specifies the virtual host.", alias="virtualHost")
    __properties: ClassVar[List[str]] = ["certificate", "exchange", "filerId", "password", "serverIp", "username", "virtualHost"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterAMQPTargetConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if certificate (nullable) is None
        # and model_fields_set contains the field
        if self.certificate is None and "certificate" in self.model_fields_set:
            _dict['certificate'] = None

        # set to None if exchange (nullable) is None
        # and model_fields_set contains the field
        if self.exchange is None and "exchange" in self.model_fields_set:
            _dict['exchange'] = None

        # set to None if filer_id (nullable) is None
        # and model_fields_set contains the field
        if self.filer_id is None and "filer_id" in self.model_fields_set:
            _dict['filerId'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if server_ip (nullable) is None
        # and model_fields_set contains the field
        if self.server_ip is None and "server_ip" in self.model_fields_set:
            _dict['serverIp'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if virtual_host (nullable) is None
        # and model_fields_set contains the field
        if self.virtual_host is None and "virtual_host" in self.model_fields_set:
            _dict['virtualHost'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterAMQPTargetConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificate": obj.get("certificate"),
            "exchange": obj.get("exchange"),
            "filerId": obj.get("filerId"),
            "password": obj.get("password"),
            "serverIp": obj.get("serverIp"),
            "username": obj.get("username"),
            "virtualHost": obj.get("virtualHost")
        })
        return _obj


