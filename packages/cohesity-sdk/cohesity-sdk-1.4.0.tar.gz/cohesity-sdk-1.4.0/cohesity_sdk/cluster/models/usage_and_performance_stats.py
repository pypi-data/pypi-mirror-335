# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Set
from typing_extensions import Self

class UsageAndPerformanceStats(BaseModel):
    """
    Provides usage and performance statistics for entities such as a disks, Nodes or Clusters.
    """ # noqa: E501
    data_in_bytes: Optional[StrictInt] = Field(default=None, description="Specifies the data read from the protected objects by the Cohesity Cluster before any data reduction using deduplication and compression.", alias="dataInBytes")
    data_in_bytes_after_reduction: Optional[StrictInt] = Field(default=None, description="Morphed Usage before data is replicated to other nodes as per RF or Erasure Coding policy.", alias="dataInBytesAfterReduction")
    min_usable_physical_capacity_bytes: Optional[StrictInt] = Field(default=None, description="Specifies the minimum usable capacity available after erasure coding or RF. This will only be populated for cluster. If a cluster has multiple Domains (View Boxes) with different RF or erasure coding, this metric will be computed using the scheme that will provide least saving.", alias="minUsablePhysicalCapacityBytes")
    num_bytes_read: Optional[StrictInt] = Field(default=None, description="Provides the total number of bytes read in the last 30 seconds.", alias="numBytesRead")
    num_bytes_written: Optional[StrictInt] = Field(default=None, description="Provides the total number of bytes written in the last 30 second.", alias="numBytesWritten")
    physical_capacity_bytes: Optional[StrictInt] = Field(default=None, description="Provides the total physical capacity in bytes of all the storage devices, after subtracting space reserved for cluster services", alias="physicalCapacityBytes")
    read_ios: Optional[StrictInt] = Field(default=None, description="Provides the number of Read IOs that occurred in the last 30 seconds.", alias="readIos")
    read_latency_msecs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Provides the Read latency in milliseconds for the Read IOs that occurred during the last 30 seconds.", alias="readLatencyMsecs")
    system_capacity_bytes: Optional[StrictInt] = Field(default=None, description="Provides the total available capacity as computed by the Linux 'statfs' command.", alias="systemCapacityBytes")
    system_usage_bytes: Optional[StrictInt] = Field(default=None, description="Provides the usage of bytes, as computed by the Linux 'statfs' command, after the size of the data is reduced by change-block tracking, compression and deduplication.", alias="systemUsageBytes")
    total_physical_raw_usage_bytes: Optional[StrictInt] = Field(default=None, description="Provides the usage of bytes, as computed by the Cohesity Cluster, before the size of the data is reduced by change-block tracking, compression and deduplication.", alias="totalPhysicalRawUsageBytes")
    total_physical_usage_bytes: Optional[StrictInt] = Field(default=None, description="Provides the data stored locally, after the data has been reduced by deduplication and compression, including the space required for honoring the resiliency settings (EC/RF).", alias="totalPhysicalUsageBytes")
    write_ios: Optional[StrictInt] = Field(default=None, description="Provides the number of Write IOs that occurred in the last 30 seconds.", alias="writeIos")
    write_latency_msecs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Provides the Write latency in milliseconds for the Write IOs that occurred during the last 30 seconds.", alias="writeLatencyMsecs")
    __properties: ClassVar[List[str]] = ["dataInBytes", "dataInBytesAfterReduction", "minUsablePhysicalCapacityBytes", "numBytesRead", "numBytesWritten", "physicalCapacityBytes", "readIos", "readLatencyMsecs", "systemCapacityBytes", "systemUsageBytes", "totalPhysicalRawUsageBytes", "totalPhysicalUsageBytes", "writeIos", "writeLatencyMsecs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageAndPerformanceStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if data_in_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.data_in_bytes is None and "data_in_bytes" in self.model_fields_set:
            _dict['dataInBytes'] = None

        # set to None if data_in_bytes_after_reduction (nullable) is None
        # and model_fields_set contains the field
        if self.data_in_bytes_after_reduction is None and "data_in_bytes_after_reduction" in self.model_fields_set:
            _dict['dataInBytesAfterReduction'] = None

        # set to None if min_usable_physical_capacity_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.min_usable_physical_capacity_bytes is None and "min_usable_physical_capacity_bytes" in self.model_fields_set:
            _dict['minUsablePhysicalCapacityBytes'] = None

        # set to None if num_bytes_read (nullable) is None
        # and model_fields_set contains the field
        if self.num_bytes_read is None and "num_bytes_read" in self.model_fields_set:
            _dict['numBytesRead'] = None

        # set to None if num_bytes_written (nullable) is None
        # and model_fields_set contains the field
        if self.num_bytes_written is None and "num_bytes_written" in self.model_fields_set:
            _dict['numBytesWritten'] = None

        # set to None if physical_capacity_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.physical_capacity_bytes is None and "physical_capacity_bytes" in self.model_fields_set:
            _dict['physicalCapacityBytes'] = None

        # set to None if read_ios (nullable) is None
        # and model_fields_set contains the field
        if self.read_ios is None and "read_ios" in self.model_fields_set:
            _dict['readIos'] = None

        # set to None if read_latency_msecs (nullable) is None
        # and model_fields_set contains the field
        if self.read_latency_msecs is None and "read_latency_msecs" in self.model_fields_set:
            _dict['readLatencyMsecs'] = None

        # set to None if system_capacity_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.system_capacity_bytes is None and "system_capacity_bytes" in self.model_fields_set:
            _dict['systemCapacityBytes'] = None

        # set to None if system_usage_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.system_usage_bytes is None and "system_usage_bytes" in self.model_fields_set:
            _dict['systemUsageBytes'] = None

        # set to None if total_physical_raw_usage_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.total_physical_raw_usage_bytes is None and "total_physical_raw_usage_bytes" in self.model_fields_set:
            _dict['totalPhysicalRawUsageBytes'] = None

        # set to None if total_physical_usage_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.total_physical_usage_bytes is None and "total_physical_usage_bytes" in self.model_fields_set:
            _dict['totalPhysicalUsageBytes'] = None

        # set to None if write_ios (nullable) is None
        # and model_fields_set contains the field
        if self.write_ios is None and "write_ios" in self.model_fields_set:
            _dict['writeIos'] = None

        # set to None if write_latency_msecs (nullable) is None
        # and model_fields_set contains the field
        if self.write_latency_msecs is None and "write_latency_msecs" in self.model_fields_set:
            _dict['writeLatencyMsecs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageAndPerformanceStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataInBytes": obj.get("dataInBytes"),
            "dataInBytesAfterReduction": obj.get("dataInBytesAfterReduction"),
            "minUsablePhysicalCapacityBytes": obj.get("minUsablePhysicalCapacityBytes"),
            "numBytesRead": obj.get("numBytesRead"),
            "numBytesWritten": obj.get("numBytesWritten"),
            "physicalCapacityBytes": obj.get("physicalCapacityBytes"),
            "readIos": obj.get("readIos"),
            "readLatencyMsecs": obj.get("readLatencyMsecs"),
            "systemCapacityBytes": obj.get("systemCapacityBytes"),
            "systemUsageBytes": obj.get("systemUsageBytes"),
            "totalPhysicalRawUsageBytes": obj.get("totalPhysicalRawUsageBytes"),
            "totalPhysicalUsageBytes": obj.get("totalPhysicalUsageBytes"),
            "writeIos": obj.get("writeIos"),
            "writeLatencyMsecs": obj.get("writeLatencyMsecs")
        })
        return _obj


