# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class ServicePatchLevel(BaseModel):
    """
    Patch level of a service. It is the number of patches applied for the service on the cluster. If a service is never patched the patch level is 0. If two patches were applied, patch level is 2.
    """ # noqa: E501
    patch_level: Optional[StrictInt] = Field(default=None, description="Specifies patch level of the service after the patch operation.", alias="patchLevel")
    patch_version: Optional[StrictStr] = Field(default=None, description="Specifies the version of the service patch after the patch operation.", alias="patchVersion")
    service: Optional[StrictStr] = Field(default=None, description="Specifies the name of the service.")
    start_level: Optional[StrictInt] = Field(default=None, description="Specifies patch level of the service before the patch operation.", alias="startLevel")
    start_version: Optional[StrictStr] = Field(default=None, description="Specifies the version of the service running on the cluster before the patch operation.", alias="startVersion")
    __properties: ClassVar[List[str]] = ["patchLevel", "patchVersion", "service", "startLevel", "startVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServicePatchLevel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if patch_level (nullable) is None
        # and model_fields_set contains the field
        if self.patch_level is None and "patch_level" in self.model_fields_set:
            _dict['patchLevel'] = None

        # set to None if patch_version (nullable) is None
        # and model_fields_set contains the field
        if self.patch_version is None and "patch_version" in self.model_fields_set:
            _dict['patchVersion'] = None

        # set to None if service (nullable) is None
        # and model_fields_set contains the field
        if self.service is None and "service" in self.model_fields_set:
            _dict['service'] = None

        # set to None if start_level (nullable) is None
        # and model_fields_set contains the field
        if self.start_level is None and "start_level" in self.model_fields_set:
            _dict['startLevel'] = None

        # set to None if start_version (nullable) is None
        # and model_fields_set contains the field
        if self.start_version is None and "start_version" in self.model_fields_set:
            _dict['startVersion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServicePatchLevel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "patchLevel": obj.get("patchLevel"),
            "patchVersion": obj.get("patchVersion"),
            "service": obj.get("service"),
            "startLevel": obj.get("startLevel"),
            "startVersion": obj.get("startVersion")
        })
        return _obj


