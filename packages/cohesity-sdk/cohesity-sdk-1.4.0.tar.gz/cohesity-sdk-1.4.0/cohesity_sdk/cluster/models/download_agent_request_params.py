# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.aix_agent_params import AixAgentParams
from cohesity_sdk.cluster.models.linux_agent_params import LinuxAgentParams
from cohesity_sdk.cluster.models.my_sql_agent_params import MySqlAgentParams
from cohesity_sdk.cluster.models.sap_hana_agent_params import SapHanaAgentParams
from cohesity_sdk.cluster.models.sap_oracle_agent_params import SapOracleAgentParams
from cohesity_sdk.cluster.models.vm_ware_cdp_filter_params import VMWareCDPFilterParams
from typing import Set
from typing_extensions import Self

class DownloadAgentRequestParams(BaseModel):
    """
    Specifies agent download request parameters.
    """ # noqa: E501
    aix_params: Optional[AixAgentParams] = Field(default=None, alias="aixParams")
    linux_params: Optional[LinuxAgentParams] = Field(default=None, alias="linuxParams")
    my_sql_params: Optional[MySqlAgentParams] = Field(default=None, alias="mySqlParams")
    platform: StrictStr = Field(description="Specifies the platform for which agent needs to be downloaded.")
    sap_hana_params: Optional[SapHanaAgentParams] = Field(default=None, alias="sapHanaParams")
    sap_oracle_params: Optional[SapOracleAgentParams] = Field(default=None, alias="sapOracleParams")
    vmware_cdp_filter_params: Optional[VMWareCDPFilterParams] = Field(default=None, alias="vmwareCDPFilterParams")
    __properties: ClassVar[List[str]] = ["aixParams", "linuxParams", "mySqlParams", "platform", "sapHanaParams", "sapOracleParams", "vmwareCDPFilterParams"]

    @field_validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['kLinux', 'kWindows', 'kAix', 'kSolaris', 'kSapHana', 'kSapOracle', 'kCockroachDB', 'kMySQL', 'kHPUX', 'kVOS', 'kVMWareCDPFilter']):
            raise ValueError("must be one of enum values ('kLinux', 'kWindows', 'kAix', 'kSolaris', 'kSapHana', 'kSapOracle', 'kCockroachDB', 'kMySQL', 'kHPUX', 'kVOS', 'kVMWareCDPFilter')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DownloadAgentRequestParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aix_params
        if self.aix_params:
            _dict['aixParams'] = self.aix_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linux_params
        if self.linux_params:
            _dict['linuxParams'] = self.linux_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of my_sql_params
        if self.my_sql_params:
            _dict['mySqlParams'] = self.my_sql_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sap_hana_params
        if self.sap_hana_params:
            _dict['sapHanaParams'] = self.sap_hana_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sap_oracle_params
        if self.sap_oracle_params:
            _dict['sapOracleParams'] = self.sap_oracle_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vmware_cdp_filter_params
        if self.vmware_cdp_filter_params:
            _dict['vmwareCDPFilterParams'] = self.vmware_cdp_filter_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DownloadAgentRequestParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aixParams": AixAgentParams.from_dict(obj["aixParams"]) if obj.get("aixParams") is not None else None,
            "linuxParams": LinuxAgentParams.from_dict(obj["linuxParams"]) if obj.get("linuxParams") is not None else None,
            "mySqlParams": MySqlAgentParams.from_dict(obj["mySqlParams"]) if obj.get("mySqlParams") is not None else None,
            "platform": obj.get("platform"),
            "sapHanaParams": SapHanaAgentParams.from_dict(obj["sapHanaParams"]) if obj.get("sapHanaParams") is not None else None,
            "sapOracleParams": SapOracleAgentParams.from_dict(obj["sapOracleParams"]) if obj.get("sapOracleParams") is not None else None,
            "vmwareCDPFilterParams": VMWareCDPFilterParams.from_dict(obj["vmwareCDPFilterParams"]) if obj.get("vmwareCDPFilterParams") is not None else None
        })
        return _obj


