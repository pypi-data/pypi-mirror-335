# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class RemoteDisk(BaseModel):
    """
    Specifies the configuration of a remote disk.
    """ # noqa: E501
    capacity_bytes: Optional[StrictInt] = Field(default=None, description="Specifies the logical capacity of the disk in bytes.", alias="capacityBytes")
    capacity_bytes_physical: Optional[StrictInt] = Field(default=None, description="Specifies the physical capacity of the disk in bytes.", alias="capacityBytesPhysical")
    data_vip: Optional[StrictStr] = Field(default=None, description="Specifies the data vip used to mount the filesystem.", alias="dataVip")
    file_system_name: Optional[StrictStr] = Field(default=None, description="Specifies the name of filesystem on remote storage.", alias="fileSystemName")
    id: Optional[StrictInt] = Field(default=None, description="Specifies the disk id.")
    mount_path: Optional[StrictStr] = Field(description="Specifies the NFS mount path of the remote disk.", alias="mountPath")
    node_id: Optional[StrictInt] = Field(default=None, description="Specifies the node id of the disk. If not specified, the disk will be evenly distributed across all the nodes.", alias="nodeId")
    node_ip: Optional[StrictStr] = Field(default=None, description="Specifies ip address of the node that this remote disk is mounted on.", alias="nodeIp")
    status: Optional[StrictStr] = Field(default=None, description="Specifies the status of a remote disk.")
    tier: Optional[StrictStr] = Field(description="Specifies the tier of the disk")
    used_capacity_bytes: Optional[StrictInt] = Field(default=None, description="Specifies the logical used capacity of remote disk in bytes.", alias="usedCapacityBytes")
    used_capacity_bytes_physical: Optional[StrictInt] = Field(default=None, description="Specifies the physical used capacity of remote disk in bytes.", alias="usedCapacityBytesPhysical")
    __properties: ClassVar[List[str]] = ["capacityBytes", "capacityBytesPhysical", "dataVip", "fileSystemName", "id", "mountPath", "nodeId", "nodeIp", "status", "tier", "usedCapacityBytes", "usedCapacityBytesPhysical"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Active', 'Offline', 'Deleting', 'Deleted', 'DataVipNotReachable', 'FileSystemNotAccessible', 'FileSystemDeleted', 'Mounting', 'Migrating', 'Unknown']):
            raise ValueError("must be one of enum values ('Active', 'Offline', 'Deleting', 'Deleted', 'DataVipNotReachable', 'FileSystemNotAccessible', 'FileSystemDeleted', 'Mounting', 'Migrating', 'Unknown')")
        return value

    @field_validator('tier')
    def tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PCIeSSD', 'SATA-SSD', 'SATA-HDD', 'CLOUD']):
            raise ValueError("must be one of enum values ('PCIeSSD', 'SATA-SSD', 'SATA-HDD', 'CLOUD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RemoteDisk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "capacity_bytes",
            "capacity_bytes_physical",
            "id",
            "status",
            "used_capacity_bytes",
            "used_capacity_bytes_physical",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if capacity_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.capacity_bytes is None and "capacity_bytes" in self.model_fields_set:
            _dict['capacityBytes'] = None

        # set to None if capacity_bytes_physical (nullable) is None
        # and model_fields_set contains the field
        if self.capacity_bytes_physical is None and "capacity_bytes_physical" in self.model_fields_set:
            _dict['capacityBytesPhysical'] = None

        # set to None if data_vip (nullable) is None
        # and model_fields_set contains the field
        if self.data_vip is None and "data_vip" in self.model_fields_set:
            _dict['dataVip'] = None

        # set to None if file_system_name (nullable) is None
        # and model_fields_set contains the field
        if self.file_system_name is None and "file_system_name" in self.model_fields_set:
            _dict['fileSystemName'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if mount_path (nullable) is None
        # and model_fields_set contains the field
        if self.mount_path is None and "mount_path" in self.model_fields_set:
            _dict['mountPath'] = None

        # set to None if node_id (nullable) is None
        # and model_fields_set contains the field
        if self.node_id is None and "node_id" in self.model_fields_set:
            _dict['nodeId'] = None

        # set to None if node_ip (nullable) is None
        # and model_fields_set contains the field
        if self.node_ip is None and "node_ip" in self.model_fields_set:
            _dict['nodeIp'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if tier (nullable) is None
        # and model_fields_set contains the field
        if self.tier is None and "tier" in self.model_fields_set:
            _dict['tier'] = None

        # set to None if used_capacity_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.used_capacity_bytes is None and "used_capacity_bytes" in self.model_fields_set:
            _dict['usedCapacityBytes'] = None

        # set to None if used_capacity_bytes_physical (nullable) is None
        # and model_fields_set contains the field
        if self.used_capacity_bytes_physical is None and "used_capacity_bytes_physical" in self.model_fields_set:
            _dict['usedCapacityBytesPhysical'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RemoteDisk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capacityBytes": obj.get("capacityBytes"),
            "capacityBytesPhysical": obj.get("capacityBytesPhysical"),
            "dataVip": obj.get("dataVip"),
            "fileSystemName": obj.get("fileSystemName"),
            "id": obj.get("id"),
            "mountPath": obj.get("mountPath"),
            "nodeId": obj.get("nodeId"),
            "nodeIp": obj.get("nodeIp"),
            "status": obj.get("status"),
            "tier": obj.get("tier"),
            "usedCapacityBytes": obj.get("usedCapacityBytes"),
            "usedCapacityBytesPhysical": obj.get("usedCapacityBytesPhysical")
        })
        return _obj


