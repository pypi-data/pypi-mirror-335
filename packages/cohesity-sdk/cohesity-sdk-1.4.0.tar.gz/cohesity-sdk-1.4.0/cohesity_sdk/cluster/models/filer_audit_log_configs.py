# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.cluster.models.smb_permission import SmbPermission
from cohesity_sdk.cluster.models.subnet import Subnet
from typing import Set
from typing_extensions import Self

class FilerAuditLogConfigs(BaseModel):
    """
    Specifies the filer audit log configs.
    """ # noqa: E501
    nfs_mount_path: Optional[StrictStr] = Field(default=None, description="This field is currently deprecated. Please use NFS MountPaths which would be an array of strings.", alias="nfsMountPath")
    nfs_mount_paths: Optional[List[StrictStr]] = Field(default=None, description="Specifies a list of NFS mount paths of a Cohesity View containing filer audit logs.", alias="nfsMountPaths")
    override_global_subnet_whitelist: Optional[StrictBool] = Field(default=None, description="Specifies whether view level client subnet whitelist overrides cluster and global setting.", alias="overrideGlobalSubnetWhitelist")
    share_permissions: Optional[List[SmbPermission]] = Field(default=None, description="Specifies a list of share level permissions.", alias="sharePermissions")
    smb_mount_paths: Optional[List[StrictStr]] = Field(default=None, description="Specifies a list of SMB mount paths of a Cohesity View containing filer audit logs.", alias="smbMountPaths")
    subnet_whitelist: Optional[List[Subnet]] = Field(default=None, description="Specifies a list of Subnets with IP addresses that have permissions to access a Cohesity View containing filer audit logs.", alias="subnetWhitelist")
    __properties: ClassVar[List[str]] = ["nfsMountPath", "nfsMountPaths", "overrideGlobalSubnetWhitelist", "sharePermissions", "smbMountPaths", "subnetWhitelist"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilerAuditLogConfigs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "nfs_mount_path",
            "nfs_mount_paths",
            "smb_mount_paths",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in share_permissions (list)
        _items = []
        if self.share_permissions:
            for _item_share_permissions in self.share_permissions:
                if _item_share_permissions:
                    _items.append(_item_share_permissions.to_dict())
            _dict['sharePermissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subnet_whitelist (list)
        _items = []
        if self.subnet_whitelist:
            for _item_subnet_whitelist in self.subnet_whitelist:
                if _item_subnet_whitelist:
                    _items.append(_item_subnet_whitelist.to_dict())
            _dict['subnetWhitelist'] = _items
        # set to None if nfs_mount_path (nullable) is None
        # and model_fields_set contains the field
        if self.nfs_mount_path is None and "nfs_mount_path" in self.model_fields_set:
            _dict['nfsMountPath'] = None

        # set to None if nfs_mount_paths (nullable) is None
        # and model_fields_set contains the field
        if self.nfs_mount_paths is None and "nfs_mount_paths" in self.model_fields_set:
            _dict['nfsMountPaths'] = None

        # set to None if override_global_subnet_whitelist (nullable) is None
        # and model_fields_set contains the field
        if self.override_global_subnet_whitelist is None and "override_global_subnet_whitelist" in self.model_fields_set:
            _dict['overrideGlobalSubnetWhitelist'] = None

        # set to None if share_permissions (nullable) is None
        # and model_fields_set contains the field
        if self.share_permissions is None and "share_permissions" in self.model_fields_set:
            _dict['sharePermissions'] = None

        # set to None if smb_mount_paths (nullable) is None
        # and model_fields_set contains the field
        if self.smb_mount_paths is None and "smb_mount_paths" in self.model_fields_set:
            _dict['smbMountPaths'] = None

        # set to None if subnet_whitelist (nullable) is None
        # and model_fields_set contains the field
        if self.subnet_whitelist is None and "subnet_whitelist" in self.model_fields_set:
            _dict['subnetWhitelist'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilerAuditLogConfigs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nfsMountPath": obj.get("nfsMountPath"),
            "nfsMountPaths": obj.get("nfsMountPaths"),
            "overrideGlobalSubnetWhitelist": obj.get("overrideGlobalSubnetWhitelist"),
            "sharePermissions": [SmbPermission.from_dict(_item) for _item in obj["sharePermissions"]] if obj.get("sharePermissions") is not None else None,
            "smbMountPaths": obj.get("smbMountPaths"),
            "subnetWhitelist": [Subnet.from_dict(_item) for _item in obj["subnetWhitelist"]] if obj.get("subnetWhitelist") is not None else None
        })
        return _obj


