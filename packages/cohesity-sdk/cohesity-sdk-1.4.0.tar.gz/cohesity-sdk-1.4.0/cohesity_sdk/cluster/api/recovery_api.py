# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool
from cohesity_sdk.cluster.models.create_recovery_request import CreateRecoveryRequest
from cohesity_sdk.cluster.models.download_files_and_folders_request_params import DownloadFilesAndFoldersRequestParams
from cohesity_sdk.cluster.models.fetch_uptier_data_response import FetchUptierDataResponse
from cohesity_sdk.cluster.models.recoveries import Recoveries
from cohesity_sdk.cluster.models.recovery import Recovery

from cohesity_sdk.cluster.api_client import ApiClient, RequestSerialized
from cohesity_sdk.cluster.api_response import ApiResponse
from cohesity_sdk.cluster.rest import RESTResponseType


class RecoveryApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def cancel_recovery_by_id(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Cancel Recovery for a given id.

        Cancel Recovery for a given id.

        :param id: Specifies the id of a Recovery. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_recovery_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cancel_recovery_by_id_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Cancel Recovery for a given id.

        Cancel Recovery for a given id.

        :param id: Specifies the id of a Recovery. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_recovery_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cancel_recovery_by_id_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel Recovery for a given id.

        Cancel Recovery for a given id.

        :param id: Specifies the id of a Recovery. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_recovery_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cancel_recovery_by_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'SessionIdHeader', 
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/data-protect/recoveries/{id}/cancel',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_download_files_and_folders_recovery(
        self,
        body: Annotated[DownloadFilesAndFoldersRequestParams, Field(description="Specifies the parameters to create a download files and folder recovery.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Recovery:
        """Create a download files and folders recovery.

        Creates a download files and folders recovery.

        :param body: Specifies the parameters to create a download files and folder recovery. (required)
        :type body: DownloadFilesAndFoldersRequestParams
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_download_files_and_folders_recovery_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Recovery",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_download_files_and_folders_recovery_with_http_info(
        self,
        body: Annotated[DownloadFilesAndFoldersRequestParams, Field(description="Specifies the parameters to create a download files and folder recovery.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Recovery]:
        """Create a download files and folders recovery.

        Creates a download files and folders recovery.

        :param body: Specifies the parameters to create a download files and folder recovery. (required)
        :type body: DownloadFilesAndFoldersRequestParams
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_download_files_and_folders_recovery_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Recovery",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_download_files_and_folders_recovery_without_preload_content(
        self,
        body: Annotated[DownloadFilesAndFoldersRequestParams, Field(description="Specifies the parameters to create a download files and folder recovery.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a download files and folders recovery.

        Creates a download files and folders recovery.

        :param body: Specifies the parameters to create a download files and folder recovery. (required)
        :type body: DownloadFilesAndFoldersRequestParams
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_download_files_and_folders_recovery_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Recovery",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_download_files_and_folders_recovery_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'SessionIdHeader', 
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/data-protect/recoveries/download-files-folders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_recovery(
        self,
        body: Annotated[CreateRecoveryRequest, Field(description="Specifies the parameters to create a Recovery.")],
        request_initiator_type: Annotated[Optional[StrictStr], Field(description="Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Recovery:
        """Performs a Recovery.

        Performs a Recovery.

        :param body: Specifies the parameters to create a Recovery. (required)
        :type body: CreateRecoveryRequest
        :param request_initiator_type: Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
        :type request_initiator_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_recovery_serialize(
            body=body,
            request_initiator_type=request_initiator_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Recovery",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_recovery_with_http_info(
        self,
        body: Annotated[CreateRecoveryRequest, Field(description="Specifies the parameters to create a Recovery.")],
        request_initiator_type: Annotated[Optional[StrictStr], Field(description="Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Recovery]:
        """Performs a Recovery.

        Performs a Recovery.

        :param body: Specifies the parameters to create a Recovery. (required)
        :type body: CreateRecoveryRequest
        :param request_initiator_type: Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
        :type request_initiator_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_recovery_serialize(
            body=body,
            request_initiator_type=request_initiator_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Recovery",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_recovery_without_preload_content(
        self,
        body: Annotated[CreateRecoveryRequest, Field(description="Specifies the parameters to create a Recovery.")],
        request_initiator_type: Annotated[Optional[StrictStr], Field(description="Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs a Recovery.

        Performs a Recovery.

        :param body: Specifies the parameters to create a Recovery. (required)
        :type body: CreateRecoveryRequest
        :param request_initiator_type: Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
        :type request_initiator_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_recovery_serialize(
            body=body,
            request_initiator_type=request_initiator_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Recovery",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_recovery_serialize(
        self,
        body,
        request_initiator_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if request_initiator_type is not None:
            _header_params['requestInitiatorType'] = request_initiator_type
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'SessionIdHeader', 
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/data-protect/recoveries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def download_files_from_recovery(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery.")],
        start_offset: Annotated[Optional[StrictInt], Field(description="Specifies the start offset of file chunk to be downloaded.")] = None,
        length: Annotated[Optional[StrictInt], Field(description="Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets)")] = None,
        file_type: Annotated[Optional[StrictStr], Field(description="Specifies the downloaded type, i.e: error, success_files_list")] = None,
        source_name: Annotated[Optional[StrictStr], Field(description="Specifies the name of the source on which restore is done")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Specifies the start time of restore task")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Download files from the given download file recovery.

        Download files from the given download file recovery.

        :param id: Specifies the id of a Recovery. (required)
        :type id: str
        :param start_offset: Specifies the start offset of file chunk to be downloaded.
        :type start_offset: int
        :param length: Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets)
        :type length: int
        :param file_type: Specifies the downloaded type, i.e: error, success_files_list
        :type file_type: str
        :param source_name: Specifies the name of the source on which restore is done
        :type source_name: str
        :param start_time: Specifies the start time of restore task
        :type start_time: str
        :param include_tenants: Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.
        :type include_tenants: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_files_from_recovery_serialize(
            id=id,
            start_offset=start_offset,
            length=length,
            file_type=file_type,
            source_name=source_name,
            start_time=start_time,
            include_tenants=include_tenants,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def download_files_from_recovery_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery.")],
        start_offset: Annotated[Optional[StrictInt], Field(description="Specifies the start offset of file chunk to be downloaded.")] = None,
        length: Annotated[Optional[StrictInt], Field(description="Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets)")] = None,
        file_type: Annotated[Optional[StrictStr], Field(description="Specifies the downloaded type, i.e: error, success_files_list")] = None,
        source_name: Annotated[Optional[StrictStr], Field(description="Specifies the name of the source on which restore is done")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Specifies the start time of restore task")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Download files from the given download file recovery.

        Download files from the given download file recovery.

        :param id: Specifies the id of a Recovery. (required)
        :type id: str
        :param start_offset: Specifies the start offset of file chunk to be downloaded.
        :type start_offset: int
        :param length: Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets)
        :type length: int
        :param file_type: Specifies the downloaded type, i.e: error, success_files_list
        :type file_type: str
        :param source_name: Specifies the name of the source on which restore is done
        :type source_name: str
        :param start_time: Specifies the start time of restore task
        :type start_time: str
        :param include_tenants: Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.
        :type include_tenants: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_files_from_recovery_serialize(
            id=id,
            start_offset=start_offset,
            length=length,
            file_type=file_type,
            source_name=source_name,
            start_time=start_time,
            include_tenants=include_tenants,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def download_files_from_recovery_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery.")],
        start_offset: Annotated[Optional[StrictInt], Field(description="Specifies the start offset of file chunk to be downloaded.")] = None,
        length: Annotated[Optional[StrictInt], Field(description="Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets)")] = None,
        file_type: Annotated[Optional[StrictStr], Field(description="Specifies the downloaded type, i.e: error, success_files_list")] = None,
        source_name: Annotated[Optional[StrictStr], Field(description="Specifies the name of the source on which restore is done")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Specifies the start time of restore task")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download files from the given download file recovery.

        Download files from the given download file recovery.

        :param id: Specifies the id of a Recovery. (required)
        :type id: str
        :param start_offset: Specifies the start offset of file chunk to be downloaded.
        :type start_offset: int
        :param length: Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets)
        :type length: int
        :param file_type: Specifies the downloaded type, i.e: error, success_files_list
        :type file_type: str
        :param source_name: Specifies the name of the source on which restore is done
        :type source_name: str
        :param start_time: Specifies the start time of restore task
        :type start_time: str
        :param include_tenants: Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.
        :type include_tenants: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_files_from_recovery_serialize(
            id=id,
            start_offset=start_offset,
            length=length,
            file_type=file_type,
            source_name=source_name,
            start_time=start_time,
            include_tenants=include_tenants,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _download_files_from_recovery_serialize(
        self,
        id,
        start_offset,
        length,
        file_type,
        source_name,
        start_time,
        include_tenants,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if start_offset is not None:
            
            _query_params.append(('startOffset', start_offset))
            
        if length is not None:
            
            _query_params.append(('length', length))
            
        if file_type is not None:
            
            _query_params.append(('fileType', file_type))
            
        if source_name is not None:
            
            _query_params.append(('sourceName', source_name))
            
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if include_tenants is not None:
            
            _query_params.append(('includeTenants', include_tenants))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'SessionIdHeader', 
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data-protect/recoveries/{id}/download-files',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def download_indexed_file(
        self,
        snapshots_id: Annotated[StrictStr, Field(description="Specifies the snapshot id to download from.")],
        file_path: Annotated[Optional[StrictStr], Field(description="Specifies the path to the file to download. If no path is specified and snapshot environment is kVMWare, VMX file for VMware will be downloaded. For other snapshot environments, this field must be specified.")] = None,
        nvram_file: Annotated[Optional[StrictBool], Field(description="Specifies if NVRAM file for VMware should be downloaded.")] = None,
        retry_attempt: Annotated[Optional[StrictInt], Field(description="Specifies the number of attempts the protection run took to create this file.")] = None,
        start_offset: Annotated[Optional[StrictInt], Field(description="Specifies the start offset of file chunk to be downloaded.")] = None,
        length: Annotated[Optional[StrictInt], Field(description="Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Download an indexed file.

        Download an indexed file from a snapshot.

        :param snapshots_id: Specifies the snapshot id to download from. (required)
        :type snapshots_id: str
        :param file_path: Specifies the path to the file to download. If no path is specified and snapshot environment is kVMWare, VMX file for VMware will be downloaded. For other snapshot environments, this field must be specified.
        :type file_path: str
        :param nvram_file: Specifies if NVRAM file for VMware should be downloaded.
        :type nvram_file: bool
        :param retry_attempt: Specifies the number of attempts the protection run took to create this file.
        :type retry_attempt: int
        :param start_offset: Specifies the start offset of file chunk to be downloaded.
        :type start_offset: int
        :param length: Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets)
        :type length: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_indexed_file_serialize(
            snapshots_id=snapshots_id,
            file_path=file_path,
            nvram_file=nvram_file,
            retry_attempt=retry_attempt,
            start_offset=start_offset,
            length=length,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def download_indexed_file_with_http_info(
        self,
        snapshots_id: Annotated[StrictStr, Field(description="Specifies the snapshot id to download from.")],
        file_path: Annotated[Optional[StrictStr], Field(description="Specifies the path to the file to download. If no path is specified and snapshot environment is kVMWare, VMX file for VMware will be downloaded. For other snapshot environments, this field must be specified.")] = None,
        nvram_file: Annotated[Optional[StrictBool], Field(description="Specifies if NVRAM file for VMware should be downloaded.")] = None,
        retry_attempt: Annotated[Optional[StrictInt], Field(description="Specifies the number of attempts the protection run took to create this file.")] = None,
        start_offset: Annotated[Optional[StrictInt], Field(description="Specifies the start offset of file chunk to be downloaded.")] = None,
        length: Annotated[Optional[StrictInt], Field(description="Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Download an indexed file.

        Download an indexed file from a snapshot.

        :param snapshots_id: Specifies the snapshot id to download from. (required)
        :type snapshots_id: str
        :param file_path: Specifies the path to the file to download. If no path is specified and snapshot environment is kVMWare, VMX file for VMware will be downloaded. For other snapshot environments, this field must be specified.
        :type file_path: str
        :param nvram_file: Specifies if NVRAM file for VMware should be downloaded.
        :type nvram_file: bool
        :param retry_attempt: Specifies the number of attempts the protection run took to create this file.
        :type retry_attempt: int
        :param start_offset: Specifies the start offset of file chunk to be downloaded.
        :type start_offset: int
        :param length: Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets)
        :type length: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_indexed_file_serialize(
            snapshots_id=snapshots_id,
            file_path=file_path,
            nvram_file=nvram_file,
            retry_attempt=retry_attempt,
            start_offset=start_offset,
            length=length,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def download_indexed_file_without_preload_content(
        self,
        snapshots_id: Annotated[StrictStr, Field(description="Specifies the snapshot id to download from.")],
        file_path: Annotated[Optional[StrictStr], Field(description="Specifies the path to the file to download. If no path is specified and snapshot environment is kVMWare, VMX file for VMware will be downloaded. For other snapshot environments, this field must be specified.")] = None,
        nvram_file: Annotated[Optional[StrictBool], Field(description="Specifies if NVRAM file for VMware should be downloaded.")] = None,
        retry_attempt: Annotated[Optional[StrictInt], Field(description="Specifies the number of attempts the protection run took to create this file.")] = None,
        start_offset: Annotated[Optional[StrictInt], Field(description="Specifies the start offset of file chunk to be downloaded.")] = None,
        length: Annotated[Optional[StrictInt], Field(description="Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download an indexed file.

        Download an indexed file from a snapshot.

        :param snapshots_id: Specifies the snapshot id to download from. (required)
        :type snapshots_id: str
        :param file_path: Specifies the path to the file to download. If no path is specified and snapshot environment is kVMWare, VMX file for VMware will be downloaded. For other snapshot environments, this field must be specified.
        :type file_path: str
        :param nvram_file: Specifies if NVRAM file for VMware should be downloaded.
        :type nvram_file: bool
        :param retry_attempt: Specifies the number of attempts the protection run took to create this file.
        :type retry_attempt: int
        :param start_offset: Specifies the start offset of file chunk to be downloaded.
        :type start_offset: int
        :param length: Specifies the length of bytes to download. This can not be greater than 8MB (8388608 byets)
        :type length: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_indexed_file_serialize(
            snapshots_id=snapshots_id,
            file_path=file_path,
            nvram_file=nvram_file,
            retry_attempt=retry_attempt,
            start_offset=start_offset,
            length=length,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _download_indexed_file_serialize(
        self,
        snapshots_id,
        file_path,
        nvram_file,
        retry_attempt,
        start_offset,
        length,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if snapshots_id is not None:
            _path_params['snapshotsId'] = snapshots_id
        # process the query parameters
        if file_path is not None:
            
            _query_params.append(('filePath', file_path))
            
        if nvram_file is not None:
            
            _query_params.append(('nvramFile', nvram_file))
            
        if retry_attempt is not None:
            
            _query_params.append(('retryAttempt', retry_attempt))
            
        if start_offset is not None:
            
            _query_params.append(('startOffset', start_offset))
            
        if length is not None:
            
            _query_params.append(('length', length))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'SessionIdHeader', 
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data-protect/snapshots/{snapshotsId}/download-file',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def fetch_uptier_data(
        self,
        archive_uid: Annotated[str, Field(strict=True, description="Archive UID of the current restore.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FetchUptierDataResponse:
        """Fetches the uptier data.

        Fetches the uptier data for a restore job.

        :param archive_uid: Archive UID of the current restore. (required)
        :type archive_uid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fetch_uptier_data_serialize(
            archive_uid=archive_uid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FetchUptierDataResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fetch_uptier_data_with_http_info(
        self,
        archive_uid: Annotated[str, Field(strict=True, description="Archive UID of the current restore.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FetchUptierDataResponse]:
        """Fetches the uptier data.

        Fetches the uptier data for a restore job.

        :param archive_uid: Archive UID of the current restore. (required)
        :type archive_uid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fetch_uptier_data_serialize(
            archive_uid=archive_uid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FetchUptierDataResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def fetch_uptier_data_without_preload_content(
        self,
        archive_uid: Annotated[str, Field(strict=True, description="Archive UID of the current restore.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetches the uptier data.

        Fetches the uptier data for a restore job.

        :param archive_uid: Archive UID of the current restore. (required)
        :type archive_uid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fetch_uptier_data_serialize(
            archive_uid=archive_uid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FetchUptierDataResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _fetch_uptier_data_serialize(
        self,
        archive_uid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if archive_uid is not None:
            
            _query_params.append(('archiveUId', archive_uid))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'SessionIdHeader', 
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data-protect/recoveries/fetch-uptier-data',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recoveries(
        self,
        ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter Recoveries for given ids.")] = None,
        return_only_child_recoveries: Annotated[Optional[StrictBool], Field(description="Returns only child recoveries if passed as true. This filter should always be used along with 'ids' filter. ")] = None,
        tenant_ids: Annotated[Optional[List[StrictStr]], Field(description="TenantIds contains ids of the organizations for which recoveries are to be returned.")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.")] = None,
        start_time_usecs: Annotated[Optional[StrictInt], Field(description="Returns the recoveries which are started after the specific time. This value should be in Unix timestamp epoch in microseconds.")] = None,
        end_time_usecs: Annotated[Optional[StrictInt], Field(description="Returns the recoveries which are started before the specific time. This value should be in Unix timestamp epoch in microseconds.")] = None,
        storage_domain_id: Annotated[Optional[StrictInt], Field(description="Filter by Storage Domain id. Only recoveries writing data to this Storage Domain will be returned.")] = None,
        snapshot_target_type: Annotated[Optional[List[StrictStr]], Field(description="Specifies the snapshot's target type from which recovery has been performed.")] = None,
        archival_target_type: Annotated[Optional[List[StrictStr]], Field(description="Specifies the snapshot's archival target type from which recovery has been performed. This parameter applies only if 'snapshotTargetType' is 'Archival'.")] = None,
        snapshot_environments: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of snapshot environment types to filter Recoveries. If empty, Recoveries related to all environments will be returned.")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of run status to filter Recoveries. If empty, Recoveries with all run status will be returned.")] = None,
        recovery_actions: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of recovery actions to filter Recoveries. If empty, Recoveries related to all actions will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Recoveries:
        """Lists the Recoveries.

        Lists the Recoveries.

        :param ids: Filter Recoveries for given ids.
        :type ids: List[str]
        :param return_only_child_recoveries: Returns only child recoveries if passed as true. This filter should always be used along with 'ids' filter. 
        :type return_only_child_recoveries: bool
        :param tenant_ids: TenantIds contains ids of the organizations for which recoveries are to be returned.
        :type tenant_ids: List[str]
        :param include_tenants: Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.
        :type include_tenants: bool
        :param start_time_usecs: Returns the recoveries which are started after the specific time. This value should be in Unix timestamp epoch in microseconds.
        :type start_time_usecs: int
        :param end_time_usecs: Returns the recoveries which are started before the specific time. This value should be in Unix timestamp epoch in microseconds.
        :type end_time_usecs: int
        :param storage_domain_id: Filter by Storage Domain id. Only recoveries writing data to this Storage Domain will be returned.
        :type storage_domain_id: int
        :param snapshot_target_type: Specifies the snapshot's target type from which recovery has been performed.
        :type snapshot_target_type: List[str]
        :param archival_target_type: Specifies the snapshot's archival target type from which recovery has been performed. This parameter applies only if 'snapshotTargetType' is 'Archival'.
        :type archival_target_type: List[str]
        :param snapshot_environments: Specifies the list of snapshot environment types to filter Recoveries. If empty, Recoveries related to all environments will be returned.
        :type snapshot_environments: List[str]
        :param status: Specifies the list of run status to filter Recoveries. If empty, Recoveries with all run status will be returned.
        :type status: List[str]
        :param recovery_actions: Specifies the list of recovery actions to filter Recoveries. If empty, Recoveries related to all actions will be returned.
        :type recovery_actions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recoveries_serialize(
            ids=ids,
            return_only_child_recoveries=return_only_child_recoveries,
            tenant_ids=tenant_ids,
            include_tenants=include_tenants,
            start_time_usecs=start_time_usecs,
            end_time_usecs=end_time_usecs,
            storage_domain_id=storage_domain_id,
            snapshot_target_type=snapshot_target_type,
            archival_target_type=archival_target_type,
            snapshot_environments=snapshot_environments,
            status=status,
            recovery_actions=recovery_actions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recoveries",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recoveries_with_http_info(
        self,
        ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter Recoveries for given ids.")] = None,
        return_only_child_recoveries: Annotated[Optional[StrictBool], Field(description="Returns only child recoveries if passed as true. This filter should always be used along with 'ids' filter. ")] = None,
        tenant_ids: Annotated[Optional[List[StrictStr]], Field(description="TenantIds contains ids of the organizations for which recoveries are to be returned.")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.")] = None,
        start_time_usecs: Annotated[Optional[StrictInt], Field(description="Returns the recoveries which are started after the specific time. This value should be in Unix timestamp epoch in microseconds.")] = None,
        end_time_usecs: Annotated[Optional[StrictInt], Field(description="Returns the recoveries which are started before the specific time. This value should be in Unix timestamp epoch in microseconds.")] = None,
        storage_domain_id: Annotated[Optional[StrictInt], Field(description="Filter by Storage Domain id. Only recoveries writing data to this Storage Domain will be returned.")] = None,
        snapshot_target_type: Annotated[Optional[List[StrictStr]], Field(description="Specifies the snapshot's target type from which recovery has been performed.")] = None,
        archival_target_type: Annotated[Optional[List[StrictStr]], Field(description="Specifies the snapshot's archival target type from which recovery has been performed. This parameter applies only if 'snapshotTargetType' is 'Archival'.")] = None,
        snapshot_environments: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of snapshot environment types to filter Recoveries. If empty, Recoveries related to all environments will be returned.")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of run status to filter Recoveries. If empty, Recoveries with all run status will be returned.")] = None,
        recovery_actions: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of recovery actions to filter Recoveries. If empty, Recoveries related to all actions will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Recoveries]:
        """Lists the Recoveries.

        Lists the Recoveries.

        :param ids: Filter Recoveries for given ids.
        :type ids: List[str]
        :param return_only_child_recoveries: Returns only child recoveries if passed as true. This filter should always be used along with 'ids' filter. 
        :type return_only_child_recoveries: bool
        :param tenant_ids: TenantIds contains ids of the organizations for which recoveries are to be returned.
        :type tenant_ids: List[str]
        :param include_tenants: Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.
        :type include_tenants: bool
        :param start_time_usecs: Returns the recoveries which are started after the specific time. This value should be in Unix timestamp epoch in microseconds.
        :type start_time_usecs: int
        :param end_time_usecs: Returns the recoveries which are started before the specific time. This value should be in Unix timestamp epoch in microseconds.
        :type end_time_usecs: int
        :param storage_domain_id: Filter by Storage Domain id. Only recoveries writing data to this Storage Domain will be returned.
        :type storage_domain_id: int
        :param snapshot_target_type: Specifies the snapshot's target type from which recovery has been performed.
        :type snapshot_target_type: List[str]
        :param archival_target_type: Specifies the snapshot's archival target type from which recovery has been performed. This parameter applies only if 'snapshotTargetType' is 'Archival'.
        :type archival_target_type: List[str]
        :param snapshot_environments: Specifies the list of snapshot environment types to filter Recoveries. If empty, Recoveries related to all environments will be returned.
        :type snapshot_environments: List[str]
        :param status: Specifies the list of run status to filter Recoveries. If empty, Recoveries with all run status will be returned.
        :type status: List[str]
        :param recovery_actions: Specifies the list of recovery actions to filter Recoveries. If empty, Recoveries related to all actions will be returned.
        :type recovery_actions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recoveries_serialize(
            ids=ids,
            return_only_child_recoveries=return_only_child_recoveries,
            tenant_ids=tenant_ids,
            include_tenants=include_tenants,
            start_time_usecs=start_time_usecs,
            end_time_usecs=end_time_usecs,
            storage_domain_id=storage_domain_id,
            snapshot_target_type=snapshot_target_type,
            archival_target_type=archival_target_type,
            snapshot_environments=snapshot_environments,
            status=status,
            recovery_actions=recovery_actions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recoveries",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recoveries_without_preload_content(
        self,
        ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter Recoveries for given ids.")] = None,
        return_only_child_recoveries: Annotated[Optional[StrictBool], Field(description="Returns only child recoveries if passed as true. This filter should always be used along with 'ids' filter. ")] = None,
        tenant_ids: Annotated[Optional[List[StrictStr]], Field(description="TenantIds contains ids of the organizations for which recoveries are to be returned.")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.")] = None,
        start_time_usecs: Annotated[Optional[StrictInt], Field(description="Returns the recoveries which are started after the specific time. This value should be in Unix timestamp epoch in microseconds.")] = None,
        end_time_usecs: Annotated[Optional[StrictInt], Field(description="Returns the recoveries which are started before the specific time. This value should be in Unix timestamp epoch in microseconds.")] = None,
        storage_domain_id: Annotated[Optional[StrictInt], Field(description="Filter by Storage Domain id. Only recoveries writing data to this Storage Domain will be returned.")] = None,
        snapshot_target_type: Annotated[Optional[List[StrictStr]], Field(description="Specifies the snapshot's target type from which recovery has been performed.")] = None,
        archival_target_type: Annotated[Optional[List[StrictStr]], Field(description="Specifies the snapshot's archival target type from which recovery has been performed. This parameter applies only if 'snapshotTargetType' is 'Archival'.")] = None,
        snapshot_environments: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of snapshot environment types to filter Recoveries. If empty, Recoveries related to all environments will be returned.")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of run status to filter Recoveries. If empty, Recoveries with all run status will be returned.")] = None,
        recovery_actions: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of recovery actions to filter Recoveries. If empty, Recoveries related to all actions will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Lists the Recoveries.

        Lists the Recoveries.

        :param ids: Filter Recoveries for given ids.
        :type ids: List[str]
        :param return_only_child_recoveries: Returns only child recoveries if passed as true. This filter should always be used along with 'ids' filter. 
        :type return_only_child_recoveries: bool
        :param tenant_ids: TenantIds contains ids of the organizations for which recoveries are to be returned.
        :type tenant_ids: List[str]
        :param include_tenants: Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.
        :type include_tenants: bool
        :param start_time_usecs: Returns the recoveries which are started after the specific time. This value should be in Unix timestamp epoch in microseconds.
        :type start_time_usecs: int
        :param end_time_usecs: Returns the recoveries which are started before the specific time. This value should be in Unix timestamp epoch in microseconds.
        :type end_time_usecs: int
        :param storage_domain_id: Filter by Storage Domain id. Only recoveries writing data to this Storage Domain will be returned.
        :type storage_domain_id: int
        :param snapshot_target_type: Specifies the snapshot's target type from which recovery has been performed.
        :type snapshot_target_type: List[str]
        :param archival_target_type: Specifies the snapshot's archival target type from which recovery has been performed. This parameter applies only if 'snapshotTargetType' is 'Archival'.
        :type archival_target_type: List[str]
        :param snapshot_environments: Specifies the list of snapshot environment types to filter Recoveries. If empty, Recoveries related to all environments will be returned.
        :type snapshot_environments: List[str]
        :param status: Specifies the list of run status to filter Recoveries. If empty, Recoveries with all run status will be returned.
        :type status: List[str]
        :param recovery_actions: Specifies the list of recovery actions to filter Recoveries. If empty, Recoveries related to all actions will be returned.
        :type recovery_actions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recoveries_serialize(
            ids=ids,
            return_only_child_recoveries=return_only_child_recoveries,
            tenant_ids=tenant_ids,
            include_tenants=include_tenants,
            start_time_usecs=start_time_usecs,
            end_time_usecs=end_time_usecs,
            storage_domain_id=storage_domain_id,
            snapshot_target_type=snapshot_target_type,
            archival_target_type=archival_target_type,
            snapshot_environments=snapshot_environments,
            status=status,
            recovery_actions=recovery_actions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recoveries",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_recoveries_serialize(
        self,
        ids,
        return_only_child_recoveries,
        tenant_ids,
        include_tenants,
        start_time_usecs,
        end_time_usecs,
        storage_domain_id,
        snapshot_target_type,
        archival_target_type,
        snapshot_environments,
        status,
        recovery_actions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'ids': 'csv',
            'tenantIds': 'csv',
            'snapshotTargetType': 'csv',
            'archivalTargetType': 'csv',
            'snapshotEnvironments': 'csv',
            'status': 'csv',
            'recoveryActions': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if return_only_child_recoveries is not None:
            
            _query_params.append(('returnOnlyChildRecoveries', return_only_child_recoveries))
            
        if tenant_ids is not None:
            
            _query_params.append(('tenantIds', tenant_ids))
            
        if include_tenants is not None:
            
            _query_params.append(('includeTenants', include_tenants))
            
        if start_time_usecs is not None:
            
            _query_params.append(('startTimeUsecs', start_time_usecs))
            
        if end_time_usecs is not None:
            
            _query_params.append(('endTimeUsecs', end_time_usecs))
            
        if storage_domain_id is not None:
            
            _query_params.append(('storageDomainId', storage_domain_id))
            
        if snapshot_target_type is not None:
            
            _query_params.append(('snapshotTargetType', snapshot_target_type))
            
        if archival_target_type is not None:
            
            _query_params.append(('archivalTargetType', archival_target_type))
            
        if snapshot_environments is not None:
            
            _query_params.append(('snapshotEnvironments', snapshot_environments))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if recovery_actions is not None:
            
            _query_params.append(('recoveryActions', recovery_actions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'SessionIdHeader', 
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data-protect/recoveries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recovery_by_id(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery.")],
        include_tenants: Annotated[Optional[StrictBool], Field(description="Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Recovery:
        """Get Recovery for a given id.

        Get Recovery for a given id.

        :param id: Specifies the id of a Recovery. (required)
        :type id: str
        :param include_tenants: Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.
        :type include_tenants: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recovery_by_id_serialize(
            id=id,
            include_tenants=include_tenants,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recovery",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recovery_by_id_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery.")],
        include_tenants: Annotated[Optional[StrictBool], Field(description="Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Recovery]:
        """Get Recovery for a given id.

        Get Recovery for a given id.

        :param id: Specifies the id of a Recovery. (required)
        :type id: str
        :param include_tenants: Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.
        :type include_tenants: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recovery_by_id_serialize(
            id=id,
            include_tenants=include_tenants,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recovery",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recovery_by_id_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery.")],
        include_tenants: Annotated[Optional[StrictBool], Field(description="Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Recovery for a given id.

        Get Recovery for a given id.

        :param id: Specifies the id of a Recovery. (required)
        :type id: str
        :param include_tenants: Specifies if objects of all the organizations under the hierarchy of the logged in user's organization should be returned.
        :type include_tenants: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recovery_by_id_serialize(
            id=id,
            include_tenants=include_tenants,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recovery",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_recovery_by_id_serialize(
        self,
        id,
        include_tenants,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if include_tenants is not None:
            
            _query_params.append(('includeTenants', include_tenants))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'SessionIdHeader', 
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data-protect/recoveries/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recovery_debug_logs(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery job.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get the debug logs for a particular recovery operation.

        Get the debug logs for a particular recovery operation.

        :param id: Specifies the id of a Recovery job. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recovery_debug_logs_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recovery_debug_logs_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery job.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get the debug logs for a particular recovery operation.

        Get the debug logs for a particular recovery operation.

        :param id: Specifies the id of a Recovery job. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recovery_debug_logs_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recovery_debug_logs_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery job.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the debug logs for a particular recovery operation.

        Get the debug logs for a particular recovery operation.

        :param id: Specifies the id of a Recovery job. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recovery_debug_logs_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_recovery_debug_logs_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'SessionIdHeader', 
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data-protect/recoveries/{id}/debug-logs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recovery_errors_report(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies a unique ID of a Recovery.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get the CSV of errors/warnings for a given recovery operation.

        Get a CSV error report for given recovery operation. Each row in CSV report contains the File Path, error/warning code and error/warning message.

        :param id: Specifies a unique ID of a Recovery. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recovery_errors_report_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recovery_errors_report_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies a unique ID of a Recovery.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get the CSV of errors/warnings for a given recovery operation.

        Get a CSV error report for given recovery operation. Each row in CSV report contains the File Path, error/warning code and error/warning message.

        :param id: Specifies a unique ID of a Recovery. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recovery_errors_report_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recovery_errors_report_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies a unique ID of a Recovery.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the CSV of errors/warnings for a given recovery operation.

        Get a CSV error report for given recovery operation. Each row in CSV report contains the File Path, error/warning code and error/warning message.

        :param id: Specifies a unique ID of a Recovery. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recovery_errors_report_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_recovery_errors_report_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'SessionIdHeader', 
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data-protect/recoveries/{id}/download-messages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tear_down_recovery_by_id(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Tear down Recovery for a given id.

        Tear down Recovery for a given id.

        :param id: Specifies the id of a Recovery. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tear_down_recovery_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tear_down_recovery_by_id_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Tear down Recovery for a given id.

        Tear down Recovery for a given id.

        :param id: Specifies the id of a Recovery. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tear_down_recovery_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tear_down_recovery_by_id_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, description="Specifies the id of a Recovery.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Tear down Recovery for a given id.

        Tear down Recovery for a given id.

        :param id: Specifies the id of a Recovery. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tear_down_recovery_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tear_down_recovery_by_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'SessionIdHeader', 
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/data-protect/recoveries/{id}/tear-down',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


