# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool
from cohesity_sdk.helios.models.alert_resolution import AlertResolution
from cohesity_sdk.helios.models.alert_resolutions_list import AlertResolutionsList
from cohesity_sdk.helios.models.alerts_list import AlertsList
from cohesity_sdk.helios.models.alerts_summary_response import AlertsSummaryResponse
from cohesity_sdk.helios.models.create_helios_alert_resolution_params import CreateHeliosAlertResolutionParams

from cohesity_sdk.helios.api_client import ApiClient, RequestSerialized
from cohesity_sdk.helios.api_response import ApiResponse
from cohesity_sdk.helios.rest import RESTResponseType


class AlertApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_helios_alert_resolution(
        self,
        body: Annotated[CreateHeliosAlertResolutionParams, Field(description="Helios Alert resolution to be created, with alerts to resolve. Alerts.")],
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertResolution:
        """Create an Helios Alert Resolution.

        Apply resolution to Helios alerts, create the resolution if it dose not exists

        :param body: Helios Alert resolution to be created, with alerts to resolve. Alerts. (required)
        :type body: CreateHeliosAlertResolutionParams
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_helios_alert_resolution_serialize(
            body=body,
            region_id=region_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "AlertResolution",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_helios_alert_resolution_with_http_info(
        self,
        body: Annotated[CreateHeliosAlertResolutionParams, Field(description="Helios Alert resolution to be created, with alerts to resolve. Alerts.")],
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertResolution]:
        """Create an Helios Alert Resolution.

        Apply resolution to Helios alerts, create the resolution if it dose not exists

        :param body: Helios Alert resolution to be created, with alerts to resolve. Alerts. (required)
        :type body: CreateHeliosAlertResolutionParams
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_helios_alert_resolution_serialize(
            body=body,
            region_id=region_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "AlertResolution",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_helios_alert_resolution_without_preload_content(
        self,
        body: Annotated[CreateHeliosAlertResolutionParams, Field(description="Helios Alert resolution to be created, with alerts to resolve. Alerts.")],
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an Helios Alert Resolution.

        Apply resolution to Helios alerts, create the resolution if it dose not exists

        :param body: Helios Alert resolution to be created, with alerts to resolve. Alerts. (required)
        :type body: CreateHeliosAlertResolutionParams
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_helios_alert_resolution_serialize(
            body=body,
            region_id=region_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "AlertResolution",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_helios_alert_resolution_serialize(
        self,
        body,
        region_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if region_id is not None:
            _header_params['regionId'] = region_id
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/mcm/alerts/resolutions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_alert_summary(
        self,
        access_cluster_id: Annotated[Optional[StrictInt], Field(description="This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.")] = None,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        start_time_usecs: Annotated[Optional[StrictInt], Field(description="Filter by start time. Specify the start time as a Unix epoch Timestamp (in microseconds). By default it is current time minus a day.")] = None,
        end_time_usecs: Annotated[Optional[StrictInt], Field(description="Filter by end time. Specify the end time as a Unix epoch Timestamp (in microseconds). By default it is current time.")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="IncludeTenants specifies if alerts of all the tenants under the hierarchy of the logged in user's organization should be used to compute summary.")] = None,
        tenant_ids: Annotated[Optional[List[StrictStr]], Field(description="TenantIds contains ids of the tenants for which alerts are to be used to compute summary.")] = None,
        states_list: Annotated[Optional[List[StrictStr]], Field(description="Specifies list of alert states to filter alerts by. If not specified, only open alerts will be used to get summary.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertsSummaryResponse:
        """Get alerts summary.

        Get alerts summary grouped by category.

        :param access_cluster_id: This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.
        :type access_cluster_id: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param start_time_usecs: Filter by start time. Specify the start time as a Unix epoch Timestamp (in microseconds). By default it is current time minus a day.
        :type start_time_usecs: int
        :param end_time_usecs: Filter by end time. Specify the end time as a Unix epoch Timestamp (in microseconds). By default it is current time.
        :type end_time_usecs: int
        :param include_tenants: IncludeTenants specifies if alerts of all the tenants under the hierarchy of the logged in user's organization should be used to compute summary.
        :type include_tenants: bool
        :param tenant_ids: TenantIds contains ids of the tenants for which alerts are to be used to compute summary.
        :type tenant_ids: List[str]
        :param states_list: Specifies list of alert states to filter alerts by. If not specified, only open alerts will be used to get summary.
        :type states_list: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_alert_summary_serialize(
            access_cluster_id=access_cluster_id,
            region_id=region_id,
            start_time_usecs=start_time_usecs,
            end_time_usecs=end_time_usecs,
            include_tenants=include_tenants,
            tenant_ids=tenant_ids,
            states_list=states_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsSummaryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_alert_summary_with_http_info(
        self,
        access_cluster_id: Annotated[Optional[StrictInt], Field(description="This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.")] = None,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        start_time_usecs: Annotated[Optional[StrictInt], Field(description="Filter by start time. Specify the start time as a Unix epoch Timestamp (in microseconds). By default it is current time minus a day.")] = None,
        end_time_usecs: Annotated[Optional[StrictInt], Field(description="Filter by end time. Specify the end time as a Unix epoch Timestamp (in microseconds). By default it is current time.")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="IncludeTenants specifies if alerts of all the tenants under the hierarchy of the logged in user's organization should be used to compute summary.")] = None,
        tenant_ids: Annotated[Optional[List[StrictStr]], Field(description="TenantIds contains ids of the tenants for which alerts are to be used to compute summary.")] = None,
        states_list: Annotated[Optional[List[StrictStr]], Field(description="Specifies list of alert states to filter alerts by. If not specified, only open alerts will be used to get summary.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertsSummaryResponse]:
        """Get alerts summary.

        Get alerts summary grouped by category.

        :param access_cluster_id: This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.
        :type access_cluster_id: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param start_time_usecs: Filter by start time. Specify the start time as a Unix epoch Timestamp (in microseconds). By default it is current time minus a day.
        :type start_time_usecs: int
        :param end_time_usecs: Filter by end time. Specify the end time as a Unix epoch Timestamp (in microseconds). By default it is current time.
        :type end_time_usecs: int
        :param include_tenants: IncludeTenants specifies if alerts of all the tenants under the hierarchy of the logged in user's organization should be used to compute summary.
        :type include_tenants: bool
        :param tenant_ids: TenantIds contains ids of the tenants for which alerts are to be used to compute summary.
        :type tenant_ids: List[str]
        :param states_list: Specifies list of alert states to filter alerts by. If not specified, only open alerts will be used to get summary.
        :type states_list: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_alert_summary_serialize(
            access_cluster_id=access_cluster_id,
            region_id=region_id,
            start_time_usecs=start_time_usecs,
            end_time_usecs=end_time_usecs,
            include_tenants=include_tenants,
            tenant_ids=tenant_ids,
            states_list=states_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsSummaryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_alert_summary_without_preload_content(
        self,
        access_cluster_id: Annotated[Optional[StrictInt], Field(description="This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.")] = None,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        start_time_usecs: Annotated[Optional[StrictInt], Field(description="Filter by start time. Specify the start time as a Unix epoch Timestamp (in microseconds). By default it is current time minus a day.")] = None,
        end_time_usecs: Annotated[Optional[StrictInt], Field(description="Filter by end time. Specify the end time as a Unix epoch Timestamp (in microseconds). By default it is current time.")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="IncludeTenants specifies if alerts of all the tenants under the hierarchy of the logged in user's organization should be used to compute summary.")] = None,
        tenant_ids: Annotated[Optional[List[StrictStr]], Field(description="TenantIds contains ids of the tenants for which alerts are to be used to compute summary.")] = None,
        states_list: Annotated[Optional[List[StrictStr]], Field(description="Specifies list of alert states to filter alerts by. If not specified, only open alerts will be used to get summary.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get alerts summary.

        Get alerts summary grouped by category.

        :param access_cluster_id: This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.
        :type access_cluster_id: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param start_time_usecs: Filter by start time. Specify the start time as a Unix epoch Timestamp (in microseconds). By default it is current time minus a day.
        :type start_time_usecs: int
        :param end_time_usecs: Filter by end time. Specify the end time as a Unix epoch Timestamp (in microseconds). By default it is current time.
        :type end_time_usecs: int
        :param include_tenants: IncludeTenants specifies if alerts of all the tenants under the hierarchy of the logged in user's organization should be used to compute summary.
        :type include_tenants: bool
        :param tenant_ids: TenantIds contains ids of the tenants for which alerts are to be used to compute summary.
        :type tenant_ids: List[str]
        :param states_list: Specifies list of alert states to filter alerts by. If not specified, only open alerts will be used to get summary.
        :type states_list: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_alert_summary_serialize(
            access_cluster_id=access_cluster_id,
            region_id=region_id,
            start_time_usecs=start_time_usecs,
            end_time_usecs=end_time_usecs,
            include_tenants=include_tenants,
            tenant_ids=tenant_ids,
            states_list=states_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsSummaryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_alert_summary_serialize(
        self,
        access_cluster_id,
        region_id,
        start_time_usecs,
        end_time_usecs,
        include_tenants,
        tenant_ids,
        states_list,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tenantIds': 'csv',
            'statesList': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_time_usecs is not None:
            
            _query_params.append(('startTimeUsecs', start_time_usecs))
            
        if end_time_usecs is not None:
            
            _query_params.append(('endTimeUsecs', end_time_usecs))
            
        if include_tenants is not None:
            
            _query_params.append(('includeTenants', include_tenants))
            
        if tenant_ids is not None:
            
            _query_params.append(('tenantIds', tenant_ids))
            
        if states_list is not None:
            
            _query_params.append(('statesList', states_list))
            
        # process the header parameters
        if access_cluster_id is not None:
            _header_params['accessClusterId'] = access_cluster_id
        if region_id is not None:
            _header_params['regionId'] = region_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/alerts-summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_helios_alert_resolution(
        self,
        max_resolutions: Annotated[StrictInt, Field(description="Specifies the max number of Resolutions to be returned, from the latest created to the earliest created")],
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        resolution_name: Annotated[Optional[StrictStr], Field(description="Specifies Alert Resolution Name to query.")] = None,
        resolution_id: Annotated[Optional[StrictStr], Field(description="Specifies Alert Resolution id to query.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[AlertResolutionsList]:
        """List the Alert Resolutions in Cohesity system.

        Returns the Helios Alert Resolution objects found in Cohesity system that match the filter criteria from given parameters. If no filter parameters are specified, MaxResolutions Alert Resolution objects are returned. Each object provides details about the Alert Resolution info and the resolved alert info.

        :param max_resolutions: Specifies the max number of Resolutions to be returned, from the latest created to the earliest created (required)
        :type max_resolutions: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param resolution_name: Specifies Alert Resolution Name to query.
        :type resolution_name: str
        :param resolution_id: Specifies Alert Resolution id to query.
        :type resolution_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_helios_alert_resolution_serialize(
            max_resolutions=max_resolutions,
            region_id=region_id,
            resolution_name=resolution_name,
            resolution_id=resolution_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AlertResolutionsList]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_helios_alert_resolution_with_http_info(
        self,
        max_resolutions: Annotated[StrictInt, Field(description="Specifies the max number of Resolutions to be returned, from the latest created to the earliest created")],
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        resolution_name: Annotated[Optional[StrictStr], Field(description="Specifies Alert Resolution Name to query.")] = None,
        resolution_id: Annotated[Optional[StrictStr], Field(description="Specifies Alert Resolution id to query.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[AlertResolutionsList]]:
        """List the Alert Resolutions in Cohesity system.

        Returns the Helios Alert Resolution objects found in Cohesity system that match the filter criteria from given parameters. If no filter parameters are specified, MaxResolutions Alert Resolution objects are returned. Each object provides details about the Alert Resolution info and the resolved alert info.

        :param max_resolutions: Specifies the max number of Resolutions to be returned, from the latest created to the earliest created (required)
        :type max_resolutions: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param resolution_name: Specifies Alert Resolution Name to query.
        :type resolution_name: str
        :param resolution_id: Specifies Alert Resolution id to query.
        :type resolution_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_helios_alert_resolution_serialize(
            max_resolutions=max_resolutions,
            region_id=region_id,
            resolution_name=resolution_name,
            resolution_id=resolution_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AlertResolutionsList]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_helios_alert_resolution_without_preload_content(
        self,
        max_resolutions: Annotated[StrictInt, Field(description="Specifies the max number of Resolutions to be returned, from the latest created to the earliest created")],
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        resolution_name: Annotated[Optional[StrictStr], Field(description="Specifies Alert Resolution Name to query.")] = None,
        resolution_id: Annotated[Optional[StrictStr], Field(description="Specifies Alert Resolution id to query.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List the Alert Resolutions in Cohesity system.

        Returns the Helios Alert Resolution objects found in Cohesity system that match the filter criteria from given parameters. If no filter parameters are specified, MaxResolutions Alert Resolution objects are returned. Each object provides details about the Alert Resolution info and the resolved alert info.

        :param max_resolutions: Specifies the max number of Resolutions to be returned, from the latest created to the earliest created (required)
        :type max_resolutions: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param resolution_name: Specifies Alert Resolution Name to query.
        :type resolution_name: str
        :param resolution_id: Specifies Alert Resolution id to query.
        :type resolution_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_helios_alert_resolution_serialize(
            max_resolutions=max_resolutions,
            region_id=region_id,
            resolution_name=resolution_name,
            resolution_id=resolution_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AlertResolutionsList]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_helios_alert_resolution_serialize(
        self,
        max_resolutions,
        region_id,
        resolution_name,
        resolution_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if resolution_name is not None:
            
            _query_params.append(('resolutionName', resolution_name))
            
        if resolution_id is not None:
            
            _query_params.append(('resolutionId', resolution_id))
            
        if max_resolutions is not None:
            
            _query_params.append(('maxResolutions', max_resolutions))
            
        # process the header parameters
        if region_id is not None:
            _header_params['regionId'] = region_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/mcm/alerts/resolutions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_helios_alerts(
        self,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        alert_id_list: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of alert ids.")] = None,
        alert_state_list: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of alert states.")] = None,
        alert_type_list: Annotated[Optional[List[StrictInt]], Field(description="Filter by list of alert types.")] = None,
        alert_severity_list: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of alert severity types.")] = None,
        region_ids: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of region ids.")] = None,
        cluster_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of cluster ids.")] = None,
        start_date_usecs: Annotated[Optional[StrictInt], Field(description="Specifies the start time of the alerts to be returned. All the alerts returned are raised after the specified start time. This value should be in Unix timestamp epoch in microseconds.")] = None,
        end_date_usecs: Annotated[Optional[StrictInt], Field(description="Specifies the end time of the alerts to be returned. All the alerts returned are raised before the specified end time. This value should be in Unix timestamp epoch in microseconds.")] = None,
        max_alerts: Annotated[Optional[StrictInt], Field(description="Specifies maximum number of alerts to return")] = None,
        alert_category_list: Annotated[Optional[List[Optional[StrictStr]]], Field(description="Filter by list of alert categories.")] = None,
        alert_type_bucket_list: Annotated[Optional[List[Optional[StrictStr]]], Field(description="Filter by list of alert type buckets.")] = None,
        alert_property_key_list: Annotated[Optional[List[Optional[StrictStr]]], Field(description="Specifies list of the alert property keys to query.")] = None,
        alert_property_value_list: Annotated[Optional[List[Optional[StrictStr]]], Field(description="Specifies list of the alert property value, multiple values for one key should be joined by '|'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertsList:
        """Get list of helios alerts.

        Get the list of helios alerts.

        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param alert_id_list: Filter by list of alert ids.
        :type alert_id_list: List[str]
        :param alert_state_list: Filter by list of alert states.
        :type alert_state_list: List[str]
        :param alert_type_list: Filter by list of alert types.
        :type alert_type_list: List[int]
        :param alert_severity_list: Filter by list of alert severity types.
        :type alert_severity_list: List[str]
        :param region_ids: Filter by list of region ids.
        :type region_ids: List[str]
        :param cluster_identifiers: Filter by list of cluster ids.
        :type cluster_identifiers: List[str]
        :param start_date_usecs: Specifies the start time of the alerts to be returned. All the alerts returned are raised after the specified start time. This value should be in Unix timestamp epoch in microseconds.
        :type start_date_usecs: int
        :param end_date_usecs: Specifies the end time of the alerts to be returned. All the alerts returned are raised before the specified end time. This value should be in Unix timestamp epoch in microseconds.
        :type end_date_usecs: int
        :param max_alerts: Specifies maximum number of alerts to return
        :type max_alerts: int
        :param alert_category_list: Filter by list of alert categories.
        :type alert_category_list: List[Optional[str]]
        :param alert_type_bucket_list: Filter by list of alert type buckets.
        :type alert_type_bucket_list: List[Optional[str]]
        :param alert_property_key_list: Specifies list of the alert property keys to query.
        :type alert_property_key_list: List[Optional[str]]
        :param alert_property_value_list: Specifies list of the alert property value, multiple values for one key should be joined by '|'.
        :type alert_property_value_list: List[Optional[str]]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_helios_alerts_serialize(
            region_id=region_id,
            alert_id_list=alert_id_list,
            alert_state_list=alert_state_list,
            alert_type_list=alert_type_list,
            alert_severity_list=alert_severity_list,
            region_ids=region_ids,
            cluster_identifiers=cluster_identifiers,
            start_date_usecs=start_date_usecs,
            end_date_usecs=end_date_usecs,
            max_alerts=max_alerts,
            alert_category_list=alert_category_list,
            alert_type_bucket_list=alert_type_bucket_list,
            alert_property_key_list=alert_property_key_list,
            alert_property_value_list=alert_property_value_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_helios_alerts_with_http_info(
        self,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        alert_id_list: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of alert ids.")] = None,
        alert_state_list: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of alert states.")] = None,
        alert_type_list: Annotated[Optional[List[StrictInt]], Field(description="Filter by list of alert types.")] = None,
        alert_severity_list: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of alert severity types.")] = None,
        region_ids: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of region ids.")] = None,
        cluster_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of cluster ids.")] = None,
        start_date_usecs: Annotated[Optional[StrictInt], Field(description="Specifies the start time of the alerts to be returned. All the alerts returned are raised after the specified start time. This value should be in Unix timestamp epoch in microseconds.")] = None,
        end_date_usecs: Annotated[Optional[StrictInt], Field(description="Specifies the end time of the alerts to be returned. All the alerts returned are raised before the specified end time. This value should be in Unix timestamp epoch in microseconds.")] = None,
        max_alerts: Annotated[Optional[StrictInt], Field(description="Specifies maximum number of alerts to return")] = None,
        alert_category_list: Annotated[Optional[List[Optional[StrictStr]]], Field(description="Filter by list of alert categories.")] = None,
        alert_type_bucket_list: Annotated[Optional[List[Optional[StrictStr]]], Field(description="Filter by list of alert type buckets.")] = None,
        alert_property_key_list: Annotated[Optional[List[Optional[StrictStr]]], Field(description="Specifies list of the alert property keys to query.")] = None,
        alert_property_value_list: Annotated[Optional[List[Optional[StrictStr]]], Field(description="Specifies list of the alert property value, multiple values for one key should be joined by '|'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertsList]:
        """Get list of helios alerts.

        Get the list of helios alerts.

        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param alert_id_list: Filter by list of alert ids.
        :type alert_id_list: List[str]
        :param alert_state_list: Filter by list of alert states.
        :type alert_state_list: List[str]
        :param alert_type_list: Filter by list of alert types.
        :type alert_type_list: List[int]
        :param alert_severity_list: Filter by list of alert severity types.
        :type alert_severity_list: List[str]
        :param region_ids: Filter by list of region ids.
        :type region_ids: List[str]
        :param cluster_identifiers: Filter by list of cluster ids.
        :type cluster_identifiers: List[str]
        :param start_date_usecs: Specifies the start time of the alerts to be returned. All the alerts returned are raised after the specified start time. This value should be in Unix timestamp epoch in microseconds.
        :type start_date_usecs: int
        :param end_date_usecs: Specifies the end time of the alerts to be returned. All the alerts returned are raised before the specified end time. This value should be in Unix timestamp epoch in microseconds.
        :type end_date_usecs: int
        :param max_alerts: Specifies maximum number of alerts to return
        :type max_alerts: int
        :param alert_category_list: Filter by list of alert categories.
        :type alert_category_list: List[Optional[str]]
        :param alert_type_bucket_list: Filter by list of alert type buckets.
        :type alert_type_bucket_list: List[Optional[str]]
        :param alert_property_key_list: Specifies list of the alert property keys to query.
        :type alert_property_key_list: List[Optional[str]]
        :param alert_property_value_list: Specifies list of the alert property value, multiple values for one key should be joined by '|'.
        :type alert_property_value_list: List[Optional[str]]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_helios_alerts_serialize(
            region_id=region_id,
            alert_id_list=alert_id_list,
            alert_state_list=alert_state_list,
            alert_type_list=alert_type_list,
            alert_severity_list=alert_severity_list,
            region_ids=region_ids,
            cluster_identifiers=cluster_identifiers,
            start_date_usecs=start_date_usecs,
            end_date_usecs=end_date_usecs,
            max_alerts=max_alerts,
            alert_category_list=alert_category_list,
            alert_type_bucket_list=alert_type_bucket_list,
            alert_property_key_list=alert_property_key_list,
            alert_property_value_list=alert_property_value_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_helios_alerts_without_preload_content(
        self,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        alert_id_list: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of alert ids.")] = None,
        alert_state_list: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of alert states.")] = None,
        alert_type_list: Annotated[Optional[List[StrictInt]], Field(description="Filter by list of alert types.")] = None,
        alert_severity_list: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of alert severity types.")] = None,
        region_ids: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of region ids.")] = None,
        cluster_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Filter by list of cluster ids.")] = None,
        start_date_usecs: Annotated[Optional[StrictInt], Field(description="Specifies the start time of the alerts to be returned. All the alerts returned are raised after the specified start time. This value should be in Unix timestamp epoch in microseconds.")] = None,
        end_date_usecs: Annotated[Optional[StrictInt], Field(description="Specifies the end time of the alerts to be returned. All the alerts returned are raised before the specified end time. This value should be in Unix timestamp epoch in microseconds.")] = None,
        max_alerts: Annotated[Optional[StrictInt], Field(description="Specifies maximum number of alerts to return")] = None,
        alert_category_list: Annotated[Optional[List[Optional[StrictStr]]], Field(description="Filter by list of alert categories.")] = None,
        alert_type_bucket_list: Annotated[Optional[List[Optional[StrictStr]]], Field(description="Filter by list of alert type buckets.")] = None,
        alert_property_key_list: Annotated[Optional[List[Optional[StrictStr]]], Field(description="Specifies list of the alert property keys to query.")] = None,
        alert_property_value_list: Annotated[Optional[List[Optional[StrictStr]]], Field(description="Specifies list of the alert property value, multiple values for one key should be joined by '|'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get list of helios alerts.

        Get the list of helios alerts.

        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param alert_id_list: Filter by list of alert ids.
        :type alert_id_list: List[str]
        :param alert_state_list: Filter by list of alert states.
        :type alert_state_list: List[str]
        :param alert_type_list: Filter by list of alert types.
        :type alert_type_list: List[int]
        :param alert_severity_list: Filter by list of alert severity types.
        :type alert_severity_list: List[str]
        :param region_ids: Filter by list of region ids.
        :type region_ids: List[str]
        :param cluster_identifiers: Filter by list of cluster ids.
        :type cluster_identifiers: List[str]
        :param start_date_usecs: Specifies the start time of the alerts to be returned. All the alerts returned are raised after the specified start time. This value should be in Unix timestamp epoch in microseconds.
        :type start_date_usecs: int
        :param end_date_usecs: Specifies the end time of the alerts to be returned. All the alerts returned are raised before the specified end time. This value should be in Unix timestamp epoch in microseconds.
        :type end_date_usecs: int
        :param max_alerts: Specifies maximum number of alerts to return
        :type max_alerts: int
        :param alert_category_list: Filter by list of alert categories.
        :type alert_category_list: List[Optional[str]]
        :param alert_type_bucket_list: Filter by list of alert type buckets.
        :type alert_type_bucket_list: List[Optional[str]]
        :param alert_property_key_list: Specifies list of the alert property keys to query.
        :type alert_property_key_list: List[Optional[str]]
        :param alert_property_value_list: Specifies list of the alert property value, multiple values for one key should be joined by '|'.
        :type alert_property_value_list: List[Optional[str]]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_helios_alerts_serialize(
            region_id=region_id,
            alert_id_list=alert_id_list,
            alert_state_list=alert_state_list,
            alert_type_list=alert_type_list,
            alert_severity_list=alert_severity_list,
            region_ids=region_ids,
            cluster_identifiers=cluster_identifiers,
            start_date_usecs=start_date_usecs,
            end_date_usecs=end_date_usecs,
            max_alerts=max_alerts,
            alert_category_list=alert_category_list,
            alert_type_bucket_list=alert_type_bucket_list,
            alert_property_key_list=alert_property_key_list,
            alert_property_value_list=alert_property_value_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_helios_alerts_serialize(
        self,
        region_id,
        alert_id_list,
        alert_state_list,
        alert_type_list,
        alert_severity_list,
        region_ids,
        cluster_identifiers,
        start_date_usecs,
        end_date_usecs,
        max_alerts,
        alert_category_list,
        alert_type_bucket_list,
        alert_property_key_list,
        alert_property_value_list,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'alertIdList': 'csv',
            'alertStateList': 'csv',
            'alertTypeList': 'csv',
            'alertSeverityList': 'csv',
            'regionIds': 'csv',
            'clusterIdentifiers': 'csv',
            'alertCategoryList': 'csv',
            'alertTypeBucketList': 'csv',
            'alertPropertyKeyList': 'csv',
            'alertPropertyValueList': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if alert_id_list is not None:
            
            _query_params.append(('alertIdList', alert_id_list))
            
        if alert_state_list is not None:
            
            _query_params.append(('alertStateList', alert_state_list))
            
        if alert_type_list is not None:
            
            _query_params.append(('alertTypeList', alert_type_list))
            
        if alert_severity_list is not None:
            
            _query_params.append(('alertSeverityList', alert_severity_list))
            
        if region_ids is not None:
            
            _query_params.append(('regionIds', region_ids))
            
        if cluster_identifiers is not None:
            
            _query_params.append(('clusterIdentifiers', cluster_identifiers))
            
        if start_date_usecs is not None:
            
            _query_params.append(('startDateUsecs', start_date_usecs))
            
        if end_date_usecs is not None:
            
            _query_params.append(('endDateUsecs', end_date_usecs))
            
        if max_alerts is not None:
            
            _query_params.append(('maxAlerts', max_alerts))
            
        if alert_category_list is not None:
            
            _query_params.append(('alertCategoryList', alert_category_list))
            
        if alert_type_bucket_list is not None:
            
            _query_params.append(('alertTypeBucketList', alert_type_bucket_list))
            
        if alert_property_key_list is not None:
            
            _query_params.append(('alertPropertyKeyList', alert_property_key_list))
            
        if alert_property_value_list is not None:
            
            _query_params.append(('alertPropertyValueList', alert_property_value_list))
            
        # process the header parameters
        if region_id is not None:
            _header_params['regionId'] = region_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/mcm/alerts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_helios_alerts_summary(
        self,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        cluster_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId.")] = None,
        start_time_usecs: Annotated[Optional[StrictInt], Field(description="Filter by start time. Specify the start time as a Unix epoch Timestamp (in microseconds). By default it is current time minus a day.")] = None,
        end_time_usecs: Annotated[Optional[StrictInt], Field(description="Filter by end time. Specify the end time as a Unix epoch Timestamp (in microseconds). By default it is current time.")] = None,
        states_list: Annotated[Optional[List[StrictStr]], Field(description="Specifies list of alert states to filter alerts by. If not specified, only open alerts will be used to get summary.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertsSummaryResponse:
        """Get alerts summary on Helios.

        Get alerts summary grouped by category.

        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param cluster_identifiers: Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId.
        :type cluster_identifiers: List[str]
        :param start_time_usecs: Filter by start time. Specify the start time as a Unix epoch Timestamp (in microseconds). By default it is current time minus a day.
        :type start_time_usecs: int
        :param end_time_usecs: Filter by end time. Specify the end time as a Unix epoch Timestamp (in microseconds). By default it is current time.
        :type end_time_usecs: int
        :param states_list: Specifies list of alert states to filter alerts by. If not specified, only open alerts will be used to get summary.
        :type states_list: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_helios_alerts_summary_serialize(
            region_id=region_id,
            cluster_identifiers=cluster_identifiers,
            start_time_usecs=start_time_usecs,
            end_time_usecs=end_time_usecs,
            states_list=states_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsSummaryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_helios_alerts_summary_with_http_info(
        self,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        cluster_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId.")] = None,
        start_time_usecs: Annotated[Optional[StrictInt], Field(description="Filter by start time. Specify the start time as a Unix epoch Timestamp (in microseconds). By default it is current time minus a day.")] = None,
        end_time_usecs: Annotated[Optional[StrictInt], Field(description="Filter by end time. Specify the end time as a Unix epoch Timestamp (in microseconds). By default it is current time.")] = None,
        states_list: Annotated[Optional[List[StrictStr]], Field(description="Specifies list of alert states to filter alerts by. If not specified, only open alerts will be used to get summary.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertsSummaryResponse]:
        """Get alerts summary on Helios.

        Get alerts summary grouped by category.

        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param cluster_identifiers: Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId.
        :type cluster_identifiers: List[str]
        :param start_time_usecs: Filter by start time. Specify the start time as a Unix epoch Timestamp (in microseconds). By default it is current time minus a day.
        :type start_time_usecs: int
        :param end_time_usecs: Filter by end time. Specify the end time as a Unix epoch Timestamp (in microseconds). By default it is current time.
        :type end_time_usecs: int
        :param states_list: Specifies list of alert states to filter alerts by. If not specified, only open alerts will be used to get summary.
        :type states_list: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_helios_alerts_summary_serialize(
            region_id=region_id,
            cluster_identifiers=cluster_identifiers,
            start_time_usecs=start_time_usecs,
            end_time_usecs=end_time_usecs,
            states_list=states_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsSummaryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_helios_alerts_summary_without_preload_content(
        self,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        cluster_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId.")] = None,
        start_time_usecs: Annotated[Optional[StrictInt], Field(description="Filter by start time. Specify the start time as a Unix epoch Timestamp (in microseconds). By default it is current time minus a day.")] = None,
        end_time_usecs: Annotated[Optional[StrictInt], Field(description="Filter by end time. Specify the end time as a Unix epoch Timestamp (in microseconds). By default it is current time.")] = None,
        states_list: Annotated[Optional[List[StrictStr]], Field(description="Specifies list of alert states to filter alerts by. If not specified, only open alerts will be used to get summary.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get alerts summary on Helios.

        Get alerts summary grouped by category.

        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param cluster_identifiers: Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId.
        :type cluster_identifiers: List[str]
        :param start_time_usecs: Filter by start time. Specify the start time as a Unix epoch Timestamp (in microseconds). By default it is current time minus a day.
        :type start_time_usecs: int
        :param end_time_usecs: Filter by end time. Specify the end time as a Unix epoch Timestamp (in microseconds). By default it is current time.
        :type end_time_usecs: int
        :param states_list: Specifies list of alert states to filter alerts by. If not specified, only open alerts will be used to get summary.
        :type states_list: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_helios_alerts_summary_serialize(
            region_id=region_id,
            cluster_identifiers=cluster_identifiers,
            start_time_usecs=start_time_usecs,
            end_time_usecs=end_time_usecs,
            states_list=states_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsSummaryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_helios_alerts_summary_serialize(
        self,
        region_id,
        cluster_identifiers,
        start_time_usecs,
        end_time_usecs,
        states_list,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'clusterIdentifiers': 'csv',
            'statesList': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cluster_identifiers is not None:
            
            _query_params.append(('clusterIdentifiers', cluster_identifiers))
            
        if start_time_usecs is not None:
            
            _query_params.append(('startTimeUsecs', start_time_usecs))
            
        if end_time_usecs is not None:
            
            _query_params.append(('endTimeUsecs', end_time_usecs))
            
        if states_list is not None:
            
            _query_params.append(('statesList', states_list))
            
        # process the header parameters
        if region_id is not None:
            _header_params['regionId'] = region_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/mcm/stats/alerts-summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


