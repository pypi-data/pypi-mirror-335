# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool
from cohesity_sdk.helios.models.helios_search_indexed_objects_request import HeliosSearchIndexedObjectsRequest
from cohesity_sdk.helios.models.helios_search_indexed_objects_response_body import HeliosSearchIndexedObjectsResponseBody
from cohesity_sdk.helios.models.objects_search_response_body import ObjectsSearchResponseBody
from cohesity_sdk.helios.models.protected_objects_search_response_body import ProtectedObjectsSearchResponseBody
from cohesity_sdk.helios.models.search_indexed_objects_request import SearchIndexedObjectsRequest
from cohesity_sdk.helios.models.search_indexed_objects_response_body import SearchIndexedObjectsResponseBody

from cohesity_sdk.helios.api_client import ApiClient, RequestSerialized
from cohesity_sdk.helios.api_response import ApiResponse
from cohesity_sdk.helios.rest import RESTResponseType


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def global_search_indexed_objects(
        self,
        body: Annotated[HeliosSearchIndexedObjectsRequest, Field(description="Specifies the parameters to search for indexed objects.")],
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HeliosSearchIndexedObjectsResponseBody:
        """Search for indexed objects.

        Search for indexed objects like files, emails etc across clusters.

        :param body: Specifies the parameters to search for indexed objects. (required)
        :type body: HeliosSearchIndexedObjectsRequest
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._global_search_indexed_objects_serialize(
            body=body,
            region_id=region_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HeliosSearchIndexedObjectsResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def global_search_indexed_objects_with_http_info(
        self,
        body: Annotated[HeliosSearchIndexedObjectsRequest, Field(description="Specifies the parameters to search for indexed objects.")],
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HeliosSearchIndexedObjectsResponseBody]:
        """Search for indexed objects.

        Search for indexed objects like files, emails etc across clusters.

        :param body: Specifies the parameters to search for indexed objects. (required)
        :type body: HeliosSearchIndexedObjectsRequest
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._global_search_indexed_objects_serialize(
            body=body,
            region_id=region_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HeliosSearchIndexedObjectsResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def global_search_indexed_objects_without_preload_content(
        self,
        body: Annotated[HeliosSearchIndexedObjectsRequest, Field(description="Specifies the parameters to search for indexed objects.")],
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search for indexed objects.

        Search for indexed objects like files, emails etc across clusters.

        :param body: Specifies the parameters to search for indexed objects. (required)
        :type body: HeliosSearchIndexedObjectsRequest
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._global_search_indexed_objects_serialize(
            body=body,
            region_id=region_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HeliosSearchIndexedObjectsResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _global_search_indexed_objects_serialize(
        self,
        body,
        region_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if region_id is not None:
            _header_params['regionId'] = region_id
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/mcm/search/indexed-objects',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_indexed_objects(
        self,
        body: Annotated[SearchIndexedObjectsRequest, Field(description="Specifies the parameters to search for indexed objects.")],
        access_cluster_id: Annotated[Optional[StrictInt], Field(description="This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.")] = None,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchIndexedObjectsResponseBody:
        """List indexed objects.

        List all the indexed objects like files and folders, emails, mailboxes etc., that match the specified search and filter criteria from protected objects.

        :param body: Specifies the parameters to search for indexed objects. (required)
        :type body: SearchIndexedObjectsRequest
        :param access_cluster_id: This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.
        :type access_cluster_id: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_indexed_objects_serialize(
            body=body,
            access_cluster_id=access_cluster_id,
            region_id=region_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchIndexedObjectsResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_indexed_objects_with_http_info(
        self,
        body: Annotated[SearchIndexedObjectsRequest, Field(description="Specifies the parameters to search for indexed objects.")],
        access_cluster_id: Annotated[Optional[StrictInt], Field(description="This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.")] = None,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchIndexedObjectsResponseBody]:
        """List indexed objects.

        List all the indexed objects like files and folders, emails, mailboxes etc., that match the specified search and filter criteria from protected objects.

        :param body: Specifies the parameters to search for indexed objects. (required)
        :type body: SearchIndexedObjectsRequest
        :param access_cluster_id: This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.
        :type access_cluster_id: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_indexed_objects_serialize(
            body=body,
            access_cluster_id=access_cluster_id,
            region_id=region_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchIndexedObjectsResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_indexed_objects_without_preload_content(
        self,
        body: Annotated[SearchIndexedObjectsRequest, Field(description="Specifies the parameters to search for indexed objects.")],
        access_cluster_id: Annotated[Optional[StrictInt], Field(description="This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.")] = None,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List indexed objects.

        List all the indexed objects like files and folders, emails, mailboxes etc., that match the specified search and filter criteria from protected objects.

        :param body: Specifies the parameters to search for indexed objects. (required)
        :type body: SearchIndexedObjectsRequest
        :param access_cluster_id: This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.
        :type access_cluster_id: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_indexed_objects_serialize(
            body=body,
            access_cluster_id=access_cluster_id,
            region_id=region_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchIndexedObjectsResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_indexed_objects_serialize(
        self,
        body,
        access_cluster_id,
        region_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if access_cluster_id is not None:
            _header_params['accessClusterId'] = access_cluster_id
        if region_id is not None:
            _header_params['regionId'] = region_id
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/data-protect/search/indexed-objects',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_objects(
        self,
        access_cluster_id: Annotated[Optional[StrictInt], Field(description="This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.")] = None,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        request_initiator_type: Annotated[Optional[StrictStr], Field(description="Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.")] = None,
        search_string: Annotated[Optional[StrictStr], Field(description="Specifies the search string to filter the objects. This search string will be applicable for objectnames. User can specify a wildcard character '*' as a suffix to a string where all object names are matched with the prefix string. For example, if vm1 and vm2 are the names of objects, user can specify vm* to list the objects. If not specified, then all the objects will be returned which will match other filtering criteria.")] = None,
        environments: Annotated[Optional[List[StrictStr]], Field(description="Specifies the environment type to filter objects.")] = None,
        protection_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the protection type to filter objects.")] = None,
        tenant_ids: Annotated[Optional[List[StrictStr]], Field(description="TenantIds contains ids of the tenants for which objects are to be returned.")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="If true, the response will include Objects which belongs to all tenants which the current user has permission to see.")] = None,
        protection_group_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of Protection Group ids to filter the objects. If specified, the objects protected by specified Protection Group ids will be returned.")] = None,
        object_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of Object ids to filter.")] = None,
        os_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the operating system types to filter objects on.")] = None,
        o365_object_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the object types to filter objects on. Only applicable if the environment is o365.")] = None,
        azure_object_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the object types to filter objects on. Only applicable if the environment is Azure.")] = None,
        source_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of Protection Source object ids to filter the objects. If specified, the object which are present in those Sources will be returned.")] = None,
        source_uuids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of Protection Source object uuids to filter the objects. If specified, the object which are present in those Sources will be returned.")] = None,
        is_protected: Annotated[Optional[StrictBool], Field(description="Specifies the protection status of objects. If set to true, only protected objects will be returned. If set to false, only unprotected objects will be returned. If not specified, all objects will be returned.")] = None,
        is_deleted: Annotated[Optional[StrictBool], Field(description="If set to true, then objects which are deleted on atleast one cluster will be returned. If not set or set to false then objects which are registered on atleast one cluster are returned.")] = None,
        last_run_status_list: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of status of the object's last protection run. Only objects with last run status of these will be returned.")] = None,
        region_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of region ids. Only records from clusters having these region ids will be returned.")] = None,
        cluster_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId. Only records from clusters having these identifiers will be returned.")] = None,
        storage_domain_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of storage domain ids. Format is clusterId:clusterIncarnationId:storageDomainId. Only objects having protection in these storage domains will be returned.")] = None,
        include_deleted_objects: Annotated[Optional[StrictBool], Field(description="Specifies whether to include deleted objects in response. These objects can't be protected but can be recovered. This field is deprecated.")] = None,
        pagination_cookie: Annotated[Optional[StrictStr], Field(description="Specifies the pagination cookie with which subsequent parts of the response can be fetched.")] = None,
        count: Annotated[Optional[StrictInt], Field(description="Specifies the number of objects to be fetched for the specified pagination cookie.")] = None,
        must_have_tag_ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Specifies tags which must be all present in the document.")] = None,
        might_have_tag_ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Specifies list of tags, one or more of which might be present in the document. These are OR'ed together and the resulting criteria AND'ed with the rest of the query.")] = None,
        must_have_snapshot_tag_ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Specifies snapshot tags which must be all present in the document.")] = None,
        might_have_snapshot_tag_ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Specifies list of snapshot tags, one or more of which might be present in the document. These are OR'ed together and the resulting criteria AND'ed with the rest of the query.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ObjectsSearchResponseBody:
        """List Objects.

        List objects.

        :param access_cluster_id: This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.
        :type access_cluster_id: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param request_initiator_type: Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
        :type request_initiator_type: str
        :param search_string: Specifies the search string to filter the objects. This search string will be applicable for objectnames. User can specify a wildcard character '*' as a suffix to a string where all object names are matched with the prefix string. For example, if vm1 and vm2 are the names of objects, user can specify vm* to list the objects. If not specified, then all the objects will be returned which will match other filtering criteria.
        :type search_string: str
        :param environments: Specifies the environment type to filter objects.
        :type environments: List[str]
        :param protection_types: Specifies the protection type to filter objects.
        :type protection_types: List[str]
        :param tenant_ids: TenantIds contains ids of the tenants for which objects are to be returned.
        :type tenant_ids: List[str]
        :param include_tenants: If true, the response will include Objects which belongs to all tenants which the current user has permission to see.
        :type include_tenants: bool
        :param protection_group_ids: Specifies a list of Protection Group ids to filter the objects. If specified, the objects protected by specified Protection Group ids will be returned.
        :type protection_group_ids: List[str]
        :param object_ids: Specifies a list of Object ids to filter.
        :type object_ids: List[int]
        :param os_types: Specifies the operating system types to filter objects on.
        :type os_types: List[str]
        :param o365_object_types: Specifies the object types to filter objects on. Only applicable if the environment is o365.
        :type o365_object_types: List[str]
        :param azure_object_types: Specifies the object types to filter objects on. Only applicable if the environment is Azure.
        :type azure_object_types: List[str]
        :param source_ids: Specifies a list of Protection Source object ids to filter the objects. If specified, the object which are present in those Sources will be returned.
        :type source_ids: List[int]
        :param source_uuids: Specifies a list of Protection Source object uuids to filter the objects. If specified, the object which are present in those Sources will be returned.
        :type source_uuids: List[str]
        :param is_protected: Specifies the protection status of objects. If set to true, only protected objects will be returned. If set to false, only unprotected objects will be returned. If not specified, all objects will be returned.
        :type is_protected: bool
        :param is_deleted: If set to true, then objects which are deleted on atleast one cluster will be returned. If not set or set to false then objects which are registered on atleast one cluster are returned.
        :type is_deleted: bool
        :param last_run_status_list: Specifies a list of status of the object's last protection run. Only objects with last run status of these will be returned.
        :type last_run_status_list: List[str]
        :param region_ids: Specifies a list of region ids. Only records from clusters having these region ids will be returned.
        :type region_ids: List[str]
        :param cluster_identifiers: Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId. Only records from clusters having these identifiers will be returned.
        :type cluster_identifiers: List[str]
        :param storage_domain_ids: Specifies the list of storage domain ids. Format is clusterId:clusterIncarnationId:storageDomainId. Only objects having protection in these storage domains will be returned.
        :type storage_domain_ids: List[str]
        :param include_deleted_objects: Specifies whether to include deleted objects in response. These objects can't be protected but can be recovered. This field is deprecated.
        :type include_deleted_objects: bool
        :param pagination_cookie: Specifies the pagination cookie with which subsequent parts of the response can be fetched.
        :type pagination_cookie: str
        :param count: Specifies the number of objects to be fetched for the specified pagination cookie.
        :type count: int
        :param must_have_tag_ids: Specifies tags which must be all present in the document.
        :type must_have_tag_ids: List[str]
        :param might_have_tag_ids: Specifies list of tags, one or more of which might be present in the document. These are OR'ed together and the resulting criteria AND'ed with the rest of the query.
        :type might_have_tag_ids: List[str]
        :param must_have_snapshot_tag_ids: Specifies snapshot tags which must be all present in the document.
        :type must_have_snapshot_tag_ids: List[str]
        :param might_have_snapshot_tag_ids: Specifies list of snapshot tags, one or more of which might be present in the document. These are OR'ed together and the resulting criteria AND'ed with the rest of the query.
        :type might_have_snapshot_tag_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_objects_serialize(
            access_cluster_id=access_cluster_id,
            region_id=region_id,
            request_initiator_type=request_initiator_type,
            search_string=search_string,
            environments=environments,
            protection_types=protection_types,
            tenant_ids=tenant_ids,
            include_tenants=include_tenants,
            protection_group_ids=protection_group_ids,
            object_ids=object_ids,
            os_types=os_types,
            o365_object_types=o365_object_types,
            azure_object_types=azure_object_types,
            source_ids=source_ids,
            source_uuids=source_uuids,
            is_protected=is_protected,
            is_deleted=is_deleted,
            last_run_status_list=last_run_status_list,
            region_ids=region_ids,
            cluster_identifiers=cluster_identifiers,
            storage_domain_ids=storage_domain_ids,
            include_deleted_objects=include_deleted_objects,
            pagination_cookie=pagination_cookie,
            count=count,
            must_have_tag_ids=must_have_tag_ids,
            might_have_tag_ids=might_have_tag_ids,
            must_have_snapshot_tag_ids=must_have_snapshot_tag_ids,
            might_have_snapshot_tag_ids=might_have_snapshot_tag_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ObjectsSearchResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_objects_with_http_info(
        self,
        access_cluster_id: Annotated[Optional[StrictInt], Field(description="This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.")] = None,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        request_initiator_type: Annotated[Optional[StrictStr], Field(description="Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.")] = None,
        search_string: Annotated[Optional[StrictStr], Field(description="Specifies the search string to filter the objects. This search string will be applicable for objectnames. User can specify a wildcard character '*' as a suffix to a string where all object names are matched with the prefix string. For example, if vm1 and vm2 are the names of objects, user can specify vm* to list the objects. If not specified, then all the objects will be returned which will match other filtering criteria.")] = None,
        environments: Annotated[Optional[List[StrictStr]], Field(description="Specifies the environment type to filter objects.")] = None,
        protection_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the protection type to filter objects.")] = None,
        tenant_ids: Annotated[Optional[List[StrictStr]], Field(description="TenantIds contains ids of the tenants for which objects are to be returned.")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="If true, the response will include Objects which belongs to all tenants which the current user has permission to see.")] = None,
        protection_group_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of Protection Group ids to filter the objects. If specified, the objects protected by specified Protection Group ids will be returned.")] = None,
        object_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of Object ids to filter.")] = None,
        os_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the operating system types to filter objects on.")] = None,
        o365_object_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the object types to filter objects on. Only applicable if the environment is o365.")] = None,
        azure_object_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the object types to filter objects on. Only applicable if the environment is Azure.")] = None,
        source_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of Protection Source object ids to filter the objects. If specified, the object which are present in those Sources will be returned.")] = None,
        source_uuids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of Protection Source object uuids to filter the objects. If specified, the object which are present in those Sources will be returned.")] = None,
        is_protected: Annotated[Optional[StrictBool], Field(description="Specifies the protection status of objects. If set to true, only protected objects will be returned. If set to false, only unprotected objects will be returned. If not specified, all objects will be returned.")] = None,
        is_deleted: Annotated[Optional[StrictBool], Field(description="If set to true, then objects which are deleted on atleast one cluster will be returned. If not set or set to false then objects which are registered on atleast one cluster are returned.")] = None,
        last_run_status_list: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of status of the object's last protection run. Only objects with last run status of these will be returned.")] = None,
        region_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of region ids. Only records from clusters having these region ids will be returned.")] = None,
        cluster_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId. Only records from clusters having these identifiers will be returned.")] = None,
        storage_domain_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of storage domain ids. Format is clusterId:clusterIncarnationId:storageDomainId. Only objects having protection in these storage domains will be returned.")] = None,
        include_deleted_objects: Annotated[Optional[StrictBool], Field(description="Specifies whether to include deleted objects in response. These objects can't be protected but can be recovered. This field is deprecated.")] = None,
        pagination_cookie: Annotated[Optional[StrictStr], Field(description="Specifies the pagination cookie with which subsequent parts of the response can be fetched.")] = None,
        count: Annotated[Optional[StrictInt], Field(description="Specifies the number of objects to be fetched for the specified pagination cookie.")] = None,
        must_have_tag_ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Specifies tags which must be all present in the document.")] = None,
        might_have_tag_ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Specifies list of tags, one or more of which might be present in the document. These are OR'ed together and the resulting criteria AND'ed with the rest of the query.")] = None,
        must_have_snapshot_tag_ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Specifies snapshot tags which must be all present in the document.")] = None,
        might_have_snapshot_tag_ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Specifies list of snapshot tags, one or more of which might be present in the document. These are OR'ed together and the resulting criteria AND'ed with the rest of the query.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ObjectsSearchResponseBody]:
        """List Objects.

        List objects.

        :param access_cluster_id: This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.
        :type access_cluster_id: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param request_initiator_type: Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
        :type request_initiator_type: str
        :param search_string: Specifies the search string to filter the objects. This search string will be applicable for objectnames. User can specify a wildcard character '*' as a suffix to a string where all object names are matched with the prefix string. For example, if vm1 and vm2 are the names of objects, user can specify vm* to list the objects. If not specified, then all the objects will be returned which will match other filtering criteria.
        :type search_string: str
        :param environments: Specifies the environment type to filter objects.
        :type environments: List[str]
        :param protection_types: Specifies the protection type to filter objects.
        :type protection_types: List[str]
        :param tenant_ids: TenantIds contains ids of the tenants for which objects are to be returned.
        :type tenant_ids: List[str]
        :param include_tenants: If true, the response will include Objects which belongs to all tenants which the current user has permission to see.
        :type include_tenants: bool
        :param protection_group_ids: Specifies a list of Protection Group ids to filter the objects. If specified, the objects protected by specified Protection Group ids will be returned.
        :type protection_group_ids: List[str]
        :param object_ids: Specifies a list of Object ids to filter.
        :type object_ids: List[int]
        :param os_types: Specifies the operating system types to filter objects on.
        :type os_types: List[str]
        :param o365_object_types: Specifies the object types to filter objects on. Only applicable if the environment is o365.
        :type o365_object_types: List[str]
        :param azure_object_types: Specifies the object types to filter objects on. Only applicable if the environment is Azure.
        :type azure_object_types: List[str]
        :param source_ids: Specifies a list of Protection Source object ids to filter the objects. If specified, the object which are present in those Sources will be returned.
        :type source_ids: List[int]
        :param source_uuids: Specifies a list of Protection Source object uuids to filter the objects. If specified, the object which are present in those Sources will be returned.
        :type source_uuids: List[str]
        :param is_protected: Specifies the protection status of objects. If set to true, only protected objects will be returned. If set to false, only unprotected objects will be returned. If not specified, all objects will be returned.
        :type is_protected: bool
        :param is_deleted: If set to true, then objects which are deleted on atleast one cluster will be returned. If not set or set to false then objects which are registered on atleast one cluster are returned.
        :type is_deleted: bool
        :param last_run_status_list: Specifies a list of status of the object's last protection run. Only objects with last run status of these will be returned.
        :type last_run_status_list: List[str]
        :param region_ids: Specifies a list of region ids. Only records from clusters having these region ids will be returned.
        :type region_ids: List[str]
        :param cluster_identifiers: Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId. Only records from clusters having these identifiers will be returned.
        :type cluster_identifiers: List[str]
        :param storage_domain_ids: Specifies the list of storage domain ids. Format is clusterId:clusterIncarnationId:storageDomainId. Only objects having protection in these storage domains will be returned.
        :type storage_domain_ids: List[str]
        :param include_deleted_objects: Specifies whether to include deleted objects in response. These objects can't be protected but can be recovered. This field is deprecated.
        :type include_deleted_objects: bool
        :param pagination_cookie: Specifies the pagination cookie with which subsequent parts of the response can be fetched.
        :type pagination_cookie: str
        :param count: Specifies the number of objects to be fetched for the specified pagination cookie.
        :type count: int
        :param must_have_tag_ids: Specifies tags which must be all present in the document.
        :type must_have_tag_ids: List[str]
        :param might_have_tag_ids: Specifies list of tags, one or more of which might be present in the document. These are OR'ed together and the resulting criteria AND'ed with the rest of the query.
        :type might_have_tag_ids: List[str]
        :param must_have_snapshot_tag_ids: Specifies snapshot tags which must be all present in the document.
        :type must_have_snapshot_tag_ids: List[str]
        :param might_have_snapshot_tag_ids: Specifies list of snapshot tags, one or more of which might be present in the document. These are OR'ed together and the resulting criteria AND'ed with the rest of the query.
        :type might_have_snapshot_tag_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_objects_serialize(
            access_cluster_id=access_cluster_id,
            region_id=region_id,
            request_initiator_type=request_initiator_type,
            search_string=search_string,
            environments=environments,
            protection_types=protection_types,
            tenant_ids=tenant_ids,
            include_tenants=include_tenants,
            protection_group_ids=protection_group_ids,
            object_ids=object_ids,
            os_types=os_types,
            o365_object_types=o365_object_types,
            azure_object_types=azure_object_types,
            source_ids=source_ids,
            source_uuids=source_uuids,
            is_protected=is_protected,
            is_deleted=is_deleted,
            last_run_status_list=last_run_status_list,
            region_ids=region_ids,
            cluster_identifiers=cluster_identifiers,
            storage_domain_ids=storage_domain_ids,
            include_deleted_objects=include_deleted_objects,
            pagination_cookie=pagination_cookie,
            count=count,
            must_have_tag_ids=must_have_tag_ids,
            might_have_tag_ids=might_have_tag_ids,
            must_have_snapshot_tag_ids=must_have_snapshot_tag_ids,
            might_have_snapshot_tag_ids=might_have_snapshot_tag_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ObjectsSearchResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_objects_without_preload_content(
        self,
        access_cluster_id: Annotated[Optional[StrictInt], Field(description="This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.")] = None,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        request_initiator_type: Annotated[Optional[StrictStr], Field(description="Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.")] = None,
        search_string: Annotated[Optional[StrictStr], Field(description="Specifies the search string to filter the objects. This search string will be applicable for objectnames. User can specify a wildcard character '*' as a suffix to a string where all object names are matched with the prefix string. For example, if vm1 and vm2 are the names of objects, user can specify vm* to list the objects. If not specified, then all the objects will be returned which will match other filtering criteria.")] = None,
        environments: Annotated[Optional[List[StrictStr]], Field(description="Specifies the environment type to filter objects.")] = None,
        protection_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the protection type to filter objects.")] = None,
        tenant_ids: Annotated[Optional[List[StrictStr]], Field(description="TenantIds contains ids of the tenants for which objects are to be returned.")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="If true, the response will include Objects which belongs to all tenants which the current user has permission to see.")] = None,
        protection_group_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of Protection Group ids to filter the objects. If specified, the objects protected by specified Protection Group ids will be returned.")] = None,
        object_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of Object ids to filter.")] = None,
        os_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the operating system types to filter objects on.")] = None,
        o365_object_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the object types to filter objects on. Only applicable if the environment is o365.")] = None,
        azure_object_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the object types to filter objects on. Only applicable if the environment is Azure.")] = None,
        source_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of Protection Source object ids to filter the objects. If specified, the object which are present in those Sources will be returned.")] = None,
        source_uuids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of Protection Source object uuids to filter the objects. If specified, the object which are present in those Sources will be returned.")] = None,
        is_protected: Annotated[Optional[StrictBool], Field(description="Specifies the protection status of objects. If set to true, only protected objects will be returned. If set to false, only unprotected objects will be returned. If not specified, all objects will be returned.")] = None,
        is_deleted: Annotated[Optional[StrictBool], Field(description="If set to true, then objects which are deleted on atleast one cluster will be returned. If not set or set to false then objects which are registered on atleast one cluster are returned.")] = None,
        last_run_status_list: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of status of the object's last protection run. Only objects with last run status of these will be returned.")] = None,
        region_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of region ids. Only records from clusters having these region ids will be returned.")] = None,
        cluster_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId. Only records from clusters having these identifiers will be returned.")] = None,
        storage_domain_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies the list of storage domain ids. Format is clusterId:clusterIncarnationId:storageDomainId. Only objects having protection in these storage domains will be returned.")] = None,
        include_deleted_objects: Annotated[Optional[StrictBool], Field(description="Specifies whether to include deleted objects in response. These objects can't be protected but can be recovered. This field is deprecated.")] = None,
        pagination_cookie: Annotated[Optional[StrictStr], Field(description="Specifies the pagination cookie with which subsequent parts of the response can be fetched.")] = None,
        count: Annotated[Optional[StrictInt], Field(description="Specifies the number of objects to be fetched for the specified pagination cookie.")] = None,
        must_have_tag_ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Specifies tags which must be all present in the document.")] = None,
        might_have_tag_ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Specifies list of tags, one or more of which might be present in the document. These are OR'ed together and the resulting criteria AND'ed with the rest of the query.")] = None,
        must_have_snapshot_tag_ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Specifies snapshot tags which must be all present in the document.")] = None,
        might_have_snapshot_tag_ids: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Specifies list of snapshot tags, one or more of which might be present in the document. These are OR'ed together and the resulting criteria AND'ed with the rest of the query.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Objects.

        List objects.

        :param access_cluster_id: This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.
        :type access_cluster_id: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param request_initiator_type: Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
        :type request_initiator_type: str
        :param search_string: Specifies the search string to filter the objects. This search string will be applicable for objectnames. User can specify a wildcard character '*' as a suffix to a string where all object names are matched with the prefix string. For example, if vm1 and vm2 are the names of objects, user can specify vm* to list the objects. If not specified, then all the objects will be returned which will match other filtering criteria.
        :type search_string: str
        :param environments: Specifies the environment type to filter objects.
        :type environments: List[str]
        :param protection_types: Specifies the protection type to filter objects.
        :type protection_types: List[str]
        :param tenant_ids: TenantIds contains ids of the tenants for which objects are to be returned.
        :type tenant_ids: List[str]
        :param include_tenants: If true, the response will include Objects which belongs to all tenants which the current user has permission to see.
        :type include_tenants: bool
        :param protection_group_ids: Specifies a list of Protection Group ids to filter the objects. If specified, the objects protected by specified Protection Group ids will be returned.
        :type protection_group_ids: List[str]
        :param object_ids: Specifies a list of Object ids to filter.
        :type object_ids: List[int]
        :param os_types: Specifies the operating system types to filter objects on.
        :type os_types: List[str]
        :param o365_object_types: Specifies the object types to filter objects on. Only applicable if the environment is o365.
        :type o365_object_types: List[str]
        :param azure_object_types: Specifies the object types to filter objects on. Only applicable if the environment is Azure.
        :type azure_object_types: List[str]
        :param source_ids: Specifies a list of Protection Source object ids to filter the objects. If specified, the object which are present in those Sources will be returned.
        :type source_ids: List[int]
        :param source_uuids: Specifies a list of Protection Source object uuids to filter the objects. If specified, the object which are present in those Sources will be returned.
        :type source_uuids: List[str]
        :param is_protected: Specifies the protection status of objects. If set to true, only protected objects will be returned. If set to false, only unprotected objects will be returned. If not specified, all objects will be returned.
        :type is_protected: bool
        :param is_deleted: If set to true, then objects which are deleted on atleast one cluster will be returned. If not set or set to false then objects which are registered on atleast one cluster are returned.
        :type is_deleted: bool
        :param last_run_status_list: Specifies a list of status of the object's last protection run. Only objects with last run status of these will be returned.
        :type last_run_status_list: List[str]
        :param region_ids: Specifies a list of region ids. Only records from clusters having these region ids will be returned.
        :type region_ids: List[str]
        :param cluster_identifiers: Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId. Only records from clusters having these identifiers will be returned.
        :type cluster_identifiers: List[str]
        :param storage_domain_ids: Specifies the list of storage domain ids. Format is clusterId:clusterIncarnationId:storageDomainId. Only objects having protection in these storage domains will be returned.
        :type storage_domain_ids: List[str]
        :param include_deleted_objects: Specifies whether to include deleted objects in response. These objects can't be protected but can be recovered. This field is deprecated.
        :type include_deleted_objects: bool
        :param pagination_cookie: Specifies the pagination cookie with which subsequent parts of the response can be fetched.
        :type pagination_cookie: str
        :param count: Specifies the number of objects to be fetched for the specified pagination cookie.
        :type count: int
        :param must_have_tag_ids: Specifies tags which must be all present in the document.
        :type must_have_tag_ids: List[str]
        :param might_have_tag_ids: Specifies list of tags, one or more of which might be present in the document. These are OR'ed together and the resulting criteria AND'ed with the rest of the query.
        :type might_have_tag_ids: List[str]
        :param must_have_snapshot_tag_ids: Specifies snapshot tags which must be all present in the document.
        :type must_have_snapshot_tag_ids: List[str]
        :param might_have_snapshot_tag_ids: Specifies list of snapshot tags, one or more of which might be present in the document. These are OR'ed together and the resulting criteria AND'ed with the rest of the query.
        :type might_have_snapshot_tag_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_objects_serialize(
            access_cluster_id=access_cluster_id,
            region_id=region_id,
            request_initiator_type=request_initiator_type,
            search_string=search_string,
            environments=environments,
            protection_types=protection_types,
            tenant_ids=tenant_ids,
            include_tenants=include_tenants,
            protection_group_ids=protection_group_ids,
            object_ids=object_ids,
            os_types=os_types,
            o365_object_types=o365_object_types,
            azure_object_types=azure_object_types,
            source_ids=source_ids,
            source_uuids=source_uuids,
            is_protected=is_protected,
            is_deleted=is_deleted,
            last_run_status_list=last_run_status_list,
            region_ids=region_ids,
            cluster_identifiers=cluster_identifiers,
            storage_domain_ids=storage_domain_ids,
            include_deleted_objects=include_deleted_objects,
            pagination_cookie=pagination_cookie,
            count=count,
            must_have_tag_ids=must_have_tag_ids,
            might_have_tag_ids=might_have_tag_ids,
            must_have_snapshot_tag_ids=must_have_snapshot_tag_ids,
            might_have_snapshot_tag_ids=might_have_snapshot_tag_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ObjectsSearchResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_objects_serialize(
        self,
        access_cluster_id,
        region_id,
        request_initiator_type,
        search_string,
        environments,
        protection_types,
        tenant_ids,
        include_tenants,
        protection_group_ids,
        object_ids,
        os_types,
        o365_object_types,
        azure_object_types,
        source_ids,
        source_uuids,
        is_protected,
        is_deleted,
        last_run_status_list,
        region_ids,
        cluster_identifiers,
        storage_domain_ids,
        include_deleted_objects,
        pagination_cookie,
        count,
        must_have_tag_ids,
        might_have_tag_ids,
        must_have_snapshot_tag_ids,
        might_have_snapshot_tag_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'environments': 'csv',
            'protectionTypes': 'csv',
            'tenantIds': 'csv',
            'protectionGroupIds': 'csv',
            'objectIds': 'csv',
            'osTypes': 'csv',
            'o365ObjectTypes': 'csv',
            'azureObjectTypes': 'csv',
            'sourceIds': 'csv',
            'sourceUuids': 'csv',
            'lastRunStatusList': 'csv',
            'regionIds': 'csv',
            'clusterIdentifiers': 'csv',
            'storageDomainIds': 'csv',
            'mustHaveTagIds': 'csv',
            'mightHaveTagIds': 'csv',
            'mustHaveSnapshotTagIds': 'csv',
            'mightHaveSnapshotTagIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if search_string is not None:
            
            _query_params.append(('searchString', search_string))
            
        if environments is not None:
            
            _query_params.append(('environments', environments))
            
        if protection_types is not None:
            
            _query_params.append(('protectionTypes', protection_types))
            
        if tenant_ids is not None:
            
            _query_params.append(('tenantIds', tenant_ids))
            
        if include_tenants is not None:
            
            _query_params.append(('includeTenants', include_tenants))
            
        if protection_group_ids is not None:
            
            _query_params.append(('protectionGroupIds', protection_group_ids))
            
        if object_ids is not None:
            
            _query_params.append(('objectIds', object_ids))
            
        if os_types is not None:
            
            _query_params.append(('osTypes', os_types))
            
        if o365_object_types is not None:
            
            _query_params.append(('o365ObjectTypes', o365_object_types))
            
        if azure_object_types is not None:
            
            _query_params.append(('azureObjectTypes', azure_object_types))
            
        if source_ids is not None:
            
            _query_params.append(('sourceIds', source_ids))
            
        if source_uuids is not None:
            
            _query_params.append(('sourceUuids', source_uuids))
            
        if is_protected is not None:
            
            _query_params.append(('isProtected', is_protected))
            
        if is_deleted is not None:
            
            _query_params.append(('isDeleted', is_deleted))
            
        if last_run_status_list is not None:
            
            _query_params.append(('lastRunStatusList', last_run_status_list))
            
        if region_ids is not None:
            
            _query_params.append(('regionIds', region_ids))
            
        if cluster_identifiers is not None:
            
            _query_params.append(('clusterIdentifiers', cluster_identifiers))
            
        if storage_domain_ids is not None:
            
            _query_params.append(('storageDomainIds', storage_domain_ids))
            
        if include_deleted_objects is not None:
            
            _query_params.append(('includeDeletedObjects', include_deleted_objects))
            
        if pagination_cookie is not None:
            
            _query_params.append(('paginationCookie', pagination_cookie))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if must_have_tag_ids is not None:
            
            _query_params.append(('mustHaveTagIds', must_have_tag_ids))
            
        if might_have_tag_ids is not None:
            
            _query_params.append(('mightHaveTagIds', might_have_tag_ids))
            
        if must_have_snapshot_tag_ids is not None:
            
            _query_params.append(('mustHaveSnapshotTagIds', must_have_snapshot_tag_ids))
            
        if might_have_snapshot_tag_ids is not None:
            
            _query_params.append(('mightHaveSnapshotTagIds', might_have_snapshot_tag_ids))
            
        # process the header parameters
        if access_cluster_id is not None:
            _header_params['accessClusterId'] = access_cluster_id
        if region_id is not None:
            _header_params['regionId'] = region_id
        if request_initiator_type is not None:
            _header_params['requestInitiatorType'] = request_initiator_type
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data-protect/search/objects',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_protected_objects(
        self,
        access_cluster_id: Annotated[Optional[StrictInt], Field(description="This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.")] = None,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        request_initiator_type: Annotated[Optional[StrictStr], Field(description="Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.")] = None,
        search_string: Annotated[Optional[StrictStr], Field(description="Specifies the search string to filter the objects. This search string will be applicable for objectnames and Protection Group names. User can specify a wildcard character '*' as a suffix to a string where all object and their Protection Group names are matched with the prefix string. For example, if vm1 and vm2 are the names of objects, user can specify vm* to list the objects. If not specified, then all the objects with Protection Groups will be returned which will match other filtering criteria.")] = None,
        environments: Annotated[Optional[List[StrictStr]], Field(description="Specifies the environment type to filter objects.")] = None,
        snapshot_actions: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of recovery actions. Only snapshots that applies to these actions will be returned.")] = None,
        object_action_key: Annotated[Optional[StrictStr], Field(description="Filter by ObjectActionKey, which uniquely represents protection of an object. An object can be protected in multiple ways but atmost once for a given combination of ObjectActionKey. When specified, latest snapshot info matching the objectActionKey is for corresponding object.")] = None,
        tenant_ids: Annotated[Optional[List[StrictStr]], Field(description="TenantIds contains ids of the tenants for which objects are to be returned.")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="If true, the response will include Objects which belongs to all tenants which the current user has permission to see.")] = None,
        protection_group_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of Protection Group ids to filter the objects. If specified, the objects protected by specified Protection Group ids will be returned.")] = None,
        object_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of Object ids to filter.")] = None,
        storage_domain_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies the Storage Domain ids to filter objects for which Protection Groups are writing data to Cohesity Views on the specified Storage Domains.")] = None,
        sub_result_size: Annotated[Optional[StrictInt], Field(description="Specifies the size of objects to be fetched for a single subresult.")] = None,
        filter_snapshot_from_usecs: Annotated[Optional[StrictInt], Field(description="Specifies the timestamp in Unix time epoch in microseconds to filter the objects if the Object has a successful snapshot after this value.")] = None,
        filter_snapshot_to_usecs: Annotated[Optional[StrictInt], Field(description="Specifies the timestamp in Unix time epoch in microseconds to filter the objects if the Object has a successful snapshot before this value.")] = None,
        os_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the operating system types to filter objects on.")] = None,
        source_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of Protection Source object ids to filter the objects. If specified, the object which are present in those Sources will be returned.")] = None,
        run_instance_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of run instance ids. If specified only objects belonging to the provided run id will be retunrned.")] = None,
        cdp_protected_only: Annotated[Optional[StrictBool], Field(description="Specifies whether to only return the CDP protected objects.")] = None,
        region_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of region ids. Only records from clusters having these region ids will be returned.")] = None,
        use_cached_data: Annotated[Optional[StrictBool], Field(description="Specifies whether we can serve the GET request to the read replica cache cache. There is a lag of 15 seconds between the read replica and primary data source.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProtectedObjectsSearchResponseBody:
        """List Protected Objects.

        List protected objects and corresponding detail information from registered sources filtered by specified query parameters. If no search pattern or filter parameters are specified, all protected objects currently found are returned.

        :param access_cluster_id: This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.
        :type access_cluster_id: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param request_initiator_type: Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
        :type request_initiator_type: str
        :param search_string: Specifies the search string to filter the objects. This search string will be applicable for objectnames and Protection Group names. User can specify a wildcard character '*' as a suffix to a string where all object and their Protection Group names are matched with the prefix string. For example, if vm1 and vm2 are the names of objects, user can specify vm* to list the objects. If not specified, then all the objects with Protection Groups will be returned which will match other filtering criteria.
        :type search_string: str
        :param environments: Specifies the environment type to filter objects.
        :type environments: List[str]
        :param snapshot_actions: Specifies a list of recovery actions. Only snapshots that applies to these actions will be returned.
        :type snapshot_actions: List[str]
        :param object_action_key: Filter by ObjectActionKey, which uniquely represents protection of an object. An object can be protected in multiple ways but atmost once for a given combination of ObjectActionKey. When specified, latest snapshot info matching the objectActionKey is for corresponding object.
        :type object_action_key: str
        :param tenant_ids: TenantIds contains ids of the tenants for which objects are to be returned.
        :type tenant_ids: List[str]
        :param include_tenants: If true, the response will include Objects which belongs to all tenants which the current user has permission to see.
        :type include_tenants: bool
        :param protection_group_ids: Specifies a list of Protection Group ids to filter the objects. If specified, the objects protected by specified Protection Group ids will be returned.
        :type protection_group_ids: List[str]
        :param object_ids: Specifies a list of Object ids to filter.
        :type object_ids: List[int]
        :param storage_domain_ids: Specifies the Storage Domain ids to filter objects for which Protection Groups are writing data to Cohesity Views on the specified Storage Domains.
        :type storage_domain_ids: List[int]
        :param sub_result_size: Specifies the size of objects to be fetched for a single subresult.
        :type sub_result_size: int
        :param filter_snapshot_from_usecs: Specifies the timestamp in Unix time epoch in microseconds to filter the objects if the Object has a successful snapshot after this value.
        :type filter_snapshot_from_usecs: int
        :param filter_snapshot_to_usecs: Specifies the timestamp in Unix time epoch in microseconds to filter the objects if the Object has a successful snapshot before this value.
        :type filter_snapshot_to_usecs: int
        :param os_types: Specifies the operating system types to filter objects on.
        :type os_types: List[str]
        :param source_ids: Specifies a list of Protection Source object ids to filter the objects. If specified, the object which are present in those Sources will be returned.
        :type source_ids: List[int]
        :param run_instance_ids: Specifies a list of run instance ids. If specified only objects belonging to the provided run id will be retunrned.
        :type run_instance_ids: List[int]
        :param cdp_protected_only: Specifies whether to only return the CDP protected objects.
        :type cdp_protected_only: bool
        :param region_ids: Specifies a list of region ids. Only records from clusters having these region ids will be returned.
        :type region_ids: List[str]
        :param use_cached_data: Specifies whether we can serve the GET request to the read replica cache cache. There is a lag of 15 seconds between the read replica and primary data source.
        :type use_cached_data: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_protected_objects_serialize(
            access_cluster_id=access_cluster_id,
            region_id=region_id,
            request_initiator_type=request_initiator_type,
            search_string=search_string,
            environments=environments,
            snapshot_actions=snapshot_actions,
            object_action_key=object_action_key,
            tenant_ids=tenant_ids,
            include_tenants=include_tenants,
            protection_group_ids=protection_group_ids,
            object_ids=object_ids,
            storage_domain_ids=storage_domain_ids,
            sub_result_size=sub_result_size,
            filter_snapshot_from_usecs=filter_snapshot_from_usecs,
            filter_snapshot_to_usecs=filter_snapshot_to_usecs,
            os_types=os_types,
            source_ids=source_ids,
            run_instance_ids=run_instance_ids,
            cdp_protected_only=cdp_protected_only,
            region_ids=region_ids,
            use_cached_data=use_cached_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProtectedObjectsSearchResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_protected_objects_with_http_info(
        self,
        access_cluster_id: Annotated[Optional[StrictInt], Field(description="This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.")] = None,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        request_initiator_type: Annotated[Optional[StrictStr], Field(description="Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.")] = None,
        search_string: Annotated[Optional[StrictStr], Field(description="Specifies the search string to filter the objects. This search string will be applicable for objectnames and Protection Group names. User can specify a wildcard character '*' as a suffix to a string where all object and their Protection Group names are matched with the prefix string. For example, if vm1 and vm2 are the names of objects, user can specify vm* to list the objects. If not specified, then all the objects with Protection Groups will be returned which will match other filtering criteria.")] = None,
        environments: Annotated[Optional[List[StrictStr]], Field(description="Specifies the environment type to filter objects.")] = None,
        snapshot_actions: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of recovery actions. Only snapshots that applies to these actions will be returned.")] = None,
        object_action_key: Annotated[Optional[StrictStr], Field(description="Filter by ObjectActionKey, which uniquely represents protection of an object. An object can be protected in multiple ways but atmost once for a given combination of ObjectActionKey. When specified, latest snapshot info matching the objectActionKey is for corresponding object.")] = None,
        tenant_ids: Annotated[Optional[List[StrictStr]], Field(description="TenantIds contains ids of the tenants for which objects are to be returned.")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="If true, the response will include Objects which belongs to all tenants which the current user has permission to see.")] = None,
        protection_group_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of Protection Group ids to filter the objects. If specified, the objects protected by specified Protection Group ids will be returned.")] = None,
        object_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of Object ids to filter.")] = None,
        storage_domain_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies the Storage Domain ids to filter objects for which Protection Groups are writing data to Cohesity Views on the specified Storage Domains.")] = None,
        sub_result_size: Annotated[Optional[StrictInt], Field(description="Specifies the size of objects to be fetched for a single subresult.")] = None,
        filter_snapshot_from_usecs: Annotated[Optional[StrictInt], Field(description="Specifies the timestamp in Unix time epoch in microseconds to filter the objects if the Object has a successful snapshot after this value.")] = None,
        filter_snapshot_to_usecs: Annotated[Optional[StrictInt], Field(description="Specifies the timestamp in Unix time epoch in microseconds to filter the objects if the Object has a successful snapshot before this value.")] = None,
        os_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the operating system types to filter objects on.")] = None,
        source_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of Protection Source object ids to filter the objects. If specified, the object which are present in those Sources will be returned.")] = None,
        run_instance_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of run instance ids. If specified only objects belonging to the provided run id will be retunrned.")] = None,
        cdp_protected_only: Annotated[Optional[StrictBool], Field(description="Specifies whether to only return the CDP protected objects.")] = None,
        region_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of region ids. Only records from clusters having these region ids will be returned.")] = None,
        use_cached_data: Annotated[Optional[StrictBool], Field(description="Specifies whether we can serve the GET request to the read replica cache cache. There is a lag of 15 seconds between the read replica and primary data source.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProtectedObjectsSearchResponseBody]:
        """List Protected Objects.

        List protected objects and corresponding detail information from registered sources filtered by specified query parameters. If no search pattern or filter parameters are specified, all protected objects currently found are returned.

        :param access_cluster_id: This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.
        :type access_cluster_id: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param request_initiator_type: Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
        :type request_initiator_type: str
        :param search_string: Specifies the search string to filter the objects. This search string will be applicable for objectnames and Protection Group names. User can specify a wildcard character '*' as a suffix to a string where all object and their Protection Group names are matched with the prefix string. For example, if vm1 and vm2 are the names of objects, user can specify vm* to list the objects. If not specified, then all the objects with Protection Groups will be returned which will match other filtering criteria.
        :type search_string: str
        :param environments: Specifies the environment type to filter objects.
        :type environments: List[str]
        :param snapshot_actions: Specifies a list of recovery actions. Only snapshots that applies to these actions will be returned.
        :type snapshot_actions: List[str]
        :param object_action_key: Filter by ObjectActionKey, which uniquely represents protection of an object. An object can be protected in multiple ways but atmost once for a given combination of ObjectActionKey. When specified, latest snapshot info matching the objectActionKey is for corresponding object.
        :type object_action_key: str
        :param tenant_ids: TenantIds contains ids of the tenants for which objects are to be returned.
        :type tenant_ids: List[str]
        :param include_tenants: If true, the response will include Objects which belongs to all tenants which the current user has permission to see.
        :type include_tenants: bool
        :param protection_group_ids: Specifies a list of Protection Group ids to filter the objects. If specified, the objects protected by specified Protection Group ids will be returned.
        :type protection_group_ids: List[str]
        :param object_ids: Specifies a list of Object ids to filter.
        :type object_ids: List[int]
        :param storage_domain_ids: Specifies the Storage Domain ids to filter objects for which Protection Groups are writing data to Cohesity Views on the specified Storage Domains.
        :type storage_domain_ids: List[int]
        :param sub_result_size: Specifies the size of objects to be fetched for a single subresult.
        :type sub_result_size: int
        :param filter_snapshot_from_usecs: Specifies the timestamp in Unix time epoch in microseconds to filter the objects if the Object has a successful snapshot after this value.
        :type filter_snapshot_from_usecs: int
        :param filter_snapshot_to_usecs: Specifies the timestamp in Unix time epoch in microseconds to filter the objects if the Object has a successful snapshot before this value.
        :type filter_snapshot_to_usecs: int
        :param os_types: Specifies the operating system types to filter objects on.
        :type os_types: List[str]
        :param source_ids: Specifies a list of Protection Source object ids to filter the objects. If specified, the object which are present in those Sources will be returned.
        :type source_ids: List[int]
        :param run_instance_ids: Specifies a list of run instance ids. If specified only objects belonging to the provided run id will be retunrned.
        :type run_instance_ids: List[int]
        :param cdp_protected_only: Specifies whether to only return the CDP protected objects.
        :type cdp_protected_only: bool
        :param region_ids: Specifies a list of region ids. Only records from clusters having these region ids will be returned.
        :type region_ids: List[str]
        :param use_cached_data: Specifies whether we can serve the GET request to the read replica cache cache. There is a lag of 15 seconds between the read replica and primary data source.
        :type use_cached_data: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_protected_objects_serialize(
            access_cluster_id=access_cluster_id,
            region_id=region_id,
            request_initiator_type=request_initiator_type,
            search_string=search_string,
            environments=environments,
            snapshot_actions=snapshot_actions,
            object_action_key=object_action_key,
            tenant_ids=tenant_ids,
            include_tenants=include_tenants,
            protection_group_ids=protection_group_ids,
            object_ids=object_ids,
            storage_domain_ids=storage_domain_ids,
            sub_result_size=sub_result_size,
            filter_snapshot_from_usecs=filter_snapshot_from_usecs,
            filter_snapshot_to_usecs=filter_snapshot_to_usecs,
            os_types=os_types,
            source_ids=source_ids,
            run_instance_ids=run_instance_ids,
            cdp_protected_only=cdp_protected_only,
            region_ids=region_ids,
            use_cached_data=use_cached_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProtectedObjectsSearchResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_protected_objects_without_preload_content(
        self,
        access_cluster_id: Annotated[Optional[StrictInt], Field(description="This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.")] = None,
        region_id: Annotated[Optional[StrictStr], Field(description="This field uniquely represents a region and is used for making Helios calls to a specific region.")] = None,
        request_initiator_type: Annotated[Optional[StrictStr], Field(description="Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.")] = None,
        search_string: Annotated[Optional[StrictStr], Field(description="Specifies the search string to filter the objects. This search string will be applicable for objectnames and Protection Group names. User can specify a wildcard character '*' as a suffix to a string where all object and their Protection Group names are matched with the prefix string. For example, if vm1 and vm2 are the names of objects, user can specify vm* to list the objects. If not specified, then all the objects with Protection Groups will be returned which will match other filtering criteria.")] = None,
        environments: Annotated[Optional[List[StrictStr]], Field(description="Specifies the environment type to filter objects.")] = None,
        snapshot_actions: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of recovery actions. Only snapshots that applies to these actions will be returned.")] = None,
        object_action_key: Annotated[Optional[StrictStr], Field(description="Filter by ObjectActionKey, which uniquely represents protection of an object. An object can be protected in multiple ways but atmost once for a given combination of ObjectActionKey. When specified, latest snapshot info matching the objectActionKey is for corresponding object.")] = None,
        tenant_ids: Annotated[Optional[List[StrictStr]], Field(description="TenantIds contains ids of the tenants for which objects are to be returned.")] = None,
        include_tenants: Annotated[Optional[StrictBool], Field(description="If true, the response will include Objects which belongs to all tenants which the current user has permission to see.")] = None,
        protection_group_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of Protection Group ids to filter the objects. If specified, the objects protected by specified Protection Group ids will be returned.")] = None,
        object_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of Object ids to filter.")] = None,
        storage_domain_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies the Storage Domain ids to filter objects for which Protection Groups are writing data to Cohesity Views on the specified Storage Domains.")] = None,
        sub_result_size: Annotated[Optional[StrictInt], Field(description="Specifies the size of objects to be fetched for a single subresult.")] = None,
        filter_snapshot_from_usecs: Annotated[Optional[StrictInt], Field(description="Specifies the timestamp in Unix time epoch in microseconds to filter the objects if the Object has a successful snapshot after this value.")] = None,
        filter_snapshot_to_usecs: Annotated[Optional[StrictInt], Field(description="Specifies the timestamp in Unix time epoch in microseconds to filter the objects if the Object has a successful snapshot before this value.")] = None,
        os_types: Annotated[Optional[List[StrictStr]], Field(description="Specifies the operating system types to filter objects on.")] = None,
        source_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of Protection Source object ids to filter the objects. If specified, the object which are present in those Sources will be returned.")] = None,
        run_instance_ids: Annotated[Optional[List[StrictInt]], Field(description="Specifies a list of run instance ids. If specified only objects belonging to the provided run id will be retunrned.")] = None,
        cdp_protected_only: Annotated[Optional[StrictBool], Field(description="Specifies whether to only return the CDP protected objects.")] = None,
        region_ids: Annotated[Optional[List[StrictStr]], Field(description="Specifies a list of region ids. Only records from clusters having these region ids will be returned.")] = None,
        use_cached_data: Annotated[Optional[StrictBool], Field(description="Specifies whether we can serve the GET request to the read replica cache cache. There is a lag of 15 seconds between the read replica and primary data source.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Protected Objects.

        List protected objects and corresponding detail information from registered sources filtered by specified query parameters. If no search pattern or filter parameters are specified, all protected objects currently found are returned.

        :param access_cluster_id: This field uniquely represents a Cohesity Cluster and is used for making on-prem calls from Helios.
        :type access_cluster_id: int
        :param region_id: This field uniquely represents a region and is used for making Helios calls to a specific region.
        :type region_id: str
        :param request_initiator_type: Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
        :type request_initiator_type: str
        :param search_string: Specifies the search string to filter the objects. This search string will be applicable for objectnames and Protection Group names. User can specify a wildcard character '*' as a suffix to a string where all object and their Protection Group names are matched with the prefix string. For example, if vm1 and vm2 are the names of objects, user can specify vm* to list the objects. If not specified, then all the objects with Protection Groups will be returned which will match other filtering criteria.
        :type search_string: str
        :param environments: Specifies the environment type to filter objects.
        :type environments: List[str]
        :param snapshot_actions: Specifies a list of recovery actions. Only snapshots that applies to these actions will be returned.
        :type snapshot_actions: List[str]
        :param object_action_key: Filter by ObjectActionKey, which uniquely represents protection of an object. An object can be protected in multiple ways but atmost once for a given combination of ObjectActionKey. When specified, latest snapshot info matching the objectActionKey is for corresponding object.
        :type object_action_key: str
        :param tenant_ids: TenantIds contains ids of the tenants for which objects are to be returned.
        :type tenant_ids: List[str]
        :param include_tenants: If true, the response will include Objects which belongs to all tenants which the current user has permission to see.
        :type include_tenants: bool
        :param protection_group_ids: Specifies a list of Protection Group ids to filter the objects. If specified, the objects protected by specified Protection Group ids will be returned.
        :type protection_group_ids: List[str]
        :param object_ids: Specifies a list of Object ids to filter.
        :type object_ids: List[int]
        :param storage_domain_ids: Specifies the Storage Domain ids to filter objects for which Protection Groups are writing data to Cohesity Views on the specified Storage Domains.
        :type storage_domain_ids: List[int]
        :param sub_result_size: Specifies the size of objects to be fetched for a single subresult.
        :type sub_result_size: int
        :param filter_snapshot_from_usecs: Specifies the timestamp in Unix time epoch in microseconds to filter the objects if the Object has a successful snapshot after this value.
        :type filter_snapshot_from_usecs: int
        :param filter_snapshot_to_usecs: Specifies the timestamp in Unix time epoch in microseconds to filter the objects if the Object has a successful snapshot before this value.
        :type filter_snapshot_to_usecs: int
        :param os_types: Specifies the operating system types to filter objects on.
        :type os_types: List[str]
        :param source_ids: Specifies a list of Protection Source object ids to filter the objects. If specified, the object which are present in those Sources will be returned.
        :type source_ids: List[int]
        :param run_instance_ids: Specifies a list of run instance ids. If specified only objects belonging to the provided run id will be retunrned.
        :type run_instance_ids: List[int]
        :param cdp_protected_only: Specifies whether to only return the CDP protected objects.
        :type cdp_protected_only: bool
        :param region_ids: Specifies a list of region ids. Only records from clusters having these region ids will be returned.
        :type region_ids: List[str]
        :param use_cached_data: Specifies whether we can serve the GET request to the read replica cache cache. There is a lag of 15 seconds between the read replica and primary data source.
        :type use_cached_data: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_protected_objects_serialize(
            access_cluster_id=access_cluster_id,
            region_id=region_id,
            request_initiator_type=request_initiator_type,
            search_string=search_string,
            environments=environments,
            snapshot_actions=snapshot_actions,
            object_action_key=object_action_key,
            tenant_ids=tenant_ids,
            include_tenants=include_tenants,
            protection_group_ids=protection_group_ids,
            object_ids=object_ids,
            storage_domain_ids=storage_domain_ids,
            sub_result_size=sub_result_size,
            filter_snapshot_from_usecs=filter_snapshot_from_usecs,
            filter_snapshot_to_usecs=filter_snapshot_to_usecs,
            os_types=os_types,
            source_ids=source_ids,
            run_instance_ids=run_instance_ids,
            cdp_protected_only=cdp_protected_only,
            region_ids=region_ids,
            use_cached_data=use_cached_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProtectedObjectsSearchResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_protected_objects_serialize(
        self,
        access_cluster_id,
        region_id,
        request_initiator_type,
        search_string,
        environments,
        snapshot_actions,
        object_action_key,
        tenant_ids,
        include_tenants,
        protection_group_ids,
        object_ids,
        storage_domain_ids,
        sub_result_size,
        filter_snapshot_from_usecs,
        filter_snapshot_to_usecs,
        os_types,
        source_ids,
        run_instance_ids,
        cdp_protected_only,
        region_ids,
        use_cached_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'environments': 'csv',
            'snapshotActions': 'csv',
            'tenantIds': 'csv',
            'protectionGroupIds': 'csv',
            'objectIds': 'csv',
            'storageDomainIds': 'csv',
            'osTypes': 'csv',
            'sourceIds': 'csv',
            'runInstanceIds': 'csv',
            'regionIds': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if search_string is not None:
            
            _query_params.append(('searchString', search_string))
            
        if environments is not None:
            
            _query_params.append(('environments', environments))
            
        if snapshot_actions is not None:
            
            _query_params.append(('snapshotActions', snapshot_actions))
            
        if object_action_key is not None:
            
            _query_params.append(('objectActionKey', object_action_key))
            
        if tenant_ids is not None:
            
            _query_params.append(('tenantIds', tenant_ids))
            
        if include_tenants is not None:
            
            _query_params.append(('includeTenants', include_tenants))
            
        if protection_group_ids is not None:
            
            _query_params.append(('protectionGroupIds', protection_group_ids))
            
        if object_ids is not None:
            
            _query_params.append(('objectIds', object_ids))
            
        if storage_domain_ids is not None:
            
            _query_params.append(('storageDomainIds', storage_domain_ids))
            
        if sub_result_size is not None:
            
            _query_params.append(('subResultSize', sub_result_size))
            
        if filter_snapshot_from_usecs is not None:
            
            _query_params.append(('filterSnapshotFromUsecs', filter_snapshot_from_usecs))
            
        if filter_snapshot_to_usecs is not None:
            
            _query_params.append(('filterSnapshotToUsecs', filter_snapshot_to_usecs))
            
        if os_types is not None:
            
            _query_params.append(('osTypes', os_types))
            
        if source_ids is not None:
            
            _query_params.append(('sourceIds', source_ids))
            
        if run_instance_ids is not None:
            
            _query_params.append(('runInstanceIds', run_instance_ids))
            
        if cdp_protected_only is not None:
            
            _query_params.append(('cdpProtectedOnly', cdp_protected_only))
            
        if region_ids is not None:
            
            _query_params.append(('regionIds', region_ids))
            
        if use_cached_data is not None:
            
            _query_params.append(('useCachedData', use_cached_data))
            
        # process the header parameters
        if access_cluster_id is not None:
            _header_params['accessClusterId'] = access_cluster_id
        if region_id is not None:
            _header_params['regionId'] = region_id
        if request_initiator_type is not None:
            _header_params['requestInitiatorType'] = request_initiator_type
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/data-protect/search/protected-objects',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


