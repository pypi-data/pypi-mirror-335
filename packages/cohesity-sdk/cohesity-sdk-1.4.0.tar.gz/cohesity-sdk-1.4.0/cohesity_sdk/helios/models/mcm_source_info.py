# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.mcm_physical_source_info import McmPhysicalSourceInfo
from cohesity_sdk.helios.models.mcm_source_registration_info import McmSourceRegistrationInfo
from cohesity_sdk.helios.models.object_protection_stats_summary import ObjectProtectionStatsSummary
from typing import Set
from typing_extensions import Self

class McmSourceInfo(BaseModel):
    """
    Specifies the Protection Source information.
    """ # noqa: E501
    applications: Optional[List[StrictStr]] = Field(default=None, description="Specifies the list of applications registered with current Source.")
    cluster_id: Optional[StrictInt] = Field(default=None, description="Specifies the cluster id.", alias="clusterId")
    cluster_incarnation_id: Optional[StrictInt] = Field(default=None, description="Specifies the cluster incarnation id.", alias="clusterIncarnationId")
    physical_source_info: Optional[McmPhysicalSourceInfo] = Field(default=None, alias="physicalSourceInfo")
    protection_stats: Optional[List[ObjectProtectionStatsSummary]] = Field(default=None, description="Specifies the protection statistics of the Source.", alias="protectionStats")
    region_id: Optional[StrictStr] = Field(default=None, description="Specifies the region id.", alias="regionId")
    registration_details: Optional[McmSourceRegistrationInfo] = Field(default=None, alias="registrationDetails")
    registration_id: Optional[StrictStr] = Field(default=None, description="Specifies the registration id of the Protection Source.", alias="registrationId")
    source_id: Optional[StrictInt] = Field(default=None, description="Specifies the id of the Protection Source.", alias="sourceId")
    __properties: ClassVar[List[str]] = ["applications", "clusterId", "clusterIncarnationId", "physicalSourceInfo", "protectionStats", "regionId", "registrationDetails", "registrationId", "sourceId"]

    @field_validator('applications')
    def applications_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['kSQL', 'kOracle']):
                raise ValueError("each list item must be one of ('kSQL', 'kOracle')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of McmSourceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of physical_source_info
        if self.physical_source_info:
            _dict['physicalSourceInfo'] = self.physical_source_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in protection_stats (list)
        _items = []
        if self.protection_stats:
            for _item_protection_stats in self.protection_stats:
                if _item_protection_stats:
                    _items.append(_item_protection_stats.to_dict())
            _dict['protectionStats'] = _items
        # override the default output from pydantic by calling `to_dict()` of registration_details
        if self.registration_details:
            _dict['registrationDetails'] = self.registration_details.to_dict()
        # set to None if applications (nullable) is None
        # and model_fields_set contains the field
        if self.applications is None and "applications" in self.model_fields_set:
            _dict['applications'] = None

        # set to None if cluster_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_id is None and "cluster_id" in self.model_fields_set:
            _dict['clusterId'] = None

        # set to None if cluster_incarnation_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_incarnation_id is None and "cluster_incarnation_id" in self.model_fields_set:
            _dict['clusterIncarnationId'] = None

        # set to None if protection_stats (nullable) is None
        # and model_fields_set contains the field
        if self.protection_stats is None and "protection_stats" in self.model_fields_set:
            _dict['protectionStats'] = None

        # set to None if region_id (nullable) is None
        # and model_fields_set contains the field
        if self.region_id is None and "region_id" in self.model_fields_set:
            _dict['regionId'] = None

        # set to None if registration_id (nullable) is None
        # and model_fields_set contains the field
        if self.registration_id is None and "registration_id" in self.model_fields_set:
            _dict['registrationId'] = None

        # set to None if source_id (nullable) is None
        # and model_fields_set contains the field
        if self.source_id is None and "source_id" in self.model_fields_set:
            _dict['sourceId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of McmSourceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applications": obj.get("applications"),
            "clusterId": obj.get("clusterId"),
            "clusterIncarnationId": obj.get("clusterIncarnationId"),
            "physicalSourceInfo": McmPhysicalSourceInfo.from_dict(obj["physicalSourceInfo"]) if obj.get("physicalSourceInfo") is not None else None,
            "protectionStats": [ObjectProtectionStatsSummary.from_dict(_item) for _item in obj["protectionStats"]] if obj.get("protectionStats") is not None else None,
            "regionId": obj.get("regionId"),
            "registrationDetails": McmSourceRegistrationInfo.from_dict(obj["registrationDetails"]) if obj.get("registrationDetails") is not None else None,
            "registrationId": obj.get("registrationId"),
            "sourceId": obj.get("sourceId")
        })
        return _obj


