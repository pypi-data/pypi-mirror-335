# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.platform_sub_type_agent_image_info import PlatformSubTypeAgentImageInfo
from typing import Set
from typing_extensions import Self

class McmAgentImage(BaseModel):
    """
    Specifies the agent image information on Helios.
    """ # noqa: E501
    platform_sub_types: Optional[List[PlatformSubTypeAgentImageInfo]] = Field(default=None, description="Specifies the agent information of platform subtypes.", alias="PlatformSubTypes")
    download_url: Optional[StrictStr] = Field(default=None, description="Specifies the URL for agent downlaod.", alias="downloadURL")
    platform: Optional[StrictStr] = Field(default=None, description="Specifies the type of the agent platform.")
    __properties: ClassVar[List[str]] = ["PlatformSubTypes", "downloadURL", "platform"]

    @field_validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Windows', 'Linux', 'Solaris', 'HPUX', 'VOS']):
            raise ValueError("must be one of enum values ('Windows', 'Linux', 'Solaris', 'HPUX', 'VOS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of McmAgentImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in platform_sub_types (list)
        _items = []
        if self.platform_sub_types:
            for _item_platform_sub_types in self.platform_sub_types:
                if _item_platform_sub_types:
                    _items.append(_item_platform_sub_types.to_dict())
            _dict['PlatformSubTypes'] = _items
        # set to None if download_url (nullable) is None
        # and model_fields_set contains the field
        if self.download_url is None and "download_url" in self.model_fields_set:
            _dict['downloadURL'] = None

        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of McmAgentImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "PlatformSubTypes": [PlatformSubTypeAgentImageInfo.from_dict(_item) for _item in obj["PlatformSubTypes"]] if obj.get("PlatformSubTypes") is not None else None,
            "downloadURL": obj.get("downloadURL"),
            "platform": obj.get("platform")
        })
        return _obj


