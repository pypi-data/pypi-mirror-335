# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class VlanParams(BaseModel):
    """
    Specifies VLAN params associated with the backup/restore operation.
    """ # noqa: E501
    disable_vlan: Optional[StrictBool] = Field(default=None, description="If this is set to true, then even if VLANs are configured on the system, the partition VIPs will be used for the restore.", alias="disableVlan")
    interface_name: Optional[StrictStr] = Field(default=None, description="Interface group to use for backup/restore. If this is not specified, primary interface group for the cluster will be used.", alias="interfaceName")
    vlan_id: Optional[StrictInt] = Field(default=None, description="If this is set, then the Cohesity host name or the IP address associated with this VLAN is used for mounting Cohesity's view on the remote host.", alias="vlanId")
    __properties: ClassVar[List[str]] = ["disableVlan", "interfaceName", "vlanId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VlanParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if disable_vlan (nullable) is None
        # and model_fields_set contains the field
        if self.disable_vlan is None and "disable_vlan" in self.model_fields_set:
            _dict['disableVlan'] = None

        # set to None if interface_name (nullable) is None
        # and model_fields_set contains the field
        if self.interface_name is None and "interface_name" in self.model_fields_set:
            _dict['interfaceName'] = None

        # set to None if vlan_id (nullable) is None
        # and model_fields_set contains the field
        if self.vlan_id is None and "vlan_id" in self.model_fields_set:
            _dict['vlanId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VlanParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disableVlan": obj.get("disableVlan"),
            "interfaceName": obj.get("interfaceName"),
            "vlanId": obj.get("vlanId")
        })
        return _obj


