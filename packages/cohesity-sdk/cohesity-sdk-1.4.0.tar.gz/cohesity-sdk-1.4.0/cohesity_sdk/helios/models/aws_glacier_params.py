# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.aws_cloud_c2_s_params import AwsCloudC2SParams
from cohesity_sdk.helios.models.aws_cloud_gov_params import AwsCloudGovParams
from cohesity_sdk.helios.models.aws_cloud_standard_params import AwsCloudStandardParams
from typing import Set
from typing_extensions import Self

class AwsGlacierParams(BaseModel):
    """
    Specifies the parameters which are specific to AWS related External Targets with storage class Glacier.
    """ # noqa: E501
    cloud_type: Optional[StrictStr] = Field(description="Specifies the AWS External Target type.", alias="cloudType")
    aws_cloud_c2_s_params: Optional[AwsCloudC2SParams] = Field(default=None, alias="awsCloudC2SParams")
    aws_cloud_gov_params: Optional[AwsCloudGovParams] = Field(default=None, alias="awsCloudGovParams")
    aws_cloud_standard_params: Optional[AwsCloudStandardParams] = Field(default=None, alias="awsCloudStandardParams")
    __properties: ClassVar[List[str]] = ["cloudType", "awsCloudC2SParams", "awsCloudGovParams", "awsCloudStandardParams"]

    @field_validator('cloud_type')
    def cloud_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AmazonStandard', 'AmazonGov', 'AmazonC2S']):
            raise ValueError("must be one of enum values ('AmazonStandard', 'AmazonGov', 'AmazonC2S')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AwsGlacierParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws_cloud_c2_s_params
        if self.aws_cloud_c2_s_params:
            _dict['awsCloudC2SParams'] = self.aws_cloud_c2_s_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aws_cloud_gov_params
        if self.aws_cloud_gov_params:
            _dict['awsCloudGovParams'] = self.aws_cloud_gov_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aws_cloud_standard_params
        if self.aws_cloud_standard_params:
            _dict['awsCloudStandardParams'] = self.aws_cloud_standard_params.to_dict()
        # set to None if cloud_type (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_type is None and "cloud_type" in self.model_fields_set:
            _dict['cloudType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AwsGlacierParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudType": obj.get("cloudType"),
            "awsCloudC2SParams": AwsCloudC2SParams.from_dict(obj["awsCloudC2SParams"]) if obj.get("awsCloudC2SParams") is not None else None,
            "awsCloudGovParams": AwsCloudGovParams.from_dict(obj["awsCloudGovParams"]) if obj.get("awsCloudGovParams") is not None else None,
            "awsCloudStandardParams": AwsCloudStandardParams.from_dict(obj["awsCloudStandardParams"]) if obj.get("awsCloudStandardParams") is not None else None
        })
        return _obj


