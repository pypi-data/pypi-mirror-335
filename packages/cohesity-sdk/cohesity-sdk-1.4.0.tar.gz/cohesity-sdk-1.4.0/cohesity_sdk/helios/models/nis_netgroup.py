# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class NisNetgroup(BaseModel):
    """
    Specifies an NIS netgroup.
    """ # noqa: E501
    domain: Optional[StrictStr] = Field(description="Specifies the domain name for the netgroup.")
    name: Optional[StrictStr] = Field(description="Specifies the netgroup name.")
    nfs_access: Optional[StrictStr] = Field(default=None, description="Specifies NFS protocol acess level for clients from the netgroup.", alias="nfsAccess")
    nfs_squash: Optional[StrictStr] = Field(default=None, description="Specifies which nfsSquash Mounted. 'kNone' mounts none. 'kRootSquash' mounts nfsRootSquash. Whether clients from this subnet can mount as root on NFS. 'kAllSquash' mounts nfsAllSquash. Whether all clients from this subnet can map view with view_all_squash_uid/view_all_squash_gid configured in the view.", alias="nfsSquash")
    __properties: ClassVar[List[str]] = ["domain", "name", "nfsAccess", "nfsSquash"]

    @field_validator('nfs_access')
    def nfs_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kDisabled', 'kReadOnly', 'kReadWrite']):
            raise ValueError("must be one of enum values ('kDisabled', 'kReadOnly', 'kReadWrite')")
        return value

    @field_validator('nfs_squash')
    def nfs_squash_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kNone', 'kRootSquash', 'kAllSquash']):
            raise ValueError("must be one of enum values ('kNone', 'kRootSquash', 'kAllSquash')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NisNetgroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if nfs_access (nullable) is None
        # and model_fields_set contains the field
        if self.nfs_access is None and "nfs_access" in self.model_fields_set:
            _dict['nfsAccess'] = None

        # set to None if nfs_squash (nullable) is None
        # and model_fields_set contains the field
        if self.nfs_squash is None and "nfs_squash" in self.model_fields_set:
            _dict['nfsSquash'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NisNetgroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain": obj.get("domain"),
            "name": obj.get("name"),
            "nfsAccess": obj.get("nfsAccess"),
            "nfsSquash": obj.get("nfsSquash")
        })
        return _obj


