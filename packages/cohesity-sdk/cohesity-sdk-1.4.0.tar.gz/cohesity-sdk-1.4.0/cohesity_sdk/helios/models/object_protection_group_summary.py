# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class ObjectProtectionGroupSummary(BaseModel):
    """
    Specifies a summary of a protection group protecting this object.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Specifies the protection group id.")
    last_archival_run_status: Optional[StrictStr] = Field(default=None, description="Specifies the status of last archival run.", alias="lastArchivalRunStatus")
    last_backup_run_status: Optional[StrictStr] = Field(default=None, description="Specifies the status of last local back up run.", alias="lastBackupRunStatus")
    last_replication_run_status: Optional[StrictStr] = Field(default=None, description="Specifies the status of last replication run.", alias="lastReplicationRunStatus")
    last_run_sla_violated: Optional[StrictBool] = Field(default=None, description="Specifies if the sla is violated in last run.", alias="lastRunSlaViolated")
    name: Optional[StrictStr] = Field(default=None, description="Specifies the protection group name.")
    policy_id: Optional[StrictStr] = Field(default=None, description="Specifies the policy id for this group.", alias="policyId")
    policy_name: Optional[StrictStr] = Field(default=None, description="Specifies the policy name for this group.", alias="policyName")
    protection_env_type: Optional[StrictStr] = Field(default=None, description="Specifies the protection type of the job if any.", alias="protectionEnvType")
    storage_domain_id: Optional[StrictStr] = Field(default=None, description="Specifies the storage domain id of this group. Format is clusterId:clusterIncarnationId:storageDomainId.", alias="storageDomainId")
    __properties: ClassVar[List[str]] = ["id", "lastArchivalRunStatus", "lastBackupRunStatus", "lastReplicationRunStatus", "lastRunSlaViolated", "name", "policyId", "policyName", "protectionEnvType", "storageDomainId"]

    @field_validator('last_archival_run_status')
    def last_archival_run_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped']):
            raise ValueError("must be one of enum values ('Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped')")
        return value

    @field_validator('last_backup_run_status')
    def last_backup_run_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped']):
            raise ValueError("must be one of enum values ('Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped')")
        return value

    @field_validator('last_replication_run_status')
    def last_replication_run_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped']):
            raise ValueError("must be one of enum values ('Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped')")
        return value

    @field_validator('protection_env_type')
    def protection_env_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kAgent', 'kNative', 'kSnapshotManager', 'kRDSSnapshotManager', 'kAuroraSnapshotManager', 'kAwsS3', 'kAwsRDSPostgresBackup', 'kAzureSQL', 'kFile', 'kVolume']):
            raise ValueError("must be one of enum values ('kAgent', 'kNative', 'kSnapshotManager', 'kRDSSnapshotManager', 'kAuroraSnapshotManager', 'kAwsS3', 'kAwsRDSPostgresBackup', 'kAzureSQL', 'kFile', 'kVolume')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjectProtectionGroupSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if last_archival_run_status (nullable) is None
        # and model_fields_set contains the field
        if self.last_archival_run_status is None and "last_archival_run_status" in self.model_fields_set:
            _dict['lastArchivalRunStatus'] = None

        # set to None if last_backup_run_status (nullable) is None
        # and model_fields_set contains the field
        if self.last_backup_run_status is None and "last_backup_run_status" in self.model_fields_set:
            _dict['lastBackupRunStatus'] = None

        # set to None if last_replication_run_status (nullable) is None
        # and model_fields_set contains the field
        if self.last_replication_run_status is None and "last_replication_run_status" in self.model_fields_set:
            _dict['lastReplicationRunStatus'] = None

        # set to None if last_run_sla_violated (nullable) is None
        # and model_fields_set contains the field
        if self.last_run_sla_violated is None and "last_run_sla_violated" in self.model_fields_set:
            _dict['lastRunSlaViolated'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if policy_id (nullable) is None
        # and model_fields_set contains the field
        if self.policy_id is None and "policy_id" in self.model_fields_set:
            _dict['policyId'] = None

        # set to None if policy_name (nullable) is None
        # and model_fields_set contains the field
        if self.policy_name is None and "policy_name" in self.model_fields_set:
            _dict['policyName'] = None

        # set to None if protection_env_type (nullable) is None
        # and model_fields_set contains the field
        if self.protection_env_type is None and "protection_env_type" in self.model_fields_set:
            _dict['protectionEnvType'] = None

        # set to None if storage_domain_id (nullable) is None
        # and model_fields_set contains the field
        if self.storage_domain_id is None and "storage_domain_id" in self.model_fields_set:
            _dict['storageDomainId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjectProtectionGroupSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "lastArchivalRunStatus": obj.get("lastArchivalRunStatus"),
            "lastBackupRunStatus": obj.get("lastBackupRunStatus"),
            "lastReplicationRunStatus": obj.get("lastReplicationRunStatus"),
            "lastRunSlaViolated": obj.get("lastRunSlaViolated"),
            "name": obj.get("name"),
            "policyId": obj.get("policyId"),
            "policyName": obj.get("policyName"),
            "protectionEnvType": obj.get("protectionEnvType"),
            "storageDomainId": obj.get("storageDomainId")
        })
        return _obj


