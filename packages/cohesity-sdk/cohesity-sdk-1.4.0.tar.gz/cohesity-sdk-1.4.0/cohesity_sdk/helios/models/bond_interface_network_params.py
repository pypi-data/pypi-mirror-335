# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class BondInterfaceNetworkParams(BaseModel):
    """
    Bond interface network parameters.
    """ # noqa: E501
    bonding_mode: Optional[StrictStr] = Field(default=None, description="Bonding mode of the interface.", alias="bondingMode")
    lacp_rate: Optional[StrictStr] = Field(default=None, description="Rate option to use for link partner to transmit LACPDU packets in 802.3ad mode.", alias="lacpRate")
    xmit_hash_policy: Optional[StrictStr] = Field(default=None, description="Transmit hash policy to use for selection in 802.3ad mode.", alias="xmitHashPolicy")
    __properties: ClassVar[List[str]] = ["bondingMode", "lacpRate", "xmitHashPolicy"]

    @field_validator('bonding_mode')
    def bonding_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ActiveBackup', '802_3ad']):
            raise ValueError("must be one of enum values ('ActiveBackup', '802_3ad')")
        return value

    @field_validator('lacp_rate')
    def lacp_rate_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Slow', 'Fast']):
            raise ValueError("must be one of enum values ('Slow', 'Fast')")
        return value

    @field_validator('xmit_hash_policy')
    def xmit_hash_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['layer2', 'layer3_4', 'layer2_3']):
            raise ValueError("must be one of enum values ('layer2', 'layer3_4', 'layer2_3')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BondInterfaceNetworkParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if bonding_mode (nullable) is None
        # and model_fields_set contains the field
        if self.bonding_mode is None and "bonding_mode" in self.model_fields_set:
            _dict['bondingMode'] = None

        # set to None if lacp_rate (nullable) is None
        # and model_fields_set contains the field
        if self.lacp_rate is None and "lacp_rate" in self.model_fields_set:
            _dict['lacpRate'] = None

        # set to None if xmit_hash_policy (nullable) is None
        # and model_fields_set contains the field
        if self.xmit_hash_policy is None and "xmit_hash_policy" in self.model_fields_set:
            _dict['xmitHashPolicy'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BondInterfaceNetworkParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bondingMode": obj.get("bondingMode"),
            "lacpRate": obj.get("lacpRate"),
            "xmitHashPolicy": obj.get("xmitHashPolicy")
        })
        return _obj


