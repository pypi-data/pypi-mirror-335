# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Set
from typing_extensions import Self

class StorageMetrics(BaseModel):
    """
    Metrics related to storage collected during the backup run.
    """ # noqa: E501
    compression_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Specifies the compression ratio (entropy) of data in this run.", alias="compressionRatio")
    data_read_bytes: Optional[StrictInt] = Field(default=None, description="Specifies the bytes of data read for this run.", alias="dataReadBytes")
    data_written_bytes: Optional[StrictInt] = Field(default=None, description="Specifies the bytes of data written for this run.", alias="dataWrittenBytes")
    unmorphed_usage_bytes: Optional[StrictInt] = Field(default=None, description="Specifies the bytes of data deduped for this run.", alias="unmorphedUsageBytes")
    __properties: ClassVar[List[str]] = ["compressionRatio", "dataReadBytes", "dataWrittenBytes", "unmorphedUsageBytes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StorageMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if compression_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.compression_ratio is None and "compression_ratio" in self.model_fields_set:
            _dict['compressionRatio'] = None

        # set to None if data_read_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.data_read_bytes is None and "data_read_bytes" in self.model_fields_set:
            _dict['dataReadBytes'] = None

        # set to None if data_written_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.data_written_bytes is None and "data_written_bytes" in self.model_fields_set:
            _dict['dataWrittenBytes'] = None

        # set to None if unmorphed_usage_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.unmorphed_usage_bytes is None and "unmorphed_usage_bytes" in self.model_fields_set:
            _dict['unmorphedUsageBytes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StorageMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compressionRatio": obj.get("compressionRatio"),
            "dataReadBytes": obj.get("dataReadBytes"),
            "dataWrittenBytes": obj.get("dataWrittenBytes"),
            "unmorphedUsageBytes": obj.get("unmorphedUsageBytes")
        })
        return _obj


