# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class Privilege(BaseModel):
    """
    Specifies a Privileges.
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="Specifies the Privilege category.")
    description: Optional[StrictStr] = Field(default=None, description="Specifies the description message for the Privilege.")
    id: Optional[StrictInt] = Field(default=None, description="Specifies the Privilege id.")
    is_available_on_helios: Optional[StrictBool] = Field(default=None, description="Specifies whether the Privilege is available for Helios operations.", alias="isAvailableOnHelios")
    is_custom_role_default: Optional[StrictBool] = Field(default=None, description="Specifies whether the Privilege is auto assigned to custom Roles.", alias="isCustomRoleDefault")
    is_special: Optional[StrictBool] = Field(default=None, description="Specifies whether the Privilege is a special privilege. Special Privileges are not assigned to builtin 'Admin' Role.", alias="isSpecial")
    is_view_only: Optional[StrictBool] = Field(default=None, description="Specifies whether the Privilege is a read-only privilege. Read-only Previlege only grants read access to a Role.", alias="isViewOnly")
    label: Optional[StrictStr] = Field(default=None, description="Specifies the Privilege label.")
    name: Optional[StrictStr] = Field(default=None, description="Specifies the Privilege name.")
    __properties: ClassVar[List[str]] = ["category", "description", "id", "isAvailableOnHelios", "isCustomRoleDefault", "isSpecial", "isViewOnly", "label", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Privilege from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if self.category is None and "category" in self.model_fields_set:
            _dict['category'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if is_available_on_helios (nullable) is None
        # and model_fields_set contains the field
        if self.is_available_on_helios is None and "is_available_on_helios" in self.model_fields_set:
            _dict['isAvailableOnHelios'] = None

        # set to None if is_custom_role_default (nullable) is None
        # and model_fields_set contains the field
        if self.is_custom_role_default is None and "is_custom_role_default" in self.model_fields_set:
            _dict['isCustomRoleDefault'] = None

        # set to None if is_special (nullable) is None
        # and model_fields_set contains the field
        if self.is_special is None and "is_special" in self.model_fields_set:
            _dict['isSpecial'] = None

        # set to None if is_view_only (nullable) is None
        # and model_fields_set contains the field
        if self.is_view_only is None and "is_view_only" in self.model_fields_set:
            _dict['isViewOnly'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Privilege from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "isAvailableOnHelios": obj.get("isAvailableOnHelios"),
            "isCustomRoleDefault": obj.get("isCustomRoleDefault"),
            "isSpecial": obj.get("isSpecial"),
            "isViewOnly": obj.get("isViewOnly"),
            "label": obj.get("label"),
            "name": obj.get("name")
        })
        return _obj


