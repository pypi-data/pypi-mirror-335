# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.release_download_urls import ReleaseDownloadUrls
from typing import Set
from typing_extensions import Self

class Release(BaseModel):
    """
    Specifies release details and rules.
    """ # noqa: E501
    download_urls: Optional[List[ReleaseDownloadUrls]] = Field(default=None, description="Specifies the release download urls.", alias="downloadUrls")
    from_versions: Optional[List[StrictStr]] = Field(default=None, description="Specifies the list of version this release is compatible.", alias="fromVersions")
    release_notes: Optional[StrictStr] = Field(default=None, description="Release's notes or description like what features this release has.", alias="releaseNotes")
    release_series: Optional[StrictStr] = Field(default=None, description="Release's version in series", alias="releaseSeries")
    release_type: Optional[StrictStr] = Field(default='Feature', description="Release's type e.g, GA, Feature.", alias="releaseType")
    release_version: Optional[StrictStr] = Field(default=None, description="Release's version", alias="releaseVersion")
    stage: Optional[StrictStr] = Field(default=None, description="Specifies the stage of a release.")
    status: Optional[StrictStr] = Field(default=None, description="Specifies the status of a release.")
    __properties: ClassVar[List[str]] = ["downloadUrls", "fromVersions", "releaseNotes", "releaseSeries", "releaseType", "releaseVersion", "stage", "status"]

    @field_validator('release_type')
    def release_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GA', 'Feature']):
            raise ValueError("must be one of enum values ('GA', 'Feature')")
        return value

    @field_validator('stage')
    def stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ControlledRollout', 'GA']):
            raise ValueError("must be one of enum values ('ControlledRollout', 'GA')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Stopped', 'Active']):
            raise ValueError("must be one of enum values ('Stopped', 'Active')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Release from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in download_urls (list)
        _items = []
        if self.download_urls:
            for _item_download_urls in self.download_urls:
                if _item_download_urls:
                    _items.append(_item_download_urls.to_dict())
            _dict['downloadUrls'] = _items
        # set to None if release_notes (nullable) is None
        # and model_fields_set contains the field
        if self.release_notes is None and "release_notes" in self.model_fields_set:
            _dict['releaseNotes'] = None

        # set to None if stage (nullable) is None
        # and model_fields_set contains the field
        if self.stage is None and "stage" in self.model_fields_set:
            _dict['stage'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Release from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "downloadUrls": [ReleaseDownloadUrls.from_dict(_item) for _item in obj["downloadUrls"]] if obj.get("downloadUrls") is not None else None,
            "fromVersions": obj.get("fromVersions"),
            "releaseNotes": obj.get("releaseNotes"),
            "releaseSeries": obj.get("releaseSeries"),
            "releaseType": obj.get("releaseType") if obj.get("releaseType") is not None else 'Feature',
            "releaseVersion": obj.get("releaseVersion"),
            "stage": obj.get("stage"),
            "status": obj.get("status")
        })
        return _obj


