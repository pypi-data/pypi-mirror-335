# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self

class MongoDBSourceRegistrationParams(BaseModel):
    """
    Specifies parameters to register MongoDB source.
    """ # noqa: E501
    auth_type: Optional[StrictStr] = Field(description="MongoDB authentication type.", alias="authType")
    authenticating_database: Optional[StrictStr] = Field(default=None, description="Authenticating Database for this cluster. Should be set if 'authType' is 'LDAP' or 'SCRAM'.", alias="authenticatingDatabase")
    hosts: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="Specify the MongoS hosts for a sharded cluster and the MongoD hosts for a non-sharded cluster. You can specify a sub-set of the hosts.")
    is_ssl_required: StrictBool = Field(description="Set to true if connection to MongoDB has to be over SSL.", alias="isSslRequired")
    password: Optional[StrictStr] = Field(default=None, description="Specifies the password for the MongoDB cluster. Should be set if 'authType' is 'LDAP' or 'SCRAM'.")
    principal: Optional[StrictStr] = Field(default=None, description="Specifies the principal name of the MongoDB cluster. Should be set if 'authType' is 'KERBEROS'.")
    secondary_node_tag: Optional[StrictStr] = Field(default=None, description="MongoDB Secondary node tag. Required only if 'useSecondaryForBackup' is true.The system will use this to identify the secondary nodes for reading backup data.", alias="secondaryNodeTag")
    use_secondary_for_backup: StrictBool = Field(description="Set this to true if you want the system to peform backups from secondary nodes.", alias="useSecondaryForBackup")
    username: Optional[StrictStr] = Field(default=None, description="Specifies the username of the MongoDB cluster. Should be set if 'authType' is 'LDAP' or 'SCRAM'.")
    __properties: ClassVar[List[str]] = ["authType", "authenticatingDatabase", "hosts", "isSslRequired", "password", "principal", "secondaryNodeTag", "useSecondaryForBackup", "username"]

    @field_validator('auth_type')
    def auth_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SCRAM', 'LDAP', 'NONE', 'KERBEROS']):
            raise ValueError("must be one of enum values ('SCRAM', 'LDAP', 'NONE', 'KERBEROS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MongoDBSourceRegistrationParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if auth_type (nullable) is None
        # and model_fields_set contains the field
        if self.auth_type is None and "auth_type" in self.model_fields_set:
            _dict['authType'] = None

        # set to None if authenticating_database (nullable) is None
        # and model_fields_set contains the field
        if self.authenticating_database is None and "authenticating_database" in self.model_fields_set:
            _dict['authenticatingDatabase'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if principal (nullable) is None
        # and model_fields_set contains the field
        if self.principal is None and "principal" in self.model_fields_set:
            _dict['principal'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MongoDBSourceRegistrationParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authType": obj.get("authType"),
            "authenticatingDatabase": obj.get("authenticatingDatabase"),
            "hosts": obj.get("hosts"),
            "isSslRequired": obj.get("isSslRequired"),
            "password": obj.get("password"),
            "principal": obj.get("principal"),
            "secondaryNodeTag": obj.get("secondaryNodeTag"),
            "useSecondaryForBackup": obj.get("useSecondaryForBackup"),
            "username": obj.get("username")
        })
        return _obj


