# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cohesity_sdk.helios.models.helios_backup_policy import HeliosBackupPolicy
from cohesity_sdk.helios.models.helios_blackout_window import HeliosBlackoutWindow
from cohesity_sdk.helios.models.helios_extended_retention_policy import HeliosExtendedRetentionPolicy
from cohesity_sdk.helios.models.helios_retry_options import HeliosRetryOptions
from cohesity_sdk.helios.models.helios_targets_configuration import HeliosTargetsConfiguration
from typing import Set
from typing_extensions import Self

class HeliosPolicyResponse(BaseModel):
    """
    Specifies the details about the Policy.
    """ # noqa: E501
    backup_policy: Optional[HeliosBackupPolicy] = Field(default=None, alias="backupPolicy")
    blackout_window: Optional[List[HeliosBlackoutWindow]] = Field(default=None, description="List of Blackout Windows. If specified, this field defines blackout periods when new Group Runs are not started. If a Group Run has been scheduled but not yet executed and the blackout period starts, the behavior depends on the policy field AbortInBlackoutPeriod.", alias="blackoutWindow")
    cluster_identifier: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Specifies the cluster to which this policy belongs. This required is only for type OnPremPolicy. The format is clusterId:clusterIncarnationId.", alias="clusterIdentifier")
    data_lock: Optional[StrictStr] = Field(default=None, description="This field is now deprecated. Please use the DataLockConfig in the backup retention.", alias="dataLock")
    description: Optional[StrictStr] = Field(default=None, description="Specifies the description of the Protection Policy.")
    extended_retention: Optional[List[HeliosExtendedRetentionPolicy]] = Field(default=None, description="Specifies additional retention policies that should be applied to the backup snapshots. A backup snapshot will be retained up to a time that is the maximum of all retention policies that are applicable to it.", alias="extendedRetention")
    name: Optional[StrictStr] = Field(description="Specifies the name of the Protection Policy.")
    remote_target_policy: Optional[HeliosTargetsConfiguration] = Field(default=None, alias="remoteTargetPolicy")
    retry_options: Optional[HeliosRetryOptions] = Field(default=None, alias="retryOptions")
    tenant_ids: Optional[List[Optional[StrictStr]]] = Field(default=None, description="Specifies the tenants which have access to this object.", alias="tenantIds")
    type: Optional[StrictStr] = Field(description="Specifies the type of the Protection Policy to be created on Helios.")
    id: Optional[StrictStr] = Field(default=None, description="Specifies a unique policy id assigned by the Helios.")
    num_linked_policies: Optional[StrictInt] = Field(default=None, description="In case of global policy response, specifies the number of policies linked to this global policy on the cluster.", alias="numLinkedPolicies")
    num_object_protections: Optional[StrictInt] = Field(default=None, description="Specifies the number of object protections using the protection policy.", alias="numObjectProtections")
    __properties: ClassVar[List[str]] = ["backupPolicy", "blackoutWindow", "clusterIdentifier", "dataLock", "description", "extendedRetention", "name", "remoteTargetPolicy", "retryOptions", "tenantIds", "type", "id", "numLinkedPolicies", "numObjectProtections"]

    @field_validator('cluster_identifier')
    def cluster_identifier_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([0-9]+:[0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^([0-9]+:[0-9]+)$/")
        return value

    @field_validator('data_lock')
    def data_lock_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Compliance', 'Administrative']):
            raise ValueError("must be one of enum values ('Compliance', 'Administrative')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GlobalPolicy', 'DMaaSPolicy', 'OnPremPolicy']):
            raise ValueError("must be one of enum values ('GlobalPolicy', 'DMaaSPolicy', 'OnPremPolicy')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HeliosPolicyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "tenant_ids",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of backup_policy
        if self.backup_policy:
            _dict['backupPolicy'] = self.backup_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in blackout_window (list)
        _items = []
        if self.blackout_window:
            for _item_blackout_window in self.blackout_window:
                if _item_blackout_window:
                    _items.append(_item_blackout_window.to_dict())
            _dict['blackoutWindow'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extended_retention (list)
        _items = []
        if self.extended_retention:
            for _item_extended_retention in self.extended_retention:
                if _item_extended_retention:
                    _items.append(_item_extended_retention.to_dict())
            _dict['extendedRetention'] = _items
        # override the default output from pydantic by calling `to_dict()` of remote_target_policy
        if self.remote_target_policy:
            _dict['remoteTargetPolicy'] = self.remote_target_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retry_options
        if self.retry_options:
            _dict['retryOptions'] = self.retry_options.to_dict()
        # set to None if blackout_window (nullable) is None
        # and model_fields_set contains the field
        if self.blackout_window is None and "blackout_window" in self.model_fields_set:
            _dict['blackoutWindow'] = None

        # set to None if cluster_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_identifier is None and "cluster_identifier" in self.model_fields_set:
            _dict['clusterIdentifier'] = None

        # set to None if data_lock (nullable) is None
        # and model_fields_set contains the field
        if self.data_lock is None and "data_lock" in self.model_fields_set:
            _dict['dataLock'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if extended_retention (nullable) is None
        # and model_fields_set contains the field
        if self.extended_retention is None and "extended_retention" in self.model_fields_set:
            _dict['extendedRetention'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if num_linked_policies (nullable) is None
        # and model_fields_set contains the field
        if self.num_linked_policies is None and "num_linked_policies" in self.model_fields_set:
            _dict['numLinkedPolicies'] = None

        # set to None if num_object_protections (nullable) is None
        # and model_fields_set contains the field
        if self.num_object_protections is None and "num_object_protections" in self.model_fields_set:
            _dict['numObjectProtections'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HeliosPolicyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupPolicy": HeliosBackupPolicy.from_dict(obj["backupPolicy"]) if obj.get("backupPolicy") is not None else None,
            "blackoutWindow": [HeliosBlackoutWindow.from_dict(_item) for _item in obj["blackoutWindow"]] if obj.get("blackoutWindow") is not None else None,
            "clusterIdentifier": obj.get("clusterIdentifier"),
            "dataLock": obj.get("dataLock"),
            "description": obj.get("description"),
            "extendedRetention": [HeliosExtendedRetentionPolicy.from_dict(_item) for _item in obj["extendedRetention"]] if obj.get("extendedRetention") is not None else None,
            "name": obj.get("name"),
            "remoteTargetPolicy": HeliosTargetsConfiguration.from_dict(obj["remoteTargetPolicy"]) if obj.get("remoteTargetPolicy") is not None else None,
            "retryOptions": HeliosRetryOptions.from_dict(obj["retryOptions"]) if obj.get("retryOptions") is not None else None,
            "tenantIds": obj.get("tenantIds"),
            "type": obj.get("type"),
            "id": obj.get("id"),
            "numLinkedPolicies": obj.get("numLinkedPolicies"),
            "numObjectProtections": obj.get("numObjectProtections")
        })
        return _obj


