# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.common_recover_object_snapshot_params import CommonRecoverObjectSnapshotParams
from cohesity_sdk.helios.models.kubernetes_namespace_recovery_target_config import KubernetesNamespaceRecoveryTargetConfig
from cohesity_sdk.helios.models.kubernetes_pvc_info import KubernetesPvcInfo
from cohesity_sdk.helios.models.recover_protection_group_run_params import RecoverProtectionGroupRunParams
from cohesity_sdk.helios.models.recovered_or_cloned_vms_rename_config import RecoveredOrClonedVmsRenameConfig
from typing import Set
from typing_extensions import Self

class KubernetesTargetParamsForRecoverKubernetesNamespace(BaseModel):
    """
    Specifies the parameters for recovering a Kubernetes namespace to a Kubernetes source.
    """ # noqa: E501
    excluded_pvcs: Optional[List[Optional[KubernetesPvcInfo]]] = Field(default=None, description="Specifies the list of pvc to be excluded from recovery.", alias="excludedPvcs")
    objects: Optional[List[CommonRecoverObjectSnapshotParams]] = Field(default=None, description="Specifies the objects to be recovered.")
    recover_protection_group_runs_params: Optional[List[RecoverProtectionGroupRunParams]] = Field(default=None, description="Specifies the Protection Group Runs params to recover. All the VM's that are successfully backed up by specified Runs will be recovered. This can be specified along with individual snapshots of VMs. User has to make sure that specified Object snapshots and Protection Group Runs should not have any intersection. For example, user cannot specify multiple Runs which has same Object or an Object snapshot and a Run which has same Object's snapshot.", alias="recoverProtectionGroupRunsParams")
    recovery_target_config: Optional[KubernetesNamespaceRecoveryTargetConfig] = Field(description="Specifies the recovery target configuration of the Namespace recovery.", alias="recoveryTargetConfig")
    rename_recovered_namespaces_params: Optional[RecoveredOrClonedVmsRenameConfig] = Field(default=None, description="Specifies params to rename the Namespaces that are recovered. If not specified, the original names of the Namespaces are preserved. If a name collision occurs then the Namespace being recovered will overwrite the Namespace already present on the source.", alias="renameRecoveredNamespacesParams")
    __properties: ClassVar[List[str]] = ["excludedPvcs", "objects", "recoverProtectionGroupRunsParams", "recoveryTargetConfig", "renameRecoveredNamespacesParams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KubernetesTargetParamsForRecoverKubernetesNamespace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in excluded_pvcs (list)
        _items = []
        if self.excluded_pvcs:
            for _item_excluded_pvcs in self.excluded_pvcs:
                if _item_excluded_pvcs:
                    _items.append(_item_excluded_pvcs.to_dict())
            _dict['excludedPvcs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in objects (list)
        _items = []
        if self.objects:
            for _item_objects in self.objects:
                if _item_objects:
                    _items.append(_item_objects.to_dict())
            _dict['objects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recover_protection_group_runs_params (list)
        _items = []
        if self.recover_protection_group_runs_params:
            for _item_recover_protection_group_runs_params in self.recover_protection_group_runs_params:
                if _item_recover_protection_group_runs_params:
                    _items.append(_item_recover_protection_group_runs_params.to_dict())
            _dict['recoverProtectionGroupRunsParams'] = _items
        # override the default output from pydantic by calling `to_dict()` of recovery_target_config
        if self.recovery_target_config:
            _dict['recoveryTargetConfig'] = self.recovery_target_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rename_recovered_namespaces_params
        if self.rename_recovered_namespaces_params:
            _dict['renameRecoveredNamespacesParams'] = self.rename_recovered_namespaces_params.to_dict()
        # set to None if excluded_pvcs (nullable) is None
        # and model_fields_set contains the field
        if self.excluded_pvcs is None and "excluded_pvcs" in self.model_fields_set:
            _dict['excludedPvcs'] = None

        # set to None if objects (nullable) is None
        # and model_fields_set contains the field
        if self.objects is None and "objects" in self.model_fields_set:
            _dict['objects'] = None

        # set to None if recover_protection_group_runs_params (nullable) is None
        # and model_fields_set contains the field
        if self.recover_protection_group_runs_params is None and "recover_protection_group_runs_params" in self.model_fields_set:
            _dict['recoverProtectionGroupRunsParams'] = None

        # set to None if recovery_target_config (nullable) is None
        # and model_fields_set contains the field
        if self.recovery_target_config is None and "recovery_target_config" in self.model_fields_set:
            _dict['recoveryTargetConfig'] = None

        # set to None if rename_recovered_namespaces_params (nullable) is None
        # and model_fields_set contains the field
        if self.rename_recovered_namespaces_params is None and "rename_recovered_namespaces_params" in self.model_fields_set:
            _dict['renameRecoveredNamespacesParams'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KubernetesTargetParamsForRecoverKubernetesNamespace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "excludedPvcs": [KubernetesPvcInfo.from_dict(_item) for _item in obj["excludedPvcs"]] if obj.get("excludedPvcs") is not None else None,
            "objects": [CommonRecoverObjectSnapshotParams.from_dict(_item) for _item in obj["objects"]] if obj.get("objects") is not None else None,
            "recoverProtectionGroupRunsParams": [RecoverProtectionGroupRunParams.from_dict(_item) for _item in obj["recoverProtectionGroupRunsParams"]] if obj.get("recoverProtectionGroupRunsParams") is not None else None,
            "recoveryTargetConfig": KubernetesNamespaceRecoveryTargetConfig.from_dict(obj["recoveryTargetConfig"]) if obj.get("recoveryTargetConfig") is not None else None,
            "renameRecoveredNamespacesParams": RecoveredOrClonedVmsRenameConfig.from_dict(obj["renameRecoveredNamespacesParams"]) if obj.get("renameRecoveredNamespacesParams") is not None else None
        })
        return _obj


