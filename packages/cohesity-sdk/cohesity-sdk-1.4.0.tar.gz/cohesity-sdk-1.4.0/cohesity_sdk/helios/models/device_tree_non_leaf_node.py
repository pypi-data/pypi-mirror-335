# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class DeviceTreeNonLeafNode(BaseModel):
    """
    Specifies the parameters of a non leaf node in device tree.
    """ # noqa: E501
    children_nodes: Optional[List[DeviceTreeNode]] = Field(default=None, description="Specifies a list of children nodes.", alias="childrenNodes")
    device_id: Optional[StrictInt] = Field(default=None, description="Specifies the id of device.", alias="deviceId")
    device_length: Optional[StrictInt] = Field(default=None, description="Specifies the length of device.", alias="deviceLength")
    type: Optional[StrictStr] = Field(default=None, description="Specifies the children nodes combine type.")
    __properties: ClassVar[List[str]] = ["childrenNodes", "deviceId", "deviceLength", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Linear', 'Stripe', 'Mirror', 'Raid5', 'Raid6', 'Zero', 'Thin', 'ThinPool', 'Snapshot', 'Cache', 'CachePool']):
            raise ValueError("must be one of enum values ('Linear', 'Stripe', 'Mirror', 'Raid5', 'Raid6', 'Zero', 'Thin', 'ThinPool', 'Snapshot', 'Cache', 'CachePool')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceTreeNonLeafNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children_nodes (list)
        _items = []
        if self.children_nodes:
            for _item_children_nodes in self.children_nodes:
                if _item_children_nodes:
                    _items.append(_item_children_nodes.to_dict())
            _dict['childrenNodes'] = _items
        # set to None if children_nodes (nullable) is None
        # and model_fields_set contains the field
        if self.children_nodes is None and "children_nodes" in self.model_fields_set:
            _dict['childrenNodes'] = None

        # set to None if device_id (nullable) is None
        # and model_fields_set contains the field
        if self.device_id is None and "device_id" in self.model_fields_set:
            _dict['deviceId'] = None

        # set to None if device_length (nullable) is None
        # and model_fields_set contains the field
        if self.device_length is None and "device_length" in self.model_fields_set:
            _dict['deviceLength'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceTreeNonLeafNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "childrenNodes": [DeviceTreeNode.from_dict(_item) for _item in obj["childrenNodes"]] if obj.get("childrenNodes") is not None else None,
            "deviceId": obj.get("deviceId"),
            "deviceLength": obj.get("deviceLength"),
            "type": obj.get("type")
        })
        return _obj

from cohesity_sdk.helios.models.device_tree_node import DeviceTreeNode # noqa: E402
# TODO: Rewrite to not use raise_errors
DeviceTreeNonLeafNode.model_rebuild(raise_errors=False)