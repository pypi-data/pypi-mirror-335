# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.helios_audit_log_role_setting import HeliosAuditLogRoleSetting
from cohesity_sdk.helios.models.helios_audit_log_user_setting import HeliosAuditLogUserSetting
from typing import Set
from typing_extensions import Self

class HeliosAuditLogSettings(BaseModel):
    """
    Description of a Helios audit log setting.
    """ # noqa: E501
    read_logging: Optional[StrictBool] = Field(default=False, description="Toggle global level verbose logging for read events.", alias="readLogging")
    retention_period_days: Optional[StrictInt] = Field(default=None, description="Helios Log retention period in days.", alias="retentionPeriodDays")
    role_settings: Optional[List[HeliosAuditLogRoleSetting]] = Field(default=None, description="List of role level Helios audit log settings.", alias="roleSettings")
    user_settings: Optional[List[HeliosAuditLogUserSetting]] = Field(default=None, description="List of users level Helios audit log settings.", alias="userSettings")
    __properties: ClassVar[List[str]] = ["readLogging", "retentionPeriodDays", "roleSettings", "userSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HeliosAuditLogSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in role_settings (list)
        _items = []
        if self.role_settings:
            for _item_role_settings in self.role_settings:
                if _item_role_settings:
                    _items.append(_item_role_settings.to_dict())
            _dict['roleSettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_settings (list)
        _items = []
        if self.user_settings:
            for _item_user_settings in self.user_settings:
                if _item_user_settings:
                    _items.append(_item_user_settings.to_dict())
            _dict['userSettings'] = _items
        # set to None if read_logging (nullable) is None
        # and model_fields_set contains the field
        if self.read_logging is None and "read_logging" in self.model_fields_set:
            _dict['readLogging'] = None

        # set to None if retention_period_days (nullable) is None
        # and model_fields_set contains the field
        if self.retention_period_days is None and "retention_period_days" in self.model_fields_set:
            _dict['retentionPeriodDays'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HeliosAuditLogSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "readLogging": obj.get("readLogging") if obj.get("readLogging") is not None else False,
            "retentionPeriodDays": obj.get("retentionPeriodDays"),
            "roleSettings": [HeliosAuditLogRoleSetting.from_dict(_item) for _item in obj["roleSettings"]] if obj.get("roleSettings") is not None else None,
            "userSettings": [HeliosAuditLogUserSetting.from_dict(_item) for _item in obj["userSettings"]] if obj.get("userSettings") is not None else None
        })
        return _obj


