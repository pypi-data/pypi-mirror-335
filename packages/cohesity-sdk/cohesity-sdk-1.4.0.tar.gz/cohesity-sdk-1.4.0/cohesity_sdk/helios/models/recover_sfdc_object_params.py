# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class RecoverSfdcObjectParams(BaseModel):
    """
    Specifies the parameters to recover Salesforce objects.
    """ # noqa: E501
    child_object_ids: Optional[List[StrictStr]] = Field(default=None, description="Specifies a list of child object IDs to include in the recovery. Specified object IDs will also be recovered as part of this recovery.", alias="childObjectIds")
    filter_query: Optional[StrictStr] = Field(default=None, description="Specifies a Query to filter the records. This filtered list of records will be used for recovery.", alias="filterQuery")
    include_deleted_objects: Optional[StrictBool] = Field(description="Specifies whether to include deleted Objects in the recovery.", alias="includeDeletedObjects")
    mutation_types: Optional[List[StrictStr]] = Field(default=None, description="Specifies a list of mutuation types for an object. Mutation type is required in conjunction with 'filterQuery'.", alias="mutationTypes")
    object_name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the object to be restored.", alias="objectName")
    parent_object_ids: Optional[List[StrictStr]] = Field(default=None, description="Specifies a list of parent object IDs to include in recovery. Specified parent objects will also be recovered as part of this recovery.", alias="parentObjectIds")
    records: Optional[List[StrictStr]] = Field(default=None, description="Specifies a list of records IDs to be recovered for the specified Object.")
    __properties: ClassVar[List[str]] = ["childObjectIds", "filterQuery", "includeDeletedObjects", "mutationTypes", "objectName", "parentObjectIds", "records"]

    @field_validator('mutation_types')
    def mutation_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['All', 'Added', 'Removed', 'Changed']):
                raise ValueError("each list item must be one of ('All', 'Added', 'Removed', 'Changed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecoverSfdcObjectParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if filter_query (nullable) is None
        # and model_fields_set contains the field
        if self.filter_query is None and "filter_query" in self.model_fields_set:
            _dict['filterQuery'] = None

        # set to None if include_deleted_objects (nullable) is None
        # and model_fields_set contains the field
        if self.include_deleted_objects is None and "include_deleted_objects" in self.model_fields_set:
            _dict['includeDeletedObjects'] = None

        # set to None if mutation_types (nullable) is None
        # and model_fields_set contains the field
        if self.mutation_types is None and "mutation_types" in self.model_fields_set:
            _dict['mutationTypes'] = None

        # set to None if object_name (nullable) is None
        # and model_fields_set contains the field
        if self.object_name is None and "object_name" in self.model_fields_set:
            _dict['objectName'] = None

        # set to None if parent_object_ids (nullable) is None
        # and model_fields_set contains the field
        if self.parent_object_ids is None and "parent_object_ids" in self.model_fields_set:
            _dict['parentObjectIds'] = None

        # set to None if records (nullable) is None
        # and model_fields_set contains the field
        if self.records is None and "records" in self.model_fields_set:
            _dict['records'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecoverSfdcObjectParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "childObjectIds": obj.get("childObjectIds"),
            "filterQuery": obj.get("filterQuery"),
            "includeDeletedObjects": obj.get("includeDeletedObjects"),
            "mutationTypes": obj.get("mutationTypes"),
            "objectName": obj.get("objectName"),
            "parentObjectIds": obj.get("parentObjectIds"),
            "records": obj.get("records")
        })
        return _obj


