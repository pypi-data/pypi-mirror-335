# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self

class Role(BaseModel):
    """
    Specifies a Role.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(description="Specifies the Role name.")
    description: Optional[StrictStr] = Field(default=None, description="Specifies the description message for the Role.")
    privileges: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = Field(description="Specifies the list of Privileges of the Role.")
    created_timestamp_msecs: Optional[StrictInt] = Field(default=None, description="Specifies the timestamp when the Role is created in milliseconds.", alias="createdTimestampMsecs")
    is_user_created_role: Optional[StrictBool] = Field(default=None, description="Specifies if the Role is created by user.", alias="isUserCreatedRole")
    label: Optional[StrictStr] = Field(default=None, description="Specifies the Role label.")
    last_updated_timestamp_msecs: Optional[StrictInt] = Field(default=None, description="Specifies the timestamp when the Role is last updated in milliseconds.", alias="lastUpdatedTimestampMsecs")
    tenant_ids: Optional[List[StrictStr]] = Field(default=None, description="Specifies the list of tenant ids who have access to this Role.", alias="tenantIds")
    __properties: ClassVar[List[str]] = ["name", "description", "privileges", "createdTimestampMsecs", "isUserCreatedRole", "label", "lastUpdatedTimestampMsecs", "tenantIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Role from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if privileges (nullable) is None
        # and model_fields_set contains the field
        if self.privileges is None and "privileges" in self.model_fields_set:
            _dict['privileges'] = None

        # set to None if created_timestamp_msecs (nullable) is None
        # and model_fields_set contains the field
        if self.created_timestamp_msecs is None and "created_timestamp_msecs" in self.model_fields_set:
            _dict['createdTimestampMsecs'] = None

        # set to None if is_user_created_role (nullable) is None
        # and model_fields_set contains the field
        if self.is_user_created_role is None and "is_user_created_role" in self.model_fields_set:
            _dict['isUserCreatedRole'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if last_updated_timestamp_msecs (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated_timestamp_msecs is None and "last_updated_timestamp_msecs" in self.model_fields_set:
            _dict['lastUpdatedTimestampMsecs'] = None

        # set to None if tenant_ids (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_ids is None and "tenant_ids" in self.model_fields_set:
            _dict['tenantIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Role from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "privileges": obj.get("privileges"),
            "createdTimestampMsecs": obj.get("createdTimestampMsecs"),
            "isUserCreatedRole": obj.get("isUserCreatedRole"),
            "label": obj.get("label"),
            "lastUpdatedTimestampMsecs": obj.get("lastUpdatedTimestampMsecs"),
            "tenantIds": obj.get("tenantIds")
        })
        return _obj


