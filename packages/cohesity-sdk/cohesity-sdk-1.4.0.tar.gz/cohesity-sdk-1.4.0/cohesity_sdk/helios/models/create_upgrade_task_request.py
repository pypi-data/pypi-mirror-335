# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class CreateUpgradeTaskRequest(BaseModel):
    """
    Specifies the params to create a schedule based agent upgrade task.
    """ # noqa: E501
    agent_ids: Optional[List[StrictInt]] = Field(default=None, description="Specifies agent IDs to be upgraded in the task.", alias="agentIDs")
    description: Optional[StrictStr] = Field(default=None, description="Specifies the description of the task.")
    name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the task.")
    retry_task_id: Optional[StrictInt] = Field(default=None, description="Specifies the task that needs to be retried.", alias="retryTaskId")
    schedule_end_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the time before which the upgrade task should start execution as a Unix epoch Timestamp (in microseconds). If this is not specified the task will start anytime after scheduleTimeUsecs.", alias="scheduleEndTimeUsecs")
    schedule_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the start time of the task specified by the user as a Unix epoch Timestamp (in microseconds). If no schedule is specified, the agents will be upgraded immediately.", alias="scheduleTimeUsecs")
    __properties: ClassVar[List[str]] = ["agentIDs", "description", "name", "retryTaskId", "scheduleEndTimeUsecs", "scheduleTimeUsecs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateUpgradeTaskRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if agent_ids (nullable) is None
        # and model_fields_set contains the field
        if self.agent_ids is None and "agent_ids" in self.model_fields_set:
            _dict['agentIDs'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if retry_task_id (nullable) is None
        # and model_fields_set contains the field
        if self.retry_task_id is None and "retry_task_id" in self.model_fields_set:
            _dict['retryTaskId'] = None

        # set to None if schedule_end_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_end_time_usecs is None and "schedule_end_time_usecs" in self.model_fields_set:
            _dict['scheduleEndTimeUsecs'] = None

        # set to None if schedule_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_time_usecs is None and "schedule_time_usecs" in self.model_fields_set:
            _dict['scheduleTimeUsecs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateUpgradeTaskRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentIDs": obj.get("agentIDs"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "retryTaskId": obj.get("retryTaskId"),
            "scheduleEndTimeUsecs": obj.get("scheduleEndTimeUsecs"),
            "scheduleTimeUsecs": obj.get("scheduleTimeUsecs")
        })
        return _obj


