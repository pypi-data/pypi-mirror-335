# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.transfer_time_config_params_list import TransferTimeConfigParamsList
from typing import Set
from typing_extensions import Self

class VaultTransferTimeConfig(BaseModel):
    """
    Parameters for FortKnox vault transfer time configuration.
    """ # noqa: E501
    global_vault_id: Optional[StrictStr] = Field(description="Global vault id of a FortKnox vault.", alias="globalVaultId")
    transfer_time_config_params: Optional[TransferTimeConfigParamsList] = Field(default=None, alias="transferTimeConfigParams")
    __properties: ClassVar[List[str]] = ["globalVaultId", "transferTimeConfigParams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VaultTransferTimeConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transfer_time_config_params
        if self.transfer_time_config_params:
            _dict['transferTimeConfigParams'] = self.transfer_time_config_params.to_dict()
        # set to None if global_vault_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_vault_id is None and "global_vault_id" in self.model_fields_set:
            _dict['globalVaultId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VaultTransferTimeConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "globalVaultId": obj.get("globalVaultId"),
            "transferTimeConfigParams": TransferTimeConfigParamsList.from_dict(obj["transferTimeConfigParams"]) if obj.get("transferTimeConfigParams") is not None else None
        })
        return _obj


