# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.node_unit_progress import NodeUnitProgress
from typing import Set
from typing_extensions import Self

class ServiceUnitProgress(BaseModel):
    """
    Specifies the progress of one patch operation for one service at one patch level.
    """ # noqa: E501
    in_progress: Optional[StrictBool] = Field(default=None, description="Specifies whether a operation is in progress for the service.", alias="inProgress")
    nodes_progress: Optional[List[NodeUnitProgress]] = Field(default=None, description="Specifies the details of patch operation for each service at each patch level.", alias="nodesProgress")
    percentage: Optional[StrictInt] = Field(default=None, description="Specifies the percentage of completion of the patch unit operation.")
    service: Optional[StrictStr] = Field(default=None, description="Specifies the service which is patched.")
    service_message: Optional[StrictStr] = Field(default=None, description="Specifies a message about the patch unit operation.", alias="serviceMessage")
    time_remaining_seconds: Optional[StrictInt] = Field(default=None, description="Specifies the time remaining to complete the patch operation for the service.", alias="timeRemainingSeconds")
    time_taken_seconds: Optional[StrictInt] = Field(default=None, description="Specifies the time taken so far in this patch unit operation for the service.", alias="timeTakenSeconds")
    __properties: ClassVar[List[str]] = ["inProgress", "nodesProgress", "percentage", "service", "serviceMessage", "timeRemainingSeconds", "timeTakenSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceUnitProgress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in nodes_progress (list)
        _items = []
        if self.nodes_progress:
            for _item_nodes_progress in self.nodes_progress:
                if _item_nodes_progress:
                    _items.append(_item_nodes_progress.to_dict())
            _dict['nodesProgress'] = _items
        # set to None if in_progress (nullable) is None
        # and model_fields_set contains the field
        if self.in_progress is None and "in_progress" in self.model_fields_set:
            _dict['inProgress'] = None

        # set to None if nodes_progress (nullable) is None
        # and model_fields_set contains the field
        if self.nodes_progress is None and "nodes_progress" in self.model_fields_set:
            _dict['nodesProgress'] = None

        # set to None if percentage (nullable) is None
        # and model_fields_set contains the field
        if self.percentage is None and "percentage" in self.model_fields_set:
            _dict['percentage'] = None

        # set to None if service (nullable) is None
        # and model_fields_set contains the field
        if self.service is None and "service" in self.model_fields_set:
            _dict['service'] = None

        # set to None if service_message (nullable) is None
        # and model_fields_set contains the field
        if self.service_message is None and "service_message" in self.model_fields_set:
            _dict['serviceMessage'] = None

        # set to None if time_remaining_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.time_remaining_seconds is None and "time_remaining_seconds" in self.model_fields_set:
            _dict['timeRemainingSeconds'] = None

        # set to None if time_taken_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.time_taken_seconds is None and "time_taken_seconds" in self.model_fields_set:
            _dict['timeTakenSeconds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceUnitProgress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inProgress": obj.get("inProgress"),
            "nodesProgress": [NodeUnitProgress.from_dict(_item) for _item in obj["nodesProgress"]] if obj.get("nodesProgress") is not None else None,
            "percentage": obj.get("percentage"),
            "service": obj.get("service"),
            "serviceMessage": obj.get("serviceMessage"),
            "timeRemainingSeconds": obj.get("timeRemainingSeconds"),
            "timeTakenSeconds": obj.get("timeTakenSeconds")
        })
        return _obj


