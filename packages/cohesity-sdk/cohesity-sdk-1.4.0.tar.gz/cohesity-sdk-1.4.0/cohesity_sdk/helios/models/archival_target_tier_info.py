# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.aws_tiers import AWSTiers
from cohesity_sdk.helios.models.azure_tiers import AzureTiers
from cohesity_sdk.helios.models.google_tiers import GoogleTiers
from cohesity_sdk.helios.models.oracle_tiers import OracleTiers
from typing import Set
from typing_extensions import Self

class ArchivalTargetTierInfo(BaseModel):
    """
    Specifies the tier info for archival.
    """ # noqa: E501
    aws_tiering: Optional[AWSTiers] = Field(default=None, alias="awsTiering")
    azure_tiering: Optional[AzureTiers] = Field(default=None, alias="azureTiering")
    cloud_platform: Optional[StrictStr] = Field(description="Specifies the cloud platform to enable tiering.", alias="cloudPlatform")
    google_tiering: Optional[GoogleTiers] = Field(default=None, alias="googleTiering")
    oracle_tiering: Optional[OracleTiers] = Field(default=None, alias="oracleTiering")
    current_tier_type: Optional[StrictStr] = Field(default=None, description="Specifies the type of the current tier where the snapshot resides. This will be specified if the run is a CAD run.", alias="currentTierType")
    __properties: ClassVar[List[str]] = ["awsTiering", "azureTiering", "cloudPlatform", "googleTiering", "oracleTiering", "currentTierType"]

    @field_validator('cloud_platform')
    def cloud_platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AWS', 'Azure', 'Oracle', 'Google']):
            raise ValueError("must be one of enum values ('AWS', 'Azure', 'Oracle', 'Google')")
        return value

    @field_validator('current_tier_type')
    def current_tier_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kAmazonS3Standard', 'kAmazonS3StandardIA', 'kAmazonS3OneZoneIA', 'kAmazonS3IntelligentTiering', 'kAmazonS3Glacier', 'kAmazonS3GlacierDeepArchive', 'kAzureTierHot', 'kAzureTierCool', 'kAzureTierArchive', 'kGoogleStandard', 'kGoogleRegional', 'kGoogleMultiRegional', 'kGoogleNearline', 'kGoogleColdline', 'kOracleTierStandard', 'kOracleTierArchive']):
            raise ValueError("must be one of enum values ('kAmazonS3Standard', 'kAmazonS3StandardIA', 'kAmazonS3OneZoneIA', 'kAmazonS3IntelligentTiering', 'kAmazonS3Glacier', 'kAmazonS3GlacierDeepArchive', 'kAzureTierHot', 'kAzureTierCool', 'kAzureTierArchive', 'kGoogleStandard', 'kGoogleRegional', 'kGoogleMultiRegional', 'kGoogleNearline', 'kGoogleColdline', 'kOracleTierStandard', 'kOracleTierArchive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArchivalTargetTierInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws_tiering
        if self.aws_tiering:
            _dict['awsTiering'] = self.aws_tiering.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_tiering
        if self.azure_tiering:
            _dict['azureTiering'] = self.azure_tiering.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_tiering
        if self.google_tiering:
            _dict['googleTiering'] = self.google_tiering.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oracle_tiering
        if self.oracle_tiering:
            _dict['oracleTiering'] = self.oracle_tiering.to_dict()
        # set to None if cloud_platform (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_platform is None and "cloud_platform" in self.model_fields_set:
            _dict['cloudPlatform'] = None

        # set to None if current_tier_type (nullable) is None
        # and model_fields_set contains the field
        if self.current_tier_type is None and "current_tier_type" in self.model_fields_set:
            _dict['currentTierType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArchivalTargetTierInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "awsTiering": AWSTiers.from_dict(obj["awsTiering"]) if obj.get("awsTiering") is not None else None,
            "azureTiering": AzureTiers.from_dict(obj["azureTiering"]) if obj.get("azureTiering") is not None else None,
            "cloudPlatform": obj.get("cloudPlatform"),
            "googleTiering": GoogleTiers.from_dict(obj["googleTiering"]) if obj.get("googleTiering") is not None else None,
            "oracleTiering": OracleTiers.from_dict(obj["oracleTiering"]) if obj.get("oracleTiering") is not None else None,
            "currentTierType": obj.get("currentTierType")
        })
        return _obj


