# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.time_range_usecs import TimeRangeUsecs
from cohesity_sdk.helios.models.time_window import TimeWindow
from typing import Set
from typing_extensions import Self

class Schedule(BaseModel):
    """
    Specifies a schedule for actions to be taken.
    """ # noqa: E501
    periodic_time_windows: Optional[List[TimeWindow]] = Field(default=None, description=" Specifies the time range within the days of the week.", alias="periodicTimeWindows")
    schedule_type: Optional[StrictStr] = Field(default=None, description="Specifies the type of schedule for this ScheduleProto.", alias="scheduleType")
    time_ranges: Optional[List[TimeRangeUsecs]] = Field(default=None, description=" Specifies the time ranges in usecs.", alias="timeRanges")
    timezone: Optional[StrictStr] = Field(default=None, description="Specifies the timezone of the user of this ScheduleProto. The timezones have unique names of the form 'Area/Location'.")
    __properties: ClassVar[List[str]] = ["periodicTimeWindows", "scheduleType", "timeRanges", "timezone"]

    @field_validator('schedule_type')
    def schedule_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PeriodicTimeWindows', 'CustomIntervals']):
            raise ValueError("must be one of enum values ('PeriodicTimeWindows', 'CustomIntervals')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Schedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in periodic_time_windows (list)
        _items = []
        if self.periodic_time_windows:
            for _item_periodic_time_windows in self.periodic_time_windows:
                if _item_periodic_time_windows:
                    _items.append(_item_periodic_time_windows.to_dict())
            _dict['periodicTimeWindows'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in time_ranges (list)
        _items = []
        if self.time_ranges:
            for _item_time_ranges in self.time_ranges:
                if _item_time_ranges:
                    _items.append(_item_time_ranges.to_dict())
            _dict['timeRanges'] = _items
        # set to None if schedule_type (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_type is None and "schedule_type" in self.model_fields_set:
            _dict['scheduleType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Schedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "periodicTimeWindows": [TimeWindow.from_dict(_item) for _item in obj["periodicTimeWindows"]] if obj.get("periodicTimeWindows") is not None else None,
            "scheduleType": obj.get("scheduleType"),
            "timeRanges": [TimeRangeUsecs.from_dict(_item) for _item in obj["timeRanges"]] if obj.get("timeRanges") is not None else None,
            "timezone": obj.get("timezone")
        })
        return _obj


