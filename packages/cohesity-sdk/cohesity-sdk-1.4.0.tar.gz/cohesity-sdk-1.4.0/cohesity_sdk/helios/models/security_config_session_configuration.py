# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self

class SecurityConfigSessionConfiguration(BaseModel):
    """
    Specifies configuration for user sessions.
    """ # noqa: E501
    absolute_timeout: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Specifies absolute session expiration time in seconds.", alias="absoluteTimeout")
    inactivity_timeout: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Specifies inactivity session expiration time in seconds.", alias="inactivityTimeout")
    limit_sessions: Optional[StrictBool] = Field(default=None, description="Specifies if limitations on number of active sessions is enabled or not.", alias="limitSessions")
    session_limit_per_user: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Specifies maximum number of active sessions allowed per user. This applies only when limitSessions is enabled.", alias="sessionLimitPerUser")
    session_limit_system_wide: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Specifies maximum number of active sessions allowed system wide. This applies only when limitSessions is enabled.", alias="sessionLimitSystemWide")
    __properties: ClassVar[List[str]] = ["absoluteTimeout", "inactivityTimeout", "limitSessions", "sessionLimitPerUser", "sessionLimitSystemWide"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityConfigSessionConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if absolute_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.absolute_timeout is None and "absolute_timeout" in self.model_fields_set:
            _dict['absoluteTimeout'] = None

        # set to None if inactivity_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.inactivity_timeout is None and "inactivity_timeout" in self.model_fields_set:
            _dict['inactivityTimeout'] = None

        # set to None if limit_sessions (nullable) is None
        # and model_fields_set contains the field
        if self.limit_sessions is None and "limit_sessions" in self.model_fields_set:
            _dict['limitSessions'] = None

        # set to None if session_limit_per_user (nullable) is None
        # and model_fields_set contains the field
        if self.session_limit_per_user is None and "session_limit_per_user" in self.model_fields_set:
            _dict['sessionLimitPerUser'] = None

        # set to None if session_limit_system_wide (nullable) is None
        # and model_fields_set contains the field
        if self.session_limit_system_wide is None and "session_limit_system_wide" in self.model_fields_set:
            _dict['sessionLimitSystemWide'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityConfigSessionConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "absoluteTimeout": obj.get("absoluteTimeout"),
            "inactivityTimeout": obj.get("inactivityTimeout"),
            "limitSessions": obj.get("limitSessions"),
            "sessionLimitPerUser": obj.get("sessionLimitPerUser"),
            "sessionLimitSystemWide": obj.get("sessionLimitSystemWide")
        })
        return _obj


