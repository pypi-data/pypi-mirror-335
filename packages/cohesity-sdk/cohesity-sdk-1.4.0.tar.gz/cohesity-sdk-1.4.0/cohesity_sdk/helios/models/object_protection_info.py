# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.object_protection_group_summary import ObjectProtectionGroupSummary
from cohesity_sdk.helios.models.protection_summary import ProtectionSummary
from typing import Set
from typing_extensions import Self

class ObjectProtectionInfo(BaseModel):
    """
    Specifies the object info on cluster.
    """ # noqa: E501
    cluster_id: Optional[StrictInt] = Field(default=None, description="Specifies the cluster id where this object belongs to.", alias="clusterId")
    cluster_incarnation_id: Optional[StrictInt] = Field(default=None, description="Specifies the cluster incarnation id where this object belongs to.", alias="clusterIncarnationId")
    is_deleted: Optional[StrictBool] = Field(default=None, description="Specifies whether the object is deleted. Deleted objects can't be protected but can be recovered or unprotected.", alias="isDeleted")
    last_run_status: Optional[StrictStr] = Field(default=None, description="Specifies the status of the object's last protection run.", alias="lastRunStatus")
    object_backup_configuration: Optional[List[ProtectionSummary]] = Field(default=None, description="Specifies a list of object protections.", alias="objectBackupConfiguration")
    object_id: Optional[StrictInt] = Field(default=None, description="Specifies the object id.", alias="objectId")
    protection_groups: Optional[List[ObjectProtectionGroupSummary]] = Field(default=None, description="Specifies a list of protection groups protecting this object.", alias="protectionGroups")
    region_id: Optional[StrictStr] = Field(default=None, description="Specifies the region id where this object belongs to.", alias="regionId")
    source_id: Optional[StrictInt] = Field(default=None, description="Specifies the source id.", alias="sourceId")
    tenant_ids: Optional[List[StrictStr]] = Field(default=None, description="List of Tenants the object belongs to.", alias="tenantIds")
    view_id: Optional[StrictInt] = Field(default=None, description="Specifies the view id for the object.", alias="viewId")
    __properties: ClassVar[List[str]] = ["clusterId", "clusterIncarnationId", "isDeleted", "lastRunStatus", "objectBackupConfiguration", "objectId", "protectionGroups", "regionId", "sourceId", "tenantIds", "viewId"]

    @field_validator('last_run_status')
    def last_run_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped', 'Paused']):
            raise ValueError("must be one of enum values ('Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped', 'Paused')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjectProtectionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in object_backup_configuration (list)
        _items = []
        if self.object_backup_configuration:
            for _item_object_backup_configuration in self.object_backup_configuration:
                if _item_object_backup_configuration:
                    _items.append(_item_object_backup_configuration.to_dict())
            _dict['objectBackupConfiguration'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in protection_groups (list)
        _items = []
        if self.protection_groups:
            for _item_protection_groups in self.protection_groups:
                if _item_protection_groups:
                    _items.append(_item_protection_groups.to_dict())
            _dict['protectionGroups'] = _items
        # set to None if cluster_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_id is None and "cluster_id" in self.model_fields_set:
            _dict['clusterId'] = None

        # set to None if cluster_incarnation_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_incarnation_id is None and "cluster_incarnation_id" in self.model_fields_set:
            _dict['clusterIncarnationId'] = None

        # set to None if is_deleted (nullable) is None
        # and model_fields_set contains the field
        if self.is_deleted is None and "is_deleted" in self.model_fields_set:
            _dict['isDeleted'] = None

        # set to None if last_run_status (nullable) is None
        # and model_fields_set contains the field
        if self.last_run_status is None and "last_run_status" in self.model_fields_set:
            _dict['lastRunStatus'] = None

        # set to None if object_backup_configuration (nullable) is None
        # and model_fields_set contains the field
        if self.object_backup_configuration is None and "object_backup_configuration" in self.model_fields_set:
            _dict['objectBackupConfiguration'] = None

        # set to None if object_id (nullable) is None
        # and model_fields_set contains the field
        if self.object_id is None and "object_id" in self.model_fields_set:
            _dict['objectId'] = None

        # set to None if protection_groups (nullable) is None
        # and model_fields_set contains the field
        if self.protection_groups is None and "protection_groups" in self.model_fields_set:
            _dict['protectionGroups'] = None

        # set to None if region_id (nullable) is None
        # and model_fields_set contains the field
        if self.region_id is None and "region_id" in self.model_fields_set:
            _dict['regionId'] = None

        # set to None if source_id (nullable) is None
        # and model_fields_set contains the field
        if self.source_id is None and "source_id" in self.model_fields_set:
            _dict['sourceId'] = None

        # set to None if view_id (nullable) is None
        # and model_fields_set contains the field
        if self.view_id is None and "view_id" in self.model_fields_set:
            _dict['viewId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjectProtectionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterId": obj.get("clusterId"),
            "clusterIncarnationId": obj.get("clusterIncarnationId"),
            "isDeleted": obj.get("isDeleted"),
            "lastRunStatus": obj.get("lastRunStatus"),
            "objectBackupConfiguration": [ProtectionSummary.from_dict(_item) for _item in obj["objectBackupConfiguration"]] if obj.get("objectBackupConfiguration") is not None else None,
            "objectId": obj.get("objectId"),
            "protectionGroups": [ObjectProtectionGroupSummary.from_dict(_item) for _item in obj["protectionGroups"]] if obj.get("protectionGroups") is not None else None,
            "regionId": obj.get("regionId"),
            "sourceId": obj.get("sourceId"),
            "tenantIds": obj.get("tenantIds"),
            "viewId": obj.get("viewId")
        })
        return _obj


