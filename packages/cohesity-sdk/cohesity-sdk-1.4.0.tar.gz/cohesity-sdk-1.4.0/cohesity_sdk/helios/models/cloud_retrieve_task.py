# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class CloudRetrieveTask(BaseModel):
    """
    Specifies cloud retrieve task info.
    """ # noqa: E501
    end_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the task end time in microseconds.", alias="endTimeUsecs")
    message: Optional[StrictStr] = Field(default=None, description="Message about the cloud retrieve task.")
    percentage_finished: Optional[StrictInt] = Field(default=None, description="Specifies the percentage of the task.", alias="percentageFinished")
    pulse_task_id: Optional[StrictInt] = Field(default=None, description="Specifies the pulse task id.", alias="pulseTaskId")
    start_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the task start time in microseconds.", alias="startTimeUsecs")
    status: Optional[StrictStr] = Field(default=None, description="Specifies the status of the retrieve task.")
    time_remaining_seconds: Optional[StrictInt] = Field(default=None, description="Specifies the time remaining to complete the retrieve task.", alias="timeRemainingSeconds")
    __properties: ClassVar[List[str]] = ["endTimeUsecs", "message", "percentageFinished", "pulseTaskId", "startTimeUsecs", "status", "timeRemainingSeconds"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped']):
            raise ValueError("must be one of enum values ('Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudRetrieveTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if end_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.end_time_usecs is None and "end_time_usecs" in self.model_fields_set:
            _dict['endTimeUsecs'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if percentage_finished (nullable) is None
        # and model_fields_set contains the field
        if self.percentage_finished is None and "percentage_finished" in self.model_fields_set:
            _dict['percentageFinished'] = None

        # set to None if pulse_task_id (nullable) is None
        # and model_fields_set contains the field
        if self.pulse_task_id is None and "pulse_task_id" in self.model_fields_set:
            _dict['pulseTaskId'] = None

        # set to None if start_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.start_time_usecs is None and "start_time_usecs" in self.model_fields_set:
            _dict['startTimeUsecs'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if time_remaining_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.time_remaining_seconds is None and "time_remaining_seconds" in self.model_fields_set:
            _dict['timeRemainingSeconds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudRetrieveTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTimeUsecs": obj.get("endTimeUsecs"),
            "message": obj.get("message"),
            "percentageFinished": obj.get("percentageFinished"),
            "pulseTaskId": obj.get("pulseTaskId"),
            "startTimeUsecs": obj.get("startTimeUsecs"),
            "status": obj.get("status"),
            "timeRemainingSeconds": obj.get("timeRemainingSeconds")
        })
        return _obj


