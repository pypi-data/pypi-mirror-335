# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self

class McmRecoveryTask(BaseModel):
    """
    Specifies the recovery task.
    """ # noqa: E501
    cluster_id: Optional[StrictInt] = Field(default=None, description="Specifies the cluster id.", alias="clusterId")
    cluster_incarnation_id: Optional[StrictInt] = Field(default=None, description="Specifies the cluster incarnation id.", alias="clusterIncarnationId")
    cluster_name: Optional[StrictStr] = Field(default=None, description="Specifies the cluster name.", alias="clusterName")
    end_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the end time of the Recovery in Unix timestamp epoch in microseconds. This field will be populated only after Recovery is finished.", alias="endTimeUsecs")
    id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Specifies the id of the Recovery.")
    name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the Recovery.")
    progress_task_id: Optional[StrictStr] = Field(default=None, description="Progress monitor task id for Recovery.", alias="progressTaskId")
    recovery_action: Optional[StrictStr] = Field(default=None, description="Specifies the recovery action.", alias="recoveryAction")
    region_id: Optional[StrictStr] = Field(default=None, description="Specifies the region id where the cluster is located for DMaaS.", alias="regionId")
    rpaas_global_vault_id: Optional[StrictStr] = Field(default=None, description="Specifies FortKnox global vault id.", alias="rpaasGlobalVaultId")
    rpaas_region_id: Optional[StrictStr] = Field(default=None, description="Specifies the region id where the snapshots are from to perform the recovery. This is only for RPaaS.", alias="rpaasRegionId")
    snapshot_environment: Optional[StrictStr] = Field(default=None, description="Specifies the snapshot environment.", alias="snapshotEnvironment")
    start_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the start time of the Recovery in Unix timestamp epoch in microseconds.", alias="startTimeUsecs")
    status: Optional[StrictStr] = Field(default=None, description="Status of the Recovery. 'Running' indicates that the Recovery is still running. 'Canceled' indicates that the Recovery has been cancelled. 'Canceling' indicates that the Recovery is in the process of being cancelled. 'Failed' indicates that the Recovery has failed. 'Succeeded' indicates that the Recovery has finished successfully. 'SucceededWithWarning' indicates that the Recovery finished successfully, but there were some warning messages. 'Skipped' indicates that the Recovery task was skipped.")
    __properties: ClassVar[List[str]] = ["clusterId", "clusterIncarnationId", "clusterName", "endTimeUsecs", "id", "name", "progressTaskId", "recoveryAction", "regionId", "rpaasGlobalVaultId", "rpaasRegionId", "snapshotEnvironment", "startTimeUsecs", "status"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+:\d+:\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+:\d+:\d+$/")
        return value

    @field_validator('recovery_action')
    def recovery_action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RecoverVMs', 'RecoverFiles', 'InstantVolumeMount', 'RecoverVmDisks', 'RecoverVApps', 'RecoverVAppTemplates', 'UptierSnapshot', 'RecoverRDS', 'RecoverAurora', 'RecoverS3Buckets', 'RecoverRDSPostgres', 'RecoverAzureSQL', 'RecoverApps', 'CloneApps', 'RecoverNasVolume', 'RecoverPhysicalVolumes', 'RecoverSystem', 'RecoverExchangeDbs', 'CloneAppView', 'RecoverSanVolumes', 'RecoverSanGroup', 'RecoverMailbox', 'RecoverOneDrive', 'RecoverSharePoint', 'RecoverPublicFolders', 'RecoverMsGroup', 'RecoverMsTeam', 'ConvertToPst', 'DownloadChats', 'RecoverNamespaces', 'RecoverObjects', 'RecoverSfdcObjects', 'RecoverSfdcOrg', 'RecoverSfdcRecords', 'DownloadFilesAndFolders', 'CloneVMs', 'CloneView', 'CloneRefreshApp', 'CloneVMsToView', 'ConvertAndDeployVMs', 'DeployVMs']):
            raise ValueError("must be one of enum values ('RecoverVMs', 'RecoverFiles', 'InstantVolumeMount', 'RecoverVmDisks', 'RecoverVApps', 'RecoverVAppTemplates', 'UptierSnapshot', 'RecoverRDS', 'RecoverAurora', 'RecoverS3Buckets', 'RecoverRDSPostgres', 'RecoverAzureSQL', 'RecoverApps', 'CloneApps', 'RecoverNasVolume', 'RecoverPhysicalVolumes', 'RecoverSystem', 'RecoverExchangeDbs', 'CloneAppView', 'RecoverSanVolumes', 'RecoverSanGroup', 'RecoverMailbox', 'RecoverOneDrive', 'RecoverSharePoint', 'RecoverPublicFolders', 'RecoverMsGroup', 'RecoverMsTeam', 'ConvertToPst', 'DownloadChats', 'RecoverNamespaces', 'RecoverObjects', 'RecoverSfdcObjects', 'RecoverSfdcOrg', 'RecoverSfdcRecords', 'DownloadFilesAndFolders', 'CloneVMs', 'CloneView', 'CloneRefreshApp', 'CloneVMsToView', 'ConvertAndDeployVMs', 'DeployVMs')")
        return value

    @field_validator('snapshot_environment')
    def snapshot_environment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kVMware', 'kHyperV', 'kAzure', 'kGCP', 'kKVM', 'kAcropolis', 'kAWS', 'kPhysical', 'kGPFS', 'kElastifile', 'kNetapp', 'kGenericNas', 'kIsilon', 'kFlashBlade', 'kPure', 'kIbmFlashSystem', 'kSQL', 'kExchange', 'kAD', 'kOracle', 'kView', 'kRemoteAdapter', 'kO365', 'kKubernetes', 'kCassandra', 'kMongoDB', 'kCouchbase', 'kHdfs', 'kHive', 'kHBase', 'kUDA', 'kSfdc']):
            raise ValueError("must be one of enum values ('kVMware', 'kHyperV', 'kAzure', 'kGCP', 'kKVM', 'kAcropolis', 'kAWS', 'kPhysical', 'kGPFS', 'kElastifile', 'kNetapp', 'kGenericNas', 'kIsilon', 'kFlashBlade', 'kPure', 'kIbmFlashSystem', 'kSQL', 'kExchange', 'kAD', 'kOracle', 'kView', 'kRemoteAdapter', 'kO365', 'kKubernetes', 'kCassandra', 'kMongoDB', 'kCouchbase', 'kHdfs', 'kHive', 'kHBase', 'kUDA', 'kSfdc')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped']):
            raise ValueError("must be one of enum values ('Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of McmRecoveryTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "region_id",
            "rpaas_global_vault_id",
            "rpaas_region_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cluster_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_id is None and "cluster_id" in self.model_fields_set:
            _dict['clusterId'] = None

        # set to None if cluster_incarnation_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_incarnation_id is None and "cluster_incarnation_id" in self.model_fields_set:
            _dict['clusterIncarnationId'] = None

        # set to None if cluster_name (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_name is None and "cluster_name" in self.model_fields_set:
            _dict['clusterName'] = None

        # set to None if end_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.end_time_usecs is None and "end_time_usecs" in self.model_fields_set:
            _dict['endTimeUsecs'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if progress_task_id (nullable) is None
        # and model_fields_set contains the field
        if self.progress_task_id is None and "progress_task_id" in self.model_fields_set:
            _dict['progressTaskId'] = None

        # set to None if recovery_action (nullable) is None
        # and model_fields_set contains the field
        if self.recovery_action is None and "recovery_action" in self.model_fields_set:
            _dict['recoveryAction'] = None

        # set to None if region_id (nullable) is None
        # and model_fields_set contains the field
        if self.region_id is None and "region_id" in self.model_fields_set:
            _dict['regionId'] = None

        # set to None if rpaas_global_vault_id (nullable) is None
        # and model_fields_set contains the field
        if self.rpaas_global_vault_id is None and "rpaas_global_vault_id" in self.model_fields_set:
            _dict['rpaasGlobalVaultId'] = None

        # set to None if rpaas_region_id (nullable) is None
        # and model_fields_set contains the field
        if self.rpaas_region_id is None and "rpaas_region_id" in self.model_fields_set:
            _dict['rpaasRegionId'] = None

        # set to None if snapshot_environment (nullable) is None
        # and model_fields_set contains the field
        if self.snapshot_environment is None and "snapshot_environment" in self.model_fields_set:
            _dict['snapshotEnvironment'] = None

        # set to None if start_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.start_time_usecs is None and "start_time_usecs" in self.model_fields_set:
            _dict['startTimeUsecs'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of McmRecoveryTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterId": obj.get("clusterId"),
            "clusterIncarnationId": obj.get("clusterIncarnationId"),
            "clusterName": obj.get("clusterName"),
            "endTimeUsecs": obj.get("endTimeUsecs"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "progressTaskId": obj.get("progressTaskId"),
            "recoveryAction": obj.get("recoveryAction"),
            "regionId": obj.get("regionId"),
            "rpaasGlobalVaultId": obj.get("rpaasGlobalVaultId"),
            "rpaasRegionId": obj.get("rpaasRegionId"),
            "snapshotEnvironment": obj.get("snapshotEnvironment"),
            "startTimeUsecs": obj.get("startTimeUsecs"),
            "status": obj.get("status")
        })
        return _obj


