# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class FileLockStatus(BaseModel):
    """
    Specified the information about the lock status of a file.
    """ # noqa: E501
    expiry_timestamp_msecs: Optional[StrictInt] = Field(default=None, description="Specifies a expiry timestamp in milliseconds until the file is locked.", alias="expiryTimestampMsecs")
    hold_timestamp_msecs: Optional[StrictInt] = Field(default=None, description="Specifies a override timestamp in milliseconds when an expired file is kept on hold.", alias="holdTimestampMsecs")
    lock_timestamp_msecs: Optional[StrictInt] = Field(default=None, description="Specifies the timestamp at which the file was locked.", alias="lockTimestampMsecs")
    mode: Optional[StrictStr] = Field(default=None, description="Specifies the mode of the file lock. A lock mode of a file in a view can be in one of the following: Compliance: Default mode of datalock, in this mode,   Data Security Admin cannot modify/delete this view when datalock   is in effect. Data Security Admin can delete this view   when datalock is expired. Enterprise: In this mode, Data Security Admin can change view name or   delete view when datalock is in effect. Datalock in this mode can   be upgraded to 'Compliance' mode.")
    state: Optional[StrictStr] = Field(default=None, description="Specifies the lock state of the file. A lock state of a file in a view can be in one of the following: Unconfigured: File does not belong to data lock enabled view. Unlocked: A file created in a file lock enabled view. It will remain in   this state until auto-lock timer expires or user manually locks the file. Locked: A locked file has a set retention period that prevents users from   modifying the file data or extending, deleting, or renaming the file.   A locked file remain in this state untill retention period expires. Expired: When retention period ends, the file transition from the locked   state to the expired state. User can not modify or rename a file in expired   state, but can delete a file. Hold: Expired file is kept in hold for administrator specified retention   periods and deny any mutable or remove operation on locked files until a   specific date.")
    __properties: ClassVar[List[str]] = ["expiryTimestampMsecs", "holdTimestampMsecs", "lockTimestampMsecs", "mode", "state"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Compliance', 'Enterprise']):
            raise ValueError("must be one of enum values ('Compliance', 'Enterprise')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unconfigured', 'Unlocked', 'Locked', 'Expired', 'Hold']):
            raise ValueError("must be one of enum values ('Unconfigured', 'Unlocked', 'Locked', 'Expired', 'Hold')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileLockStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if expiry_timestamp_msecs (nullable) is None
        # and model_fields_set contains the field
        if self.expiry_timestamp_msecs is None and "expiry_timestamp_msecs" in self.model_fields_set:
            _dict['expiryTimestampMsecs'] = None

        # set to None if hold_timestamp_msecs (nullable) is None
        # and model_fields_set contains the field
        if self.hold_timestamp_msecs is None and "hold_timestamp_msecs" in self.model_fields_set:
            _dict['holdTimestampMsecs'] = None

        # set to None if lock_timestamp_msecs (nullable) is None
        # and model_fields_set contains the field
        if self.lock_timestamp_msecs is None and "lock_timestamp_msecs" in self.model_fields_set:
            _dict['lockTimestampMsecs'] = None

        # set to None if mode (nullable) is None
        # and model_fields_set contains the field
        if self.mode is None and "mode" in self.model_fields_set:
            _dict['mode'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileLockStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expiryTimestampMsecs": obj.get("expiryTimestampMsecs"),
            "holdTimestampMsecs": obj.get("holdTimestampMsecs"),
            "lockTimestampMsecs": obj.get("lockTimestampMsecs"),
            "mode": obj.get("mode"),
            "state": obj.get("state")
        })
        return _obj


