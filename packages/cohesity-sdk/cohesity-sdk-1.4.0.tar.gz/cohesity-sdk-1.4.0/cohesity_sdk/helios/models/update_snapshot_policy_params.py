# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class UpdateSnapshotPolicyParams(BaseModel):
    """
    Describes update snapshot policy request params.
    """ # noqa: E501
    days_of_month: Optional[List[StrictInt]] = Field(default=None, description="Days of the month.", alias="daysOfMonth")
    days_of_week: Optional[List[StrictStr]] = Field(default=None, description="Days of the week.", alias="daysOfWeek")
    num_of_days_to_keep: Optional[StrictInt] = Field(default=None, description="Number of days to keep the snapshot.", alias="numOfDaysToKeep")
    num_of_versions_to_keep: Optional[StrictInt] = Field(default=None, description="Number of snapshot versions to keep.", alias="numOfVersionsToKeep")
    suspend_retention_policy: Optional[StrictBool] = Field(default=None, description="Suspend snapshot retention policy.", alias="suspendRetentionPolicy")
    suspend_schedule_policy: Optional[StrictBool] = Field(default=None, description="Suspend snapshot schedule policy.", alias="suspendSchedulePolicy")
    time: Optional[StrictStr] = Field(default=None, description="Time of the day.")
    time_zone: Optional[StrictStr] = Field(default=None, description="Time zone.", alias="timeZone")
    __properties: ClassVar[List[str]] = ["daysOfMonth", "daysOfWeek", "numOfDaysToKeep", "numOfVersionsToKeep", "suspendRetentionPolicy", "suspendSchedulePolicy", "time", "timeZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSnapshotPolicyParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if days_of_month (nullable) is None
        # and model_fields_set contains the field
        if self.days_of_month is None and "days_of_month" in self.model_fields_set:
            _dict['daysOfMonth'] = None

        # set to None if days_of_week (nullable) is None
        # and model_fields_set contains the field
        if self.days_of_week is None and "days_of_week" in self.model_fields_set:
            _dict['daysOfWeek'] = None

        # set to None if num_of_days_to_keep (nullable) is None
        # and model_fields_set contains the field
        if self.num_of_days_to_keep is None and "num_of_days_to_keep" in self.model_fields_set:
            _dict['numOfDaysToKeep'] = None

        # set to None if num_of_versions_to_keep (nullable) is None
        # and model_fields_set contains the field
        if self.num_of_versions_to_keep is None and "num_of_versions_to_keep" in self.model_fields_set:
            _dict['numOfVersionsToKeep'] = None

        # set to None if suspend_retention_policy (nullable) is None
        # and model_fields_set contains the field
        if self.suspend_retention_policy is None and "suspend_retention_policy" in self.model_fields_set:
            _dict['suspendRetentionPolicy'] = None

        # set to None if suspend_schedule_policy (nullable) is None
        # and model_fields_set contains the field
        if self.suspend_schedule_policy is None and "suspend_schedule_policy" in self.model_fields_set:
            _dict['suspendSchedulePolicy'] = None

        # set to None if time (nullable) is None
        # and model_fields_set contains the field
        if self.time is None and "time" in self.model_fields_set:
            _dict['time'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['timeZone'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSnapshotPolicyParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "daysOfMonth": obj.get("daysOfMonth"),
            "daysOfWeek": obj.get("daysOfWeek"),
            "numOfDaysToKeep": obj.get("numOfDaysToKeep"),
            "numOfVersionsToKeep": obj.get("numOfVersionsToKeep"),
            "suspendRetentionPolicy": obj.get("suspendRetentionPolicy"),
            "suspendSchedulePolicy": obj.get("suspendSchedulePolicy"),
            "time": obj.get("time"),
            "timeZone": obj.get("timeZone")
        })
        return _obj


