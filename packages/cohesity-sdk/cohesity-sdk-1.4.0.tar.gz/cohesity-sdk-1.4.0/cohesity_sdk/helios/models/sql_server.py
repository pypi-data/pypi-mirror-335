# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.agent_information import AgentInformation
from cohesity_sdk.helios.models.app_resource import AppResource
from cohesity_sdk.helios.models.error import Error
from cohesity_sdk.helios.models.sql_server_instance import SQLServerInstance
from typing import Set
from typing_extensions import Self

class SQLServer(BaseModel):
    """
    Specifies the details of a SQL server.
    """ # noqa: E501
    agent_info: Optional[AgentInformation] = Field(default=None, alias="agentInfo")
    error: Optional[Error] = None
    id: Optional[StrictStr] = Field(default=None, description="Specifies the unique identifier of the SQL server host.")
    instances: Optional[List[SQLServerInstance]] = Field(default=None, description="Specifies the list of all sql instances running inside the current SQL host.")
    is_primary: Optional[StrictBool] = Field(default=None, description="Indicates whether this is a active node of a FCI cluster or hosts primary replica of a AAG group.", alias="isPrimary")
    is_selected_by_default: Optional[StrictBool] = Field(default=None, description="Indicates to the UI whether this server should be selected by default", alias="isSelectedByDefault")
    resource_info: Optional[AppResource] = Field(default=None, alias="resourceInfo")
    __properties: ClassVar[List[str]] = ["agentInfo", "error", "id", "instances", "isPrimary", "isSelectedByDefault", "resourceInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SQLServer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agent_info
        if self.agent_info:
            _dict['agentInfo'] = self.agent_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item_instances in self.instances:
                if _item_instances:
                    _items.append(_item_instances.to_dict())
            _dict['instances'] = _items
        # override the default output from pydantic by calling `to_dict()` of resource_info
        if self.resource_info:
            _dict['resourceInfo'] = self.resource_info.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if instances (nullable) is None
        # and model_fields_set contains the field
        if self.instances is None and "instances" in self.model_fields_set:
            _dict['instances'] = None

        # set to None if is_primary (nullable) is None
        # and model_fields_set contains the field
        if self.is_primary is None and "is_primary" in self.model_fields_set:
            _dict['isPrimary'] = None

        # set to None if is_selected_by_default (nullable) is None
        # and model_fields_set contains the field
        if self.is_selected_by_default is None and "is_selected_by_default" in self.model_fields_set:
            _dict['isSelectedByDefault'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SQLServer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentInfo": AgentInformation.from_dict(obj["agentInfo"]) if obj.get("agentInfo") is not None else None,
            "error": Error.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "id": obj.get("id"),
            "instances": [SQLServerInstance.from_dict(_item) for _item in obj["instances"]] if obj.get("instances") is not None else None,
            "isPrimary": obj.get("isPrimary"),
            "isSelectedByDefault": obj.get("isSelectedByDefault"),
            "resourceInfo": AppResource.from_dict(obj["resourceInfo"]) if obj.get("resourceInfo") is not None else None
        })
        return _obj


