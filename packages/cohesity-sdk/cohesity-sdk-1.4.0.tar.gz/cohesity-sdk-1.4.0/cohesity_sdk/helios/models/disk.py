# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.component_removal_progress import ComponentRemovalProgress
from cohesity_sdk.helios.models.pre_check_validation import PreCheckValidation
from typing import Set
from typing_extensions import Self

class Disk(BaseModel):
    """
    Specifies the details of a disk that belongs to a node.
    """ # noqa: E501
    capacity_in_bytes: Optional[StrictInt] = Field(default=None, description="Specifies capacity of disk in bytes.", alias="capacityInBytes")
    encryption_status: Optional[StrictStr] = Field(default=None, description="Specifies disk encryption state.", alias="encryptionStatus")
    id: Optional[StrictInt] = Field(default=None, description="Specifies id to uniquely identify a disk.")
    location: Optional[StrictStr] = Field(default=None, description="Specifies location of the disk in node.")
    model: Optional[StrictStr] = Field(default=None, description="Specifies product model of disk.")
    node_id: Optional[StrictInt] = Field(default=None, description="Specifies node id of the node that this disk belong to.", alias="nodeId")
    precheck_timestamp_secs: Optional[StrictInt] = Field(default=None, description="Specifies the last run time of the pre-checks execution in Unix epoch timestamp (in seconds).", alias="precheckTimestampSecs")
    progress_percentage: Optional[StrictInt] = Field(default=None, description="Specifies the overall progress percentage in removing the Disk.", alias="progressPercentage")
    removal_progress_list: Optional[List[ComponentRemovalProgress]] = Field(default=None, description="Specifies the removal progress details for services that are not acked yet.", alias="removalProgressList")
    removal_reason: Optional[StrictStr] = Field(default=None, description="Specifies the removal reason of the disk.", alias="removalReason")
    removal_timestamp_secs: Optional[StrictInt] = Field(default=None, description="Specifies the Unix epoch timestamp (in seconds) when the Disk was marked for removal.", alias="removalTimestampSecs")
    serial_number: Optional[StrictStr] = Field(default=None, description="Specifies serial number of disk.", alias="serialNumber")
    services_acked_list: Optional[List[StrictStr]] = Field(default=None, description="Specifies the services already ACKed for removal of this entity.", alias="servicesAckedList")
    services_not_acked: Optional[StrictStr] = Field(default=None, description="Specifies the services that are not ACKed after disk is marked for removal.", alias="servicesNotAcked")
    services_not_acked_list: Optional[List[StrictStr]] = Field(default=None, description="Specifies the services not ACKed yet for removal of this entity.", alias="servicesNotAckedList")
    ssd_usage_level: Optional[StrictStr] = Field(default=None, description="Specifies SSD usage level as Normal, Warning or Critical.", alias="ssdUsageLevel")
    ssd_used_percentage: Optional[StrictInt] = Field(default=None, description="Specifies SSD used percentage.", alias="ssdUsedPercentage")
    status: Optional[StrictStr] = Field(default=None, description="Specifies status of the disk.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="Specifies the total duration in seconds left to remove the Disk.", alias="timeRemaining")
    type: Optional[StrictStr] = Field(default=None, description="Specifies type of the disk.")
    validation_checks: Optional[List[PreCheckValidation]] = Field(default=None, description="Specifies the pre-check validations results.", alias="validationChecks")
    __properties: ClassVar[List[str]] = ["capacityInBytes", "encryptionStatus", "id", "location", "model", "nodeId", "precheckTimestampSecs", "progressPercentage", "removalProgressList", "removalReason", "removalTimestampSecs", "serialNumber", "servicesAckedList", "servicesNotAcked", "servicesNotAckedList", "ssdUsageLevel", "ssdUsedPercentage", "status", "timeRemaining", "type", "validationChecks"]

    @field_validator('encryption_status')
    def encryption_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Activating', 'Active', 'NotInCluster', 'KeyRotating', 'Locked', 'Unknown', 'NotSupported']):
            raise ValueError("must be one of enum values ('Activating', 'Active', 'NotInCluster', 'KeyRotating', 'Locked', 'Unknown', 'NotSupported')")
        return value

    @field_validator('ssd_usage_level')
    def ssd_usage_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Normal', 'Warning', 'Critical']):
            raise ValueError("must be one of enum values ('Normal', 'Warning', 'Critical')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Online', 'Offline', 'Removing', 'OkToRemove', 'Blacklist', 'New', 'Empty', 'Unknown', 'Activating']):
            raise ValueError("must be one of enum values ('Online', 'Offline', 'Removing', 'OkToRemove', 'Blacklist', 'New', 'Empty', 'Unknown', 'Activating')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SystemDisk', 'BootDisk', 'DataDisk', 'NvmeSsdDisk', 'SataSsdDisk', 'HddDisk', 'Unknown']):
            raise ValueError("must be one of enum values ('SystemDisk', 'BootDisk', 'DataDisk', 'NvmeSsdDisk', 'SataSsdDisk', 'HddDisk', 'Unknown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Disk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in removal_progress_list (list)
        _items = []
        if self.removal_progress_list:
            for _item_removal_progress_list in self.removal_progress_list:
                if _item_removal_progress_list:
                    _items.append(_item_removal_progress_list.to_dict())
            _dict['removalProgressList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in validation_checks (list)
        _items = []
        if self.validation_checks:
            for _item_validation_checks in self.validation_checks:
                if _item_validation_checks:
                    _items.append(_item_validation_checks.to_dict())
            _dict['validationChecks'] = _items
        # set to None if capacity_in_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.capacity_in_bytes is None and "capacity_in_bytes" in self.model_fields_set:
            _dict['capacityInBytes'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict['model'] = None

        # set to None if node_id (nullable) is None
        # and model_fields_set contains the field
        if self.node_id is None and "node_id" in self.model_fields_set:
            _dict['nodeId'] = None

        # set to None if precheck_timestamp_secs (nullable) is None
        # and model_fields_set contains the field
        if self.precheck_timestamp_secs is None and "precheck_timestamp_secs" in self.model_fields_set:
            _dict['precheckTimestampSecs'] = None

        # set to None if progress_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.progress_percentage is None and "progress_percentage" in self.model_fields_set:
            _dict['progressPercentage'] = None

        # set to None if removal_progress_list (nullable) is None
        # and model_fields_set contains the field
        if self.removal_progress_list is None and "removal_progress_list" in self.model_fields_set:
            _dict['removalProgressList'] = None

        # set to None if removal_reason (nullable) is None
        # and model_fields_set contains the field
        if self.removal_reason is None and "removal_reason" in self.model_fields_set:
            _dict['removalReason'] = None

        # set to None if removal_timestamp_secs (nullable) is None
        # and model_fields_set contains the field
        if self.removal_timestamp_secs is None and "removal_timestamp_secs" in self.model_fields_set:
            _dict['removalTimestampSecs'] = None

        # set to None if serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.serial_number is None and "serial_number" in self.model_fields_set:
            _dict['serialNumber'] = None

        # set to None if services_acked_list (nullable) is None
        # and model_fields_set contains the field
        if self.services_acked_list is None and "services_acked_list" in self.model_fields_set:
            _dict['servicesAckedList'] = None

        # set to None if services_not_acked (nullable) is None
        # and model_fields_set contains the field
        if self.services_not_acked is None and "services_not_acked" in self.model_fields_set:
            _dict['servicesNotAcked'] = None

        # set to None if services_not_acked_list (nullable) is None
        # and model_fields_set contains the field
        if self.services_not_acked_list is None and "services_not_acked_list" in self.model_fields_set:
            _dict['servicesNotAckedList'] = None

        # set to None if ssd_usage_level (nullable) is None
        # and model_fields_set contains the field
        if self.ssd_usage_level is None and "ssd_usage_level" in self.model_fields_set:
            _dict['ssdUsageLevel'] = None

        # set to None if ssd_used_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.ssd_used_percentage is None and "ssd_used_percentage" in self.model_fields_set:
            _dict['ssdUsedPercentage'] = None

        # set to None if time_remaining (nullable) is None
        # and model_fields_set contains the field
        if self.time_remaining is None and "time_remaining" in self.model_fields_set:
            _dict['timeRemaining'] = None

        # set to None if validation_checks (nullable) is None
        # and model_fields_set contains the field
        if self.validation_checks is None and "validation_checks" in self.model_fields_set:
            _dict['validationChecks'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Disk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capacityInBytes": obj.get("capacityInBytes"),
            "encryptionStatus": obj.get("encryptionStatus"),
            "id": obj.get("id"),
            "location": obj.get("location"),
            "model": obj.get("model"),
            "nodeId": obj.get("nodeId"),
            "precheckTimestampSecs": obj.get("precheckTimestampSecs"),
            "progressPercentage": obj.get("progressPercentage"),
            "removalProgressList": [ComponentRemovalProgress.from_dict(_item) for _item in obj["removalProgressList"]] if obj.get("removalProgressList") is not None else None,
            "removalReason": obj.get("removalReason"),
            "removalTimestampSecs": obj.get("removalTimestampSecs"),
            "serialNumber": obj.get("serialNumber"),
            "servicesAckedList": obj.get("servicesAckedList"),
            "servicesNotAcked": obj.get("servicesNotAcked"),
            "servicesNotAckedList": obj.get("servicesNotAckedList"),
            "ssdUsageLevel": obj.get("ssdUsageLevel"),
            "ssdUsedPercentage": obj.get("ssdUsedPercentage"),
            "status": obj.get("status"),
            "timeRemaining": obj.get("timeRemaining"),
            "type": obj.get("type"),
            "validationChecks": [PreCheckValidation.from_dict(_item) for _item in obj["validationChecks"]] if obj.get("validationChecks") is not None else None
        })
        return _obj


