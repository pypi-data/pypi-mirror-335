# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.fortknox_cloud_provider import FortknoxCloudProvider
from cohesity_sdk.helios.models.fortknox_cluster_pairing_info import FortknoxClusterPairingInfo
from cohesity_sdk.helios.models.fortknox_provision_deletion_status import FortknoxProvisionDeletionStatus
from cohesity_sdk.helios.models.fortknox_provision_status import FortknoxProvisionStatus
from cohesity_sdk.helios.models.fortknox_vault_aws_resp import FortknoxVaultAwsResp
from cohesity_sdk.helios.models.fortknox_vault_azure_resp import FortknoxVaultAzureResp
from cohesity_sdk.helios.models.transfer_time_config_params_list import TransferTimeConfigParamsList
from typing import Set
from typing_extensions import Self

class FortknoxVaultInfo(BaseModel):
    """
    Account specific information about a Fortknox vault.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="ID of the helios account", alias="accountId")
    aws_params: Optional[FortknoxVaultAwsResp] = Field(default=None, alias="awsParams")
    azure_params: Optional[FortknoxVaultAzureResp] = Field(default=None, alias="azureParams")
    cloud_provider: Optional[FortknoxCloudProvider] = Field(default=None, alias="cloudProvider")
    cluster_pairing_info: Optional[List[FortknoxClusterPairingInfo]] = Field(default=None, description="Provides the list of configured cluster pairing info with this Fortknox vault.", alias="clusterPairingInfo")
    deletion_status: Optional[FortknoxProvisionDeletionStatus] = Field(default=None, alias="deletionStatus")
    global_vault_id: Optional[StrictStr] = Field(default=None, description="Global Fortknox vault identifier.", alias="globalVaultId")
    kms_key_type: Optional[StrictStr] = Field(default=None, description="Indicates whether the KMS key type is Cohesity KMS or Customer managed KMS.", alias="kmsKeyType")
    provision_status: Optional[FortknoxProvisionStatus] = Field(default=None, alias="provisionStatus")
    transfer_time_config_params: Optional[TransferTimeConfigParamsList] = Field(default=None, alias="transferTimeConfigParams")
    vault_name: Optional[StrictStr] = Field(default=None, description="Fortknox vault name.", alias="vaultName")
    __properties: ClassVar[List[str]] = ["accountId", "awsParams", "azureParams", "cloudProvider", "clusterPairingInfo", "deletionStatus", "globalVaultId", "kmsKeyType", "provisionStatus", "transferTimeConfigParams", "vaultName"]

    @field_validator('kms_key_type')
    def kms_key_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CohesityManaged', 'CustomerManaged']):
            raise ValueError("must be one of enum values ('CohesityManaged', 'CustomerManaged')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FortknoxVaultInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws_params
        if self.aws_params:
            _dict['awsParams'] = self.aws_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_params
        if self.azure_params:
            _dict['azureParams'] = self.azure_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in cluster_pairing_info (list)
        _items = []
        if self.cluster_pairing_info:
            for _item_cluster_pairing_info in self.cluster_pairing_info:
                if _item_cluster_pairing_info:
                    _items.append(_item_cluster_pairing_info.to_dict())
            _dict['clusterPairingInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of deletion_status
        if self.deletion_status:
            _dict['deletionStatus'] = self.deletion_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provision_status
        if self.provision_status:
            _dict['provisionStatus'] = self.provision_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_time_config_params
        if self.transfer_time_config_params:
            _dict['transferTimeConfigParams'] = self.transfer_time_config_params.to_dict()
        # set to None if cluster_pairing_info (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_pairing_info is None and "cluster_pairing_info" in self.model_fields_set:
            _dict['clusterPairingInfo'] = None

        # set to None if global_vault_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_vault_id is None and "global_vault_id" in self.model_fields_set:
            _dict['globalVaultId'] = None

        # set to None if kms_key_type (nullable) is None
        # and model_fields_set contains the field
        if self.kms_key_type is None and "kms_key_type" in self.model_fields_set:
            _dict['kmsKeyType'] = None

        # set to None if vault_name (nullable) is None
        # and model_fields_set contains the field
        if self.vault_name is None and "vault_name" in self.model_fields_set:
            _dict['vaultName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FortknoxVaultInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "awsParams": FortknoxVaultAwsResp.from_dict(obj["awsParams"]) if obj.get("awsParams") is not None else None,
            "azureParams": FortknoxVaultAzureResp.from_dict(obj["azureParams"]) if obj.get("azureParams") is not None else None,
            "cloudProvider": obj.get("cloudProvider"),
            "clusterPairingInfo": [FortknoxClusterPairingInfo.from_dict(_item) for _item in obj["clusterPairingInfo"]] if obj.get("clusterPairingInfo") is not None else None,
            "deletionStatus": FortknoxProvisionDeletionStatus.from_dict(obj["deletionStatus"]) if obj.get("deletionStatus") is not None else None,
            "globalVaultId": obj.get("globalVaultId"),
            "kmsKeyType": obj.get("kmsKeyType"),
            "provisionStatus": FortknoxProvisionStatus.from_dict(obj["provisionStatus"]) if obj.get("provisionStatus") is not None else None,
            "transferTimeConfigParams": TransferTimeConfigParamsList.from_dict(obj["transferTimeConfigParams"]) if obj.get("transferTimeConfigParams") is not None else None,
            "vaultName": obj.get("vaultName")
        })
        return _obj


