# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class AdvancedSettings(BaseModel):
    """
    This is used to regulate certain gflag values from the UI. The values passed by the user from the UI will be used for the respective gflags.
    """ # noqa: E501
    cloned_db_backup_status: Optional[StrictStr] = Field(default=None, description="Whether to report error if SQL database is cloned.", alias="clonedDbBackupStatus")
    db_backup_if_not_online_status: Optional[StrictStr] = Field(default=None, description="Whether to report error if SQL database is not online.", alias="dbBackupIfNotOnlineStatus")
    missing_db_backup_status: Optional[StrictStr] = Field(default=None, description="Fail the backup job when the database is missing. The database may be missing if it is deleted or corrupted.", alias="missingDbBackupStatus")
    offline_restoring_db_backup_status: Optional[StrictStr] = Field(default=None, description="Fail the backup job when database is offline or restoring.", alias="offlineRestoringDbBackupStatus")
    read_only_db_backup_status: Optional[StrictStr] = Field(default=None, description="Whether to skip backup for read-only SQL databases.", alias="readOnlyDbBackupStatus")
    report_all_non_autoprotect_db_errors: Optional[StrictStr] = Field(default=None, description="Whether to report error for all dbs in non-autoprotect jobs.", alias="reportAllNonAutoprotectDbErrors")
    __properties: ClassVar[List[str]] = ["clonedDbBackupStatus", "dbBackupIfNotOnlineStatus", "missingDbBackupStatus", "offlineRestoringDbBackupStatus", "readOnlyDbBackupStatus", "reportAllNonAutoprotectDbErrors"]

    @field_validator('cloned_db_backup_status')
    def cloned_db_backup_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kError', 'kWarn', 'kIgnore']):
            raise ValueError("must be one of enum values ('kError', 'kWarn', 'kIgnore')")
        return value

    @field_validator('db_backup_if_not_online_status')
    def db_backup_if_not_online_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kError', 'kWarn', 'kIgnore']):
            raise ValueError("must be one of enum values ('kError', 'kWarn', 'kIgnore')")
        return value

    @field_validator('missing_db_backup_status')
    def missing_db_backup_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kError', 'kWarn', 'kIgnore']):
            raise ValueError("must be one of enum values ('kError', 'kWarn', 'kIgnore')")
        return value

    @field_validator('offline_restoring_db_backup_status')
    def offline_restoring_db_backup_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kError', 'kWarn', 'kIgnore']):
            raise ValueError("must be one of enum values ('kError', 'kWarn', 'kIgnore')")
        return value

    @field_validator('read_only_db_backup_status')
    def read_only_db_backup_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kError', 'kWarn', 'kIgnore']):
            raise ValueError("must be one of enum values ('kError', 'kWarn', 'kIgnore')")
        return value

    @field_validator('report_all_non_autoprotect_db_errors')
    def report_all_non_autoprotect_db_errors_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kError', 'kWarn', 'kIgnore']):
            raise ValueError("must be one of enum values ('kError', 'kWarn', 'kIgnore')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvancedSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cloned_db_backup_status (nullable) is None
        # and model_fields_set contains the field
        if self.cloned_db_backup_status is None and "cloned_db_backup_status" in self.model_fields_set:
            _dict['clonedDbBackupStatus'] = None

        # set to None if db_backup_if_not_online_status (nullable) is None
        # and model_fields_set contains the field
        if self.db_backup_if_not_online_status is None and "db_backup_if_not_online_status" in self.model_fields_set:
            _dict['dbBackupIfNotOnlineStatus'] = None

        # set to None if missing_db_backup_status (nullable) is None
        # and model_fields_set contains the field
        if self.missing_db_backup_status is None and "missing_db_backup_status" in self.model_fields_set:
            _dict['missingDbBackupStatus'] = None

        # set to None if offline_restoring_db_backup_status (nullable) is None
        # and model_fields_set contains the field
        if self.offline_restoring_db_backup_status is None and "offline_restoring_db_backup_status" in self.model_fields_set:
            _dict['offlineRestoringDbBackupStatus'] = None

        # set to None if read_only_db_backup_status (nullable) is None
        # and model_fields_set contains the field
        if self.read_only_db_backup_status is None and "read_only_db_backup_status" in self.model_fields_set:
            _dict['readOnlyDbBackupStatus'] = None

        # set to None if report_all_non_autoprotect_db_errors (nullable) is None
        # and model_fields_set contains the field
        if self.report_all_non_autoprotect_db_errors is None and "report_all_non_autoprotect_db_errors" in self.model_fields_set:
            _dict['reportAllNonAutoprotectDbErrors'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvancedSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clonedDbBackupStatus": obj.get("clonedDbBackupStatus"),
            "dbBackupIfNotOnlineStatus": obj.get("dbBackupIfNotOnlineStatus"),
            "missingDbBackupStatus": obj.get("missingDbBackupStatus"),
            "offlineRestoringDbBackupStatus": obj.get("offlineRestoringDbBackupStatus"),
            "readOnlyDbBackupStatus": obj.get("readOnlyDbBackupStatus"),
            "reportAllNonAutoprotectDbErrors": obj.get("reportAllNonAutoprotectDbErrors")
        })
        return _obj


