# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.aws_target_params_for_recover_rds_postgres import AwsTargetParamsForRecoverRDSPostgres
from typing import Set
from typing_extensions import Self

class RecoverRDSPostgresParams(BaseModel):
    """
    Specifies the parameters to recover RDS Postgres.
    """ # noqa: E501
    aws_target_params: Optional[AwsTargetParamsForRecoverRDSPostgres] = Field(default=None, description="Specifies the params for recovering to an Aws target.", alias="awsTargetParams")
    overwrite_database: Optional[StrictBool] = Field(default=None, description="Set to true to overwrite an existing object at the destination. If set to false, and the same object exists at the destination, then recovery will fail for that object.", alias="overwriteDatabase")
    prefix: Optional[StrictStr] = Field(default=None, description="Specifies the prefix to be prepended to the object name after the recovery.")
    suffix: Optional[StrictStr] = Field(default=None, description="Specifies the suffix to be appended to the object name after the recovery.")
    target_environment: StrictStr = Field(description="Specifies the environment of the recovery target. The corresponding params below must be filled out.", alias="targetEnvironment")
    __properties: ClassVar[List[str]] = ["awsTargetParams", "overwriteDatabase", "prefix", "suffix", "targetEnvironment"]

    @field_validator('target_environment')
    def target_environment_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['kAWS']):
            raise ValueError("must be one of enum values ('kAWS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecoverRDSPostgresParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws_target_params
        if self.aws_target_params:
            _dict['awsTargetParams'] = self.aws_target_params.to_dict()
        # set to None if aws_target_params (nullable) is None
        # and model_fields_set contains the field
        if self.aws_target_params is None and "aws_target_params" in self.model_fields_set:
            _dict['awsTargetParams'] = None

        # set to None if overwrite_database (nullable) is None
        # and model_fields_set contains the field
        if self.overwrite_database is None and "overwrite_database" in self.model_fields_set:
            _dict['overwriteDatabase'] = None

        # set to None if prefix (nullable) is None
        # and model_fields_set contains the field
        if self.prefix is None and "prefix" in self.model_fields_set:
            _dict['prefix'] = None

        # set to None if suffix (nullable) is None
        # and model_fields_set contains the field
        if self.suffix is None and "suffix" in self.model_fields_set:
            _dict['suffix'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecoverRDSPostgresParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "awsTargetParams": AwsTargetParamsForRecoverRDSPostgres.from_dict(obj["awsTargetParams"]) if obj.get("awsTargetParams") is not None else None,
            "overwriteDatabase": obj.get("overwriteDatabase"),
            "prefix": obj.get("prefix"),
            "suffix": obj.get("suffix"),
            "targetEnvironment": obj.get("targetEnvironment")
        })
        return _obj


