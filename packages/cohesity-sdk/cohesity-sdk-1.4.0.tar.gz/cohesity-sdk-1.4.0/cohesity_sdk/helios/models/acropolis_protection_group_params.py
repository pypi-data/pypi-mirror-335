# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cohesity_sdk.helios.models.acropolis_disk_info import AcropolisDiskInfo
from cohesity_sdk.helios.models.acropolis_protection_group_object_params import AcropolisProtectionGroupObjectParams
from cohesity_sdk.helios.models.indexing_policy import IndexingPolicy
from typing import Set
from typing_extensions import Self

class AcropolisProtectionGroupParams(BaseModel):
    """
    Specifies the parameters which are related to Acropolis Protection Groups.
    """ # noqa: E501
    app_consistent_snapshot: Optional[StrictBool] = Field(default=None, description="Specifies whether or not to quiesce apps and the file system in order to take app consistent snapshots. If not specified or false then snapshots will not be app consistent.", alias="appConsistentSnapshot")
    continue_on_quiesce_failure: Optional[StrictBool] = Field(default=None, description="Specifies whether to continue backing up on quiesce failure", alias="continueOnQuiesceFailure")
    exclude_object_ids: Optional[List[StrictInt]] = Field(default=None, description="Specifies the object ids to be excluded in the Protection Group.", alias="excludeObjectIds")
    global_exclude_disks: Optional[List[AcropolisDiskInfo]] = Field(default=None, description="Specifies a list of disks to exclude from the backup.", alias="globalExcludeDisks")
    global_include_disks: Optional[List[AcropolisDiskInfo]] = Field(default=None, description="Specifies a list of disks to include in the backup.", alias="globalIncludeDisks")
    indexing_policy: Optional[IndexingPolicy] = Field(default=None, alias="indexingPolicy")
    objects: Annotated[List[AcropolisProtectionGroupObjectParams], Field(min_length=1)] = Field(description="Specifies the objects included in the Protection Group.")
    source_id: Optional[StrictInt] = Field(default=None, description="Specifies the id of the parent of the objects.", alias="sourceId")
    source_name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the parent of the objects.", alias="sourceName")
    __properties: ClassVar[List[str]] = ["appConsistentSnapshot", "continueOnQuiesceFailure", "excludeObjectIds", "globalExcludeDisks", "globalIncludeDisks", "indexingPolicy", "objects", "sourceId", "sourceName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AcropolisProtectionGroupParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "source_id",
            "source_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in global_exclude_disks (list)
        _items = []
        if self.global_exclude_disks:
            for _item_global_exclude_disks in self.global_exclude_disks:
                if _item_global_exclude_disks:
                    _items.append(_item_global_exclude_disks.to_dict())
            _dict['globalExcludeDisks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in global_include_disks (list)
        _items = []
        if self.global_include_disks:
            for _item_global_include_disks in self.global_include_disks:
                if _item_global_include_disks:
                    _items.append(_item_global_include_disks.to_dict())
            _dict['globalIncludeDisks'] = _items
        # override the default output from pydantic by calling `to_dict()` of indexing_policy
        if self.indexing_policy:
            _dict['indexingPolicy'] = self.indexing_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in objects (list)
        _items = []
        if self.objects:
            for _item_objects in self.objects:
                if _item_objects:
                    _items.append(_item_objects.to_dict())
            _dict['objects'] = _items
        # set to None if app_consistent_snapshot (nullable) is None
        # and model_fields_set contains the field
        if self.app_consistent_snapshot is None and "app_consistent_snapshot" in self.model_fields_set:
            _dict['appConsistentSnapshot'] = None

        # set to None if continue_on_quiesce_failure (nullable) is None
        # and model_fields_set contains the field
        if self.continue_on_quiesce_failure is None and "continue_on_quiesce_failure" in self.model_fields_set:
            _dict['continueOnQuiesceFailure'] = None

        # set to None if exclude_object_ids (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_object_ids is None and "exclude_object_ids" in self.model_fields_set:
            _dict['excludeObjectIds'] = None

        # set to None if global_exclude_disks (nullable) is None
        # and model_fields_set contains the field
        if self.global_exclude_disks is None and "global_exclude_disks" in self.model_fields_set:
            _dict['globalExcludeDisks'] = None

        # set to None if global_include_disks (nullable) is None
        # and model_fields_set contains the field
        if self.global_include_disks is None and "global_include_disks" in self.model_fields_set:
            _dict['globalIncludeDisks'] = None

        # set to None if source_id (nullable) is None
        # and model_fields_set contains the field
        if self.source_id is None and "source_id" in self.model_fields_set:
            _dict['sourceId'] = None

        # set to None if source_name (nullable) is None
        # and model_fields_set contains the field
        if self.source_name is None and "source_name" in self.model_fields_set:
            _dict['sourceName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AcropolisProtectionGroupParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appConsistentSnapshot": obj.get("appConsistentSnapshot"),
            "continueOnQuiesceFailure": obj.get("continueOnQuiesceFailure"),
            "excludeObjectIds": obj.get("excludeObjectIds"),
            "globalExcludeDisks": [AcropolisDiskInfo.from_dict(_item) for _item in obj["globalExcludeDisks"]] if obj.get("globalExcludeDisks") is not None else None,
            "globalIncludeDisks": [AcropolisDiskInfo.from_dict(_item) for _item in obj["globalIncludeDisks"]] if obj.get("globalIncludeDisks") is not None else None,
            "indexingPolicy": IndexingPolicy.from_dict(obj["indexingPolicy"]) if obj.get("indexingPolicy") is not None else None,
            "objects": [AcropolisProtectionGroupObjectParams.from_dict(_item) for _item in obj["objects"]] if obj.get("objects") is not None else None,
            "sourceId": obj.get("sourceId"),
            "sourceName": obj.get("sourceName")
        })
        return _obj


