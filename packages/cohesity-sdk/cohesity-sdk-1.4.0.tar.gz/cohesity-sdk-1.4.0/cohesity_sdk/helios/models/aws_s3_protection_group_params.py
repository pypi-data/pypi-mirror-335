# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.aws_s3_protection_group_object_params import AwsS3ProtectionGroupObjectParams
from typing import Set
from typing_extensions import Self

class AwsS3ProtectionGroupParams(BaseModel):
    """
    Specifies the parameters which are specific to AWS S3 Protection.
    """ # noqa: E501
    backup_object_level_acls: Optional[StrictBool] = Field(default=None, description="Specifies whether to backup object level acls. Default value is false.", alias="backupObjectLevelACLs")
    objects: Optional[List[AwsS3ProtectionGroupObjectParams]] = Field(default=None, description="Specifies the objects to be protected.")
    skip_on_error: Optional[StrictBool] = Field(default=None, description="Specifies whether to skip files on error or not. Default value is false.", alias="skipOnError")
    source_id: Optional[StrictInt] = Field(default=None, description="Specifies the id of the parent of the objects.", alias="sourceId")
    source_name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the parent of the objects.", alias="sourceName")
    storage_class: Optional[List[StrictStr]] = Field(default=None, description="Specifies the AWS S3 Storage classes to backup.", alias="storageClass")
    __properties: ClassVar[List[str]] = ["backupObjectLevelACLs", "objects", "skipOnError", "sourceId", "sourceName", "storageClass"]

    @field_validator('storage_class')
    def storage_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['AmazonS3Standard', 'AmazonS3IntelligentTiering', 'AmazonS3StandardIA', 'AmazonS3OneZoneIA']):
                raise ValueError("each list item must be one of ('AmazonS3Standard', 'AmazonS3IntelligentTiering', 'AmazonS3StandardIA', 'AmazonS3OneZoneIA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AwsS3ProtectionGroupParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "source_id",
            "source_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in objects (list)
        _items = []
        if self.objects:
            for _item_objects in self.objects:
                if _item_objects:
                    _items.append(_item_objects.to_dict())
            _dict['objects'] = _items
        # set to None if backup_object_level_acls (nullable) is None
        # and model_fields_set contains the field
        if self.backup_object_level_acls is None and "backup_object_level_acls" in self.model_fields_set:
            _dict['backupObjectLevelACLs'] = None

        # set to None if skip_on_error (nullable) is None
        # and model_fields_set contains the field
        if self.skip_on_error is None and "skip_on_error" in self.model_fields_set:
            _dict['skipOnError'] = None

        # set to None if source_id (nullable) is None
        # and model_fields_set contains the field
        if self.source_id is None and "source_id" in self.model_fields_set:
            _dict['sourceId'] = None

        # set to None if source_name (nullable) is None
        # and model_fields_set contains the field
        if self.source_name is None and "source_name" in self.model_fields_set:
            _dict['sourceName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AwsS3ProtectionGroupParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupObjectLevelACLs": obj.get("backupObjectLevelACLs"),
            "objects": [AwsS3ProtectionGroupObjectParams.from_dict(_item) for _item in obj["objects"]] if obj.get("objects") is not None else None,
            "skipOnError": obj.get("skipOnError"),
            "sourceId": obj.get("sourceId"),
            "sourceName": obj.get("sourceName"),
            "storageClass": obj.get("storageClass")
        })
        return _obj


