# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class McmProtectionGroupArchivalRunActivityParams(BaseModel):
    """
    Specifies the Protection Group activity of an archival run.
    """ # noqa: E501
    archival_target_id: Optional[StrictInt] = Field(default=None, description="Specifies the id of archival target.", alias="archivalTargetId")
    archival_target_name: Optional[StrictStr] = Field(default=None, description="Specifies the name of archival target.", alias="archivalTargetName")
    end_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the end time of Run in Unix epoch Timestamp(in microseconds).", alias="endTimeUsecs")
    error_code: Optional[StrictStr] = Field(default=None, description="Specifies a short message describing the type of error which occurred.", alias="errorCode")
    error_guid: Optional[StrictStr] = Field(default=None, description="Specifies the identifier of the error code.", alias="errorGuid")
    is_full_archive: Optional[StrictBool] = Field(default=None, description="Specifies if the archival run is full archive.", alias="isFullArchive")
    logical_bytes_transferred: Optional[StrictInt] = Field(default=None, description="Specifies total size of logical data in bytes transferred after archival.", alias="logicalBytesTransferred")
    logical_size_bytes: Optional[StrictInt] = Field(default=None, description="Specifies total logical size of the objects in bytes.", alias="logicalSizeBytes")
    message_codes: Optional[StrictStr] = Field(default=None, description="Specifies the full text of the error message if any error occurs.", alias="messageCodes")
    physical_bytes_transferred: Optional[StrictInt] = Field(default=None, description="Specifies total size of physical data in bytes transferred after archival.", alias="physicalBytesTransferred")
    protection_environment_type: Optional[StrictStr] = Field(default=None, description="Specifies the type of protection environment.", alias="protectionEnvironmentType")
    rpaas_global_vault_id: Optional[StrictStr] = Field(default=None, description="Specifies FortKnox global vault id.", alias="rpaasGlobalVaultId")
    rpaas_region_id: Optional[StrictStr] = Field(default=None, description="Specifies the region id for RPaaS.", alias="rpaasRegionId")
    start_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the start time of Run in Unix epoch Timestamp(in microseconds).", alias="startTimeUsecs")
    status: Optional[StrictStr] = Field(default=None, description="Status of the Run. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being canceled. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages. 'Skipped' indicates that the run was skipped.")
    __properties: ClassVar[List[str]] = ["archivalTargetId", "archivalTargetName", "endTimeUsecs", "errorCode", "errorGuid", "isFullArchive", "logicalBytesTransferred", "logicalSizeBytes", "messageCodes", "physicalBytesTransferred", "protectionEnvironmentType", "rpaasGlobalVaultId", "rpaasRegionId", "startTimeUsecs", "status"]

    @field_validator('protection_environment_type')
    def protection_environment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kVMware', 'kHyperV', 'kVCD', 'kAzure', 'kGCP', 'kKVM', 'kAcropolis', 'kAWS', 'kAWSNative', 'kAwsS3', 'kAWSSnapshotManager', 'kRDSSnapshotManager', 'kAuroraSnapshotManager', 'kAwsRDSPostgresBackup', 'kAzureNative', 'kAzureSQL', 'kAzureSnapshotManager', 'kPhysical', 'kPhysicalFiles', 'kGPFS', 'kElastifile', 'kNetapp', 'kGenericNas', 'kIsilon', 'kFlashBlade', 'kPure', 'kIbmFlashSystem', 'kSQL', 'kExchange', 'kAD', 'kOracle', 'kView', 'kRemoteAdapter', 'kO365', 'kO365PublicFolders', 'kO365Teams', 'kO365Group', 'kO365Exchange', 'kO365OneDrive', 'kO365Sharepoint', 'kKubernetes', 'kCassandra', 'kMongoDB', 'kCouchbase', 'kHdfs', 'kHive', 'kHBase', 'kUDA', 'kSfdc']):
            raise ValueError("must be one of enum values ('kVMware', 'kHyperV', 'kVCD', 'kAzure', 'kGCP', 'kKVM', 'kAcropolis', 'kAWS', 'kAWSNative', 'kAwsS3', 'kAWSSnapshotManager', 'kRDSSnapshotManager', 'kAuroraSnapshotManager', 'kAwsRDSPostgresBackup', 'kAzureNative', 'kAzureSQL', 'kAzureSnapshotManager', 'kPhysical', 'kPhysicalFiles', 'kGPFS', 'kElastifile', 'kNetapp', 'kGenericNas', 'kIsilon', 'kFlashBlade', 'kPure', 'kIbmFlashSystem', 'kSQL', 'kExchange', 'kAD', 'kOracle', 'kView', 'kRemoteAdapter', 'kO365', 'kO365PublicFolders', 'kO365Teams', 'kO365Group', 'kO365Exchange', 'kO365OneDrive', 'kO365Sharepoint', 'kKubernetes', 'kCassandra', 'kMongoDB', 'kCouchbase', 'kHdfs', 'kHive', 'kHBase', 'kUDA', 'kSfdc')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped']):
            raise ValueError("must be one of enum values ('Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of McmProtectionGroupArchivalRunActivityParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "rpaas_global_vault_id",
            "rpaas_region_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if archival_target_id (nullable) is None
        # and model_fields_set contains the field
        if self.archival_target_id is None and "archival_target_id" in self.model_fields_set:
            _dict['archivalTargetId'] = None

        # set to None if archival_target_name (nullable) is None
        # and model_fields_set contains the field
        if self.archival_target_name is None and "archival_target_name" in self.model_fields_set:
            _dict['archivalTargetName'] = None

        # set to None if end_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.end_time_usecs is None and "end_time_usecs" in self.model_fields_set:
            _dict['endTimeUsecs'] = None

        # set to None if error_code (nullable) is None
        # and model_fields_set contains the field
        if self.error_code is None and "error_code" in self.model_fields_set:
            _dict['errorCode'] = None

        # set to None if error_guid (nullable) is None
        # and model_fields_set contains the field
        if self.error_guid is None and "error_guid" in self.model_fields_set:
            _dict['errorGuid'] = None

        # set to None if is_full_archive (nullable) is None
        # and model_fields_set contains the field
        if self.is_full_archive is None and "is_full_archive" in self.model_fields_set:
            _dict['isFullArchive'] = None

        # set to None if logical_bytes_transferred (nullable) is None
        # and model_fields_set contains the field
        if self.logical_bytes_transferred is None and "logical_bytes_transferred" in self.model_fields_set:
            _dict['logicalBytesTransferred'] = None

        # set to None if logical_size_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.logical_size_bytes is None and "logical_size_bytes" in self.model_fields_set:
            _dict['logicalSizeBytes'] = None

        # set to None if message_codes (nullable) is None
        # and model_fields_set contains the field
        if self.message_codes is None and "message_codes" in self.model_fields_set:
            _dict['messageCodes'] = None

        # set to None if physical_bytes_transferred (nullable) is None
        # and model_fields_set contains the field
        if self.physical_bytes_transferred is None and "physical_bytes_transferred" in self.model_fields_set:
            _dict['physicalBytesTransferred'] = None

        # set to None if protection_environment_type (nullable) is None
        # and model_fields_set contains the field
        if self.protection_environment_type is None and "protection_environment_type" in self.model_fields_set:
            _dict['protectionEnvironmentType'] = None

        # set to None if rpaas_global_vault_id (nullable) is None
        # and model_fields_set contains the field
        if self.rpaas_global_vault_id is None and "rpaas_global_vault_id" in self.model_fields_set:
            _dict['rpaasGlobalVaultId'] = None

        # set to None if rpaas_region_id (nullable) is None
        # and model_fields_set contains the field
        if self.rpaas_region_id is None and "rpaas_region_id" in self.model_fields_set:
            _dict['rpaasRegionId'] = None

        # set to None if start_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.start_time_usecs is None and "start_time_usecs" in self.model_fields_set:
            _dict['startTimeUsecs'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of McmProtectionGroupArchivalRunActivityParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archivalTargetId": obj.get("archivalTargetId"),
            "archivalTargetName": obj.get("archivalTargetName"),
            "endTimeUsecs": obj.get("endTimeUsecs"),
            "errorCode": obj.get("errorCode"),
            "errorGuid": obj.get("errorGuid"),
            "isFullArchive": obj.get("isFullArchive"),
            "logicalBytesTransferred": obj.get("logicalBytesTransferred"),
            "logicalSizeBytes": obj.get("logicalSizeBytes"),
            "messageCodes": obj.get("messageCodes"),
            "physicalBytesTransferred": obj.get("physicalBytesTransferred"),
            "protectionEnvironmentType": obj.get("protectionEnvironmentType"),
            "rpaasGlobalVaultId": obj.get("rpaasGlobalVaultId"),
            "rpaasRegionId": obj.get("rpaasRegionId"),
            "startTimeUsecs": obj.get("startTimeUsecs"),
            "status": obj.get("status")
        })
        return _obj


