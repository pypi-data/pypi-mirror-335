# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class EncryptionSettings(BaseModel):
    """
    Specifis the encryption setting of the External Target
    """ # noqa: E501
    enable_additional_security: Optional[StrictBool] = Field(default=None, description="Enable Additional security by managing key manually", alias="enableAdditionalSecurity")
    encryption_key_file_downloaded: Optional[StrictBool] = Field(default=None, description="Specifies if the encryption key file has been downloaded using the Cohesity Dashboard (Cohesity UI). If true, the encryption key has been downloaded using the Cohesity Dashboard. An encryption key can only be downloaded once using the Cohesity Dashboard. After setting it to true once, subsequent updates to this field will be ignored.", alias="encryptionKeyFileDownloaded")
    encryption_level: Optional[StrictStr] = Field(description="Specifies the type of encryption for the Setting.", alias="encryptionLevel")
    key_file_download_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the time (in microseconds) when the encryption key file was downloaded from the Cohesity Dashboard (Cohesity UI). An encryption key can only be downloaded once using Cohesity Dashboard. Can be set only once when the key is downloaded.", alias="keyFileDownloadTimeUsecs")
    key_file_download_user: Optional[StrictStr] = Field(default=None, description="Specifies the user who downloaded the encryption key from the Cohesity Dashboard (Cohesity UI). This field is only populated if encryption is enabled for the Vault and customerManagingEncryptionKeys is true. Can be set only once when the key is downloaded.", alias="keyFileDownloadUser")
    kms_server_id: Optional[StrictInt] = Field(default=None, description="Specifies the Key Management Service Server ID for the Encryption Setting.", alias="kmsServerId")
    __properties: ClassVar[List[str]] = ["enableAdditionalSecurity", "encryptionKeyFileDownloaded", "encryptionLevel", "keyFileDownloadTimeUsecs", "keyFileDownloadUser", "kmsServerId"]

    @field_validator('encryption_level')
    def encryption_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Weak', 'Strong']):
            raise ValueError("must be one of enum values ('None', 'Weak', 'Strong')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EncryptionSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "key_file_download_time_usecs",
            "key_file_download_user",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if enable_additional_security (nullable) is None
        # and model_fields_set contains the field
        if self.enable_additional_security is None and "enable_additional_security" in self.model_fields_set:
            _dict['enableAdditionalSecurity'] = None

        # set to None if encryption_key_file_downloaded (nullable) is None
        # and model_fields_set contains the field
        if self.encryption_key_file_downloaded is None and "encryption_key_file_downloaded" in self.model_fields_set:
            _dict['encryptionKeyFileDownloaded'] = None

        # set to None if encryption_level (nullable) is None
        # and model_fields_set contains the field
        if self.encryption_level is None and "encryption_level" in self.model_fields_set:
            _dict['encryptionLevel'] = None

        # set to None if key_file_download_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.key_file_download_time_usecs is None and "key_file_download_time_usecs" in self.model_fields_set:
            _dict['keyFileDownloadTimeUsecs'] = None

        # set to None if key_file_download_user (nullable) is None
        # and model_fields_set contains the field
        if self.key_file_download_user is None and "key_file_download_user" in self.model_fields_set:
            _dict['keyFileDownloadUser'] = None

        # set to None if kms_server_id (nullable) is None
        # and model_fields_set contains the field
        if self.kms_server_id is None and "kms_server_id" in self.model_fields_set:
            _dict['kmsServerId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EncryptionSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableAdditionalSecurity": obj.get("enableAdditionalSecurity"),
            "encryptionKeyFileDownloaded": obj.get("encryptionKeyFileDownloaded"),
            "encryptionLevel": obj.get("encryptionLevel"),
            "keyFileDownloadTimeUsecs": obj.get("keyFileDownloadTimeUsecs"),
            "keyFileDownloadUser": obj.get("keyFileDownloadUser"),
            "kmsServerId": obj.get("kmsServerId")
        })
        return _obj


