# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.aws_source_registration_params import AwsSourceRegistrationParams
from cohesity_sdk.helios.models.azure_source_registration_params import AzureSourceRegistrationParams
from cohesity_sdk.helios.models.cassandra_source_registration_params import CassandraSourceRegistrationParams
from cohesity_sdk.helios.models.connection_config import ConnectionConfig
from cohesity_sdk.helios.models.couchbase_source_registration_params import CouchbaseSourceRegistrationParams
from cohesity_sdk.helios.models.elastifile_registration_params import ElastifileRegistrationParams
from cohesity_sdk.helios.models.entity_external_metadata import EntityExternalMetadata
from cohesity_sdk.helios.models.flashblade_registration_params import FlashbladeRegistrationParams
from cohesity_sdk.helios.models.generic_nas_registration_params import GenericNasRegistrationParams
from cohesity_sdk.helios.models.gpfs_registration_params import GpfsRegistrationParams
from cohesity_sdk.helios.models.hbase_source_registration_params import HbaseSourceRegistrationParams
from cohesity_sdk.helios.models.hdfs_source_registration_params import HdfsSourceRegistrationParams
from cohesity_sdk.helios.models.hive_source_registration_params import HiveSourceRegistrationParams
from cohesity_sdk.helios.models.hyper_v_source_registration_params import HyperVSourceRegistrationParams
from cohesity_sdk.helios.models.isilon_registration_params import IsilonRegistrationParams
from cohesity_sdk.helios.models.key_value_pair import KeyValuePair
from cohesity_sdk.helios.models.mongo_db_source_registration_params import MongoDBSourceRegistrationParams
from cohesity_sdk.helios.models.netapp_registration_params import NetappRegistrationParams
from cohesity_sdk.helios.models.object import Object
from cohesity_sdk.helios.models.office365_source_registration_params import Office365SourceRegistrationParams
from cohesity_sdk.helios.models.physical_source_registration_params import PhysicalSourceRegistrationParams
from cohesity_sdk.helios.models.sfdc_source_registration_params import SfdcSourceRegistrationParams
from cohesity_sdk.helios.models.uda_source_registration_params import UdaSourceRegistrationParams
from cohesity_sdk.helios.models.vmware_source_registration_params import VmwareSourceRegistrationParams
from typing import Set
from typing_extensions import Self

class SourceRegistration(BaseModel):
    """
    Specifies the Source Registration.
    """ # noqa: E501
    advanced_configs: Optional[List[KeyValuePair]] = Field(default=None, description="Specifies the advanced configuration for a protection source.", alias="advancedConfigs")
    connection_id: Optional[StrictInt] = Field(default=None, description="Specifies the id of the connection from where this source is reachable. This should only be set for a source being registered by a tenant user. This field will be depricated in future. Use connections field.", alias="connectionId")
    connections: Optional[List[ConnectionConfig]] = Field(default=None, description="Specfies the list of connections for the source.")
    connector_group_id: Optional[StrictInt] = Field(default=None, description="Specifies the connector group id of connector groups.", alias="connectorGroupId")
    environment: Optional[StrictStr] = Field(default=None, description="Specifies the environment type of the Protection Source.")
    id: Optional[StrictInt] = Field(default=None, description="Source Registration ID. This can be used to retrieve, edit or delete the source registration.")
    name: Optional[StrictStr] = Field(default=None, description="The user specified name for this source.")
    source_id: Optional[StrictInt] = Field(default=None, description="ID of top level source object discovered after the registration.", alias="sourceId")
    source_info: Optional[Object] = Field(default=None, alias="sourceInfo")
    authentication_status: Optional[StrictStr] = Field(default=None, description="Specifies the status of the authentication during the registration of a Protection Source. 'Pending' indicates the authentication is in progress. 'Scheduled' indicates the authentication is scheduled. 'Finished' indicates the authentication is completed. 'RefreshInProgress' indicates the refresh is in progress.", alias="authenticationStatus")
    last_refreshed_time_msecs: Optional[StrictInt] = Field(default=None, description="Specifies the time when the source was last refreshed in milliseconds.", alias="lastRefreshedTimeMsecs")
    registration_time_msecs: Optional[StrictInt] = Field(default=None, description="Specifies the time when the source was registered in milliseconds", alias="registrationTimeMsecs")
    aws_params: Optional[AwsSourceRegistrationParams] = Field(default=None, alias="awsParams")
    azure_params: Optional[AzureSourceRegistrationParams] = Field(default=None, alias="azureParams")
    cassandra_params: Optional[CassandraSourceRegistrationParams] = Field(default=None, alias="cassandraParams")
    couchbase_params: Optional[CouchbaseSourceRegistrationParams] = Field(default=None, alias="couchbaseParams")
    elastifile_params: Optional[ElastifileRegistrationParams] = Field(default=None, alias="elastifileParams")
    external_metadata: Optional[EntityExternalMetadata] = Field(default=None, alias="externalMetadata")
    flashblade_params: Optional[FlashbladeRegistrationParams] = Field(default=None, alias="flashbladeParams")
    generic_nas_params: Optional[GenericNasRegistrationParams] = Field(default=None, alias="genericNasParams")
    gpfs_params: Optional[GpfsRegistrationParams] = Field(default=None, alias="gpfsParams")
    hbase_params: Optional[HbaseSourceRegistrationParams] = Field(default=None, alias="hbaseParams")
    hdfs_params: Optional[HdfsSourceRegistrationParams] = Field(default=None, alias="hdfsParams")
    hive_params: Optional[HiveSourceRegistrationParams] = Field(default=None, alias="hiveParams")
    hyperv_params: Optional[HyperVSourceRegistrationParams] = Field(default=None, alias="hypervParams")
    isilon_params: Optional[IsilonRegistrationParams] = Field(default=None, alias="isilonParams")
    mongodb_params: Optional[MongoDBSourceRegistrationParams] = Field(default=None, alias="mongodbParams")
    netapp_params: Optional[NetappRegistrationParams] = Field(default=None, alias="netappParams")
    office365_params: Optional[Office365SourceRegistrationParams] = Field(default=None, alias="office365Params")
    physical_params: Optional[PhysicalSourceRegistrationParams] = Field(default=None, alias="physicalParams")
    sfdc_params: Optional[SfdcSourceRegistrationParams] = Field(default=None, alias="sfdcParams")
    uda_params: Optional[UdaSourceRegistrationParams] = Field(default=None, alias="udaParams")
    vmware_params: Optional[VmwareSourceRegistrationParams] = Field(default=None, alias="vmwareParams")
    __properties: ClassVar[List[str]] = ["advancedConfigs", "connectionId", "connections", "connectorGroupId", "environment", "id", "name", "sourceId", "sourceInfo", "authenticationStatus", "lastRefreshedTimeMsecs", "registrationTimeMsecs", "awsParams", "azureParams", "cassandraParams", "couchbaseParams", "elastifileParams", "externalMetadata", "flashbladeParams", "genericNasParams", "gpfsParams", "hbaseParams", "hdfsParams", "hiveParams", "hypervParams", "isilonParams", "mongodbParams", "netappParams", "office365Params", "physicalParams", "sfdcParams", "udaParams", "vmwareParams"]

    @field_validator('environment')
    def environment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kVMware', 'kHyperV', 'kAcropolis', 'kKVM', 'kAWS', 'kGCP', 'kAzure', 'kPhysical', 'kPure', 'kIbmFlashSystem', 'kNimble', 'kNetapp', 'kGenericNas', 'kIsilon', 'kFlashBlade', 'kGPFS', 'kElastifile', 'kO365', 'kHyperFlex', 'kKubernetes', 'kCassandra', 'kMongoDB', 'kCouchbase', 'kHdfs', 'kHive', 'kHBase', 'kUDA', 'kSQL', 'kOracle', 'kSfdc']):
            raise ValueError("must be one of enum values ('kVMware', 'kHyperV', 'kAcropolis', 'kKVM', 'kAWS', 'kGCP', 'kAzure', 'kPhysical', 'kPure', 'kIbmFlashSystem', 'kNimble', 'kNetapp', 'kGenericNas', 'kIsilon', 'kFlashBlade', 'kGPFS', 'kElastifile', 'kO365', 'kHyperFlex', 'kKubernetes', 'kCassandra', 'kMongoDB', 'kCouchbase', 'kHdfs', 'kHive', 'kHBase', 'kUDA', 'kSQL', 'kOracle', 'kSfdc')")
        return value

    @field_validator('authentication_status')
    def authentication_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Pending', 'Scheduled', 'Finished', 'RefreshInProgress']):
            raise ValueError("must be one of enum values ('Pending', 'Scheduled', 'Finished', 'RefreshInProgress')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SourceRegistration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "source_id",
            "authentication_status",
            "last_refreshed_time_msecs",
            "registration_time_msecs",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in advanced_configs (list)
        _items = []
        if self.advanced_configs:
            for _item_advanced_configs in self.advanced_configs:
                if _item_advanced_configs:
                    _items.append(_item_advanced_configs.to_dict())
            _dict['advancedConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in connections (list)
        _items = []
        if self.connections:
            for _item_connections in self.connections:
                if _item_connections:
                    _items.append(_item_connections.to_dict())
            _dict['connections'] = _items
        # override the default output from pydantic by calling `to_dict()` of source_info
        if self.source_info:
            _dict['sourceInfo'] = self.source_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aws_params
        if self.aws_params:
            _dict['awsParams'] = self.aws_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_params
        if self.azure_params:
            _dict['azureParams'] = self.azure_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cassandra_params
        if self.cassandra_params:
            _dict['cassandraParams'] = self.cassandra_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of couchbase_params
        if self.couchbase_params:
            _dict['couchbaseParams'] = self.couchbase_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of elastifile_params
        if self.elastifile_params:
            _dict['elastifileParams'] = self.elastifile_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of external_metadata
        if self.external_metadata:
            _dict['externalMetadata'] = self.external_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flashblade_params
        if self.flashblade_params:
            _dict['flashbladeParams'] = self.flashblade_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of generic_nas_params
        if self.generic_nas_params:
            _dict['genericNasParams'] = self.generic_nas_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gpfs_params
        if self.gpfs_params:
            _dict['gpfsParams'] = self.gpfs_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hbase_params
        if self.hbase_params:
            _dict['hbaseParams'] = self.hbase_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hdfs_params
        if self.hdfs_params:
            _dict['hdfsParams'] = self.hdfs_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hive_params
        if self.hive_params:
            _dict['hiveParams'] = self.hive_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hyperv_params
        if self.hyperv_params:
            _dict['hypervParams'] = self.hyperv_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of isilon_params
        if self.isilon_params:
            _dict['isilonParams'] = self.isilon_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mongodb_params
        if self.mongodb_params:
            _dict['mongodbParams'] = self.mongodb_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of netapp_params
        if self.netapp_params:
            _dict['netappParams'] = self.netapp_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of office365_params
        if self.office365_params:
            _dict['office365Params'] = self.office365_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of physical_params
        if self.physical_params:
            _dict['physicalParams'] = self.physical_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sfdc_params
        if self.sfdc_params:
            _dict['sfdcParams'] = self.sfdc_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of uda_params
        if self.uda_params:
            _dict['udaParams'] = self.uda_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vmware_params
        if self.vmware_params:
            _dict['vmwareParams'] = self.vmware_params.to_dict()
        # set to None if advanced_configs (nullable) is None
        # and model_fields_set contains the field
        if self.advanced_configs is None and "advanced_configs" in self.model_fields_set:
            _dict['advancedConfigs'] = None

        # set to None if connection_id (nullable) is None
        # and model_fields_set contains the field
        if self.connection_id is None and "connection_id" in self.model_fields_set:
            _dict['connectionId'] = None

        # set to None if connections (nullable) is None
        # and model_fields_set contains the field
        if self.connections is None and "connections" in self.model_fields_set:
            _dict['connections'] = None

        # set to None if connector_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.connector_group_id is None and "connector_group_id" in self.model_fields_set:
            _dict['connectorGroupId'] = None

        # set to None if environment (nullable) is None
        # and model_fields_set contains the field
        if self.environment is None and "environment" in self.model_fields_set:
            _dict['environment'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if source_id (nullable) is None
        # and model_fields_set contains the field
        if self.source_id is None and "source_id" in self.model_fields_set:
            _dict['sourceId'] = None

        # set to None if authentication_status (nullable) is None
        # and model_fields_set contains the field
        if self.authentication_status is None and "authentication_status" in self.model_fields_set:
            _dict['authenticationStatus'] = None

        # set to None if last_refreshed_time_msecs (nullable) is None
        # and model_fields_set contains the field
        if self.last_refreshed_time_msecs is None and "last_refreshed_time_msecs" in self.model_fields_set:
            _dict['lastRefreshedTimeMsecs'] = None

        # set to None if registration_time_msecs (nullable) is None
        # and model_fields_set contains the field
        if self.registration_time_msecs is None and "registration_time_msecs" in self.model_fields_set:
            _dict['registrationTimeMsecs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SourceRegistration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advancedConfigs": [KeyValuePair.from_dict(_item) for _item in obj["advancedConfigs"]] if obj.get("advancedConfigs") is not None else None,
            "connectionId": obj.get("connectionId"),
            "connections": [ConnectionConfig.from_dict(_item) for _item in obj["connections"]] if obj.get("connections") is not None else None,
            "connectorGroupId": obj.get("connectorGroupId"),
            "environment": obj.get("environment"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "sourceId": obj.get("sourceId"),
            "sourceInfo": Object.from_dict(obj["sourceInfo"]) if obj.get("sourceInfo") is not None else None,
            "authenticationStatus": obj.get("authenticationStatus"),
            "lastRefreshedTimeMsecs": obj.get("lastRefreshedTimeMsecs"),
            "registrationTimeMsecs": obj.get("registrationTimeMsecs"),
            "awsParams": AwsSourceRegistrationParams.from_dict(obj["awsParams"]) if obj.get("awsParams") is not None else None,
            "azureParams": AzureSourceRegistrationParams.from_dict(obj["azureParams"]) if obj.get("azureParams") is not None else None,
            "cassandraParams": CassandraSourceRegistrationParams.from_dict(obj["cassandraParams"]) if obj.get("cassandraParams") is not None else None,
            "couchbaseParams": CouchbaseSourceRegistrationParams.from_dict(obj["couchbaseParams"]) if obj.get("couchbaseParams") is not None else None,
            "elastifileParams": ElastifileRegistrationParams.from_dict(obj["elastifileParams"]) if obj.get("elastifileParams") is not None else None,
            "externalMetadata": EntityExternalMetadata.from_dict(obj["externalMetadata"]) if obj.get("externalMetadata") is not None else None,
            "flashbladeParams": FlashbladeRegistrationParams.from_dict(obj["flashbladeParams"]) if obj.get("flashbladeParams") is not None else None,
            "genericNasParams": GenericNasRegistrationParams.from_dict(obj["genericNasParams"]) if obj.get("genericNasParams") is not None else None,
            "gpfsParams": GpfsRegistrationParams.from_dict(obj["gpfsParams"]) if obj.get("gpfsParams") is not None else None,
            "hbaseParams": HbaseSourceRegistrationParams.from_dict(obj["hbaseParams"]) if obj.get("hbaseParams") is not None else None,
            "hdfsParams": HdfsSourceRegistrationParams.from_dict(obj["hdfsParams"]) if obj.get("hdfsParams") is not None else None,
            "hiveParams": HiveSourceRegistrationParams.from_dict(obj["hiveParams"]) if obj.get("hiveParams") is not None else None,
            "hypervParams": HyperVSourceRegistrationParams.from_dict(obj["hypervParams"]) if obj.get("hypervParams") is not None else None,
            "isilonParams": IsilonRegistrationParams.from_dict(obj["isilonParams"]) if obj.get("isilonParams") is not None else None,
            "mongodbParams": MongoDBSourceRegistrationParams.from_dict(obj["mongodbParams"]) if obj.get("mongodbParams") is not None else None,
            "netappParams": NetappRegistrationParams.from_dict(obj["netappParams"]) if obj.get("netappParams") is not None else None,
            "office365Params": Office365SourceRegistrationParams.from_dict(obj["office365Params"]) if obj.get("office365Params") is not None else None,
            "physicalParams": PhysicalSourceRegistrationParams.from_dict(obj["physicalParams"]) if obj.get("physicalParams") is not None else None,
            "sfdcParams": SfdcSourceRegistrationParams.from_dict(obj["sfdcParams"]) if obj.get("sfdcParams") is not None else None,
            "udaParams": UdaSourceRegistrationParams.from_dict(obj["udaParams"]) if obj.get("udaParams") is not None else None,
            "vmwareParams": VmwareSourceRegistrationParams.from_dict(obj["vmwareParams"]) if obj.get("vmwareParams") is not None else None
        })
        return _obj


