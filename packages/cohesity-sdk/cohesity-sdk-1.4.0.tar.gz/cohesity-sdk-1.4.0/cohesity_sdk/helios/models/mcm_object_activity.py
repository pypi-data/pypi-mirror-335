# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.mcm_object_archival_run_activity_params import McmObjectArchivalRunActivityParams
from cohesity_sdk.helios.models.mcm_object_backup_run_activity_params import McmObjectBackupRunActivityParams
from cohesity_sdk.helios.models.mcm_object_recover_activity_params import McmObjectRecoverActivityParams
from cohesity_sdk.helios.models.object_summary import ObjectSummary
from typing import Set
from typing_extensions import Self

class McmObjectActivity(BaseModel):
    """
    Specifies the Object activity.
    """ # noqa: E501
    archival_run_params: Optional[McmObjectArchivalRunActivityParams] = Field(default=None, alias="archivalRunParams")
    backup_run_params: Optional[McmObjectBackupRunActivityParams] = Field(default=None, alias="backupRunParams")
    cluster_id: Optional[StrictInt] = Field(default=None, description="Specifies the cluster id.", alias="clusterId")
    cluster_incarnation_id: Optional[StrictInt] = Field(default=None, description="Specifies the cluster incarnation id.", alias="clusterIncarnationId")
    id: Optional[StrictStr] = Field(default=None, description="Specifies the unique id of the activity event.")
    object: Optional[ObjectSummary] = None
    recovery_params: Optional[McmObjectRecoverActivityParams] = Field(default=None, alias="recoveryParams")
    region_id: Optional[StrictStr] = Field(default=None, description="Specifies the region id. Applicable only in case of DMaaS.", alias="regionId")
    source_info: Optional[ObjectSummary] = Field(default=None, alias="sourceInfo")
    timestamp_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the timestamp in Unix timestamp epoch in microseconds at which this activity occured.", alias="timestampUsecs")
    type: Optional[StrictStr] = Field(default=None, description="Specifies the type of activity event.")
    __properties: ClassVar[List[str]] = ["archivalRunParams", "backupRunParams", "clusterId", "clusterIncarnationId", "id", "object", "recoveryParams", "regionId", "sourceInfo", "timestampUsecs", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BackupRun', 'Restore', 'ArchivalRun']):
            raise ValueError("must be one of enum values ('BackupRun', 'Restore', 'ArchivalRun')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of McmObjectActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster_id",
            "cluster_incarnation_id",
            "region_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of archival_run_params
        if self.archival_run_params:
            _dict['archivalRunParams'] = self.archival_run_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backup_run_params
        if self.backup_run_params:
            _dict['backupRunParams'] = self.backup_run_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object
        if self.object:
            _dict['object'] = self.object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recovery_params
        if self.recovery_params:
            _dict['recoveryParams'] = self.recovery_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_info
        if self.source_info:
            _dict['sourceInfo'] = self.source_info.to_dict()
        # set to None if cluster_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_id is None and "cluster_id" in self.model_fields_set:
            _dict['clusterId'] = None

        # set to None if cluster_incarnation_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_incarnation_id is None and "cluster_incarnation_id" in self.model_fields_set:
            _dict['clusterIncarnationId'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if region_id (nullable) is None
        # and model_fields_set contains the field
        if self.region_id is None and "region_id" in self.model_fields_set:
            _dict['regionId'] = None

        # set to None if timestamp_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp_usecs is None and "timestamp_usecs" in self.model_fields_set:
            _dict['timestampUsecs'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of McmObjectActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archivalRunParams": McmObjectArchivalRunActivityParams.from_dict(obj["archivalRunParams"]) if obj.get("archivalRunParams") is not None else None,
            "backupRunParams": McmObjectBackupRunActivityParams.from_dict(obj["backupRunParams"]) if obj.get("backupRunParams") is not None else None,
            "clusterId": obj.get("clusterId"),
            "clusterIncarnationId": obj.get("clusterIncarnationId"),
            "id": obj.get("id"),
            "object": ObjectSummary.from_dict(obj["object"]) if obj.get("object") is not None else None,
            "recoveryParams": McmObjectRecoverActivityParams.from_dict(obj["recoveryParams"]) if obj.get("recoveryParams") is not None else None,
            "regionId": obj.get("regionId"),
            "sourceInfo": ObjectSummary.from_dict(obj["sourceInfo"]) if obj.get("sourceInfo") is not None else None,
            "timestampUsecs": obj.get("timestampUsecs"),
            "type": obj.get("type")
        })
        return _obj


