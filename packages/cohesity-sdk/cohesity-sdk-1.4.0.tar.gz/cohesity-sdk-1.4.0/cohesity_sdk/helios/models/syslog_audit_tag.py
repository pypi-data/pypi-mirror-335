# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class SyslogAuditTag(BaseModel):
    """
    Cohesity audit tag name.
    """ # noqa: E501
    alert_audit: Optional[StrictStr] = Field(default=None, description="Alert audit tagging name.", alias="alertAudit")
    cluster_audit: Optional[StrictStr] = Field(default=None, description="Cluster audit tagging name.", alias="clusterAudit")
    data_protection_events_audit: Optional[StrictStr] = Field(default=None, description="Data protection events audit tagging name.", alias="dataProtectionEventsAudit")
    filer_audit: Optional[StrictStr] = Field(default=None, description="Filer audit tagging name.", alias="filerAudit")
    __properties: ClassVar[List[str]] = ["alertAudit", "clusterAudit", "dataProtectionEventsAudit", "filerAudit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyslogAuditTag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if alert_audit (nullable) is None
        # and model_fields_set contains the field
        if self.alert_audit is None and "alert_audit" in self.model_fields_set:
            _dict['alertAudit'] = None

        # set to None if cluster_audit (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_audit is None and "cluster_audit" in self.model_fields_set:
            _dict['clusterAudit'] = None

        # set to None if data_protection_events_audit (nullable) is None
        # and model_fields_set contains the field
        if self.data_protection_events_audit is None and "data_protection_events_audit" in self.model_fields_set:
            _dict['dataProtectionEventsAudit'] = None

        # set to None if filer_audit (nullable) is None
        # and model_fields_set contains the field
        if self.filer_audit is None and "filer_audit" in self.model_fields_set:
            _dict['filerAudit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyslogAuditTag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertAudit": obj.get("alertAudit"),
            "clusterAudit": obj.get("clusterAudit"),
            "dataProtectionEventsAudit": obj.get("dataProtectionEventsAudit"),
            "filerAudit": obj.get("filerAudit")
        })
        return _obj


