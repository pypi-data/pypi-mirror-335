# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class NodeUnitProgress(BaseModel):
    """
    Specifies the progress of the patch operation on a node.
    """ # noqa: E501
    in_progress: Optional[StrictBool] = Field(default=None, description="Specifies whether a operation is in progress on the node.", alias="inProgress")
    node_ip: Optional[StrictStr] = Field(default=None, description="Specifies the IP address of the node.", alias="nodeIp")
    node_message: Optional[StrictStr] = Field(default=None, description="Specifies a message about the patch operation on the node.", alias="nodeMessage")
    patch_level_transition: Optional[StrictStr] = Field(default=None, description="Specifies the patch level transition of the patch operation. For Apply operation, patch level goes up for each operation. For Revert operation, patch level goes down. Patch level zero is the base level where no patch was applied.", alias="patchLevelTransition")
    percentage: Optional[StrictInt] = Field(default=None, description="Specifies the percentage of completion of the patch operation on the node.")
    time_taken_seconds: Optional[StrictInt] = Field(default=None, description="Specifies the time taken so far in this patch unit operation on the node.", alias="timeTakenSeconds")
    __properties: ClassVar[List[str]] = ["inProgress", "nodeIp", "nodeMessage", "patchLevelTransition", "percentage", "timeTakenSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeUnitProgress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if in_progress (nullable) is None
        # and model_fields_set contains the field
        if self.in_progress is None and "in_progress" in self.model_fields_set:
            _dict['inProgress'] = None

        # set to None if node_ip (nullable) is None
        # and model_fields_set contains the field
        if self.node_ip is None and "node_ip" in self.model_fields_set:
            _dict['nodeIp'] = None

        # set to None if node_message (nullable) is None
        # and model_fields_set contains the field
        if self.node_message is None and "node_message" in self.model_fields_set:
            _dict['nodeMessage'] = None

        # set to None if patch_level_transition (nullable) is None
        # and model_fields_set contains the field
        if self.patch_level_transition is None and "patch_level_transition" in self.model_fields_set:
            _dict['patchLevelTransition'] = None

        # set to None if percentage (nullable) is None
        # and model_fields_set contains the field
        if self.percentage is None and "percentage" in self.model_fields_set:
            _dict['percentage'] = None

        # set to None if time_taken_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.time_taken_seconds is None and "time_taken_seconds" in self.model_fields_set:
            _dict['timeTakenSeconds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeUnitProgress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inProgress": obj.get("inProgress"),
            "nodeIp": obj.get("nodeIp"),
            "nodeMessage": obj.get("nodeMessage"),
            "patchLevelTransition": obj.get("patchLevelTransition"),
            "percentage": obj.get("percentage"),
            "timeTakenSeconds": obj.get("timeTakenSeconds")
        })
        return _obj


