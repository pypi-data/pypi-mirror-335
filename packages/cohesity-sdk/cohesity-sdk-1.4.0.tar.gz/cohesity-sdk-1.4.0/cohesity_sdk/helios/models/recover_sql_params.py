# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cohesity_sdk.helios.models.recover_sql_app_params import RecoverSqlAppParams
from cohesity_sdk.helios.models.recovery_vlan_config import RecoveryVlanConfig
from typing import Set
from typing_extensions import Self

class RecoverSqlParams(BaseModel):
    """
    Specifies the recovery options specific to Sql environment.
    """ # noqa: E501
    recover_app_params: Optional[Annotated[List[RecoverSqlAppParams], Field(min_length=1)]] = Field(default=None, description="Specifies the parameters to recover Sql databases.", alias="recoverAppParams")
    recovery_action: StrictStr = Field(description="Specifies the type of recover action to be performed.", alias="recoveryAction")
    vlan_config: Optional[RecoveryVlanConfig] = Field(default=None, description="Specifies VLAN Params associated with the recovered. If this is not specified, then the VLAN settings will be automatically selected from one of the below options: a. If VLANs are configured on Cohesity, then the VLAN host/VIP will be automatically based on the client's (e.g. ESXI host) IP address. b. If VLANs are not configured on Cohesity, then the partition hostname or VIPs will be used for Recovery.", alias="vlanConfig")
    __properties: ClassVar[List[str]] = ["recoverAppParams", "recoveryAction", "vlanConfig"]

    @field_validator('recovery_action')
    def recovery_action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['RecoverApps', 'CloneApps']):
            raise ValueError("must be one of enum values ('RecoverApps', 'CloneApps')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecoverSqlParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in recover_app_params (list)
        _items = []
        if self.recover_app_params:
            for _item_recover_app_params in self.recover_app_params:
                if _item_recover_app_params:
                    _items.append(_item_recover_app_params.to_dict())
            _dict['recoverAppParams'] = _items
        # override the default output from pydantic by calling `to_dict()` of vlan_config
        if self.vlan_config:
            _dict['vlanConfig'] = self.vlan_config.to_dict()
        # set to None if recover_app_params (nullable) is None
        # and model_fields_set contains the field
        if self.recover_app_params is None and "recover_app_params" in self.model_fields_set:
            _dict['recoverAppParams'] = None

        # set to None if vlan_config (nullable) is None
        # and model_fields_set contains the field
        if self.vlan_config is None and "vlan_config" in self.model_fields_set:
            _dict['vlanConfig'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecoverSqlParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "recoverAppParams": [RecoverSqlAppParams.from_dict(_item) for _item in obj["recoverAppParams"]] if obj.get("recoverAppParams") is not None else None,
            "recoveryAction": obj.get("recoveryAction"),
            "vlanConfig": RecoveryVlanConfig.from_dict(obj["vlanConfig"]) if obj.get("vlanConfig") is not None else None
        })
        return _obj


