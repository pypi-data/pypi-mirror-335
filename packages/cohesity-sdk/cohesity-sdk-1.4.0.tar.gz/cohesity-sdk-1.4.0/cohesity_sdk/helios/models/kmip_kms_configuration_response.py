# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class KmipKmsConfigurationResponse(BaseModel):
    """
    KMIP compliant KMS configuration response params.
    """ # noqa: E501
    additional_server_address: Optional[List[StrictStr]] = Field(default=None, description="Additional KMS server IP address or FQDNs for fail over.", alias="AdditionalServerAddress")
    certificate_expiry_date: Optional[StrictInt] = Field(default=None, description="Specifies expiry date of client certificate in msecs.", alias="certificateExpiryDate")
    port: Optional[StrictInt] = Field(default=5696, description="Port on which the KMS server is listening.")
    protocol_version: Optional[StrictStr] = Field(default=None, description="KMIP protocol version used to communicate with the KMS.", alias="protocolVersion")
    server: Optional[StrictStr] = Field(default=None, description="KMS server IP address or FQDN.")
    __properties: ClassVar[List[str]] = ["AdditionalServerAddress", "certificateExpiryDate", "port", "protocolVersion", "server"]

    @field_validator('protocol_version')
    def protocol_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KMIP1_1', 'KMIP1_2', 'KMIP1_3', 'KMIP1_4', 'KMIP2_0']):
            raise ValueError("must be one of enum values ('KMIP1_1', 'KMIP1_2', 'KMIP1_3', 'KMIP1_4', 'KMIP2_0')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KmipKmsConfigurationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "certificate_expiry_date",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if certificate_expiry_date (nullable) is None
        # and model_fields_set contains the field
        if self.certificate_expiry_date is None and "certificate_expiry_date" in self.model_fields_set:
            _dict['certificateExpiryDate'] = None

        # set to None if port (nullable) is None
        # and model_fields_set contains the field
        if self.port is None and "port" in self.model_fields_set:
            _dict['port'] = None

        # set to None if protocol_version (nullable) is None
        # and model_fields_set contains the field
        if self.protocol_version is None and "protocol_version" in self.model_fields_set:
            _dict['protocolVersion'] = None

        # set to None if server (nullable) is None
        # and model_fields_set contains the field
        if self.server is None and "server" in self.model_fields_set:
            _dict['server'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KmipKmsConfigurationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AdditionalServerAddress": obj.get("AdditionalServerAddress"),
            "certificateExpiryDate": obj.get("certificateExpiryDate"),
            "port": obj.get("port") if obj.get("port") is not None else 5696,
            "protocolVersion": obj.get("protocolVersion"),
            "server": obj.get("server")
        })
        return _obj


