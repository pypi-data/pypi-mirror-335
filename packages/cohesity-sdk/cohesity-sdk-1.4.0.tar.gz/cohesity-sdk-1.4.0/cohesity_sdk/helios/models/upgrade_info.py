# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from cohesity_sdk.helios.models.node_upgrade_log import NodeUpgradeLog
from typing import Set
from typing_extensions import Self

class UpgradeInfo(BaseModel):
    """
    Upgrade progress and upgrade status of cluster. It returns the percentage complete.
    """ # noqa: E501
    cluster_id: Optional[StrictInt] = Field(default=None, description="Specifies cluster's id.", alias="clusterId")
    cluster_incarnation_id: Optional[StrictInt] = Field(default=None, description="Specifies cluster's incarnation id.", alias="clusterIncarnationId")
    software_version: Optional[StrictStr] = Field(default=None, description="Upgrade software version against which these logs are generated.", alias="softwareVersion")
    upgrade_logs: Optional[List[NodeUpgradeLog]] = Field(default=None, description="Upgrade logs per node.", alias="upgradeLogs")
    upgrade_percent_complete: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Upgrade percentage complete so far.", alias="upgradePercentComplete")
    upgrade_status: Optional[StrictStr] = Field(default=None, description="Upgrade status.", alias="upgradeStatus")
    __properties: ClassVar[List[str]] = ["clusterId", "clusterIncarnationId", "softwareVersion", "upgradeLogs", "upgradePercentComplete", "upgradeStatus"]

    @field_validator('upgrade_status')
    def upgrade_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Complete', 'InProgress', 'Failed', 'ClusterUnreachable']):
            raise ValueError("must be one of enum values ('Complete', 'InProgress', 'Failed', 'ClusterUnreachable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpgradeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in upgrade_logs (list)
        _items = []
        if self.upgrade_logs:
            for _item_upgrade_logs in self.upgrade_logs:
                if _item_upgrade_logs:
                    _items.append(_item_upgrade_logs.to_dict())
            _dict['upgradeLogs'] = _items
        # set to None if software_version (nullable) is None
        # and model_fields_set contains the field
        if self.software_version is None and "software_version" in self.model_fields_set:
            _dict['softwareVersion'] = None

        # set to None if upgrade_logs (nullable) is None
        # and model_fields_set contains the field
        if self.upgrade_logs is None and "upgrade_logs" in self.model_fields_set:
            _dict['upgradeLogs'] = None

        # set to None if upgrade_percent_complete (nullable) is None
        # and model_fields_set contains the field
        if self.upgrade_percent_complete is None and "upgrade_percent_complete" in self.model_fields_set:
            _dict['upgradePercentComplete'] = None

        # set to None if upgrade_status (nullable) is None
        # and model_fields_set contains the field
        if self.upgrade_status is None and "upgrade_status" in self.model_fields_set:
            _dict['upgradeStatus'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpgradeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterId": obj.get("clusterId"),
            "clusterIncarnationId": obj.get("clusterIncarnationId"),
            "softwareVersion": obj.get("softwareVersion"),
            "upgradeLogs": [NodeUpgradeLog.from_dict(_item) for _item in obj["upgradeLogs"]] if obj.get("upgradeLogs") is not None else None,
            "upgradePercentComplete": obj.get("upgradePercentComplete"),
            "upgradeStatus": obj.get("upgradeStatus")
        })
        return _obj


