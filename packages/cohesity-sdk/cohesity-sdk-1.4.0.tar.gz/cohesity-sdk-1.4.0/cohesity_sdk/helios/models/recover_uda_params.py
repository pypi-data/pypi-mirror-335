# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.key_value_pair import KeyValuePair
from cohesity_sdk.helios.models.recover_uda_snapshot_params import RecoverUdaSnapshotParams
from typing import Set
from typing_extensions import Self

class RecoverUdaParams(BaseModel):
    """
    Specifies the parameters to recover Universal Data Adapter objects.
    """ # noqa: E501
    concurrency: Optional[StrictInt] = Field(default=1, description="Specifies the maximum number of concurrent IO Streams that will be created to exchange data with the cluster. If not specified, the default value is taken as 1.")
    mounts: Optional[StrictInt] = Field(default=1, description="Specifies the maximum number of view mounts per host. If not specified, the default value is taken as 1.")
    recover_to: Optional[StrictInt] = Field(default=None, description="Specifies the 'Source Registration ID' of the source where the objects are to be recovered. If this is not specified, the recovery job will recover to the original location.", alias="recoverTo")
    recovery_args: Optional[StrictStr] = Field(default=None, description="Specifies the custom arguments to be supplied to the restore job script. This field is deprecated. Use recoveryJobArguments instead.", alias="recoveryArgs")
    recovery_job_arguments: Optional[List[KeyValuePair]] = Field(default=None, description="Specifies the map of custom arguments to be supplied to the restore job script.", alias="recoveryJobArguments")
    snapshots: Optional[List[RecoverUdaSnapshotParams]] = Field(description="Specifies the local snapshot ids and other details of the objects to be recovered.")
    warnings: Optional[List[StrictStr]] = Field(default=None, description="This field will hold the warnings in cases where the job status is SucceededWithWarnings.")
    __properties: ClassVar[List[str]] = ["concurrency", "mounts", "recoverTo", "recoveryArgs", "recoveryJobArguments", "snapshots", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecoverUdaParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "warnings",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in recovery_job_arguments (list)
        _items = []
        if self.recovery_job_arguments:
            for _item_recovery_job_arguments in self.recovery_job_arguments:
                if _item_recovery_job_arguments:
                    _items.append(_item_recovery_job_arguments.to_dict())
            _dict['recoveryJobArguments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in snapshots (list)
        _items = []
        if self.snapshots:
            for _item_snapshots in self.snapshots:
                if _item_snapshots:
                    _items.append(_item_snapshots.to_dict())
            _dict['snapshots'] = _items
        # set to None if concurrency (nullable) is None
        # and model_fields_set contains the field
        if self.concurrency is None and "concurrency" in self.model_fields_set:
            _dict['concurrency'] = None

        # set to None if mounts (nullable) is None
        # and model_fields_set contains the field
        if self.mounts is None and "mounts" in self.model_fields_set:
            _dict['mounts'] = None

        # set to None if recover_to (nullable) is None
        # and model_fields_set contains the field
        if self.recover_to is None and "recover_to" in self.model_fields_set:
            _dict['recoverTo'] = None

        # set to None if recovery_args (nullable) is None
        # and model_fields_set contains the field
        if self.recovery_args is None and "recovery_args" in self.model_fields_set:
            _dict['recoveryArgs'] = None

        # set to None if recovery_job_arguments (nullable) is None
        # and model_fields_set contains the field
        if self.recovery_job_arguments is None and "recovery_job_arguments" in self.model_fields_set:
            _dict['recoveryJobArguments'] = None

        # set to None if snapshots (nullable) is None
        # and model_fields_set contains the field
        if self.snapshots is None and "snapshots" in self.model_fields_set:
            _dict['snapshots'] = None

        # set to None if warnings (nullable) is None
        # and model_fields_set contains the field
        if self.warnings is None and "warnings" in self.model_fields_set:
            _dict['warnings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecoverUdaParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "concurrency": obj.get("concurrency") if obj.get("concurrency") is not None else 1,
            "mounts": obj.get("mounts") if obj.get("mounts") is not None else 1,
            "recoverTo": obj.get("recoverTo"),
            "recoveryArgs": obj.get("recoveryArgs"),
            "recoveryJobArguments": [KeyValuePair.from_dict(_item) for _item in obj["recoveryJobArguments"]] if obj.get("recoveryJobArguments") is not None else None,
            "snapshots": [RecoverUdaSnapshotParams.from_dict(_item) for _item in obj["snapshots"]] if obj.get("snapshots") is not None else None,
            "warnings": obj.get("warnings")
        })
        return _obj


