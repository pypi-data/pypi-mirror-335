# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.time_of_day import TimeOfDay
from typing import Set
from typing_extensions import Self

class TimeOfAWeek(BaseModel):
    """
    Specifies a time period by specifying a single daily time period and one or more days of the week, for example 9 AM - 5 PM on Monday, Wednesday or Friday. If different time periods are required on different days, then multiple instances of this Weekly Time Period must be specified.
    """ # noqa: E501
    days: Optional[List[StrictStr]] = Field(default=None, description="Array of Week Days. Specifies a list of days of a week (such as 'Sunday') when the time period should be applied. If not set, the time range applies to all days of the week. Specifies a day in a week such as 'Sunday', 'Monday', etc.")
    end_time: Optional[TimeOfDay] = Field(default=None, alias="endTime")
    is_all_day: Optional[StrictBool] = Field(default=None, description="All Day. Specifies that bandwidth limit is applied for entire day.", alias="isAllDay")
    start_time: Optional[TimeOfDay] = Field(default=None, alias="startTime")
    __properties: ClassVar[List[str]] = ["days", "endTime", "isAllDay", "startTime"]

    @field_validator('days')
    def days_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']):
                raise ValueError("each list item must be one of ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeOfAWeek from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end_time
        if self.end_time:
            _dict['endTime'] = self.end_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_time
        if self.start_time:
            _dict['startTime'] = self.start_time.to_dict()
        # set to None if days (nullable) is None
        # and model_fields_set contains the field
        if self.days is None and "days" in self.model_fields_set:
            _dict['days'] = None

        # set to None if is_all_day (nullable) is None
        # and model_fields_set contains the field
        if self.is_all_day is None and "is_all_day" in self.model_fields_set:
            _dict['isAllDay'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeOfAWeek from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "days": obj.get("days"),
            "endTime": TimeOfDay.from_dict(obj["endTime"]) if obj.get("endTime") is not None else None,
            "isAllDay": obj.get("isAllDay"),
            "startTime": TimeOfDay.from_dict(obj["startTime"]) if obj.get("startTime") is not None else None
        })
        return _obj


