# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.credentials import Credentials
from cohesity_sdk.helios.models.recover_target import RecoverTarget
from typing import Set
from typing_extensions import Self

class VMwareMountVolumesNewTargetConfig(BaseModel):
    """
    Specifies the configuration for mounting volumes to a new target.
    """ # noqa: E501
    bring_disks_online: Optional[StrictBool] = Field(description="Specifies whether the volumes need to be online within the target environment after attaching the disks. For linux VMs, this should always be set to true. For Windows, this is optional. If this is set to true, VMware tools must be installed on the VM. If this is set to false, useExistingAgent and targetCredentials are not needed.", alias="bringDisksOnline")
    mount_target: RecoverTarget = Field(alias="mountTarget")
    target_vm_credentials: Optional[Credentials] = Field(default=None, description="Specifies credentials to access the target VM. This is required if bringDisksOnline is set to true and useExistingAgent set to false.", alias="targetVmCredentials")
    use_existing_agent: Optional[StrictBool] = Field(default=None, description="Specifies whether this will use an existing agent on the target vm or will deploy a new agent. This is required if bringDisksOnline is set to true.", alias="useExistingAgent")
    __properties: ClassVar[List[str]] = ["bringDisksOnline", "mountTarget", "targetVmCredentials", "useExistingAgent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VMwareMountVolumesNewTargetConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of mount_target
        if self.mount_target:
            _dict['mountTarget'] = self.mount_target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_vm_credentials
        if self.target_vm_credentials:
            _dict['targetVmCredentials'] = self.target_vm_credentials.to_dict()
        # set to None if bring_disks_online (nullable) is None
        # and model_fields_set contains the field
        if self.bring_disks_online is None and "bring_disks_online" in self.model_fields_set:
            _dict['bringDisksOnline'] = None

        # set to None if target_vm_credentials (nullable) is None
        # and model_fields_set contains the field
        if self.target_vm_credentials is None and "target_vm_credentials" in self.model_fields_set:
            _dict['targetVmCredentials'] = None

        # set to None if use_existing_agent (nullable) is None
        # and model_fields_set contains the field
        if self.use_existing_agent is None and "use_existing_agent" in self.model_fields_set:
            _dict['useExistingAgent'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VMwareMountVolumesNewTargetConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bringDisksOnline": obj.get("bringDisksOnline"),
            "mountTarget": RecoverTarget.from_dict(obj["mountTarget"]) if obj.get("mountTarget") is not None else None,
            "targetVmCredentials": Credentials.from_dict(obj["targetVmCredentials"]) if obj.get("targetVmCredentials") is not None else None,
            "useExistingAgent": obj.get("useExistingAgent")
        })
        return _obj


