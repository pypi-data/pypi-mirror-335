# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.entity_identifiers import EntityIdentifiers
from cohesity_sdk.helios.models.version_info import VersionInfo
from typing import Set
from typing_extensions import Self

class StringEntityIds(BaseModel):
    """
    Specifies the model to uniquely id an entity. This model also specifies the previous ids for a given entity.
    """ # noqa: E501
    latest_id: Optional[VersionInfo] = Field(default=None, alias="latestId")
    latest_source_generated_ids: Optional[List[EntityIdentifiers]] = Field(default=None, description="Specifies the latest source-generated ID for an entity. It provides the most current identifier assigned by the primary source system.", alias="latestSourceGeneratedIds")
    previous_ids: Optional[List[VersionInfo]] = Field(default=None, description="Specifies all the StringIds previously assigned to this entity. Note that it doesn't contain the latest id.", alias="previousIds")
    previous_source_generated_ids: Optional[List[EntityIdentifiers]] = Field(default=None, description="Specifies a list of previously assigned source-generated IDs for an entity. It helps in tracking the historical identifiers that were assigned by the primary source system. This can be useful for audit trails, debugging, or migration purposes.", alias="previousSourceGeneratedIds")
    __properties: ClassVar[List[str]] = ["latestId", "latestSourceGeneratedIds", "previousIds", "previousSourceGeneratedIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StringEntityIds from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of latest_id
        if self.latest_id:
            _dict['latestId'] = self.latest_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in latest_source_generated_ids (list)
        _items = []
        if self.latest_source_generated_ids:
            for _item_latest_source_generated_ids in self.latest_source_generated_ids:
                if _item_latest_source_generated_ids:
                    _items.append(_item_latest_source_generated_ids.to_dict())
            _dict['latestSourceGeneratedIds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in previous_ids (list)
        _items = []
        if self.previous_ids:
            for _item_previous_ids in self.previous_ids:
                if _item_previous_ids:
                    _items.append(_item_previous_ids.to_dict())
            _dict['previousIds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in previous_source_generated_ids (list)
        _items = []
        if self.previous_source_generated_ids:
            for _item_previous_source_generated_ids in self.previous_source_generated_ids:
                if _item_previous_source_generated_ids:
                    _items.append(_item_previous_source_generated_ids.to_dict())
            _dict['previousSourceGeneratedIds'] = _items
        # set to None if latest_source_generated_ids (nullable) is None
        # and model_fields_set contains the field
        if self.latest_source_generated_ids is None and "latest_source_generated_ids" in self.model_fields_set:
            _dict['latestSourceGeneratedIds'] = None

        # set to None if previous_ids (nullable) is None
        # and model_fields_set contains the field
        if self.previous_ids is None and "previous_ids" in self.model_fields_set:
            _dict['previousIds'] = None

        # set to None if previous_source_generated_ids (nullable) is None
        # and model_fields_set contains the field
        if self.previous_source_generated_ids is None and "previous_source_generated_ids" in self.model_fields_set:
            _dict['previousSourceGeneratedIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StringEntityIds from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "latestId": VersionInfo.from_dict(obj["latestId"]) if obj.get("latestId") is not None else None,
            "latestSourceGeneratedIds": [EntityIdentifiers.from_dict(_item) for _item in obj["latestSourceGeneratedIds"]] if obj.get("latestSourceGeneratedIds") is not None else None,
            "previousIds": [VersionInfo.from_dict(_item) for _item in obj["previousIds"]] if obj.get("previousIds") is not None else None,
            "previousSourceGeneratedIds": [EntityIdentifiers.from_dict(_item) for _item in obj["previousSourceGeneratedIds"]] if obj.get("previousSourceGeneratedIds") is not None else None
        })
        return _obj


