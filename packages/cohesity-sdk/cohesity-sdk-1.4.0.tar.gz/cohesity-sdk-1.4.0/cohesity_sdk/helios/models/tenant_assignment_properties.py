# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.get_views_result import GetViewsResult
from cohesity_sdk.helios.models.protection_policy_response_with_pagination import ProtectionPolicyResponseWithPagination
from cohesity_sdk.helios.models.storage_domains import StorageDomains
from typing import Set
from typing_extensions import Self

class TenantAssignmentProperties(BaseModel):
    """
    List of all the assigned properties to a Tenant.
    """ # noqa: E501
    objects: Optional[List[StrictInt]] = Field(default=None, description="A list of Ids of properties assigned to the tenant.")
    policies: Optional[ProtectionPolicyResponseWithPagination] = None
    storage_domains: Optional[StorageDomains] = Field(default=None, alias="storageDomains")
    views: Optional[GetViewsResult] = None
    vlans: Optional[List[StrictStr]] = Field(default=None, description="A list of Ids of properties assigned to the tenant.")
    __properties: ClassVar[List[str]] = ["objects", "policies", "storageDomains", "views", "vlans"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TenantAssignmentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of policies
        if self.policies:
            _dict['policies'] = self.policies.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_domains
        if self.storage_domains:
            _dict['storageDomains'] = self.storage_domains.to_dict()
        # override the default output from pydantic by calling `to_dict()` of views
        if self.views:
            _dict['views'] = self.views.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TenantAssignmentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "objects": obj.get("objects"),
            "policies": ProtectionPolicyResponseWithPagination.from_dict(obj["policies"]) if obj.get("policies") is not None else None,
            "storageDomains": StorageDomains.from_dict(obj["storageDomains"]) if obj.get("storageDomains") is not None else None,
            "views": GetViewsResult.from_dict(obj["views"]) if obj.get("views") is not None else None,
            "vlans": obj.get("vlans")
        })
        return _obj


