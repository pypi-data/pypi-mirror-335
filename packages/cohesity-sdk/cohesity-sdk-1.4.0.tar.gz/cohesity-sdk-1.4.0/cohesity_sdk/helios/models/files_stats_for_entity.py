# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.file_stats import FileStats
from typing import Set
from typing_extensions import Self

class FilesStatsForEntity(BaseModel):
    """
    Specifies the files stats for an entity.
    """ # noqa: E501
    cluster_id: Optional[StrictInt] = Field(default=None, description="Specifies the cluster id of the entity.", alias="clusterId")
    cluster_incarnation_id: Optional[StrictInt] = Field(default=None, description="Specifies the cluster incarnation id of the entity.", alias="clusterIncarnationId")
    entity_id: Optional[StrictInt] = Field(default=None, description="Specifies the entity id.", alias="entityId")
    entity_name: Optional[StrictStr] = Field(default=None, description="Specifies the entity name.", alias="entityName")
    entity_type: Optional[StrictStr] = Field(default=None, description="Specifies the entity type.", alias="entityType")
    files_stats: Optional[List[FileStats]] = Field(default=None, description="Specifies a list of files stats for the entity.", alias="filesStats")
    __properties: ClassVar[List[str]] = ["clusterId", "clusterIncarnationId", "entityId", "entityName", "entityType", "filesStats"]

    @field_validator('entity_type')
    def entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kCluster', 'kStorageDomain']):
            raise ValueError("must be one of enum values ('kCluster', 'kStorageDomain')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilesStatsForEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in files_stats (list)
        _items = []
        if self.files_stats:
            for _item_files_stats in self.files_stats:
                if _item_files_stats:
                    _items.append(_item_files_stats.to_dict())
            _dict['filesStats'] = _items
        # set to None if cluster_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_id is None and "cluster_id" in self.model_fields_set:
            _dict['clusterId'] = None

        # set to None if cluster_incarnation_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_incarnation_id is None and "cluster_incarnation_id" in self.model_fields_set:
            _dict['clusterIncarnationId'] = None

        # set to None if entity_id (nullable) is None
        # and model_fields_set contains the field
        if self.entity_id is None and "entity_id" in self.model_fields_set:
            _dict['entityId'] = None

        # set to None if entity_name (nullable) is None
        # and model_fields_set contains the field
        if self.entity_name is None and "entity_name" in self.model_fields_set:
            _dict['entityName'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if files_stats (nullable) is None
        # and model_fields_set contains the field
        if self.files_stats is None and "files_stats" in self.model_fields_set:
            _dict['filesStats'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilesStatsForEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterId": obj.get("clusterId"),
            "clusterIncarnationId": obj.get("clusterIncarnationId"),
            "entityId": obj.get("entityId"),
            "entityName": obj.get("entityName"),
            "entityType": obj.get("entityType"),
            "filesStats": [FileStats.from_dict(_item) for _item in obj["filesStats"]] if obj.get("filesStats") is not None else None
        })
        return _obj


