# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class ObjectProtectionStatsSummary(BaseModel):
    """
    Specifies the count and size of protected and unprotected objects for a given environment.
    """ # noqa: E501
    deleted_protected_count: Optional[StrictInt] = Field(default=None, description="Specifies the count of protected leaf objects which were deleted from the source after being protected.", alias="deletedProtectedCount")
    environment: Optional[StrictStr] = Field(default=None, description="Specifies the environment of the object.")
    protected_count: Optional[StrictInt] = Field(default=None, description="Specifies the count of the protected leaf objects.", alias="protectedCount")
    protected_size_bytes: Optional[StrictInt] = Field(default=None, description="Specifies the protected logical size in bytes.", alias="protectedSizeBytes")
    unprotected_count: Optional[StrictInt] = Field(default=None, description="Specifies the count of the unprotected leaf objects.", alias="unprotectedCount")
    unprotected_size_bytes: Optional[StrictInt] = Field(default=None, description="Specifies the unprotected logical size in bytes.", alias="unprotectedSizeBytes")
    __properties: ClassVar[List[str]] = ["deletedProtectedCount", "environment", "protectedCount", "protectedSizeBytes", "unprotectedCount", "unprotectedSizeBytes"]

    @field_validator('environment')
    def environment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kVMware', 'kHyperV', 'kAzure', 'kKVM', 'kAWS', 'kAzureSQL', 'kAcropolis', 'kGCP', 'kPhysical', 'kPhysicalFiles', 'kIsilon', 'kNetapp', 'kGenericNas', 'kFlashBlade', 'kElastifile', 'kGPFS', 'kPure', 'kIbmFlashSystem', 'kNimble', 'kSQL', 'kOracle', 'kExchange', 'kAD', 'kView', 'kO365', 'kHyperFlex', 'kKubernetes', 'kCassandra', 'kMongoDB', 'kCouchbase', 'kHdfs', 'kHive', 'kHBase', 'kUDA', 'kSfdc']):
            raise ValueError("must be one of enum values ('kVMware', 'kHyperV', 'kAzure', 'kKVM', 'kAWS', 'kAzureSQL', 'kAcropolis', 'kGCP', 'kPhysical', 'kPhysicalFiles', 'kIsilon', 'kNetapp', 'kGenericNas', 'kFlashBlade', 'kElastifile', 'kGPFS', 'kPure', 'kIbmFlashSystem', 'kNimble', 'kSQL', 'kOracle', 'kExchange', 'kAD', 'kView', 'kO365', 'kHyperFlex', 'kKubernetes', 'kCassandra', 'kMongoDB', 'kCouchbase', 'kHdfs', 'kHive', 'kHBase', 'kUDA', 'kSfdc')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjectProtectionStatsSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if deleted_protected_count (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_protected_count is None and "deleted_protected_count" in self.model_fields_set:
            _dict['deletedProtectedCount'] = None

        # set to None if environment (nullable) is None
        # and model_fields_set contains the field
        if self.environment is None and "environment" in self.model_fields_set:
            _dict['environment'] = None

        # set to None if protected_count (nullable) is None
        # and model_fields_set contains the field
        if self.protected_count is None and "protected_count" in self.model_fields_set:
            _dict['protectedCount'] = None

        # set to None if protected_size_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.protected_size_bytes is None and "protected_size_bytes" in self.model_fields_set:
            _dict['protectedSizeBytes'] = None

        # set to None if unprotected_count (nullable) is None
        # and model_fields_set contains the field
        if self.unprotected_count is None and "unprotected_count" in self.model_fields_set:
            _dict['unprotectedCount'] = None

        # set to None if unprotected_size_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.unprotected_size_bytes is None and "unprotected_size_bytes" in self.model_fields_set:
            _dict['unprotectedSizeBytes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjectProtectionStatsSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deletedProtectedCount": obj.get("deletedProtectedCount"),
            "environment": obj.get("environment"),
            "protectedCount": obj.get("protectedCount"),
            "protectedSizeBytes": obj.get("protectedSizeBytes"),
            "unprotectedCount": obj.get("unprotectedCount"),
            "unprotectedSizeBytes": obj.get("unprotectedSizeBytes")
        })
        return _obj


