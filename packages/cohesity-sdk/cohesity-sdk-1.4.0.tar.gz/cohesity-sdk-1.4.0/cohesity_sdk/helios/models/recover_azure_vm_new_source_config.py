# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.data_transfer_info import DataTransferInfo
from cohesity_sdk.helios.models.recover_azure_vm_new_source_network_config import RecoverAzureVmNewSourceNetworkConfig
from cohesity_sdk.helios.models.recovery_object_identifier import RecoveryObjectIdentifier
from typing import Set
from typing_extensions import Self

class RecoverAzureVmNewSourceConfig(BaseModel):
    """
    Specifies the new destination Source configuration where the VMs will be recovered.
    """ # noqa: E501
    availability_set: Optional[RecoveryObjectIdentifier] = Field(default=None, description="Specifies the availability set.", alias="availabilitySet")
    compute_option: Optional[RecoveryObjectIdentifier] = Field(default=None, description="Specifies the type of VM (e.g. small, medium, large) when cloning/restoring the VM in Azure.", alias="computeOption")
    data_transfer_info: Optional[DataTransferInfo] = Field(default=None, alias="dataTransferInfo")
    network_config: Optional[RecoverAzureVmNewSourceNetworkConfig] = Field(description="Specifies the networking configuration to be applied to the recovered VMs.", alias="networkConfig")
    region: Optional[RecoveryObjectIdentifier] = Field(default=None, description="Specifies the region to recover the VMs. Applicable for Tenant based registration on DMaaS.")
    resource_group: Optional[RecoveryObjectIdentifier] = Field(description="Specifies the Azure resource group.", alias="resourceGroup")
    source: Optional[RecoveryObjectIdentifier] = Field(description="Specifies the id of the parent source to recover the VMs.")
    storage_account: Optional[RecoveryObjectIdentifier] = Field(default=None, description="Specifies the storage account that will contain the storage container", alias="storageAccount")
    storage_container: Optional[RecoveryObjectIdentifier] = Field(default=None, description="Specifies the storage container within the above storage account.", alias="storageContainer")
    storage_resource_group: Optional[RecoveryObjectIdentifier] = Field(default=None, description="Specifies id of the resource group for the selected storage account.", alias="storageResourceGroup")
    subscription: Optional[RecoveryObjectIdentifier] = Field(default=None, description="Specifies the subscription id to recover the VMs. Applicable for Tenant based registration on DMaaS.")
    __properties: ClassVar[List[str]] = ["availabilitySet", "computeOption", "dataTransferInfo", "networkConfig", "region", "resourceGroup", "source", "storageAccount", "storageContainer", "storageResourceGroup", "subscription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecoverAzureVmNewSourceConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of availability_set
        if self.availability_set:
            _dict['availabilitySet'] = self.availability_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compute_option
        if self.compute_option:
            _dict['computeOption'] = self.compute_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_transfer_info
        if self.data_transfer_info:
            _dict['dataTransferInfo'] = self.data_transfer_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_config
        if self.network_config:
            _dict['networkConfig'] = self.network_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_group
        if self.resource_group:
            _dict['resourceGroup'] = self.resource_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_account
        if self.storage_account:
            _dict['storageAccount'] = self.storage_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_container
        if self.storage_container:
            _dict['storageContainer'] = self.storage_container.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_resource_group
        if self.storage_resource_group:
            _dict['storageResourceGroup'] = self.storage_resource_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription:
            _dict['subscription'] = self.subscription.to_dict()
        # set to None if availability_set (nullable) is None
        # and model_fields_set contains the field
        if self.availability_set is None and "availability_set" in self.model_fields_set:
            _dict['availabilitySet'] = None

        # set to None if compute_option (nullable) is None
        # and model_fields_set contains the field
        if self.compute_option is None and "compute_option" in self.model_fields_set:
            _dict['computeOption'] = None

        # set to None if network_config (nullable) is None
        # and model_fields_set contains the field
        if self.network_config is None and "network_config" in self.model_fields_set:
            _dict['networkConfig'] = None

        # set to None if region (nullable) is None
        # and model_fields_set contains the field
        if self.region is None and "region" in self.model_fields_set:
            _dict['region'] = None

        # set to None if resource_group (nullable) is None
        # and model_fields_set contains the field
        if self.resource_group is None and "resource_group" in self.model_fields_set:
            _dict['resourceGroup'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        # set to None if storage_account (nullable) is None
        # and model_fields_set contains the field
        if self.storage_account is None and "storage_account" in self.model_fields_set:
            _dict['storageAccount'] = None

        # set to None if storage_container (nullable) is None
        # and model_fields_set contains the field
        if self.storage_container is None and "storage_container" in self.model_fields_set:
            _dict['storageContainer'] = None

        # set to None if storage_resource_group (nullable) is None
        # and model_fields_set contains the field
        if self.storage_resource_group is None and "storage_resource_group" in self.model_fields_set:
            _dict['storageResourceGroup'] = None

        # set to None if subscription (nullable) is None
        # and model_fields_set contains the field
        if self.subscription is None and "subscription" in self.model_fields_set:
            _dict['subscription'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecoverAzureVmNewSourceConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availabilitySet": RecoveryObjectIdentifier.from_dict(obj["availabilitySet"]) if obj.get("availabilitySet") is not None else None,
            "computeOption": RecoveryObjectIdentifier.from_dict(obj["computeOption"]) if obj.get("computeOption") is not None else None,
            "dataTransferInfo": DataTransferInfo.from_dict(obj["dataTransferInfo"]) if obj.get("dataTransferInfo") is not None else None,
            "networkConfig": RecoverAzureVmNewSourceNetworkConfig.from_dict(obj["networkConfig"]) if obj.get("networkConfig") is not None else None,
            "region": RecoveryObjectIdentifier.from_dict(obj["region"]) if obj.get("region") is not None else None,
            "resourceGroup": RecoveryObjectIdentifier.from_dict(obj["resourceGroup"]) if obj.get("resourceGroup") is not None else None,
            "source": RecoveryObjectIdentifier.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "storageAccount": RecoveryObjectIdentifier.from_dict(obj["storageAccount"]) if obj.get("storageAccount") is not None else None,
            "storageContainer": RecoveryObjectIdentifier.from_dict(obj["storageContainer"]) if obj.get("storageContainer") is not None else None,
            "storageResourceGroup": RecoveryObjectIdentifier.from_dict(obj["storageResourceGroup"]) if obj.get("storageResourceGroup") is not None else None,
            "subscription": RecoveryObjectIdentifier.from_dict(obj["subscription"]) if obj.get("subscription") is not None else None
        })
        return _obj


