# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class SecurityConfigCertificateBasedAuth(BaseModel):
    """
    Specifies security config for certificate based authentication.
    """ # noqa: E501
    ad_mapping: Optional[StrictStr] = Field(default=None, description="Specifies the field to be used in AD user for authentication.", alias="adMapping")
    certificate_mapping: Optional[StrictStr] = Field(default=None, description="Specifies the field to be used in certificate for authentication.", alias="certificateMapping")
    enable_mapping_based_authentication: Optional[StrictBool] = Field(default=None, description="If true, certfication based authentication is done via configured mapping. Else it will proceed based on legacy serial number match.", alias="enableMappingBasedAuthentication")
    __properties: ClassVar[List[str]] = ["adMapping", "certificateMapping", "enableMappingBasedAuthentication"]

    @field_validator('ad_mapping')
    def ad_mapping_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SamAccountName', 'UserPrincipalName']):
            raise ValueError("must be one of enum values ('SamAccountName', 'UserPrincipalName')")
        return value

    @field_validator('certificate_mapping')
    def certificate_mapping_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CommonName', 'EmailAddress', 'UserPrincipalName']):
            raise ValueError("must be one of enum values ('CommonName', 'EmailAddress', 'UserPrincipalName')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityConfigCertificateBasedAuth from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if ad_mapping (nullable) is None
        # and model_fields_set contains the field
        if self.ad_mapping is None and "ad_mapping" in self.model_fields_set:
            _dict['adMapping'] = None

        # set to None if certificate_mapping (nullable) is None
        # and model_fields_set contains the field
        if self.certificate_mapping is None and "certificate_mapping" in self.model_fields_set:
            _dict['certificateMapping'] = None

        # set to None if enable_mapping_based_authentication (nullable) is None
        # and model_fields_set contains the field
        if self.enable_mapping_based_authentication is None and "enable_mapping_based_authentication" in self.model_fields_set:
            _dict['enableMappingBasedAuthentication'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityConfigCertificateBasedAuth from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adMapping": obj.get("adMapping"),
            "certificateMapping": obj.get("certificateMapping"),
            "enableMappingBasedAuthentication": obj.get("enableMappingBasedAuthentication")
        })
        return _obj


