# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class UpdateSMTPParams(BaseModel):
    """
    Specifies the parameters to update cluster SMTP configuration.
    """ # noqa: E501
    hostname: StrictStr = Field(description="Specifies the IP address or the FQDN of the SMTP server.")
    is_active: Optional[StrictBool] = Field(default=True, description="Specifies if the SMTP configuration is active.", alias="isActive")
    port: StrictInt = Field(description="Specifies the SMTP port. Usually 465 or 587. For authenticated connection, it is generally 587.")
    use_ssl: Optional[StrictBool] = Field(default=False, description="This is set to true when the SMTP server uses SSL/TLS without supporting STARTTLS. Typically, this is used for port 465.", alias="useSSL")
    username: Optional[StrictStr] = Field(default=None, description="Specifies the username which will be used to connect to the SMTP server. If username is not specified, then it would imply that SMTP server is set up for unauthenticated access.")
    password: Optional[StrictStr] = Field(default=None, description="Specifies the password of the SMTP user. This is required if username is specified in the request.")
    __properties: ClassVar[List[str]] = ["hostname", "isActive", "port", "useSSL", "username", "password"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSMTPParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if is_active (nullable) is None
        # and model_fields_set contains the field
        if self.is_active is None and "is_active" in self.model_fields_set:
            _dict['isActive'] = None

        # set to None if use_ssl (nullable) is None
        # and model_fields_set contains the field
        if self.use_ssl is None and "use_ssl" in self.model_fields_set:
            _dict['useSSL'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSMTPParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hostname": obj.get("hostname"),
            "isActive": obj.get("isActive") if obj.get("isActive") is not None else True,
            "port": obj.get("port"),
            "useSSL": obj.get("useSSL") if obj.get("useSSL") is not None else False,
            "username": obj.get("username"),
            "password": obj.get("password")
        })
        return _obj


