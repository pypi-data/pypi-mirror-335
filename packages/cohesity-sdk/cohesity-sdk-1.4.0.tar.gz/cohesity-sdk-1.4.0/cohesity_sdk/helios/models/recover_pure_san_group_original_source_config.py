# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.recovered_or_cloned_vms_rename_config import RecoveredOrClonedVmsRenameConfig
from cohesity_sdk.helios.models.recovery_object_identifier import RecoveryObjectIdentifier
from typing import Set
from typing_extensions import Self

class RecoverPureSanGroupOriginalSourceConfig(BaseModel):
    """
    Specifies the network config parameters to be applied for Pure group if recovering to original Source.
    """ # noqa: E501
    rename_recovered_group_params: Optional[RecoveredOrClonedVmsRenameConfig] = Field(default=None, description="Specifies params to rename the recovered SAN group. If not specified, the original names of the group are preserved.", alias="renameRecoveredGroupParams")
    resource_pool: Optional[RecoveryObjectIdentifier] = Field(default=None, description="Specifies the id of the resource pool to recover the SAN Volume to. This field can be specified for cases where the resource pool can be altered on the original source.", alias="resourcePool")
    __properties: ClassVar[List[str]] = ["renameRecoveredGroupParams", "resourcePool"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecoverPureSanGroupOriginalSourceConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rename_recovered_group_params
        if self.rename_recovered_group_params:
            _dict['renameRecoveredGroupParams'] = self.rename_recovered_group_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_pool
        if self.resource_pool:
            _dict['resourcePool'] = self.resource_pool.to_dict()
        # set to None if rename_recovered_group_params (nullable) is None
        # and model_fields_set contains the field
        if self.rename_recovered_group_params is None and "rename_recovered_group_params" in self.model_fields_set:
            _dict['renameRecoveredGroupParams'] = None

        # set to None if resource_pool (nullable) is None
        # and model_fields_set contains the field
        if self.resource_pool is None and "resource_pool" in self.model_fields_set:
            _dict['resourcePool'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecoverPureSanGroupOriginalSourceConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "renameRecoveredGroupParams": RecoveredOrClonedVmsRenameConfig.from_dict(obj["renameRecoveredGroupParams"]) if obj.get("renameRecoveredGroupParams") is not None else None,
            "resourcePool": RecoveryObjectIdentifier.from_dict(obj["resourcePool"]) if obj.get("resourcePool") is not None else None
        })
        return _obj


