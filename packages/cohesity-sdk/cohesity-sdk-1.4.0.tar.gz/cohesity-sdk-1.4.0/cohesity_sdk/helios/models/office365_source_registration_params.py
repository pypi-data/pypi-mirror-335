# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.credentials import Credentials
from cohesity_sdk.helios.models.objects_discovery_params import ObjectsDiscoveryParams
from cohesity_sdk.helios.models.office365_app_credentials import Office365AppCredentials
from typing import Set
from typing_extensions import Self

class Office365SourceRegistrationParams(BaseModel):
    """
    Specifies the paramaters to register an office-365 source.
    """ # noqa: E501
    password: StrictStr = Field(description="Specifies the password to access target entity.")
    username: StrictStr = Field(description="Specifies the username to access target entity.")
    description: Optional[StrictStr] = Field(default=None, description="Specifies the description of the source being registered.")
    endpoint: StrictStr = Field(description="Specifies the endpoint IPaddress, URL or hostname of the host.")
    o365_objects_discovery_params: Optional[ObjectsDiscoveryParams] = Field(default=None, alias="o365ObjectsDiscoveryParams")
    office365_app_credentials_list: Optional[List[Office365AppCredentials]] = Field(default=None, description="Specifies a list of office365 azure application credentials needed to authenticate & authorize users for Office 365.", alias="office365AppCredentialsList")
    office365_region: Optional[StrictStr] = Field(default=None, description="Specifies the region where Office 365 Exchange environment is.", alias="office365Region")
    office365_service_account_credentials_list: Optional[List[Credentials]] = Field(default=None, description="Specifies the list of Office365 service account credentials which can be used for Mailbox Backups.", alias="office365ServiceAccountCredentialsList")
    proxy_host_source_id_list: Optional[List[StrictInt]] = Field(default=None, description="Specifies the list of the protection source id of the windows physical host which will be used during the protection and recovery of the sites that belong to a office365 domain.", alias="proxyHostSourceIdList")
    use_existing_credentials: Optional[StrictBool] = Field(default=None, description="Specifies whether to use existing Office365 credentials like password and client secret for app id's. This parameter is only valid in the case of updating the registered source.", alias="useExistingCredentials")
    use_o_auth_for_exchange_online: Optional[StrictBool] = Field(default=None, description="Specifies whether OAuth should be used for authentication in case of Exchange Online.", alias="useOAuthForExchangeOnline")
    __properties: ClassVar[List[str]] = ["password", "username", "description", "endpoint", "o365ObjectsDiscoveryParams", "office365AppCredentialsList", "office365Region", "office365ServiceAccountCredentialsList", "proxyHostSourceIdList", "useExistingCredentials", "useOAuthForExchangeOnline"]

    @field_validator('office365_region')
    def office365_region_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Default', 'China', 'Germany', 'UsDoD', 'UsGccHigh']):
            raise ValueError("must be one of enum values ('Default', 'China', 'Germany', 'UsDoD', 'UsGccHigh')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Office365SourceRegistrationParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of o365_objects_discovery_params
        if self.o365_objects_discovery_params:
            _dict['o365ObjectsDiscoveryParams'] = self.o365_objects_discovery_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in office365_app_credentials_list (list)
        _items = []
        if self.office365_app_credentials_list:
            for _item_office365_app_credentials_list in self.office365_app_credentials_list:
                if _item_office365_app_credentials_list:
                    _items.append(_item_office365_app_credentials_list.to_dict())
            _dict['office365AppCredentialsList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in office365_service_account_credentials_list (list)
        _items = []
        if self.office365_service_account_credentials_list:
            for _item_office365_service_account_credentials_list in self.office365_service_account_credentials_list:
                if _item_office365_service_account_credentials_list:
                    _items.append(_item_office365_service_account_credentials_list.to_dict())
            _dict['office365ServiceAccountCredentialsList'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if office365_region (nullable) is None
        # and model_fields_set contains the field
        if self.office365_region is None and "office365_region" in self.model_fields_set:
            _dict['office365Region'] = None

        # set to None if office365_service_account_credentials_list (nullable) is None
        # and model_fields_set contains the field
        if self.office365_service_account_credentials_list is None and "office365_service_account_credentials_list" in self.model_fields_set:
            _dict['office365ServiceAccountCredentialsList'] = None

        # set to None if proxy_host_source_id_list (nullable) is None
        # and model_fields_set contains the field
        if self.proxy_host_source_id_list is None and "proxy_host_source_id_list" in self.model_fields_set:
            _dict['proxyHostSourceIdList'] = None

        # set to None if use_existing_credentials (nullable) is None
        # and model_fields_set contains the field
        if self.use_existing_credentials is None and "use_existing_credentials" in self.model_fields_set:
            _dict['useExistingCredentials'] = None

        # set to None if use_o_auth_for_exchange_online (nullable) is None
        # and model_fields_set contains the field
        if self.use_o_auth_for_exchange_online is None and "use_o_auth_for_exchange_online" in self.model_fields_set:
            _dict['useOAuthForExchangeOnline'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Office365SourceRegistrationParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "password": obj.get("password"),
            "username": obj.get("username"),
            "description": obj.get("description"),
            "endpoint": obj.get("endpoint"),
            "o365ObjectsDiscoveryParams": ObjectsDiscoveryParams.from_dict(obj["o365ObjectsDiscoveryParams"]) if obj.get("o365ObjectsDiscoveryParams") is not None else None,
            "office365AppCredentialsList": [Office365AppCredentials.from_dict(_item) for _item in obj["office365AppCredentialsList"]] if obj.get("office365AppCredentialsList") is not None else None,
            "office365Region": obj.get("office365Region"),
            "office365ServiceAccountCredentialsList": [Credentials.from_dict(_item) for _item in obj["office365ServiceAccountCredentialsList"]] if obj.get("office365ServiceAccountCredentialsList") is not None else None,
            "proxyHostSourceIdList": obj.get("proxyHostSourceIdList"),
            "useExistingCredentials": obj.get("useExistingCredentials"),
            "useOAuthForExchangeOnline": obj.get("useOAuthForExchangeOnline")
        })
        return _obj


