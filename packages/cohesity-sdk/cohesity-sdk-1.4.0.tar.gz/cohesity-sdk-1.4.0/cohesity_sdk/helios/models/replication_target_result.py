# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.aws_target_config import AWSTargetConfig
from cohesity_sdk.helios.models.azure_target_config import AzureTargetConfig
from cohesity_sdk.helios.models.data_lock_constraints import DataLockConstraints
from cohesity_sdk.helios.models.replication_data_stats import ReplicationDataStats
from typing import Set
from typing_extensions import Self

class ReplicationTargetResult(BaseModel):
    """
    Replication result for a target.
    """ # noqa: E501
    cluster_id: Optional[StrictInt] = Field(default=None, description="Specifies the id of the cluster.", alias="clusterId")
    cluster_incarnation_id: Optional[StrictInt] = Field(default=None, description="Specifies the incarnation id of the cluster.", alias="clusterIncarnationId")
    cluster_name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the cluster.", alias="clusterName")
    aws_target_config: Optional[AWSTargetConfig] = Field(default=None, alias="awsTargetConfig")
    azure_target_config: Optional[AzureTargetConfig] = Field(default=None, alias="azureTargetConfig")
    data_lock_constraints: Optional[DataLockConstraints] = Field(default=None, alias="dataLockConstraints")
    end_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the end time of replication in Unix epoch Timestamp(in microseconds) for a target.", alias="endTimeUsecs")
    entries_changed: Optional[StrictInt] = Field(default=None, description="Specifies the number of metadata actions completed during the protection run.", alias="entriesChanged")
    expiry_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the expiry time of attempt in Unix epoch Timestamp (in microseconds) for an object.", alias="expiryTimeUsecs")
    is_in_bound: Optional[StrictBool] = Field(default=None, description="Specifies the direction of the replication. If the snapshot is replicated to this cluster, then isInBound is true. If the snapshot is replicated from this cluster to another cluster, then isInBound is false.", alias="isInBound")
    is_manually_deleted: Optional[StrictBool] = Field(default=None, description="Specifies whether the snapshot is deleted manually.", alias="isManuallyDeleted")
    message: Optional[StrictStr] = Field(default=None, description="Message about the replication run.")
    multi_object_replication: Optional[StrictBool] = Field(default=None, description="Specifies whether view based replication was used. In this case, the view containing all objects is replicated as a whole instead of replicating on a per object basis.", alias="multiObjectReplication")
    on_legal_hold: Optional[StrictBool] = Field(default=None, description="Specifies the legal hold status for a replication target.", alias="onLegalHold")
    percentage_completed: Optional[StrictInt] = Field(default=None, description="Specifies the progress in percentage.", alias="percentageCompleted")
    queued_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the time when the replication is queued for schedule in Unix epoch Timestamp(in microseconds) for a target.", alias="queuedTimeUsecs")
    replication_task_id: Optional[StrictStr] = Field(default=None, description="Task UID for a replication protection run. This is for tasks that are replicated from another cluster.", alias="replicationTaskId")
    start_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the start time of replication in Unix epoch Timestamp(in microseconds) for a target.", alias="startTimeUsecs")
    stats: Optional[ReplicationDataStats] = None
    status: Optional[StrictStr] = Field(default=None, description="Status of the replication for a target. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being canceled. 'Paused' indicates that the ongoing run has been paused. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages. 'Skipped' indicates that the run was skipped.")
    __properties: ClassVar[List[str]] = ["clusterId", "clusterIncarnationId", "clusterName", "awsTargetConfig", "azureTargetConfig", "dataLockConstraints", "endTimeUsecs", "entriesChanged", "expiryTimeUsecs", "isInBound", "isManuallyDeleted", "message", "multiObjectReplication", "onLegalHold", "percentageCompleted", "queuedTimeUsecs", "replicationTaskId", "startTimeUsecs", "stats", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped', 'Paused']):
            raise ValueError("must be one of enum values ('Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped', 'Paused')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicationTargetResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws_target_config
        if self.aws_target_config:
            _dict['awsTargetConfig'] = self.aws_target_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_target_config
        if self.azure_target_config:
            _dict['azureTargetConfig'] = self.azure_target_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_lock_constraints
        if self.data_lock_constraints:
            _dict['dataLockConstraints'] = self.data_lock_constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        # set to None if cluster_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_id is None and "cluster_id" in self.model_fields_set:
            _dict['clusterId'] = None

        # set to None if cluster_incarnation_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_incarnation_id is None and "cluster_incarnation_id" in self.model_fields_set:
            _dict['clusterIncarnationId'] = None

        # set to None if cluster_name (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_name is None and "cluster_name" in self.model_fields_set:
            _dict['clusterName'] = None

        # set to None if end_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.end_time_usecs is None and "end_time_usecs" in self.model_fields_set:
            _dict['endTimeUsecs'] = None

        # set to None if entries_changed (nullable) is None
        # and model_fields_set contains the field
        if self.entries_changed is None and "entries_changed" in self.model_fields_set:
            _dict['entriesChanged'] = None

        # set to None if expiry_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.expiry_time_usecs is None and "expiry_time_usecs" in self.model_fields_set:
            _dict['expiryTimeUsecs'] = None

        # set to None if is_in_bound (nullable) is None
        # and model_fields_set contains the field
        if self.is_in_bound is None and "is_in_bound" in self.model_fields_set:
            _dict['isInBound'] = None

        # set to None if is_manually_deleted (nullable) is None
        # and model_fields_set contains the field
        if self.is_manually_deleted is None and "is_manually_deleted" in self.model_fields_set:
            _dict['isManuallyDeleted'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if multi_object_replication (nullable) is None
        # and model_fields_set contains the field
        if self.multi_object_replication is None and "multi_object_replication" in self.model_fields_set:
            _dict['multiObjectReplication'] = None

        # set to None if on_legal_hold (nullable) is None
        # and model_fields_set contains the field
        if self.on_legal_hold is None and "on_legal_hold" in self.model_fields_set:
            _dict['onLegalHold'] = None

        # set to None if percentage_completed (nullable) is None
        # and model_fields_set contains the field
        if self.percentage_completed is None and "percentage_completed" in self.model_fields_set:
            _dict['percentageCompleted'] = None

        # set to None if queued_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.queued_time_usecs is None and "queued_time_usecs" in self.model_fields_set:
            _dict['queuedTimeUsecs'] = None

        # set to None if replication_task_id (nullable) is None
        # and model_fields_set contains the field
        if self.replication_task_id is None and "replication_task_id" in self.model_fields_set:
            _dict['replicationTaskId'] = None

        # set to None if start_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.start_time_usecs is None and "start_time_usecs" in self.model_fields_set:
            _dict['startTimeUsecs'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicationTargetResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterId": obj.get("clusterId"),
            "clusterIncarnationId": obj.get("clusterIncarnationId"),
            "clusterName": obj.get("clusterName"),
            "awsTargetConfig": AWSTargetConfig.from_dict(obj["awsTargetConfig"]) if obj.get("awsTargetConfig") is not None else None,
            "azureTargetConfig": AzureTargetConfig.from_dict(obj["azureTargetConfig"]) if obj.get("azureTargetConfig") is not None else None,
            "dataLockConstraints": DataLockConstraints.from_dict(obj["dataLockConstraints"]) if obj.get("dataLockConstraints") is not None else None,
            "endTimeUsecs": obj.get("endTimeUsecs"),
            "entriesChanged": obj.get("entriesChanged"),
            "expiryTimeUsecs": obj.get("expiryTimeUsecs"),
            "isInBound": obj.get("isInBound"),
            "isManuallyDeleted": obj.get("isManuallyDeleted"),
            "message": obj.get("message"),
            "multiObjectReplication": obj.get("multiObjectReplication"),
            "onLegalHold": obj.get("onLegalHold"),
            "percentageCompleted": obj.get("percentageCompleted"),
            "queuedTimeUsecs": obj.get("queuedTimeUsecs"),
            "replicationTaskId": obj.get("replicationTaskId"),
            "startTimeUsecs": obj.get("startTimeUsecs"),
            "stats": ReplicationDataStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None,
            "status": obj.get("status")
        })
        return _obj


