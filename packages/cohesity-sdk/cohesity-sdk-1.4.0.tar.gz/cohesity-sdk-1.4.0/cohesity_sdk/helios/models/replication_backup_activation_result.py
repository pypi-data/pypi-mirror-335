# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.error import Error
from cohesity_sdk.helios.models.failover_object import FailoverObject
from cohesity_sdk.helios.models.reverse_replication_result import ReverseReplicationResult
from typing import Set
from typing_extensions import Self

class ReplicationBackupActivationResult(BaseModel):
    """
    Specifies the result returned after creating a protection group for backing up failover objects on replication cluster.
    """ # noqa: E501
    object_errors: Optional[List[Error]] = Field(default=None, description="Specifies the protection errors, if any, pertaining to each object specified in 'objects'.", alias="objectErrors")
    objects: Optional[List[FailoverObject]] = Field(default=None, description="Specifies the list of failover object that are going to be protected on replication cluster.")
    protection_group_id: Optional[StrictStr] = Field(default=None, description="Specifies the protection group id that will be returned upon creation of new group or existing group for backing up failover entities.", alias="protectionGroupId")
    reverse_replication_result: Optional[ReverseReplicationResult] = Field(default=None, alias="reverseReplicationResult")
    __properties: ClassVar[List[str]] = ["objectErrors", "objects", "protectionGroupId", "reverseReplicationResult"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicationBackupActivationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in object_errors (list)
        _items = []
        if self.object_errors:
            for _item_object_errors in self.object_errors:
                if _item_object_errors:
                    _items.append(_item_object_errors.to_dict())
            _dict['objectErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in objects (list)
        _items = []
        if self.objects:
            for _item_objects in self.objects:
                if _item_objects:
                    _items.append(_item_objects.to_dict())
            _dict['objects'] = _items
        # override the default output from pydantic by calling `to_dict()` of reverse_replication_result
        if self.reverse_replication_result:
            _dict['reverseReplicationResult'] = self.reverse_replication_result.to_dict()
        # set to None if object_errors (nullable) is None
        # and model_fields_set contains the field
        if self.object_errors is None and "object_errors" in self.model_fields_set:
            _dict['objectErrors'] = None

        # set to None if objects (nullable) is None
        # and model_fields_set contains the field
        if self.objects is None and "objects" in self.model_fields_set:
            _dict['objects'] = None

        # set to None if protection_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.protection_group_id is None and "protection_group_id" in self.model_fields_set:
            _dict['protectionGroupId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicationBackupActivationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "objectErrors": [Error.from_dict(_item) for _item in obj["objectErrors"]] if obj.get("objectErrors") is not None else None,
            "objects": [FailoverObject.from_dict(_item) for _item in obj["objects"]] if obj.get("objects") is not None else None,
            "protectionGroupId": obj.get("protectionGroupId"),
            "reverseReplicationResult": ReverseReplicationResult.from_dict(obj["reverseReplicationResult"]) if obj.get("reverseReplicationResult") is not None else None
        })
        return _obj


