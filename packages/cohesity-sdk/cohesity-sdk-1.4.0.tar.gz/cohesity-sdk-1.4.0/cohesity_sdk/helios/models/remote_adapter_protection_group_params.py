# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cohesity_sdk.helios.models.indexing_policy import IndexingPolicy
from cohesity_sdk.helios.models.remote_adapter_host import RemoteAdapterHost
from cohesity_sdk.helios.models.remote_adapter_protection_group_replication_params import RemoteAdapterProtectionGroupReplicationParams
from typing import Set
from typing_extensions import Self

class RemoteAdapterProtectionGroupParams(BaseModel):
    """
    Specifies the parameters which are specific to Remote Adapter related Protection Groups.
    """ # noqa: E501
    app_consistent_snapshot: Optional[StrictBool] = Field(default=None, description="Specifies whether or not to quiesce apps and the file system in order to take app consistent snapshots.", alias="appConsistentSnapshot")
    hosts: Optional[Annotated[List[RemoteAdapterHost], Field(min_length=1)]] = Field(description="Specifies a list of hosts to protected in this protection group.")
    indexing_policy: Optional[IndexingPolicy] = Field(default=None, alias="indexingPolicy")
    remote_view_params: Optional[RemoteAdapterProtectionGroupReplicationParams] = Field(default=None, alias="remoteViewParams")
    view_id: Optional[StrictInt] = Field(description="Specifies the id of the view where we put the script result data.", alias="viewId")
    __properties: ClassVar[List[str]] = ["appConsistentSnapshot", "hosts", "indexingPolicy", "remoteViewParams", "viewId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RemoteAdapterProtectionGroupParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in hosts (list)
        _items = []
        if self.hosts:
            for _item_hosts in self.hosts:
                if _item_hosts:
                    _items.append(_item_hosts.to_dict())
            _dict['hosts'] = _items
        # override the default output from pydantic by calling `to_dict()` of indexing_policy
        if self.indexing_policy:
            _dict['indexingPolicy'] = self.indexing_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote_view_params
        if self.remote_view_params:
            _dict['remoteViewParams'] = self.remote_view_params.to_dict()
        # set to None if app_consistent_snapshot (nullable) is None
        # and model_fields_set contains the field
        if self.app_consistent_snapshot is None and "app_consistent_snapshot" in self.model_fields_set:
            _dict['appConsistentSnapshot'] = None

        # set to None if hosts (nullable) is None
        # and model_fields_set contains the field
        if self.hosts is None and "hosts" in self.model_fields_set:
            _dict['hosts'] = None

        # set to None if view_id (nullable) is None
        # and model_fields_set contains the field
        if self.view_id is None and "view_id" in self.model_fields_set:
            _dict['viewId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RemoteAdapterProtectionGroupParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appConsistentSnapshot": obj.get("appConsistentSnapshot"),
            "hosts": [RemoteAdapterHost.from_dict(_item) for _item in obj["hosts"]] if obj.get("hosts") is not None else None,
            "indexingPolicy": IndexingPolicy.from_dict(obj["indexingPolicy"]) if obj.get("indexingPolicy") is not None else None,
            "remoteViewParams": RemoteAdapterProtectionGroupReplicationParams.from_dict(obj["remoteViewParams"]) if obj.get("remoteViewParams") is not None else None,
            "viewId": obj.get("viewId")
        })
        return _obj


