# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.hyper_v_disk_info import HyperVDiskInfo
from cohesity_sdk.helios.models.hyper_v_protection_group_object_params import HyperVProtectionGroupObjectParams
from cohesity_sdk.helios.models.indexing_policy import IndexingPolicy
from typing import Set
from typing_extensions import Self

class HyperVProtectionGroupParams(BaseModel):
    """
    Specifies the parameters which are specific to HyperV related Protection Groups.
    """ # noqa: E501
    app_consistent_snapshot: Optional[StrictBool] = Field(default=None, description="Specifies whether or not to quiesce apps and the file system in order to take app consistent snapshots. If not specified or false then snapshots will not be app consistent.", alias="appConsistentSnapshot")
    fallback_to_crash_consistent_snapshot: Optional[StrictBool] = Field(default=None, description="Specifies whether or not to fallback to a crash consistent snapshot in the event that an app consistent snapshot fails.", alias="fallbackToCrashConsistentSnapshot")
    indexing_policy: Optional[IndexingPolicy] = Field(default=None, alias="indexingPolicy")
    cloud_migration: Optional[StrictBool] = Field(default=None, description="Specifies whether or not to move the workload to the cloud.", alias="cloudMigration")
    exclude_object_ids: Optional[List[Optional[StrictInt]]] = Field(default=None, description="Specifies the list of IDs of the objects to not be protected by this Protection Group. This can be used to ignore specific objects under a parent object which has been included for protection.", alias="excludeObjectIds")
    exclude_vm_tag_ids: Optional[List[List[StrictInt]]] = Field(default=None, description="Array of Arrays of VM Tag Ids that Specify VMs to Exclude. Optionally specify a list of VMs to exclude from protecting by listing Protection Source ids of VM Tags in this two dimensional array. Using this two dimensional array of Tag ids, the Cluster generates a list of VMs to exclude from protecting, which are derived from intersections of the inner arrays and union of the outer array, as shown by the following example. For example a Datacenter is selected to be protected but you want to exclude all the 'Former Employees' VMs in the East and West but keep all the VMs for 'Former Employees' in the South which are also stored in this Datacenter, by specifying the following tag id array: [ [1000, 2221], [1000, 3031] ], where 1000 is the 'Former Employee' VM Tag id, 2221 is the 'East' VM Tag id and 3031 is the 'West' VM Tag id. The first inner array [1000, 2221] produces a list of VMs that are both tagged with 'Former Employees' and 'East' (an intersection). The second inner array [1000, 3031] produces a list of VMs that are both tagged with 'Former Employees' and 'West' (an intersection). The outer array combines the list of VMs from the two inner arrays. The list of resulting VMs are excluded from being protected this Job.", alias="excludeVmTagIds")
    global_exclude_disks: Optional[List[HyperVDiskInfo]] = Field(default=None, description="Specifies a global list of disks to be excluded for the all the VMs part of the protection group.", alias="globalExcludeDisks")
    global_include_disks: Optional[List[HyperVDiskInfo]] = Field(default=None, description="Specifies a global list of disks to be included for the all the VMs part of the protection group.", alias="globalIncludeDisks")
    objects: Optional[List[HyperVProtectionGroupObjectParams]] = Field(default=None, description="Specifies the objects to be included in the Protection Group.")
    protection_type: Optional[StrictStr] = Field(default=None, description="Specifies the Protection Group type. If not specified, then backup method is auto determined. Specifying RCT will forcibly use RCT backup for all VMs in this Protection Group. Available only for VMs with hardware version 8.0 and above, but is more efficient. Specifying VSS will forcibly use VSS backup for all VMs in this Protection Group. Available for VMs with hardware version 5.0 and above, but is slower than RCT backup.", alias="protectionType")
    source_id: Optional[StrictInt] = Field(default=None, description="Specifies the id of the parent of the objects.", alias="sourceId")
    source_name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the parent of the objects.", alias="sourceName")
    vm_tag_ids: Optional[List[List[StrictInt]]] = Field(default=None, description="Array of Array of VM Tag Ids that Specify VMs to Protect. Optionally specify a list of VMs to protect by listing Protection Source ids of VM Tags in this two dimensional array. Using this two dimensional array of Tag ids, the Cluster generates a list of VMs to protect which are derived from intersections of the inner arrays and union of the outer array, as shown by the following example. To protect only 'Eng' VMs in the East and all the VMs in the West, specify the following tag id array: [ [1101, 2221], [3031] ], where 1101 is the 'Eng' VM Tag id, 2221 is the 'East' VM Tag id and 3031 is the 'West' VM Tag id. The inner array [1101, 2221] produces a list of VMs that are both tagged with 'Eng' and 'East' (an intersection). The outer array combines the list from the inner array with list of VMs tagged with 'West' (a union). The list of resulting VMs are protected by this Protection Group.", alias="vmTagIds")
    __properties: ClassVar[List[str]] = ["appConsistentSnapshot", "fallbackToCrashConsistentSnapshot", "indexingPolicy", "cloudMigration", "excludeObjectIds", "excludeVmTagIds", "globalExcludeDisks", "globalIncludeDisks", "objects", "protectionType", "sourceId", "sourceName", "vmTagIds"]

    @field_validator('protection_type')
    def protection_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kAuto', 'kRCT', 'kVSS']):
            raise ValueError("must be one of enum values ('kAuto', 'kRCT', 'kVSS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HyperVProtectionGroupParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "source_id",
            "source_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of indexing_policy
        if self.indexing_policy:
            _dict['indexingPolicy'] = self.indexing_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in global_exclude_disks (list)
        _items = []
        if self.global_exclude_disks:
            for _item_global_exclude_disks in self.global_exclude_disks:
                if _item_global_exclude_disks:
                    _items.append(_item_global_exclude_disks.to_dict())
            _dict['globalExcludeDisks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in global_include_disks (list)
        _items = []
        if self.global_include_disks:
            for _item_global_include_disks in self.global_include_disks:
                if _item_global_include_disks:
                    _items.append(_item_global_include_disks.to_dict())
            _dict['globalIncludeDisks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in objects (list)
        _items = []
        if self.objects:
            for _item_objects in self.objects:
                if _item_objects:
                    _items.append(_item_objects.to_dict())
            _dict['objects'] = _items
        # set to None if app_consistent_snapshot (nullable) is None
        # and model_fields_set contains the field
        if self.app_consistent_snapshot is None and "app_consistent_snapshot" in self.model_fields_set:
            _dict['appConsistentSnapshot'] = None

        # set to None if fallback_to_crash_consistent_snapshot (nullable) is None
        # and model_fields_set contains the field
        if self.fallback_to_crash_consistent_snapshot is None and "fallback_to_crash_consistent_snapshot" in self.model_fields_set:
            _dict['fallbackToCrashConsistentSnapshot'] = None

        # set to None if cloud_migration (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_migration is None and "cloud_migration" in self.model_fields_set:
            _dict['cloudMigration'] = None

        # set to None if exclude_vm_tag_ids (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_vm_tag_ids is None and "exclude_vm_tag_ids" in self.model_fields_set:
            _dict['excludeVmTagIds'] = None

        # set to None if global_exclude_disks (nullable) is None
        # and model_fields_set contains the field
        if self.global_exclude_disks is None and "global_exclude_disks" in self.model_fields_set:
            _dict['globalExcludeDisks'] = None

        # set to None if global_include_disks (nullable) is None
        # and model_fields_set contains the field
        if self.global_include_disks is None and "global_include_disks" in self.model_fields_set:
            _dict['globalIncludeDisks'] = None

        # set to None if protection_type (nullable) is None
        # and model_fields_set contains the field
        if self.protection_type is None and "protection_type" in self.model_fields_set:
            _dict['protectionType'] = None

        # set to None if source_id (nullable) is None
        # and model_fields_set contains the field
        if self.source_id is None and "source_id" in self.model_fields_set:
            _dict['sourceId'] = None

        # set to None if source_name (nullable) is None
        # and model_fields_set contains the field
        if self.source_name is None and "source_name" in self.model_fields_set:
            _dict['sourceName'] = None

        # set to None if vm_tag_ids (nullable) is None
        # and model_fields_set contains the field
        if self.vm_tag_ids is None and "vm_tag_ids" in self.model_fields_set:
            _dict['vmTagIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HyperVProtectionGroupParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appConsistentSnapshot": obj.get("appConsistentSnapshot"),
            "fallbackToCrashConsistentSnapshot": obj.get("fallbackToCrashConsistentSnapshot"),
            "indexingPolicy": IndexingPolicy.from_dict(obj["indexingPolicy"]) if obj.get("indexingPolicy") is not None else None,
            "cloudMigration": obj.get("cloudMigration"),
            "excludeObjectIds": obj.get("excludeObjectIds"),
            "excludeVmTagIds": obj.get("excludeVmTagIds"),
            "globalExcludeDisks": [HyperVDiskInfo.from_dict(_item) for _item in obj["globalExcludeDisks"]] if obj.get("globalExcludeDisks") is not None else None,
            "globalIncludeDisks": [HyperVDiskInfo.from_dict(_item) for _item in obj["globalIncludeDisks"]] if obj.get("globalIncludeDisks") is not None else None,
            "objects": [HyperVProtectionGroupObjectParams.from_dict(_item) for _item in obj["objects"]] if obj.get("objects") is not None else None,
            "protectionType": obj.get("protectionType"),
            "sourceId": obj.get("sourceId"),
            "sourceName": obj.get("sourceName"),
            "vmTagIds": obj.get("vmTagIds")
        })
        return _obj


