# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class TrustedCa(BaseModel):
    """
    Specifies the basic info about CA Root Certificate.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="description of the certificate.")
    expiration_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the timestamp epoch in microseconds when this certificate will no longer be valid.", alias="expirationTimeUsecs")
    id: Optional[StrictStr] = Field(default=None, description="Unique id for the certificate.")
    issued_by: Optional[StrictStr] = Field(default=None, description="Specifies the issuer.", alias="issuedBy")
    issued_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the timestamp epoch in microseconds when this certificate will start being valid.", alias="issuedTimeUsecs")
    issued_to: Optional[StrictStr] = Field(default=None, description="Specifies whom it was issued to.", alias="issuedTo")
    last_validated_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the timestamp epoch in microseconds when this certificate was last validated.", alias="lastValidatedTimeUsecs")
    name: Optional[StrictStr] = Field(default=None, description="Unique name for the certificate.")
    registration_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the timestamp epoch in microseconds when this certificate was registered on the cluster.", alias="registrationTimeUsecs")
    status: Optional[StrictStr] = Field(default=None, description="Validation Status of the certificate.")
    __properties: ClassVar[List[str]] = ["description", "expirationTimeUsecs", "id", "issuedBy", "issuedTimeUsecs", "issuedTo", "lastValidatedTimeUsecs", "name", "registrationTimeUsecs", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Valid', 'Expired', 'Revoked', 'Unknown']):
            raise ValueError("must be one of enum values ('Valid', 'Expired', 'Revoked', 'Unknown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrustedCa from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "description",
            "expiration_time_usecs",
            "id",
            "issued_by",
            "issued_time_usecs",
            "issued_to",
            "last_validated_time_usecs",
            "name",
            "registration_time_usecs",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if expiration_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.expiration_time_usecs is None and "expiration_time_usecs" in self.model_fields_set:
            _dict['expirationTimeUsecs'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if issued_by (nullable) is None
        # and model_fields_set contains the field
        if self.issued_by is None and "issued_by" in self.model_fields_set:
            _dict['issuedBy'] = None

        # set to None if issued_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.issued_time_usecs is None and "issued_time_usecs" in self.model_fields_set:
            _dict['issuedTimeUsecs'] = None

        # set to None if issued_to (nullable) is None
        # and model_fields_set contains the field
        if self.issued_to is None and "issued_to" in self.model_fields_set:
            _dict['issuedTo'] = None

        # set to None if last_validated_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.last_validated_time_usecs is None and "last_validated_time_usecs" in self.model_fields_set:
            _dict['lastValidatedTimeUsecs'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if registration_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.registration_time_usecs is None and "registration_time_usecs" in self.model_fields_set:
            _dict['registrationTimeUsecs'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrustedCa from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "expirationTimeUsecs": obj.get("expirationTimeUsecs"),
            "id": obj.get("id"),
            "issuedBy": obj.get("issuedBy"),
            "issuedTimeUsecs": obj.get("issuedTimeUsecs"),
            "issuedTo": obj.get("issuedTo"),
            "lastValidatedTimeUsecs": obj.get("lastValidatedTimeUsecs"),
            "name": obj.get("name"),
            "registrationTimeUsecs": obj.get("registrationTimeUsecs"),
            "status": obj.get("status")
        })
        return _obj


