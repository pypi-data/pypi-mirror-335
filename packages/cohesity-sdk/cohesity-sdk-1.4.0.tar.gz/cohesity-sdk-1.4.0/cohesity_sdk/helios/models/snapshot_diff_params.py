# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class SnapshotDiffParams(BaseModel):
    """
    SnapshotDiffParams
    """ # noqa: E501
    base_snapshot_job_instance_id: StrictInt = Field(alias="baseSnapshotJobInstanceId")
    base_snapshot_time_usecs: StrictInt = Field(alias="baseSnapshotTimeUsecs")
    cluster_id: StrictInt = Field(alias="clusterId")
    entity_type: StrictStr = Field(alias="entityType")
    incarnation_id: Optional[StrictInt] = Field(default=None, alias="incarnationId")
    job_id: StrictInt = Field(alias="jobId")
    page_number: StrictInt = Field(alias="pageNumber")
    page_size: StrictInt = Field(alias="pageSize")
    partition_id: StrictInt = Field(alias="partitionId")
    snapshot_job_instance_id: StrictInt = Field(alias="snapshotJobInstanceId")
    snapshot_time_usecs: StrictInt = Field(alias="snapshotTimeUsecs")
    __properties: ClassVar[List[str]] = ["baseSnapshotJobInstanceId", "baseSnapshotTimeUsecs", "clusterId", "entityType", "incarnationId", "jobId", "pageNumber", "pageSize", "partitionId", "snapshotJobInstanceId", "snapshotTimeUsecs"]

    @field_validator('entity_type')
    def entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['kVMware', 'kPhysical', 'kView', 'kHyperV', 'kNetapp', 'kPure', 'kIsilon']):
            raise ValueError("must be one of enum values ('kVMware', 'kPhysical', 'kView', 'kHyperV', 'kNetapp', 'kPure', 'kIsilon')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SnapshotDiffParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SnapshotDiffParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseSnapshotJobInstanceId": obj.get("baseSnapshotJobInstanceId"),
            "baseSnapshotTimeUsecs": obj.get("baseSnapshotTimeUsecs"),
            "clusterId": obj.get("clusterId"),
            "entityType": obj.get("entityType"),
            "incarnationId": obj.get("incarnationId"),
            "jobId": obj.get("jobId"),
            "pageNumber": obj.get("pageNumber"),
            "pageSize": obj.get("pageSize"),
            "partitionId": obj.get("partitionId"),
            "snapshotJobInstanceId": obj.get("snapshotJobInstanceId"),
            "snapshotTimeUsecs": obj.get("snapshotTimeUsecs")
        })
        return _obj


