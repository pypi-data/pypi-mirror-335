# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class GcpDiskExclusionParams(BaseModel):
    """
    Specifies the paramaters to exclude disks attached to GCP VM instances and exclude VMs without disks.
    """ # noqa: E501
    exclude_vm_with_no_disk: Optional[StrictBool] = Field(default=None, description="Specifies the paramaters to exclude VM without disks.", alias="excludeVmWithNoDisk")
    raw_query: Optional[StrictStr] = Field(default=None, description="Raw boolean query given as input by the user to exclude disk. User can input params in raw query form: (<> AND <> AND <> ..) OR (<> AND <> AND <> ..) OR (..) OR (..) OR .. There cannot be an OR operator inside the bracket. Example query: (K1 = V1 AND K2 = V2 AND K3 != V3) OR (K4 = V4 AND K6 != V6).", alias="rawQuery")
    __properties: ClassVar[List[str]] = ["excludeVmWithNoDisk", "rawQuery"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GcpDiskExclusionParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if exclude_vm_with_no_disk (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_vm_with_no_disk is None and "exclude_vm_with_no_disk" in self.model_fields_set:
            _dict['excludeVmWithNoDisk'] = None

        # set to None if raw_query (nullable) is None
        # and model_fields_set contains the field
        if self.raw_query is None and "raw_query" in self.model_fields_set:
            _dict['rawQuery'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GcpDiskExclusionParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "excludeVmWithNoDisk": obj.get("excludeVmWithNoDisk"),
            "rawQuery": obj.get("rawQuery")
        })
        return _obj


