# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.common_pre_backup_script_params import CommonPreBackupScriptParams
from typing import Set
from typing_extensions import Self

class RemoteAdapterHost(BaseModel):
    """
    Specifies params of the remote host.
    """ # noqa: E501
    host_type: Optional[StrictStr] = Field(default=None, description="Specifies the Operating system type of the host.", alias="hostType")
    hostname: Optional[StrictStr] = Field(default=None, description="Specifies the Hostname or IP address of the host where the pre and post script will be run.")
    username: Optional[StrictStr] = Field(default=None, description="Specifies the username for the host.")
    full_backup_script: Optional[CommonPreBackupScriptParams] = Field(default=None, alias="fullBackupScript")
    incremental_backup_script: Optional[CommonPreBackupScriptParams] = Field(default=None, alias="incrementalBackupScript")
    log_backup_script: Optional[CommonPreBackupScriptParams] = Field(default=None, alias="logBackupScript")
    __properties: ClassVar[List[str]] = ["hostType", "hostname", "username", "fullBackupScript", "incrementalBackupScript", "logBackupScript"]

    @field_validator('host_type')
    def host_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kLinux', 'kWindows', 'kAix', 'kSolaris', 'kSapHana', 'kOther', 'kHPUX', 'kVOS']):
            raise ValueError("must be one of enum values ('kLinux', 'kWindows', 'kAix', 'kSolaris', 'kSapHana', 'kOther', 'kHPUX', 'kVOS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RemoteAdapterHost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of full_backup_script
        if self.full_backup_script:
            _dict['fullBackupScript'] = self.full_backup_script.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incremental_backup_script
        if self.incremental_backup_script:
            _dict['incrementalBackupScript'] = self.incremental_backup_script.to_dict()
        # override the default output from pydantic by calling `to_dict()` of log_backup_script
        if self.log_backup_script:
            _dict['logBackupScript'] = self.log_backup_script.to_dict()
        # set to None if host_type (nullable) is None
        # and model_fields_set contains the field
        if self.host_type is None and "host_type" in self.model_fields_set:
            _dict['hostType'] = None

        # set to None if hostname (nullable) is None
        # and model_fields_set contains the field
        if self.hostname is None and "hostname" in self.model_fields_set:
            _dict['hostname'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RemoteAdapterHost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hostType": obj.get("hostType"),
            "hostname": obj.get("hostname"),
            "username": obj.get("username"),
            "fullBackupScript": CommonPreBackupScriptParams.from_dict(obj["fullBackupScript"]) if obj.get("fullBackupScript") is not None else None,
            "incrementalBackupScript": CommonPreBackupScriptParams.from_dict(obj["incrementalBackupScript"]) if obj.get("incrementalBackupScript") is not None else None,
            "logBackupScript": CommonPreBackupScriptParams.from_dict(obj["logBackupScript"]) if obj.get("logBackupScript") is not None else None
        })
        return _obj


