# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class CassandraSecurityInfo(BaseModel):
    """
    Cassandra security related info.
    """ # noqa: E501
    cassandra_auth_required: Optional[StrictBool] = Field(default=None, description="Is Cassandra authentication required ?", alias="cassandraAuthRequired")
    cassandra_auth_type: Optional[StrictStr] = Field(default=None, description="Cassandra Authentication type.", alias="cassandraAuthType")
    cassandra_authorizer: Optional[StrictStr] = Field(default=None, description="Cassandra Authenticator/Authorizer.", alias="cassandraAuthorizer")
    client_encryption: Optional[StrictBool] = Field(default=None, description="Is Client Encryption enabled for this cluster ?", alias="clientEncryption")
    dse_authorization: Optional[StrictBool] = Field(default=None, description="Is DSE Authorization enabled for this cluster ?", alias="dseAuthorization")
    server_encryption_req_client_auth: Optional[StrictBool] = Field(default=None, description="Is 'Server encryption request client authentication' enabled for this cluster ?", alias="serverEncryptionReqClientAuth")
    server_internode_encryption_type: Optional[StrictStr] = Field(default=None, description="'Server internal node Encryption' type.", alias="serverInternodeEncryptionType")
    __properties: ClassVar[List[str]] = ["cassandraAuthRequired", "cassandraAuthType", "cassandraAuthorizer", "clientEncryption", "dseAuthorization", "serverEncryptionReqClientAuth", "serverInternodeEncryptionType"]

    @field_validator('cassandra_auth_type')
    def cassandra_auth_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PASSWORD', 'KERBEROS', 'LDAP']):
            raise ValueError("must be one of enum values ('PASSWORD', 'KERBEROS', 'LDAP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CassandraSecurityInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cassandra_auth_required (nullable) is None
        # and model_fields_set contains the field
        if self.cassandra_auth_required is None and "cassandra_auth_required" in self.model_fields_set:
            _dict['cassandraAuthRequired'] = None

        # set to None if cassandra_auth_type (nullable) is None
        # and model_fields_set contains the field
        if self.cassandra_auth_type is None and "cassandra_auth_type" in self.model_fields_set:
            _dict['cassandraAuthType'] = None

        # set to None if cassandra_authorizer (nullable) is None
        # and model_fields_set contains the field
        if self.cassandra_authorizer is None and "cassandra_authorizer" in self.model_fields_set:
            _dict['cassandraAuthorizer'] = None

        # set to None if client_encryption (nullable) is None
        # and model_fields_set contains the field
        if self.client_encryption is None and "client_encryption" in self.model_fields_set:
            _dict['clientEncryption'] = None

        # set to None if dse_authorization (nullable) is None
        # and model_fields_set contains the field
        if self.dse_authorization is None and "dse_authorization" in self.model_fields_set:
            _dict['dseAuthorization'] = None

        # set to None if server_encryption_req_client_auth (nullable) is None
        # and model_fields_set contains the field
        if self.server_encryption_req_client_auth is None and "server_encryption_req_client_auth" in self.model_fields_set:
            _dict['serverEncryptionReqClientAuth'] = None

        # set to None if server_internode_encryption_type (nullable) is None
        # and model_fields_set contains the field
        if self.server_internode_encryption_type is None and "server_internode_encryption_type" in self.model_fields_set:
            _dict['serverInternodeEncryptionType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CassandraSecurityInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cassandraAuthRequired": obj.get("cassandraAuthRequired"),
            "cassandraAuthType": obj.get("cassandraAuthType"),
            "cassandraAuthorizer": obj.get("cassandraAuthorizer"),
            "clientEncryption": obj.get("clientEncryption"),
            "dseAuthorization": obj.get("dseAuthorization"),
            "serverEncryptionReqClientAuth": obj.get("serverEncryptionReqClientAuth"),
            "serverInternodeEncryptionType": obj.get("serverInternodeEncryptionType")
        })
        return _obj


