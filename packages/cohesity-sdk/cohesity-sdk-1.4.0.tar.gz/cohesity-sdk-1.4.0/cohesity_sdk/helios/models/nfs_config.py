# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.nfs_root_permissions import NfsRootPermissions
from cohesity_sdk.helios.models.nfs_squash import NfsSquash
from typing import Set
from typing_extensions import Self

class NfsConfig(BaseModel):
    """
    Specifies the NFS config settings for this View.
    """ # noqa: E501
    enable_nfs_kerberos_authentication: Optional[StrictBool] = Field(default=None, description="If set, it enables NFS Kerberos Authentication", alias="enableNfsKerberosAuthentication")
    enable_nfs_kerberos_integrity: Optional[StrictBool] = Field(default=None, description="If set, it enables NFS Kerberos Integrity", alias="enableNfsKerberosIntegrity")
    enable_nfs_kerberos_privacy: Optional[StrictBool] = Field(default=None, description="If set, it enables NFS Kerberos Privacy", alias="enableNfsKerberosPrivacy")
    enable_nfs_unix_authentication: Optional[StrictBool] = Field(default=None, description="If set, it enables NFS UNIX Authentication", alias="enableNfsUnixAuthentication")
    enable_nfs_view_discovery: Optional[StrictBool] = Field(default=None, description="If set, it enables discovery of view for NFS.", alias="enableNfsViewDiscovery")
    enable_nfs_wcc: Optional[StrictBool] = Field(default=None, description="If set, it enables NFS weak cache consistency.", alias="enableNfsWcc")
    nfs_all_squash: Optional[NfsSquash] = Field(default=None, description="Specifies the NFS all squash config.", alias="nfsAllSquash")
    nfs_root_permissions: Optional[NfsRootPermissions] = Field(default=None, description="Specifies the NFS root permission config of the view file system.", alias="nfsRootPermissions")
    nfs_root_squash: Optional[NfsSquash] = Field(default=None, description="Specifies the NFS root squash config.", alias="nfsRootSquash")
    __properties: ClassVar[List[str]] = ["enableNfsKerberosAuthentication", "enableNfsKerberosIntegrity", "enableNfsKerberosPrivacy", "enableNfsUnixAuthentication", "enableNfsViewDiscovery", "enableNfsWcc", "nfsAllSquash", "nfsRootPermissions", "nfsRootSquash"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NfsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of nfs_all_squash
        if self.nfs_all_squash:
            _dict['nfsAllSquash'] = self.nfs_all_squash.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nfs_root_permissions
        if self.nfs_root_permissions:
            _dict['nfsRootPermissions'] = self.nfs_root_permissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nfs_root_squash
        if self.nfs_root_squash:
            _dict['nfsRootSquash'] = self.nfs_root_squash.to_dict()
        # set to None if enable_nfs_kerberos_authentication (nullable) is None
        # and model_fields_set contains the field
        if self.enable_nfs_kerberos_authentication is None and "enable_nfs_kerberos_authentication" in self.model_fields_set:
            _dict['enableNfsKerberosAuthentication'] = None

        # set to None if enable_nfs_kerberos_integrity (nullable) is None
        # and model_fields_set contains the field
        if self.enable_nfs_kerberos_integrity is None and "enable_nfs_kerberos_integrity" in self.model_fields_set:
            _dict['enableNfsKerberosIntegrity'] = None

        # set to None if enable_nfs_kerberos_privacy (nullable) is None
        # and model_fields_set contains the field
        if self.enable_nfs_kerberos_privacy is None and "enable_nfs_kerberos_privacy" in self.model_fields_set:
            _dict['enableNfsKerberosPrivacy'] = None

        # set to None if enable_nfs_unix_authentication (nullable) is None
        # and model_fields_set contains the field
        if self.enable_nfs_unix_authentication is None and "enable_nfs_unix_authentication" in self.model_fields_set:
            _dict['enableNfsUnixAuthentication'] = None

        # set to None if enable_nfs_view_discovery (nullable) is None
        # and model_fields_set contains the field
        if self.enable_nfs_view_discovery is None and "enable_nfs_view_discovery" in self.model_fields_set:
            _dict['enableNfsViewDiscovery'] = None

        # set to None if enable_nfs_wcc (nullable) is None
        # and model_fields_set contains the field
        if self.enable_nfs_wcc is None and "enable_nfs_wcc" in self.model_fields_set:
            _dict['enableNfsWcc'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NfsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableNfsKerberosAuthentication": obj.get("enableNfsKerberosAuthentication"),
            "enableNfsKerberosIntegrity": obj.get("enableNfsKerberosIntegrity"),
            "enableNfsKerberosPrivacy": obj.get("enableNfsKerberosPrivacy"),
            "enableNfsUnixAuthentication": obj.get("enableNfsUnixAuthentication"),
            "enableNfsViewDiscovery": obj.get("enableNfsViewDiscovery"),
            "enableNfsWcc": obj.get("enableNfsWcc"),
            "nfsAllSquash": NfsSquash.from_dict(obj["nfsAllSquash"]) if obj.get("nfsAllSquash") is not None else None,
            "nfsRootPermissions": NfsRootPermissions.from_dict(obj["nfsRootPermissions"]) if obj.get("nfsRootPermissions") is not None else None,
            "nfsRootSquash": NfsSquash.from_dict(obj["nfsRootSquash"]) if obj.get("nfsRootSquash") is not None else None
        })
        return _obj


