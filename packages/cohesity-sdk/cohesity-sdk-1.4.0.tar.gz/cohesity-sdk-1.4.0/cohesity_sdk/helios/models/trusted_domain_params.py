# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cohesity_sdk.helios.models.trusted_domain import TrustedDomain
from typing import Set
from typing_extensions import Self

class TrustedDomainParams(BaseModel):
    """
    Specifies the params related to trusted domains.
    """ # noqa: E501
    blacklisted_domains: Optional[List[StrictStr]] = Field(default=None, description="Specifies a list of domains to add to blacklist. These domains will be blacklisted in trusted domain discovery.", alias="blacklistedDomains")
    discovery_status: Optional[StrictStr] = Field(default=None, description="Specifies the discovery status of trusted domains.", alias="discoveryStatus")
    enabled: Optional[StrictBool] = Field(description="Specifies if trusted domain discovery is enabled.")
    only_use_whitelisted_domains: Optional[StrictBool] = Field(default=None, description="Specifies whether to use 'whitelistedDomains' only for authentication.", alias="onlyUseWhitelistedDomains")
    task_identifier: Optional[StrictStr] = Field(default=None, description="Specifies the identifier for the task running discovery.", alias="taskIdentifier")
    trusted_domains: Optional[List[TrustedDomain]] = Field(default=None, description="Specifies a list of trusted domains.", alias="trustedDomains")
    whitelisted_domains: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="Specifies a list of domains to add to whitelist. Only these domains will be used for authentication if 'onlyUseWhitelistedDomains' is set.", alias="whitelistedDomains")
    __properties: ClassVar[List[str]] = ["blacklistedDomains", "discoveryStatus", "enabled", "onlyUseWhitelistedDomains", "taskIdentifier", "trustedDomains", "whitelistedDomains"]

    @field_validator('discovery_status')
    def discovery_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Completed', 'Running', 'Error']):
            raise ValueError("must be one of enum values ('Completed', 'Running', 'Error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrustedDomainParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "discovery_status",
            "task_identifier",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in trusted_domains (list)
        _items = []
        if self.trusted_domains:
            for _item_trusted_domains in self.trusted_domains:
                if _item_trusted_domains:
                    _items.append(_item_trusted_domains.to_dict())
            _dict['trustedDomains'] = _items
        # set to None if blacklisted_domains (nullable) is None
        # and model_fields_set contains the field
        if self.blacklisted_domains is None and "blacklisted_domains" in self.model_fields_set:
            _dict['blacklistedDomains'] = None

        # set to None if discovery_status (nullable) is None
        # and model_fields_set contains the field
        if self.discovery_status is None and "discovery_status" in self.model_fields_set:
            _dict['discoveryStatus'] = None

        # set to None if enabled (nullable) is None
        # and model_fields_set contains the field
        if self.enabled is None and "enabled" in self.model_fields_set:
            _dict['enabled'] = None

        # set to None if only_use_whitelisted_domains (nullable) is None
        # and model_fields_set contains the field
        if self.only_use_whitelisted_domains is None and "only_use_whitelisted_domains" in self.model_fields_set:
            _dict['onlyUseWhitelistedDomains'] = None

        # set to None if task_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.task_identifier is None and "task_identifier" in self.model_fields_set:
            _dict['taskIdentifier'] = None

        # set to None if trusted_domains (nullable) is None
        # and model_fields_set contains the field
        if self.trusted_domains is None and "trusted_domains" in self.model_fields_set:
            _dict['trustedDomains'] = None

        # set to None if whitelisted_domains (nullable) is None
        # and model_fields_set contains the field
        if self.whitelisted_domains is None and "whitelisted_domains" in self.model_fields_set:
            _dict['whitelistedDomains'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrustedDomainParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blacklistedDomains": obj.get("blacklistedDomains"),
            "discoveryStatus": obj.get("discoveryStatus"),
            "enabled": obj.get("enabled"),
            "onlyUseWhitelistedDomains": obj.get("onlyUseWhitelistedDomains"),
            "taskIdentifier": obj.get("taskIdentifier"),
            "trustedDomains": [TrustedDomain.from_dict(_item) for _item in obj["trustedDomains"]] if obj.get("trustedDomains") is not None else None,
            "whitelistedDomains": obj.get("whitelistedDomains")
        })
        return _obj


