# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class ViewClient(BaseModel):
    """
    Specifies a View Client.
    """ # noqa: E501
    connected_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the time how long the client has connected to the server.", alias="connectedTimeUsecs")
    gid: Optional[StrictInt] = Field(default=None, description="Specifies the GID of the client user.")
    ip: Optional[StrictStr] = Field(default=None, description="Specifies the client ip.")
    node_ip: Optional[StrictStr] = Field(default=None, description="Specifies the node ip which the client is connected to.", alias="nodeIp")
    protocol: Optional[StrictStr] = Field(default=None, description="Specifies the protocol the client uses.")
    server_ip: Optional[StrictStr] = Field(default=None, description="Specifies the server ip which the client is connected to.", alias="serverIp")
    smb_dialect_version: Optional[StrictInt] = Field(default=None, description="Specifies the dialect version for SMB client.", alias="smbDialectVersion")
    uid: Optional[StrictInt] = Field(default=None, description="Specifies the UID of the client user.")
    user_domain: Optional[StrictStr] = Field(default=None, description="Specifies the user domain of the client.", alias="userDomain")
    username: Optional[StrictStr] = Field(default=None, description="Specifies the username of the client.")
    view_id: Optional[StrictInt] = Field(default=None, description="Specifies the id of the View which the client is connected to.", alias="viewId")
    view_name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the View which the client is connected to.", alias="viewName")
    view_path: Optional[StrictStr] = Field(default=None, description="Specifies the path of the View which the client is connected to.", alias="viewPath")
    __properties: ClassVar[List[str]] = ["connectedTimeUsecs", "gid", "ip", "nodeIp", "protocol", "serverIp", "smbDialectVersion", "uid", "userDomain", "username", "viewId", "viewName", "viewPath"]

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NFS', 'SMB']):
            raise ValueError("must be one of enum values ('NFS', 'SMB')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ViewClient from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if connected_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.connected_time_usecs is None and "connected_time_usecs" in self.model_fields_set:
            _dict['connectedTimeUsecs'] = None

        # set to None if gid (nullable) is None
        # and model_fields_set contains the field
        if self.gid is None and "gid" in self.model_fields_set:
            _dict['gid'] = None

        # set to None if ip (nullable) is None
        # and model_fields_set contains the field
        if self.ip is None and "ip" in self.model_fields_set:
            _dict['ip'] = None

        # set to None if node_ip (nullable) is None
        # and model_fields_set contains the field
        if self.node_ip is None and "node_ip" in self.model_fields_set:
            _dict['nodeIp'] = None

        # set to None if protocol (nullable) is None
        # and model_fields_set contains the field
        if self.protocol is None and "protocol" in self.model_fields_set:
            _dict['protocol'] = None

        # set to None if server_ip (nullable) is None
        # and model_fields_set contains the field
        if self.server_ip is None and "server_ip" in self.model_fields_set:
            _dict['serverIp'] = None

        # set to None if smb_dialect_version (nullable) is None
        # and model_fields_set contains the field
        if self.smb_dialect_version is None and "smb_dialect_version" in self.model_fields_set:
            _dict['smbDialectVersion'] = None

        # set to None if uid (nullable) is None
        # and model_fields_set contains the field
        if self.uid is None and "uid" in self.model_fields_set:
            _dict['uid'] = None

        # set to None if user_domain (nullable) is None
        # and model_fields_set contains the field
        if self.user_domain is None and "user_domain" in self.model_fields_set:
            _dict['userDomain'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if view_id (nullable) is None
        # and model_fields_set contains the field
        if self.view_id is None and "view_id" in self.model_fields_set:
            _dict['viewId'] = None

        # set to None if view_name (nullable) is None
        # and model_fields_set contains the field
        if self.view_name is None and "view_name" in self.model_fields_set:
            _dict['viewName'] = None

        # set to None if view_path (nullable) is None
        # and model_fields_set contains the field
        if self.view_path is None and "view_path" in self.model_fields_set:
            _dict['viewPath'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ViewClient from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectedTimeUsecs": obj.get("connectedTimeUsecs"),
            "gid": obj.get("gid"),
            "ip": obj.get("ip"),
            "nodeIp": obj.get("nodeIp"),
            "protocol": obj.get("protocol"),
            "serverIp": obj.get("serverIp"),
            "smbDialectVersion": obj.get("smbDialectVersion"),
            "uid": obj.get("uid"),
            "userDomain": obj.get("userDomain"),
            "username": obj.get("username"),
            "viewId": obj.get("viewId"),
            "viewName": obj.get("viewName"),
            "viewPath": obj.get("viewPath")
        })
        return _obj


