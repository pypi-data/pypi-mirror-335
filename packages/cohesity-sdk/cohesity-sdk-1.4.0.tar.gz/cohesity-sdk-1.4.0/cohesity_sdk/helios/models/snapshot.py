# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class Snapshot(BaseModel):
    """
    Snapshot identified by various parameters like clusterId, protectionGroupId, objectId etc.
    """ # noqa: E501
    cluster_id: Optional[StrictInt] = Field(description="Cluster Id of cluster to which this snapshot belongs.", alias="clusterId")
    incarnation_id: Optional[StrictInt] = Field(description="Incarnation id of cluster to which this snapshot belongs.", alias="incarnationId")
    object_id: Optional[StrictInt] = Field(description="The snapshot is of this Object Id.", alias="objectId")
    protection_group_id: Optional[StrictInt] = Field(description="Protection Group Id of protection group that created this snapshot.", alias="protectionGroupId")
    run_id: Optional[StrictInt] = Field(default=None, description="Run Id of protection group run that created this snapshot.", alias="runId")
    run_start_time_usecs: Optional[StrictInt] = Field(default=None, description="Run start time (in microseconds) of protection group run that created this snapshot.", alias="runStartTimeUsecs")
    snapshot_id: Optional[StrictStr] = Field(default=None, description="Snapshot Id of this snapshot.", alias="snapshotId")
    tenant_ids: Optional[List[StrictStr]] = Field(default=None, description="Tenant Ids associated with this snapshot, if any.", alias="tenantIds")
    __properties: ClassVar[List[str]] = ["clusterId", "incarnationId", "objectId", "protectionGroupId", "runId", "runStartTimeUsecs", "snapshotId", "tenantIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Snapshot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cluster_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_id is None and "cluster_id" in self.model_fields_set:
            _dict['clusterId'] = None

        # set to None if incarnation_id (nullable) is None
        # and model_fields_set contains the field
        if self.incarnation_id is None and "incarnation_id" in self.model_fields_set:
            _dict['incarnationId'] = None

        # set to None if object_id (nullable) is None
        # and model_fields_set contains the field
        if self.object_id is None and "object_id" in self.model_fields_set:
            _dict['objectId'] = None

        # set to None if protection_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.protection_group_id is None and "protection_group_id" in self.model_fields_set:
            _dict['protectionGroupId'] = None

        # set to None if run_id (nullable) is None
        # and model_fields_set contains the field
        if self.run_id is None and "run_id" in self.model_fields_set:
            _dict['runId'] = None

        # set to None if run_start_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.run_start_time_usecs is None and "run_start_time_usecs" in self.model_fields_set:
            _dict['runStartTimeUsecs'] = None

        # set to None if snapshot_id (nullable) is None
        # and model_fields_set contains the field
        if self.snapshot_id is None and "snapshot_id" in self.model_fields_set:
            _dict['snapshotId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Snapshot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterId": obj.get("clusterId"),
            "incarnationId": obj.get("incarnationId"),
            "objectId": obj.get("objectId"),
            "protectionGroupId": obj.get("protectionGroupId"),
            "runId": obj.get("runId"),
            "runStartTimeUsecs": obj.get("runStartTimeUsecs"),
            "snapshotId": obj.get("snapshotId"),
            "tenantIds": obj.get("tenantIds")
        })
        return _obj


