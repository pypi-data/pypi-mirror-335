# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.new_view_files_target_params import NewViewFilesTargetParams
from cohesity_sdk.helios.models.original_view_files_target_params import OriginalViewFilesTargetParams
from typing import Set
from typing_extensions import Self

class RecoverViewToViewFilesTargetParams(BaseModel):
    """
    Specifies the params of the View recovery target.
    """ # noqa: E501
    new_view_config: Optional[NewViewFilesTargetParams] = Field(default=None, description="Specifies the new destination View configuration parameters where the files will be recovered. This is mandatory if recoverToNewView is set to true.", alias="newViewConfig")
    original_view_config: Optional[OriginalViewFilesTargetParams] = Field(default=None, description="Specifies the View configuration if files are being recovered to original View. If not specified, all the configuration parameters will be retained.", alias="originalViewConfig")
    recover_to_new_view: StrictBool = Field(description="Specifies the parameter whether the recovery should be performed to a new or the original View target.", alias="recoverToNewView")
    view_id: Optional[StrictInt] = Field(default=None, description="Specifies the ID of the view.", alias="viewId")
    view_name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the new view that's the target for recovery.", alias="viewName")
    __properties: ClassVar[List[str]] = ["newViewConfig", "originalViewConfig", "recoverToNewView", "viewId", "viewName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecoverViewToViewFilesTargetParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of new_view_config
        if self.new_view_config:
            _dict['newViewConfig'] = self.new_view_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of original_view_config
        if self.original_view_config:
            _dict['originalViewConfig'] = self.original_view_config.to_dict()
        # set to None if new_view_config (nullable) is None
        # and model_fields_set contains the field
        if self.new_view_config is None and "new_view_config" in self.model_fields_set:
            _dict['newViewConfig'] = None

        # set to None if original_view_config (nullable) is None
        # and model_fields_set contains the field
        if self.original_view_config is None and "original_view_config" in self.model_fields_set:
            _dict['originalViewConfig'] = None

        # set to None if view_id (nullable) is None
        # and model_fields_set contains the field
        if self.view_id is None and "view_id" in self.model_fields_set:
            _dict['viewId'] = None

        # set to None if view_name (nullable) is None
        # and model_fields_set contains the field
        if self.view_name is None and "view_name" in self.model_fields_set:
            _dict['viewName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecoverViewToViewFilesTargetParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "newViewConfig": NewViewFilesTargetParams.from_dict(obj["newViewConfig"]) if obj.get("newViewConfig") is not None else None,
            "originalViewConfig": OriginalViewFilesTargetParams.from_dict(obj["originalViewConfig"]) if obj.get("originalViewConfig") is not None else None,
            "recoverToNewView": obj.get("recoverToNewView"),
            "viewId": obj.get("viewId"),
            "viewName": obj.get("viewName")
        })
        return _obj


