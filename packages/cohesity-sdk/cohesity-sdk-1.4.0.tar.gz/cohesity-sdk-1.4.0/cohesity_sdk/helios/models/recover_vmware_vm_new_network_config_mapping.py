# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.org_vdc_network import OrgVDCNetwork
from cohesity_sdk.helios.models.recovery_object_identifier import RecoveryObjectIdentifier
from typing import Set
from typing_extensions import Self

class RecoverVmwareVmNewNetworkConfigMapping(BaseModel):
    """
    Specifies source VMs NIC to target network mapping for the VMware VMs being recovered.
    """ # noqa: E501
    disable_network: Optional[StrictBool] = Field(default=None, description="Specifies whether the attached network should be left in disabled state for this mapping. Default is false.", alias="disableNetwork")
    network_adapter_name: Optional[StrictStr] = Field(default=None, description="Name of the VM's network adapter name.", alias="networkAdapterName")
    org_vdc_network: Optional[OrgVDCNetwork] = Field(default=None, alias="orgVdcNetwork")
    preserve_mac_address: Optional[StrictBool] = Field(default=None, description="Specifies whether to preserve the MAC address of the source network entity while attaching to the new target network. Default is false.", alias="preserveMacAddress")
    source_network_entity: Optional[RecoveryObjectIdentifier] = Field(default=None, description="Specifies the source VM's network port group (i.e, either a standard switch port group or a distributed port group or an opaque network) which is associated with specified network adapter name for which mapping is selected.", alias="sourceNetworkEntity")
    target_network_entity: Optional[RecoveryObjectIdentifier] = Field(default=None, description="Specifies the network port group (i.e, either a standard switch port group or a distributed port group or an opaque network) that will attached as backing device on the recovered object for the given network adapter name and source network entity.", alias="targetNetworkEntity")
    __properties: ClassVar[List[str]] = ["disableNetwork", "networkAdapterName", "orgVdcNetwork", "preserveMacAddress", "sourceNetworkEntity", "targetNetworkEntity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecoverVmwareVmNewNetworkConfigMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of org_vdc_network
        if self.org_vdc_network:
            _dict['orgVdcNetwork'] = self.org_vdc_network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_network_entity
        if self.source_network_entity:
            _dict['sourceNetworkEntity'] = self.source_network_entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_network_entity
        if self.target_network_entity:
            _dict['targetNetworkEntity'] = self.target_network_entity.to_dict()
        # set to None if disable_network (nullable) is None
        # and model_fields_set contains the field
        if self.disable_network is None and "disable_network" in self.model_fields_set:
            _dict['disableNetwork'] = None

        # set to None if network_adapter_name (nullable) is None
        # and model_fields_set contains the field
        if self.network_adapter_name is None and "network_adapter_name" in self.model_fields_set:
            _dict['networkAdapterName'] = None

        # set to None if preserve_mac_address (nullable) is None
        # and model_fields_set contains the field
        if self.preserve_mac_address is None and "preserve_mac_address" in self.model_fields_set:
            _dict['preserveMacAddress'] = None

        # set to None if source_network_entity (nullable) is None
        # and model_fields_set contains the field
        if self.source_network_entity is None and "source_network_entity" in self.model_fields_set:
            _dict['sourceNetworkEntity'] = None

        # set to None if target_network_entity (nullable) is None
        # and model_fields_set contains the field
        if self.target_network_entity is None and "target_network_entity" in self.model_fields_set:
            _dict['targetNetworkEntity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecoverVmwareVmNewNetworkConfigMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disableNetwork": obj.get("disableNetwork"),
            "networkAdapterName": obj.get("networkAdapterName"),
            "orgVdcNetwork": OrgVDCNetwork.from_dict(obj["orgVdcNetwork"]) if obj.get("orgVdcNetwork") is not None else None,
            "preserveMacAddress": obj.get("preserveMacAddress"),
            "sourceNetworkEntity": RecoveryObjectIdentifier.from_dict(obj["sourceNetworkEntity"]) if obj.get("sourceNetworkEntity") is not None else None,
            "targetNetworkEntity": RecoveryObjectIdentifier.from_dict(obj["targetNetworkEntity"]) if obj.get("targetNetworkEntity") is not None else None
        })
        return _obj


