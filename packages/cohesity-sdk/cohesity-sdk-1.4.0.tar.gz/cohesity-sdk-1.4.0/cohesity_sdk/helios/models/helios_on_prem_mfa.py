# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class HeliosOnPremMfa(BaseModel):
    """
    Specifies MFA configuration for a Helios on prem deployment.
    """ # noqa: E501
    authentication_types: Optional[List[StrictStr]] = Field(default=None, description="Specifies the list of mechanism to receive the OTP code. Supported types are:   TOTP (Helios OnPrem Only) -> Time based OTP.   Email OTP (Helios OnPrem Only) -> OTP via Email.   Salesforce (Helios Only) -> MFA setup via Salesforce. ", alias="authenticationTypes")
    mfa: Optional[StrictBool] = Field(description="Specifies whether MFA is enabled or disabled.")
    retain_user_mfa_settings: Optional[StrictBool] = Field(default=False, description="Specifies whether user level MFA config needs to be retained when account level MFA is enabled or disabled.", alias="retainUserMfaSettings")
    __properties: ClassVar[List[str]] = ["authenticationTypes", "mfa", "retainUserMfaSettings"]

    @field_validator('authentication_types')
    def authentication_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['email', 'totp', 'salesforce']):
                raise ValueError("each list item must be one of ('email', 'totp', 'salesforce')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HeliosOnPremMfa from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if authentication_types (nullable) is None
        # and model_fields_set contains the field
        if self.authentication_types is None and "authentication_types" in self.model_fields_set:
            _dict['authenticationTypes'] = None

        # set to None if mfa (nullable) is None
        # and model_fields_set contains the field
        if self.mfa is None and "mfa" in self.model_fields_set:
            _dict['mfa'] = None

        # set to None if retain_user_mfa_settings (nullable) is None
        # and model_fields_set contains the field
        if self.retain_user_mfa_settings is None and "retain_user_mfa_settings" in self.model_fields_set:
            _dict['retainUserMfaSettings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HeliosOnPremMfa from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authenticationTypes": obj.get("authenticationTypes"),
            "mfa": obj.get("mfa"),
            "retainUserMfaSettings": obj.get("retainUserMfaSettings") if obj.get("retainUserMfaSettings") is not None else False
        })
        return _obj


