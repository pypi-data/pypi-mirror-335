# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class SPClusterInfo(BaseModel):
    """
    Specifies the details of a cluster claimed from IBM Storage Protect environment.
    """ # noqa: E501
    cluster_id: Optional[StrictInt] = Field(default=None, description="Specifies cluster id.", alias="clusterId")
    cluster_incarnation_id: Optional[StrictInt] = Field(default=None, description="Specifies cluster incarnation id.", alias="clusterIncarnationId")
    cluster_name: Optional[StrictStr] = Field(default=None, description="Specifies cluster's name.", alias="clusterName")
    health: Optional[StrictStr] = Field(default=None, description="Specifies the health of the cluster.")
    is_connected_to_helios: Optional[StrictBool] = Field(default=None, description="Specifies if the cluster is connected to helios.", alias="isConnectedToHelios")
    provider_type: Optional[StrictStr] = Field(default=None, description="Specifies the type of the cluster provider.", alias="providerType")
    __properties: ClassVar[List[str]] = ["clusterId", "clusterIncarnationId", "clusterName", "health", "isConnectedToHelios", "providerType"]

    @field_validator('health')
    def health_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Critical', 'NonCritical']):
            raise ValueError("must be one of enum values ('Critical', 'NonCritical')")
        return value

    @field_validator('provider_type')
    def provider_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['kMCMCohesity', 'kIBMStorageProtect']):
            raise ValueError("must be one of enum values ('kMCMCohesity', 'kIBMStorageProtect')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SPClusterInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cluster_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_id is None and "cluster_id" in self.model_fields_set:
            _dict['clusterId'] = None

        # set to None if cluster_incarnation_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_incarnation_id is None and "cluster_incarnation_id" in self.model_fields_set:
            _dict['clusterIncarnationId'] = None

        # set to None if cluster_name (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_name is None and "cluster_name" in self.model_fields_set:
            _dict['clusterName'] = None

        # set to None if health (nullable) is None
        # and model_fields_set contains the field
        if self.health is None and "health" in self.model_fields_set:
            _dict['health'] = None

        # set to None if is_connected_to_helios (nullable) is None
        # and model_fields_set contains the field
        if self.is_connected_to_helios is None and "is_connected_to_helios" in self.model_fields_set:
            _dict['isConnectedToHelios'] = None

        # set to None if provider_type (nullable) is None
        # and model_fields_set contains the field
        if self.provider_type is None and "provider_type" in self.model_fields_set:
            _dict['providerType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SPClusterInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterId": obj.get("clusterId"),
            "clusterIncarnationId": obj.get("clusterIncarnationId"),
            "clusterName": obj.get("clusterName"),
            "health": obj.get("health"),
            "isConnectedToHelios": obj.get("isConnectedToHelios"),
            "providerType": obj.get("providerType")
        })
        return _obj


