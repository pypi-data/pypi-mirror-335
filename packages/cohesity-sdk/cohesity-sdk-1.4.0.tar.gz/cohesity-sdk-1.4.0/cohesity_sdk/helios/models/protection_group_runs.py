# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.protection_group_run import ProtectionGroupRun
from typing import Set
from typing_extensions import Self

class ProtectionGroupRuns(BaseModel):
    """
    Protection runs.
    """ # noqa: E501
    pagination_cookie: Optional[StrictStr] = Field(default=None, description="Specifies the information needed in order to support pagination. This will not be included for the last page of results.", alias="paginationCookie")
    runs: Optional[List[ProtectionGroupRun]] = Field(default=None, description="Specifies the list of Protection Group runs.")
    total_runs: Optional[StrictInt] = Field(default=None, description="Specifies the count of total runs exist for the given set of filters. The number of runs in single API call are limited and this count can be used to estimate query filter values to get next set of remaining runs. Please note that this field will only be populated if startTimeUsecs or endTimeUsecs or both are specified in query parameters.", alias="totalRuns")
    __properties: ClassVar[List[str]] = ["paginationCookie", "runs", "totalRuns"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProtectionGroupRuns from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in runs (list)
        _items = []
        if self.runs:
            for _item_runs in self.runs:
                if _item_runs:
                    _items.append(_item_runs.to_dict())
            _dict['runs'] = _items
        # set to None if pagination_cookie (nullable) is None
        # and model_fields_set contains the field
        if self.pagination_cookie is None and "pagination_cookie" in self.model_fields_set:
            _dict['paginationCookie'] = None

        # set to None if runs (nullable) is None
        # and model_fields_set contains the field
        if self.runs is None and "runs" in self.model_fields_set:
            _dict['runs'] = None

        # set to None if total_runs (nullable) is None
        # and model_fields_set contains the field
        if self.total_runs is None and "total_runs" in self.model_fields_set:
            _dict['totalRuns'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProtectionGroupRuns from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "paginationCookie": obj.get("paginationCookie"),
            "runs": [ProtectionGroupRun.from_dict(_item) for _item in obj["runs"]] if obj.get("runs") is not None else None,
            "totalRuns": obj.get("totalRuns")
        })
        return _obj


