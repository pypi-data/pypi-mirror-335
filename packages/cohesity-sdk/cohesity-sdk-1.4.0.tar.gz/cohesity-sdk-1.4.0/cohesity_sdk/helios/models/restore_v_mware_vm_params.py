# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class RestoreVMwareVMParams(BaseModel):
    """
    Specifies the parameters for a VMware recovery target.
    """ # noqa: E501
    attempt_differential_restore: Optional[StrictBool] = Field(default=None, description="Specifies whether to attempt differential restore.", alias="attemptDifferentialRestore")
    datastore_ids: Optional[List[StrictInt]] = Field(default=None, description="Specifies Datastore Ids, if the restore is to alternate location.", alias="datastoreIds")
    enable_copy_recovery: Optional[StrictBool] = Field(default=None, description="Specifies whether to perform copy recovery or not.", alias="enableCopyRecovery")
    is_on_prem_deploy: Optional[StrictBool] = Field(default=None, description="Specifies whether a task in on prem deploy or not.", alias="isOnPremDeploy")
    overwrite_existing_vm: Optional[StrictBool] = Field(default=None, description="Specifies whether to overwrite the VM at the target location.", alias="overwriteExistingVm")
    power_off_and_rename_existing_vm: Optional[StrictBool] = Field(default=None, description="Specifies whether to power off and mark the VM at the target location as deprecated.", alias="powerOffAndRenameExistingVm")
    resource_pool_id: Optional[StrictInt] = Field(default=None, description="Specifies if the restore is to alternate location.", alias="resourcePoolId")
    target_data_store_id: Optional[StrictInt] = Field(default=None, description="Specifies the folder where the restore datastore should be created.", alias="targetDataStoreId")
    target_vm_folder_id: Optional[StrictInt] = Field(default=None, description="Specifies the folder ID where the VMs should be created.", alias="targetVMFolderId")
    __properties: ClassVar[List[str]] = ["attemptDifferentialRestore", "datastoreIds", "enableCopyRecovery", "isOnPremDeploy", "overwriteExistingVm", "powerOffAndRenameExistingVm", "resourcePoolId", "targetDataStoreId", "targetVMFolderId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestoreVMwareVMParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if attempt_differential_restore (nullable) is None
        # and model_fields_set contains the field
        if self.attempt_differential_restore is None and "attempt_differential_restore" in self.model_fields_set:
            _dict['attemptDifferentialRestore'] = None

        # set to None if datastore_ids (nullable) is None
        # and model_fields_set contains the field
        if self.datastore_ids is None and "datastore_ids" in self.model_fields_set:
            _dict['datastoreIds'] = None

        # set to None if enable_copy_recovery (nullable) is None
        # and model_fields_set contains the field
        if self.enable_copy_recovery is None and "enable_copy_recovery" in self.model_fields_set:
            _dict['enableCopyRecovery'] = None

        # set to None if is_on_prem_deploy (nullable) is None
        # and model_fields_set contains the field
        if self.is_on_prem_deploy is None and "is_on_prem_deploy" in self.model_fields_set:
            _dict['isOnPremDeploy'] = None

        # set to None if overwrite_existing_vm (nullable) is None
        # and model_fields_set contains the field
        if self.overwrite_existing_vm is None and "overwrite_existing_vm" in self.model_fields_set:
            _dict['overwriteExistingVm'] = None

        # set to None if power_off_and_rename_existing_vm (nullable) is None
        # and model_fields_set contains the field
        if self.power_off_and_rename_existing_vm is None and "power_off_and_rename_existing_vm" in self.model_fields_set:
            _dict['powerOffAndRenameExistingVm'] = None

        # set to None if resource_pool_id (nullable) is None
        # and model_fields_set contains the field
        if self.resource_pool_id is None and "resource_pool_id" in self.model_fields_set:
            _dict['resourcePoolId'] = None

        # set to None if target_data_store_id (nullable) is None
        # and model_fields_set contains the field
        if self.target_data_store_id is None and "target_data_store_id" in self.model_fields_set:
            _dict['targetDataStoreId'] = None

        # set to None if target_vm_folder_id (nullable) is None
        # and model_fields_set contains the field
        if self.target_vm_folder_id is None and "target_vm_folder_id" in self.model_fields_set:
            _dict['targetVMFolderId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestoreVMwareVMParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attemptDifferentialRestore": obj.get("attemptDifferentialRestore"),
            "datastoreIds": obj.get("datastoreIds"),
            "enableCopyRecovery": obj.get("enableCopyRecovery"),
            "isOnPremDeploy": obj.get("isOnPremDeploy"),
            "overwriteExistingVm": obj.get("overwriteExistingVm"),
            "powerOffAndRenameExistingVm": obj.get("powerOffAndRenameExistingVm"),
            "resourcePoolId": obj.get("resourcePoolId"),
            "targetDataStoreId": obj.get("targetDataStoreId"),
            "targetVMFolderId": obj.get("targetVMFolderId")
        })
        return _obj


