# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.protection_group_archival_run_filter_params import ProtectionGroupArchivalRunFilterParams
from cohesity_sdk.helios.models.protection_group_backup_run_filter_params import ProtectionGroupBackupRunFilterParams
from typing import Set
from typing_extensions import Self

class GetMcmProtectionGroupsActivityReqParams(BaseModel):
    """
    Specifies the params to filter Protection Group activity.
    """ # noqa: E501
    activity_types: Optional[List[StrictStr]] = Field(default=None, description="Specifies the activity types.", alias="activityTypes")
    archival_run_params: Optional[ProtectionGroupArchivalRunFilterParams] = Field(default=None, alias="archivalRunParams")
    backup_run_params: Optional[ProtectionGroupBackupRunFilterParams] = Field(default=None, description="Specifies the additional filters in case activity type is set to 'BackupRun'. This does not apply to RPaaS.", alias="backupRunParams")
    environments: Optional[List[StrictStr]] = Field(default=None, description="Specifies the list of environments.")
    from_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the time in Unix timestamp epoch in microsecond which filters all the activity started after this value.", alias="fromTimeUsecs")
    include_object_details: Optional[StrictBool] = Field(default=None, description="Specifies whether to include details for objects in response. By default this is false.", alias="includeObjectDetails")
    protection_group_identifiers: Optional[List[StrictStr]] = Field(default=None, description="Specifies the list of Protection Group identifiers to filter the activity.", alias="protectionGroupIdentifiers")
    run_start_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the time in Unix timestamp epoch in microsecond which filters all the activity started at this time.", alias="runStartTimeUsecs")
    statuses: Optional[List[StrictStr]] = Field(default=None, description="Specifies the list of statuses to filter activity events.")
    to_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the time in Unix timestamp epoch in microsecond which filters all the activity started before this value.", alias="toTimeUsecs")
    __properties: ClassVar[List[str]] = ["activityTypes", "archivalRunParams", "backupRunParams", "environments", "fromTimeUsecs", "includeObjectDetails", "protectionGroupIdentifiers", "runStartTimeUsecs", "statuses", "toTimeUsecs"]

    @field_validator('activity_types')
    def activity_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['BackupRun', 'ArchivalRun']):
                raise ValueError("each list item must be one of ('BackupRun', 'ArchivalRun')")
        return value

    @field_validator('environments')
    def environments_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['kVMware', 'kHyperV', 'kVCD', 'kAzure', 'kGCP', 'kKVM', 'kAcropolis', 'kAWS', 'kAWSNative', 'kAwsS3', 'kAWSSnapshotManager', 'kRDSSnapshotManager', 'kAuroraSnapshotManager', 'kAwsRDSPostgresBackup', 'kAzureNative', 'kAzureSQL', 'kAzureSnapshotManager', 'kPhysical', 'kPhysicalFiles', 'kGPFS', 'kElastifile', 'kNetapp', 'kGenericNas', 'kIsilon', 'kFlashBlade', 'kPure', 'kIbmFlashSystem', 'kSQL', 'kExchange', 'kAD', 'kOracle', 'kView', 'kRemoteAdapter', 'kO365', 'kO365PublicFolders', 'kO365Teams', 'kO365Group', 'kO365Exchange', 'kO365OneDrive', 'kO365Sharepoint', 'kKubernetes', 'kCassandra', 'kMongoDB', 'kCouchbase', 'kHdfs', 'kHive', 'kHBase', 'kUDA', 'kSfdc']):
                raise ValueError("each list item must be one of ('kVMware', 'kHyperV', 'kVCD', 'kAzure', 'kGCP', 'kKVM', 'kAcropolis', 'kAWS', 'kAWSNative', 'kAwsS3', 'kAWSSnapshotManager', 'kRDSSnapshotManager', 'kAuroraSnapshotManager', 'kAwsRDSPostgresBackup', 'kAzureNative', 'kAzureSQL', 'kAzureSnapshotManager', 'kPhysical', 'kPhysicalFiles', 'kGPFS', 'kElastifile', 'kNetapp', 'kGenericNas', 'kIsilon', 'kFlashBlade', 'kPure', 'kIbmFlashSystem', 'kSQL', 'kExchange', 'kAD', 'kOracle', 'kView', 'kRemoteAdapter', 'kO365', 'kO365PublicFolders', 'kO365Teams', 'kO365Group', 'kO365Exchange', 'kO365OneDrive', 'kO365Sharepoint', 'kKubernetes', 'kCassandra', 'kMongoDB', 'kCouchbase', 'kHdfs', 'kHive', 'kHBase', 'kUDA', 'kSfdc')")
        return value

    @field_validator('statuses')
    def statuses_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped']):
                raise ValueError("each list item must be one of ('Accepted', 'Running', 'Canceled', 'Canceling', 'Failed', 'Missed', 'Succeeded', 'SucceededWithWarning', 'OnHold', 'Finalizing', 'Skipped')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMcmProtectionGroupsActivityReqParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of archival_run_params
        if self.archival_run_params:
            _dict['archivalRunParams'] = self.archival_run_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backup_run_params
        if self.backup_run_params:
            _dict['backupRunParams'] = self.backup_run_params.to_dict()
        # set to None if activity_types (nullable) is None
        # and model_fields_set contains the field
        if self.activity_types is None and "activity_types" in self.model_fields_set:
            _dict['activityTypes'] = None

        # set to None if backup_run_params (nullable) is None
        # and model_fields_set contains the field
        if self.backup_run_params is None and "backup_run_params" in self.model_fields_set:
            _dict['backupRunParams'] = None

        # set to None if environments (nullable) is None
        # and model_fields_set contains the field
        if self.environments is None and "environments" in self.model_fields_set:
            _dict['environments'] = None

        # set to None if from_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.from_time_usecs is None and "from_time_usecs" in self.model_fields_set:
            _dict['fromTimeUsecs'] = None

        # set to None if include_object_details (nullable) is None
        # and model_fields_set contains the field
        if self.include_object_details is None and "include_object_details" in self.model_fields_set:
            _dict['includeObjectDetails'] = None

        # set to None if protection_group_identifiers (nullable) is None
        # and model_fields_set contains the field
        if self.protection_group_identifiers is None and "protection_group_identifiers" in self.model_fields_set:
            _dict['protectionGroupIdentifiers'] = None

        # set to None if run_start_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.run_start_time_usecs is None and "run_start_time_usecs" in self.model_fields_set:
            _dict['runStartTimeUsecs'] = None

        # set to None if statuses (nullable) is None
        # and model_fields_set contains the field
        if self.statuses is None and "statuses" in self.model_fields_set:
            _dict['statuses'] = None

        # set to None if to_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.to_time_usecs is None and "to_time_usecs" in self.model_fields_set:
            _dict['toTimeUsecs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMcmProtectionGroupsActivityReqParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activityTypes": obj.get("activityTypes"),
            "archivalRunParams": ProtectionGroupArchivalRunFilterParams.from_dict(obj["archivalRunParams"]) if obj.get("archivalRunParams") is not None else None,
            "backupRunParams": ProtectionGroupBackupRunFilterParams.from_dict(obj["backupRunParams"]) if obj.get("backupRunParams") is not None else None,
            "environments": obj.get("environments"),
            "fromTimeUsecs": obj.get("fromTimeUsecs"),
            "includeObjectDetails": obj.get("includeObjectDetails"),
            "protectionGroupIdentifiers": obj.get("protectionGroupIdentifiers"),
            "runStartTimeUsecs": obj.get("runStartTimeUsecs"),
            "statuses": obj.get("statuses"),
            "toTimeUsecs": obj.get("toTimeUsecs")
        })
        return _obj


