# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.create_view import CreateView
from typing import Set
from typing_extensions import Self

class Template(BaseModel):
    """
    Description of the view template.
    """ # noqa: E501
    compress: Optional[StrictBool] = Field(default=None, description="Specifies whether to enable compression in storage domain.")
    dedup: Optional[StrictBool] = Field(default=None, description="Specifies whether to enable dedup in storage domain.")
    default_template_name: Optional[StrictStr] = Field(default=None, description="Used for uniquely indentifying a default template.", alias="defaultTemplateName")
    id: Optional[StrictInt] = Field(default=None, description="Specifies an id of the view template.")
    is_default: Optional[StrictBool] = Field(default=None, description="Specifies if the tempate is custom or static.", alias="isDefault")
    name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the view template.")
    view_params: Optional[CreateView] = Field(default=None, description="Specifies the parameters which is used to create the view. No field is required.", alias="viewParams")
    __properties: ClassVar[List[str]] = ["compress", "dedup", "defaultTemplateName", "id", "isDefault", "name", "viewParams"]

    @field_validator('default_template_name')
    def default_template_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'BackupGeneral', 'BackupCommvault', 'BackupVeeam', 'FileServiceVideos', 'FileServiceMultimedia', 'FileServiceArchive', 'ObjectServiceContainer', 'ZDLRA', 'SAPHANA', 'TSM', 'ApplicationsDump', 'FileServiceGeneral', 'DigitalArchive', 'ObjectServiceGeneral', 'SplunkSmartStore', 'Hadoop']):
            raise ValueError("must be one of enum values ('Unknown', 'BackupGeneral', 'BackupCommvault', 'BackupVeeam', 'FileServiceVideos', 'FileServiceMultimedia', 'FileServiceArchive', 'ObjectServiceContainer', 'ZDLRA', 'SAPHANA', 'TSM', 'ApplicationsDump', 'FileServiceGeneral', 'DigitalArchive', 'ObjectServiceGeneral', 'SplunkSmartStore', 'Hadoop')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Template from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "default_template_name",
            "id",
            "is_default",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of view_params
        if self.view_params:
            _dict['viewParams'] = self.view_params.to_dict()
        # set to None if compress (nullable) is None
        # and model_fields_set contains the field
        if self.compress is None and "compress" in self.model_fields_set:
            _dict['compress'] = None

        # set to None if dedup (nullable) is None
        # and model_fields_set contains the field
        if self.dedup is None and "dedup" in self.model_fields_set:
            _dict['dedup'] = None

        # set to None if default_template_name (nullable) is None
        # and model_fields_set contains the field
        if self.default_template_name is None and "default_template_name" in self.model_fields_set:
            _dict['defaultTemplateName'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if is_default (nullable) is None
        # and model_fields_set contains the field
        if self.is_default is None and "is_default" in self.model_fields_set:
            _dict['isDefault'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Template from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compress": obj.get("compress"),
            "dedup": obj.get("dedup"),
            "defaultTemplateName": obj.get("defaultTemplateName"),
            "id": obj.get("id"),
            "isDefault": obj.get("isDefault"),
            "name": obj.get("name"),
            "viewParams": CreateView.from_dict(obj["viewParams"]) if obj.get("viewParams") is not None else None
        })
        return _obj


