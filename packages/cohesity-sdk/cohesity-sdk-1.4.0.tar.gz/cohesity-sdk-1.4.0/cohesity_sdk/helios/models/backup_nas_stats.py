# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class BackupNasStats(BaseModel):
    """
    Specifies the stats which are specific for NAS adapter.
    """ # noqa: E501
    file_analysis_rate: Optional[StrictInt] = Field(default=None, description="Specifies the rate at which files are being analyzed in files per minute.", alias="fileAnalysisRate")
    file_discovery_rate: Optional[StrictInt] = Field(default=None, description="Specifies the rate at which files are being discovered in files per minute.", alias="fileDiscoveryRate")
    file_discovery_time: Optional[StrictInt] = Field(default=None, description="Specifies the time taken for file discovery.", alias="fileDiscoveryTime")
    file_ingestion_rate: Optional[StrictInt] = Field(default=None, description="Specifies the rate at which files are being ingested in files per minute.", alias="fileIngestionRate")
    files_analyzed: Optional[StrictInt] = Field(default=None, description="Specifies the number of files which have been analyzed.", alias="filesAnalyzed")
    files_discovered: Optional[StrictInt] = Field(default=None, description="Specifies the number of files which have already been discovered.", alias="filesDiscovered")
    files_ingested: Optional[StrictInt] = Field(default=None, description="Specifies the number of files which have been ingested.", alias="filesIngested")
    walker_run_time: Optional[StrictInt] = Field(default=None, description="Specifies the run time for directory walker in seconds.", alias="walkerRunTime")
    __properties: ClassVar[List[str]] = ["fileAnalysisRate", "fileDiscoveryRate", "fileDiscoveryTime", "fileIngestionRate", "filesAnalyzed", "filesDiscovered", "filesIngested", "walkerRunTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupNasStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if file_analysis_rate (nullable) is None
        # and model_fields_set contains the field
        if self.file_analysis_rate is None and "file_analysis_rate" in self.model_fields_set:
            _dict['fileAnalysisRate'] = None

        # set to None if file_discovery_rate (nullable) is None
        # and model_fields_set contains the field
        if self.file_discovery_rate is None and "file_discovery_rate" in self.model_fields_set:
            _dict['fileDiscoveryRate'] = None

        # set to None if file_discovery_time (nullable) is None
        # and model_fields_set contains the field
        if self.file_discovery_time is None and "file_discovery_time" in self.model_fields_set:
            _dict['fileDiscoveryTime'] = None

        # set to None if file_ingestion_rate (nullable) is None
        # and model_fields_set contains the field
        if self.file_ingestion_rate is None and "file_ingestion_rate" in self.model_fields_set:
            _dict['fileIngestionRate'] = None

        # set to None if files_analyzed (nullable) is None
        # and model_fields_set contains the field
        if self.files_analyzed is None and "files_analyzed" in self.model_fields_set:
            _dict['filesAnalyzed'] = None

        # set to None if files_discovered (nullable) is None
        # and model_fields_set contains the field
        if self.files_discovered is None and "files_discovered" in self.model_fields_set:
            _dict['filesDiscovered'] = None

        # set to None if files_ingested (nullable) is None
        # and model_fields_set contains the field
        if self.files_ingested is None and "files_ingested" in self.model_fields_set:
            _dict['filesIngested'] = None

        # set to None if walker_run_time (nullable) is None
        # and model_fields_set contains the field
        if self.walker_run_time is None and "walker_run_time" in self.model_fields_set:
            _dict['walkerRunTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupNasStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fileAnalysisRate": obj.get("fileAnalysisRate"),
            "fileDiscoveryRate": obj.get("fileDiscoveryRate"),
            "fileDiscoveryTime": obj.get("fileDiscoveryTime"),
            "fileIngestionRate": obj.get("fileIngestionRate"),
            "filesAnalyzed": obj.get("filesAnalyzed"),
            "filesDiscovered": obj.get("filesDiscovered"),
            "filesIngested": obj.get("filesIngested"),
            "walkerRunTime": obj.get("walkerRunTime")
        })
        return _obj


