# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.azure_sql_package_options import AzureSqlPackageOptions
from cohesity_sdk.helios.models.azure_sql_sku_options import AzureSqlSkuOptions
from typing import Set
from typing_extensions import Self

class RecoverAzureSqlObjectParams(BaseModel):
    """
    Specifies details of recovery object to be recovered.
    """ # noqa: E501
    new_database_name: Optional[StrictStr] = Field(default=None, description="Specifies the new name to which the object should be renamed to after the recovery.", alias="newDatabaseName")
    overwrite_database: Optional[StrictBool] = Field(default=None, description="Set to true to overwrite an existing object at the destination. If set to false, and the same object exists at the destination, then recovery will fail for that object.", alias="overwriteDatabase")
    restored_database_sku: Optional[AzureSqlSkuOptions] = Field(default=None, alias="restoredDatabaseSku")
    sql_package_options: Optional[AzureSqlPackageOptions] = Field(default=None, alias="sqlPackageOptions")
    __properties: ClassVar[List[str]] = ["newDatabaseName", "overwriteDatabase", "restoredDatabaseSku", "sqlPackageOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecoverAzureSqlObjectParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of restored_database_sku
        if self.restored_database_sku:
            _dict['restoredDatabaseSku'] = self.restored_database_sku.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sql_package_options
        if self.sql_package_options:
            _dict['sqlPackageOptions'] = self.sql_package_options.to_dict()
        # set to None if new_database_name (nullable) is None
        # and model_fields_set contains the field
        if self.new_database_name is None and "new_database_name" in self.model_fields_set:
            _dict['newDatabaseName'] = None

        # set to None if overwrite_database (nullable) is None
        # and model_fields_set contains the field
        if self.overwrite_database is None and "overwrite_database" in self.model_fields_set:
            _dict['overwriteDatabase'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecoverAzureSqlObjectParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "newDatabaseName": obj.get("newDatabaseName"),
            "overwriteDatabase": obj.get("overwriteDatabase"),
            "restoredDatabaseSku": AzureSqlSkuOptions.from_dict(obj["restoredDatabaseSku"]) if obj.get("restoredDatabaseSku") is not None else None,
            "sqlPackageOptions": AzureSqlPackageOptions.from_dict(obj["sqlPackageOptions"]) if obj.get("sqlPackageOptions") is not None else None
        })
        return _obj


