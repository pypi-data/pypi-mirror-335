# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.resolved_alert_info import ResolvedAlertInfo
from typing import Set
from typing_extensions import Self

class AlertResolution(BaseModel):
    """
    Provides Resolution details and the list of Alerts resolved
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Specifies account id of the user who create the resolution", alias="accountId")
    created_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies unix epoch timestamp (in microseconds) when the resolution is created.", alias="createdTimeUsecs")
    description: Optional[StrictStr] = Field(default=None, description="Specifies the full description about the Resolution.")
    external_key: Optional[StrictStr] = Field(default=None, description="Specifies the external key assigned outside of helios, with the form of \"clusterid:resolutionid\"", alias="externalKey")
    resolution_id: Optional[StrictStr] = Field(default=None, description="Specifies the unique reslution id assigned in helios.", alias="resolutionId")
    resolution_name: Optional[StrictStr] = Field(default=None, description="Specifies the unique name of the resolution.", alias="resolutionName")
    resolved_alerts: Optional[List[ResolvedAlertInfo]] = Field(default=None, alias="resolvedAlerts")
    silence_minutes: Optional[StrictInt] = Field(default=None, description="Specifies the time duration (in minutes) for silencing alerts. If unspecified or set zero, a silence rule will be created with default expiry time. No silence rule will be created if value < 0.", alias="silenceMinutes")
    tenant_id: Optional[StrictStr] = Field(default=None, description="Specifies tenant id of the user who create the resolution", alias="tenantId")
    __properties: ClassVar[List[str]] = ["accountId", "createdTimeUsecs", "description", "externalKey", "resolutionId", "resolutionName", "resolvedAlerts", "silenceMinutes", "tenantId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertResolution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resolved_alerts (list)
        _items = []
        if self.resolved_alerts:
            for _item_resolved_alerts in self.resolved_alerts:
                if _item_resolved_alerts:
                    _items.append(_item_resolved_alerts.to_dict())
            _dict['resolvedAlerts'] = _items
        # set to None if created_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.created_time_usecs is None and "created_time_usecs" in self.model_fields_set:
            _dict['createdTimeUsecs'] = None

        # set to None if external_key (nullable) is None
        # and model_fields_set contains the field
        if self.external_key is None and "external_key" in self.model_fields_set:
            _dict['externalKey'] = None

        # set to None if resolution_id (nullable) is None
        # and model_fields_set contains the field
        if self.resolution_id is None and "resolution_id" in self.model_fields_set:
            _dict['resolutionId'] = None

        # set to None if silence_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.silence_minutes is None and "silence_minutes" in self.model_fields_set:
            _dict['silenceMinutes'] = None

        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenantId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertResolution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "createdTimeUsecs": obj.get("createdTimeUsecs"),
            "description": obj.get("description"),
            "externalKey": obj.get("externalKey"),
            "resolutionId": obj.get("resolutionId"),
            "resolutionName": obj.get("resolutionName"),
            "resolvedAlerts": [ResolvedAlertInfo.from_dict(_item) for _item in obj["resolvedAlerts"]] if obj.get("resolvedAlerts") is not None else None,
            "silenceMinutes": obj.get("silenceMinutes"),
            "tenantId": obj.get("tenantId")
        })
        return _obj


