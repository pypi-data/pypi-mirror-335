# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class MonthSchedule(BaseModel):
    """
    Specifies settings that define a schedule for a Protection Group runs to on specific week and specific days of that week.
    """ # noqa: E501
    day_of_month: Optional[StrictInt] = Field(default=None, description="Specifies the exact date of the month (such as 18) in a Monthly Schedule specified by unit field as 'Years'. <br> Example: if 'dayOfMonth' is set to '18', a backup is performed on the 18th of every month.", alias="dayOfMonth")
    day_of_week: Optional[List[StrictStr]] = Field(default=None, description="Specifies a list of days of the week when to start Protection Group Runs. <br> Example: To run a Protection Group on every Monday and Tuesday, set the schedule with following values: <br>  unit: 'Weeks' <br>  dayOfWeek: ['Monday','Tuesday']", alias="dayOfWeek")
    week_of_month: Optional[StrictStr] = Field(default=None, description="Specifies the week of the month (such as 'Third') or nth day of month (such as 'First' or 'Last') in a Monthly Schedule specified by unit field as 'Months'. <br>This field can be used in combination with 'dayOfWeek' to define the day in the month to start the Protection Group Run. <br> Example: if 'weekOfMonth' is set to 'Third' and day is set to 'Monday', a backup is performed on the third Monday of every month. <br> Example: if 'weekOfMonth' is set to 'Last' and dayOfWeek is not set, a backup is performed on the last day of every month.", alias="weekOfMonth")
    __properties: ClassVar[List[str]] = ["dayOfMonth", "dayOfWeek", "weekOfMonth"]

    @field_validator('day_of_week')
    def day_of_week_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']):
                raise ValueError("each list item must be one of ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')")
        return value

    @field_validator('week_of_month')
    def week_of_month_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['First', 'Second', 'Third', 'Fourth', 'Last']):
            raise ValueError("must be one of enum values ('First', 'Second', 'Third', 'Fourth', 'Last')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MonthSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if day_of_month (nullable) is None
        # and model_fields_set contains the field
        if self.day_of_month is None and "day_of_month" in self.model_fields_set:
            _dict['dayOfMonth'] = None

        # set to None if day_of_week (nullable) is None
        # and model_fields_set contains the field
        if self.day_of_week is None and "day_of_week" in self.model_fields_set:
            _dict['dayOfWeek'] = None

        # set to None if week_of_month (nullable) is None
        # and model_fields_set contains the field
        if self.week_of_month is None and "week_of_month" in self.model_fields_set:
            _dict['weekOfMonth'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MonthSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dayOfMonth": obj.get("dayOfMonth"),
            "dayOfWeek": obj.get("dayOfWeek"),
            "weekOfMonth": obj.get("weekOfMonth")
        })
        return _obj


