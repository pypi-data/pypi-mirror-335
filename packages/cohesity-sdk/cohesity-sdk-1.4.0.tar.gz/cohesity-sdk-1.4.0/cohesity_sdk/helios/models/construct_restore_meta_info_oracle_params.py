# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self

class ConstructRestoreMetaInfoOracleParams(BaseModel):
    """
    Params to fetch oracle restore meta info
    """ # noqa: E501
    base_dir: Optional[StrictStr] = Field(default=None, description="Specifies the base directory of Oracle at destination.", alias="baseDir")
    db_file_destination: Optional[StrictStr] = Field(default=None, description="Specifies the location to put the database files(datafiles, logfiles etc.)", alias="dbFileDestination")
    db_name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the Oracle database that we restore to.", alias="dbName")
    home_dir: Optional[StrictStr] = Field(default=None, description="Specifies the home directory of Oracle at destination.", alias="homeDir")
    is_clone: Optional[StrictBool] = Field(default=None, description="Specifies whether operation is clone or not", alias="isClone")
    is_disaster_recovery: Optional[StrictBool] = Field(default=None, description="Specifies whether the recovery is of type Disaster Recovery.", alias="isDisasterRecovery")
    is_granular_restore: Optional[StrictBool] = Field(default=None, description="Specifies whether the operation is granular restore or not.", alias="isGranularRestore")
    is_recovery_validation: Optional[StrictBool] = Field(default=None, description="Specifies whether the operation is recovery validation or not.", alias="isRecoveryValidation")
    __properties: ClassVar[List[str]] = ["baseDir", "dbFileDestination", "dbName", "homeDir", "isClone", "isDisasterRecovery", "isGranularRestore", "isRecoveryValidation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConstructRestoreMetaInfoOracleParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if base_dir (nullable) is None
        # and model_fields_set contains the field
        if self.base_dir is None and "base_dir" in self.model_fields_set:
            _dict['baseDir'] = None

        # set to None if db_file_destination (nullable) is None
        # and model_fields_set contains the field
        if self.db_file_destination is None and "db_file_destination" in self.model_fields_set:
            _dict['dbFileDestination'] = None

        # set to None if db_name (nullable) is None
        # and model_fields_set contains the field
        if self.db_name is None and "db_name" in self.model_fields_set:
            _dict['dbName'] = None

        # set to None if home_dir (nullable) is None
        # and model_fields_set contains the field
        if self.home_dir is None and "home_dir" in self.model_fields_set:
            _dict['homeDir'] = None

        # set to None if is_clone (nullable) is None
        # and model_fields_set contains the field
        if self.is_clone is None and "is_clone" in self.model_fields_set:
            _dict['isClone'] = None

        # set to None if is_disaster_recovery (nullable) is None
        # and model_fields_set contains the field
        if self.is_disaster_recovery is None and "is_disaster_recovery" in self.model_fields_set:
            _dict['isDisasterRecovery'] = None

        # set to None if is_granular_restore (nullable) is None
        # and model_fields_set contains the field
        if self.is_granular_restore is None and "is_granular_restore" in self.model_fields_set:
            _dict['isGranularRestore'] = None

        # set to None if is_recovery_validation (nullable) is None
        # and model_fields_set contains the field
        if self.is_recovery_validation is None and "is_recovery_validation" in self.model_fields_set:
            _dict['isRecoveryValidation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConstructRestoreMetaInfoOracleParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseDir": obj.get("baseDir"),
            "dbFileDestination": obj.get("dbFileDestination"),
            "dbName": obj.get("dbName"),
            "homeDir": obj.get("homeDir"),
            "isClone": obj.get("isClone"),
            "isDisasterRecovery": obj.get("isDisasterRecovery"),
            "isGranularRestore": obj.get("isGranularRestore"),
            "isRecoveryValidation": obj.get("isRecoveryValidation")
        })
        return _obj


