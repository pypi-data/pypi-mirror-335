# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.add_fortknox_vault_aws_params import AddFortknoxVaultAwsParams
from cohesity_sdk.helios.models.add_fortknox_vault_azure_params import AddFortknoxVaultAzureParams
from cohesity_sdk.helios.models.fortknox_cloud_provider import FortknoxCloudProvider
from typing import Set
from typing_extensions import Self

class AddFortknoxVaultParams(BaseModel):
    """
    Information about each Fortknox vault that is being added.
    """ # noqa: E501
    aws_params: Optional[AddFortknoxVaultAwsParams] = Field(default=None, alias="awsParams")
    azure_params: Optional[AddFortknoxVaultAzureParams] = Field(default=None, alias="azureParams")
    cloud_provider: FortknoxCloudProvider = Field(alias="cloudProvider")
    kms_key_type: StrictStr = Field(description="Whether the KMS key is customer provided or by Cohesity.", alias="kmsKeyType")
    vault_name: StrictStr = Field(description="Fortknox vault name.", alias="vaultName")
    __properties: ClassVar[List[str]] = ["awsParams", "azureParams", "cloudProvider", "kmsKeyType", "vaultName"]

    @field_validator('kms_key_type')
    def kms_key_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CohesityManaged', 'CustomerManaged']):
            raise ValueError("must be one of enum values ('CohesityManaged', 'CustomerManaged')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddFortknoxVaultParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws_params
        if self.aws_params:
            _dict['awsParams'] = self.aws_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_params
        if self.azure_params:
            _dict['azureParams'] = self.azure_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddFortknoxVaultParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "awsParams": AddFortknoxVaultAwsParams.from_dict(obj["awsParams"]) if obj.get("awsParams") is not None else None,
            "azureParams": AddFortknoxVaultAzureParams.from_dict(obj["azureParams"]) if obj.get("azureParams") is not None else None,
            "cloudProvider": obj.get("cloudProvider"),
            "kmsKeyType": obj.get("kmsKeyType"),
            "vaultName": obj.get("vaultName")
        })
        return _obj


