# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.archival_aws_external_target_params import ArchivalAwsExternalTargetParams
from cohesity_sdk.helios.models.archival_azure_external_target_params import ArchivalAzureExternalTargetParams
from cohesity_sdk.helios.models.archival_gcp_external_target_params import ArchivalGcpExternalTargetParams
from cohesity_sdk.helios.models.archival_nas_external_target_params import ArchivalNasExternalTargetParams
from cohesity_sdk.helios.models.archival_oracle_external_target_params import ArchivalOracleExternalTargetParams
from cohesity_sdk.helios.models.archival_qstar_tape_external_target_params import ArchivalQstarTapeExternalTargetParams
from cohesity_sdk.helios.models.archival_s3_comp_external_target_params import ArchivalS3CompExternalTargetParams
from cohesity_sdk.helios.models.encryption_settings import EncryptionSettings
from cohesity_sdk.helios.models.target_bandwidth_throttlings import TargetBandwidthThrottlings
from typing import Set
from typing_extensions import Self

class ArchivalExternalTargetParams(BaseModel):
    """
    Specifies the parameters which are specific to Archival purpose type External Targets.
    """ # noqa: E501
    encryption: EncryptionSettings
    storage_type: Optional[StrictStr] = Field(description="Specifies the Storage type of the External Target. Nas option in archival_target_storage_type will soon be deprecated. Please use NAS instead.", alias="storageType")
    target_bandwidth_throttlings: Optional[TargetBandwidthThrottlings] = Field(default=None, alias="targetBandwidthThrottlings")
    aws_params: Optional[ArchivalAwsExternalTargetParams] = Field(default=None, alias="awsParams")
    azure_params: Optional[ArchivalAzureExternalTargetParams] = Field(default=None, alias="azureParams")
    gcp_params: Optional[ArchivalGcpExternalTargetParams] = Field(default=None, alias="gcpParams")
    nas_params: Optional[ArchivalNasExternalTargetParams] = Field(default=None, alias="nasParams")
    oracle_params: Optional[ArchivalOracleExternalTargetParams] = Field(default=None, alias="oracleParams")
    qstar_tape_params: Optional[ArchivalQstarTapeExternalTargetParams] = Field(default=None, alias="qstarTapeParams")
    s3_comp_params: Optional[ArchivalS3CompExternalTargetParams] = Field(default=None, alias="s3CompParams")
    __properties: ClassVar[List[str]] = ["encryption", "storageType", "targetBandwidthThrottlings", "awsParams", "azureParams", "gcpParams", "nasParams", "oracleParams", "qstarTapeParams", "s3CompParams"]

    @field_validator('storage_type')
    def storage_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Azure', 'Google', 'AWS', 'Oracle', 'Nas', 'NAS', 'QStarTape', 'S3Compatible']):
            raise ValueError("must be one of enum values ('Azure', 'Google', 'AWS', 'Oracle', 'Nas', 'NAS', 'QStarTape', 'S3Compatible')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArchivalExternalTargetParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_bandwidth_throttlings
        if self.target_bandwidth_throttlings:
            _dict['targetBandwidthThrottlings'] = self.target_bandwidth_throttlings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aws_params
        if self.aws_params:
            _dict['awsParams'] = self.aws_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_params
        if self.azure_params:
            _dict['azureParams'] = self.azure_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcp_params
        if self.gcp_params:
            _dict['gcpParams'] = self.gcp_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nas_params
        if self.nas_params:
            _dict['nasParams'] = self.nas_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oracle_params
        if self.oracle_params:
            _dict['oracleParams'] = self.oracle_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qstar_tape_params
        if self.qstar_tape_params:
            _dict['qstarTapeParams'] = self.qstar_tape_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of s3_comp_params
        if self.s3_comp_params:
            _dict['s3CompParams'] = self.s3_comp_params.to_dict()
        # set to None if storage_type (nullable) is None
        # and model_fields_set contains the field
        if self.storage_type is None and "storage_type" in self.model_fields_set:
            _dict['storageType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArchivalExternalTargetParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "encryption": EncryptionSettings.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "storageType": obj.get("storageType"),
            "targetBandwidthThrottlings": TargetBandwidthThrottlings.from_dict(obj["targetBandwidthThrottlings"]) if obj.get("targetBandwidthThrottlings") is not None else None,
            "awsParams": ArchivalAwsExternalTargetParams.from_dict(obj["awsParams"]) if obj.get("awsParams") is not None else None,
            "azureParams": ArchivalAzureExternalTargetParams.from_dict(obj["azureParams"]) if obj.get("azureParams") is not None else None,
            "gcpParams": ArchivalGcpExternalTargetParams.from_dict(obj["gcpParams"]) if obj.get("gcpParams") is not None else None,
            "nasParams": ArchivalNasExternalTargetParams.from_dict(obj["nasParams"]) if obj.get("nasParams") is not None else None,
            "oracleParams": ArchivalOracleExternalTargetParams.from_dict(obj["oracleParams"]) if obj.get("oracleParams") is not None else None,
            "qstarTapeParams": ArchivalQstarTapeExternalTargetParams.from_dict(obj["qstarTapeParams"]) if obj.get("qstarTapeParams") is not None else None,
            "s3CompParams": ArchivalS3CompExternalTargetParams.from_dict(obj["s3CompParams"]) if obj.get("s3CompParams") is not None else None
        })
        return _obj


