# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.upgrade import Upgrade
from typing import Set
from typing_extensions import Self

class Upgrades(BaseModel):
    """
    Specifies clusters upgrade request like clusterId, release upgrade URL, time stamp to upgrade at, intervals for rolling upgrade in hours.
    """ # noqa: E501
    clusters: Optional[List[Upgrade]] = Field(default=None, description="Array for clusters to be upgraded.")
    interval_for_rolling_upgrade_in_hours: Optional[StrictInt] = Field(default=None, description="Specifies the difference of time between two cluster's upgrade.", alias="intervalForRollingUpgradeInHours")
    package_url: Optional[StrictStr] = Field(default=None, description="Specifies URL from which package can be downloaded. Note: This option is only supported in Multi-Cluster Manager (MCM)", alias="packageUrl")
    target_version: Optional[StrictStr] = Field(default=None, description="Specifies target version to which clusters are to be upgraded.", alias="targetVersion")
    time_stamp_to_upgrade_at_msecs: Optional[StrictInt] = Field(default=None, description="Specifies the time in msecs at which the cluster has to be upgraded.", alias="timeStampToUpgradeAtMsecs")
    __properties: ClassVar[List[str]] = ["clusters", "intervalForRollingUpgradeInHours", "packageUrl", "targetVersion", "timeStampToUpgradeAtMsecs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Upgrades from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in clusters (list)
        _items = []
        if self.clusters:
            for _item_clusters in self.clusters:
                if _item_clusters:
                    _items.append(_item_clusters.to_dict())
            _dict['clusters'] = _items
        # set to None if clusters (nullable) is None
        # and model_fields_set contains the field
        if self.clusters is None and "clusters" in self.model_fields_set:
            _dict['clusters'] = None

        # set to None if interval_for_rolling_upgrade_in_hours (nullable) is None
        # and model_fields_set contains the field
        if self.interval_for_rolling_upgrade_in_hours is None and "interval_for_rolling_upgrade_in_hours" in self.model_fields_set:
            _dict['intervalForRollingUpgradeInHours'] = None

        # set to None if package_url (nullable) is None
        # and model_fields_set contains the field
        if self.package_url is None and "package_url" in self.model_fields_set:
            _dict['packageUrl'] = None

        # set to None if target_version (nullable) is None
        # and model_fields_set contains the field
        if self.target_version is None and "target_version" in self.model_fields_set:
            _dict['targetVersion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Upgrades from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusters": [Upgrade.from_dict(_item) for _item in obj["clusters"]] if obj.get("clusters") is not None else None,
            "intervalForRollingUpgradeInHours": obj.get("intervalForRollingUpgradeInHours"),
            "packageUrl": obj.get("packageUrl"),
            "targetVersion": obj.get("targetVersion"),
            "timeStampToUpgradeAtMsecs": obj.get("timeStampToUpgradeAtMsecs")
        })
        return _obj


