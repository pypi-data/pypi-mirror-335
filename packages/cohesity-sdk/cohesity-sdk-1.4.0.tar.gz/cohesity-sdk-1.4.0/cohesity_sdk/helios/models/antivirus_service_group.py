# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cohesity_sdk.helios.models.antivirus_service import AntivirusService
from typing import Set
from typing_extensions import Self

class AntivirusServiceGroup(BaseModel):
    """
    Specifies an Antivirus Service group.
    """ # noqa: E501
    antivirus_services: Optional[Annotated[List[AntivirusService], Field(min_length=1)]] = Field(description="Specifies a list of Antivirus Services for this group.", alias="antivirusServices")
    description: Optional[StrictStr] = Field(default=None, description="Specifies the description for the Antivirus Service group.")
    enabled: Optional[StrictBool] = Field(default=None, description="This field is currently deprecated. Specifies whether the Antivirus Group is enabled.")
    name: Optional[StrictStr] = Field(description="Specifies the Antivirus Service group name.")
    state: Optional[StrictStr] = Field(default=None, description="Specifies the state[Enable, Disable] of the group.")
    id: Optional[StrictInt] = Field(default=None, description="Specifies the Antivirus Service group id.")
    __properties: ClassVar[List[str]] = ["antivirusServices", "description", "enabled", "name", "state", "id"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enable', 'Disable']):
            raise ValueError("must be one of enum values ('Enable', 'Disable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AntivirusServiceGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in antivirus_services (list)
        _items = []
        if self.antivirus_services:
            for _item_antivirus_services in self.antivirus_services:
                if _item_antivirus_services:
                    _items.append(_item_antivirus_services.to_dict())
            _dict['antivirusServices'] = _items
        # set to None if antivirus_services (nullable) is None
        # and model_fields_set contains the field
        if self.antivirus_services is None and "antivirus_services" in self.model_fields_set:
            _dict['antivirusServices'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if enabled (nullable) is None
        # and model_fields_set contains the field
        if self.enabled is None and "enabled" in self.model_fields_set:
            _dict['enabled'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AntivirusServiceGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "antivirusServices": [AntivirusService.from_dict(_item) for _item in obj["antivirusServices"]] if obj.get("antivirusServices") is not None else None,
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "id": obj.get("id")
        })
        return _obj


