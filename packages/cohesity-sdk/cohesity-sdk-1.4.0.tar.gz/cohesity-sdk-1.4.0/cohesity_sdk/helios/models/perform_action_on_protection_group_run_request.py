# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.cancel_protection_group_run_request import CancelProtectionGroupRunRequest
from cohesity_sdk.helios.models.pause_protection_run_action_params import PauseProtectionRunActionParams
from cohesity_sdk.helios.models.resume_protection_run_action_params import ResumeProtectionRunActionParams
from typing import Set
from typing_extensions import Self

class PerformActionOnProtectionGroupRunRequest(BaseModel):
    """
    Specifies the request to perform actions on protection runs.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(description="Specifies the type of the action which will be performed on protection runs.")
    cancel_params: Optional[List[CancelProtectionGroupRunRequest]] = Field(default=None, description="Specifies the cancel action params for a protection run.", alias="cancelParams")
    pause_params: Optional[List[PauseProtectionRunActionParams]] = Field(default=None, description="Specifies the pause action params for a protection run.", alias="pauseParams")
    resume_params: Optional[List[ResumeProtectionRunActionParams]] = Field(default=None, description="Specifies the resume action params for a protection run.", alias="resumeParams")
    __properties: ClassVar[List[str]] = ["action", "cancelParams", "pauseParams", "resumeParams"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Pause', 'Resume', 'Cancel']):
            raise ValueError("must be one of enum values ('Pause', 'Resume', 'Cancel')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PerformActionOnProtectionGroupRunRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cancel_params (list)
        _items = []
        if self.cancel_params:
            for _item_cancel_params in self.cancel_params:
                if _item_cancel_params:
                    _items.append(_item_cancel_params.to_dict())
            _dict['cancelParams'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pause_params (list)
        _items = []
        if self.pause_params:
            for _item_pause_params in self.pause_params:
                if _item_pause_params:
                    _items.append(_item_pause_params.to_dict())
            _dict['pauseParams'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resume_params (list)
        _items = []
        if self.resume_params:
            for _item_resume_params in self.resume_params:
                if _item_resume_params:
                    _items.append(_item_resume_params.to_dict())
            _dict['resumeParams'] = _items
        # set to None if action (nullable) is None
        # and model_fields_set contains the field
        if self.action is None and "action" in self.model_fields_set:
            _dict['action'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PerformActionOnProtectionGroupRunRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "cancelParams": [CancelProtectionGroupRunRequest.from_dict(_item) for _item in obj["cancelParams"]] if obj.get("cancelParams") is not None else None,
            "pauseParams": [PauseProtectionRunActionParams.from_dict(_item) for _item in obj["pauseParams"]] if obj.get("pauseParams") is not None else None,
            "resumeParams": [ResumeProtectionRunActionParams.from_dict(_item) for _item in obj["resumeParams"]] if obj.get("resumeParams") is not None else None
        })
        return _obj


