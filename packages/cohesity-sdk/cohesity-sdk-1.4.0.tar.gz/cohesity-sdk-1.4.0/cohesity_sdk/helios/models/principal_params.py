# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.active_directory_principal_params import ActiveDirectoryPrincipalParams
from typing import Set
from typing_extensions import Self

class PrincipalParams(BaseModel):
    """
    Specifies a principal fields.
    """ # noqa: E501
    active_directory_params: Optional[ActiveDirectoryPrincipalParams] = Field(default=None, description="Specifies active directory details of its active directory if the principal if from active directory.", alias="activeDirectoryParams")
    clusters: Optional[List[StrictStr]] = Field(default=None, description="Specifies a list of clusters associated with this Principal. They should be in a string with the format '{cluster ID}:{cluster incarnation ID}'.")
    created_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the timestamp in microseconds since the epoch when this Principal was created.", alias="createdTimeUsecs")
    description: Optional[StrictStr] = Field(default=None, description="Specifies the desciption of the principal.")
    effective_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the starting timestamp in microseconds since the epoch when this principal will be able to log in.", alias="effectiveTimeUsecs")
    last_updated_time_usecs: Optional[StrictInt] = Field(default=None, description="Specifies the timestamp in microseconds since the epoch when this Principal was updated.", alias="lastUpdatedTimeUsecs")
    name: StrictStr = Field(description="Specifies the name of the principal which is being added.")
    object_class: StrictStr = Field(description="Specifies the type of principal, a user or a group", alias="objectClass")
    principal_type: Optional[StrictStr] = Field(default=None, description="Specifies the type of principal, a local, an sso or an active directory.", alias="principalType")
    roles: Optional[List[StrictStr]] = Field(default=None, description="Specifies the role assigned to the principal.")
    __properties: ClassVar[List[str]] = ["activeDirectoryParams", "clusters", "createdTimeUsecs", "description", "effectiveTimeUsecs", "lastUpdatedTimeUsecs", "name", "objectClass", "principalType", "roles"]

    @field_validator('object_class')
    def object_class_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['User', 'Group']):
            raise ValueError("must be one of enum values ('User', 'Group')")
        return value

    @field_validator('principal_type')
    def principal_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Local', 'AD', 'SSO']):
            raise ValueError("must be one of enum values ('Local', 'AD', 'SSO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrincipalParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of active_directory_params
        if self.active_directory_params:
            _dict['activeDirectoryParams'] = self.active_directory_params.to_dict()
        # set to None if active_directory_params (nullable) is None
        # and model_fields_set contains the field
        if self.active_directory_params is None and "active_directory_params" in self.model_fields_set:
            _dict['activeDirectoryParams'] = None

        # set to None if created_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.created_time_usecs is None and "created_time_usecs" in self.model_fields_set:
            _dict['createdTimeUsecs'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if effective_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.effective_time_usecs is None and "effective_time_usecs" in self.model_fields_set:
            _dict['effectiveTimeUsecs'] = None

        # set to None if last_updated_time_usecs (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated_time_usecs is None and "last_updated_time_usecs" in self.model_fields_set:
            _dict['lastUpdatedTimeUsecs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrincipalParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeDirectoryParams": ActiveDirectoryPrincipalParams.from_dict(obj["activeDirectoryParams"]) if obj.get("activeDirectoryParams") is not None else None,
            "clusters": obj.get("clusters"),
            "createdTimeUsecs": obj.get("createdTimeUsecs"),
            "description": obj.get("description"),
            "effectiveTimeUsecs": obj.get("effectiveTimeUsecs"),
            "lastUpdatedTimeUsecs": obj.get("lastUpdatedTimeUsecs"),
            "name": obj.get("name"),
            "objectClass": obj.get("objectClass"),
            "principalType": obj.get("principalType"),
            "roles": obj.get("roles")
        })
        return _obj


