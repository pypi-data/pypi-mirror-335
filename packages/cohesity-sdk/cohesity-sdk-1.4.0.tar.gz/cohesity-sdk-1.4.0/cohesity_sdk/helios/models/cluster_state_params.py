# coding: utf-8

"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cohesity_sdk.helios.models.system_app_status_params import SystemAppStatusParams
from typing import Set
from typing_extensions import Self

class ClusterStateParams(BaseModel):
    """
    Specifies the current cluster state details.
    """ # noqa: E501
    cluster_id: Optional[StrictInt] = Field(default=None, description="Specifies the id of the cluster.", alias="clusterId")
    cluster_incarnation_id: Optional[StrictInt] = Field(default=None, description="Specifies the incarnation id of the cluster.", alias="clusterIncarnationId")
    name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the cluster.")
    operations: Optional[List[StrictStr]] = Field(default=None, description="Specifies the operations running on the cluster. 'None' indicates that there are no operations currently running on the cluster. 'Destroy' indicates that the cluster is currently being destroyed. 'Upgrade' indicates that the cluster is currently being upgraded. 'Clean' indicates that the cluster is being cleaned. 'NodeRemoval' indicates that a node is being removed from the cluster. 'DiskRemoval' indicates that a disk is being removed from the cluster. 'DiskAddition' indicates that a disk is being added tos the cluster. 'UploadPackageByUrl' indicates that a package is being uploaded using a URL. 'UploadPackageAndUpgrade' indicates package upload by URL and upgrade operation. 'BaseOSUpgrade' indicates that the BaseOSUpgrade operation on the cluster is set. 'ServiceRestart' indicates that the services on the Cluster are currently being restarted. 'SystemServiceRestart' indicates that system services on the Cluster are currently being restarted.")
    software_version: Optional[StrictStr] = Field(default=None, description="Specifies the software version of the cluster.", alias="softwareVersion")
    system_apps: Optional[List[SystemAppStatusParams]] = Field(default=None, description="Specifies the details of each system app state on the cluster.", alias="systemApps")
    __properties: ClassVar[List[str]] = ["clusterId", "clusterIncarnationId", "name", "operations", "softwareVersion", "systemApps"]

    @field_validator('operations')
    def operations_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['None', 'Destroy', 'Upgrade', 'Clean', 'NodeRemoval', 'DiskRemoval', 'DiskAddition', 'NodeAddition', 'UploadPackageByUrl', 'UploadPackageAndUpgrade', 'BaseOSUpgrade', 'ServiceRestart', 'SystemServiceRestart']):
                raise ValueError("each list item must be one of ('None', 'Destroy', 'Upgrade', 'Clean', 'NodeRemoval', 'DiskRemoval', 'DiskAddition', 'NodeAddition', 'UploadPackageByUrl', 'UploadPackageAndUpgrade', 'BaseOSUpgrade', 'ServiceRestart', 'SystemServiceRestart')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterStateParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in system_apps (list)
        _items = []
        if self.system_apps:
            for _item_system_apps in self.system_apps:
                if _item_system_apps:
                    _items.append(_item_system_apps.to_dict())
            _dict['systemApps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterStateParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterId": obj.get("clusterId"),
            "clusterIncarnationId": obj.get("clusterIncarnationId"),
            "name": obj.get("name"),
            "operations": obj.get("operations"),
            "softwareVersion": obj.get("softwareVersion"),
            "systemApps": [SystemAppStatusParams.from_dict(_item) for _item in obj["systemApps"]] if obj.get("systemApps") is not None else None
        })
        return _obj


