"""
Type stub file for edgar_sec module.
"""
from collections import deque
from typing import Dict, List, Optional, Union, Any, Deque, Tuple
import asyncio
import time
from cachetools import TTLCache
from edgar_sec.edgar_data import CompanyConcept, SubmissionHistory, CompanyFact, Frame

class EdgarAPI:
    base_url: str
    cache_mode: bool
    cache: Optional[TTLCache]
    max_requests_per_second: int
    request_times: Deque[float]
    lock: asyncio.Lock
    semaphore: asyncio.Semaphore
    Async: 'EdgarAPI.AsyncAPI'

    def __init__(self, cache_mode: bool = False) -> None: ...

    def __rate_limited(self) -> None: ...
    def __edgar_get_request(self, url_endpoint: str) -> Dict[str, Any]: ...

    def get_submissions(self, central_index_key: str) -> SubmissionHistory: ...
    def get_company_concept(self, central_index_key: str, taxonomy: str, tag: str) -> CompanyConcept: ...
    def get_company_facts(self, central_index_key: str) -> CompanyFact: ...
    def get_frames(self, taxonomy: str, tag: str, unit: str, period: str) -> Frame: ...

    class AsyncAPI:
        _parent: 'EdgarAPI'
        cache_mode: bool
        cache: Optional[TTLCache]
        base_url: str

        def __init__(self, parent: 'EdgarAPI') -> None: ...

        async def __update_semaphore(self) -> Tuple[int, float]: ...
        async def __rate_limited(self) -> None: ...
        async def __edgar_get_request(self, url_endpoint: str) -> Dict[str, Any]: ...

        async def get_submissions(self, central_index_key: str) -> SubmissionHistory: ...
        async def get_company_concept(self, central_index_key: str, taxonomy: str, tag: str) -> CompanyConcept: ...
        async def get_company_facts(self, central_index_key: str) -> Dict[str, Any]: ...
        async def get_frames(self, taxonomy: str, tag: str, unit: str, period: str) -> Frame: ...
