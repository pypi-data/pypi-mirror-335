# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from . import time as _time

__all__ = ['IPArgs', 'IP']

@pulumi.input_type
class IPArgs:
    def __init__(__self__, *,
                 addr_type: pulumi.Input[str],
                 app: pulumi.Input[str],
                 network: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IP resource.
        :param pulumi.Input[str] addr_type: The type of IP address (v4, v6, shared_v4, or private_v6).
        :param pulumi.Input[str] app: The name of the Fly.io application to allocate the IP address for.
        :param pulumi.Input[str] network: The network to allocate the IP address in.
        :param pulumi.Input[str] region: The region to allocate the IP address in. This is required for non-shared IP addresses.
        """
        pulumi.set(__self__, "addr_type", addr_type)
        pulumi.set(__self__, "app", app)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> pulumi.Input[str]:
        """
        The type of IP address (v4, v6, shared_v4, or private_v6).
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def app(self) -> pulumi.Input[str]:
        """
        The name of the Fly.io application to allocate the IP address for.
        """
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: pulumi.Input[str]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        The network to allocate the IP address in.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region to allocate the IP address in. This is required for non-shared IP addresses.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


class IP(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 app: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A Fly.io IP address allocation for an application.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addr_type: The type of IP address (v4, v6, shared_v4, or private_v6).
        :param pulumi.Input[str] app: The name of the Fly.io application to allocate the IP address for.
        :param pulumi.Input[str] network: The network to allocate the IP address in.
        :param pulumi.Input[str] region: The region to allocate the IP address in. This is required for non-shared IP addresses.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IPArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Fly.io IP address allocation for an application.

        :param str resource_name: The name of the resource.
        :param IPArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IPArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 app: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IPArgs.__new__(IPArgs)

            if addr_type is None and not opts.urn:
                raise TypeError("Missing required property 'addr_type'")
            __props__.__dict__["addr_type"] = addr_type
            if app is None and not opts.urn:
                raise TypeError("Missing required property 'app'")
            __props__.__dict__["app"] = app
            __props__.__dict__["network"] = network
            __props__.__dict__["region"] = region
            __props__.__dict__["address"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["fly_id"] = None
            __props__.__dict__["input"] = None
            __props__.__dict__["type"] = None
        super(IP, __self__).__init__(
            'flyio:index:IP',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'IP':
        """
        Get an existing IP resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = IPArgs.__new__(IPArgs)

        __props__.__dict__["address"] = None
        __props__.__dict__["app"] = None
        __props__.__dict__["created_at"] = None
        __props__.__dict__["fly_id"] = None
        __props__.__dict__["input"] = None
        __props__.__dict__["network"] = None
        __props__.__dict__["region"] = None
        __props__.__dict__["type"] = None
        return IP(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[str]:
        """
        The allocated IP address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def app(self) -> pulumi.Output[str]:
        """
        The application the IP address is allocated for.
        """
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output['_time.outputs.Time']:
        """
        When the IP address was allocated.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="flyId")
    def fly_id(self) -> pulumi.Output[Optional[str]]:
        """
        The Fly.io IP address ID.
        """
        return pulumi.get(self, "fly_id")

    @property
    @pulumi.getter
    def input(self) -> pulumi.Output['outputs.IPArgs']:
        """
        The input arguments used to allocate the IP address.
        """
        return pulumi.get(self, "input")

    @property
    @pulumi.getter
    def network(self) -> pulumi.Output[Optional[str]]:
        """
        The network the IP address belongs to.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[str]]:
        """
        The region the IP address is allocated in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of IP address (v4 or v6).
        """
        return pulumi.get(self, "type")

