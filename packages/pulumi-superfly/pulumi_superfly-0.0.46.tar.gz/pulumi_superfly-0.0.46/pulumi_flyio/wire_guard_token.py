# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['WireGuardTokenArgs', 'WireGuardToken']

@pulumi.input_type
class WireGuardTokenArgs:
    def __init__(__self__, *,
                 org: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WireGuardToken resource.
        :param pulumi.Input[str] org: The organization to create the WireGuard token in.
        :param pulumi.Input[str] name: The name of the WireGuard token.
        """
        pulumi.set(__self__, "org", org)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def org(self) -> pulumi.Input[str]:
        """
        The organization to create the WireGuard token in.
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: pulumi.Input[str]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the WireGuard token.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class WireGuardToken(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A Fly.io WireGuard token for authenticating WireGuard peers.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the WireGuard token.
        :param pulumi.Input[str] org: The organization to create the WireGuard token in.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WireGuardTokenArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Fly.io WireGuard token for authenticating WireGuard peers.

        :param str resource_name: The name of the resource.
        :param WireGuardTokenArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WireGuardTokenArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WireGuardTokenArgs.__new__(WireGuardTokenArgs)

            __props__.__dict__["name"] = name
            if org is None and not opts.urn:
                raise TypeError("Missing required property 'org'")
            __props__.__dict__["org"] = org
            __props__.__dict__["token"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["token"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(WireGuardToken, __self__).__init__(
            'flyio:index:WireGuardToken',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'WireGuardToken':
        """
        Get an existing WireGuardToken resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = WireGuardTokenArgs.__new__(WireGuardTokenArgs)

        __props__.__dict__["name"] = None
        __props__.__dict__["org"] = None
        __props__.__dict__["token"] = None
        return WireGuardToken(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the WireGuard token.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[str]:
        """
        The organization the WireGuard token belongs to.
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        """
        The WireGuard token value.
        """
        return pulumi.get(self, "token")

