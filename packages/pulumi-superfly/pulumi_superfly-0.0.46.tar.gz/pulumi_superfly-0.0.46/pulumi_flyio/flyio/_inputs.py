# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'FlyContainerConfigArgs',
    'FlyContainerConfigArgsDict',
    'FlyContainerDependencyArgs',
    'FlyContainerDependencyArgsDict',
    'FlyContainerHealthcheckArgs',
    'FlyContainerHealthcheckArgsDict',
    'FlyContainerMountArgs',
    'FlyContainerMountArgsDict',
    'FlyDNSConfigArgs',
    'FlyDNSConfigArgsDict',
    'FlyDnsForwardRuleArgs',
    'FlyDnsForwardRuleArgsDict',
    'FlyDnsOptionArgs',
    'FlyDnsOptionArgsDict',
    'FlyEnvFromArgs',
    'FlyEnvFromArgsDict',
    'FlyExecHealthcheckArgs',
    'FlyExecHealthcheckArgsDict',
    'FlyFileArgs',
    'FlyFileArgsDict',
    'FlyHTTPHealthcheckArgs',
    'FlyHTTPHealthcheckArgsDict',
    'FlyHTTPOptionsArgs',
    'FlyHTTPOptionsArgsDict',
    'FlyHTTPResponseOptionsArgs',
    'FlyHTTPResponseOptionsArgsDict',
    'FlyMachineCheckArgs',
    'FlyMachineCheckArgsDict',
    'FlyMachineConfigArgs',
    'FlyMachineConfigArgsDict',
    'FlyMachineGuestArgs',
    'FlyMachineGuestArgsDict',
    'FlyMachineHTTPHeaderArgs',
    'FlyMachineHTTPHeaderArgsDict',
    'FlyMachineInitArgs',
    'FlyMachineInitArgsDict',
    'FlyMachineMetricsArgs',
    'FlyMachineMetricsArgsDict',
    'FlyMachineMountArgs',
    'FlyMachineMountArgsDict',
    'FlyMachinePortArgs',
    'FlyMachinePortArgsDict',
    'FlyMachineProcessArgs',
    'FlyMachineProcessArgsDict',
    'FlyMachineRestartArgs',
    'FlyMachineRestartArgsDict',
    'FlyMachineSecretArgs',
    'FlyMachineSecretArgsDict',
    'FlyMachineServiceConcurrencyArgs',
    'FlyMachineServiceConcurrencyArgsDict',
    'FlyMachineServiceArgs',
    'FlyMachineServiceArgsDict',
    'FlyProxyProtoOptionsArgs',
    'FlyProxyProtoOptionsArgsDict',
    'FlyStaticArgs',
    'FlyStaticArgsDict',
    'FlyStopConfigArgs',
    'FlyStopConfigArgsDict',
    'FlyTCPHealthcheckArgs',
    'FlyTCPHealthcheckArgsDict',
    'FlyTLSOptionsArgs',
    'FlyTLSOptionsArgsDict',
    'FlyTempDirVolumeArgs',
    'FlyTempDirVolumeArgsDict',
    'FlyVolumeConfigArgs',
    'FlyVolumeConfigArgsDict',
]

MYPY = False

if not MYPY:
    class FlyContainerConfigArgsDict(TypedDict):
        cmd: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        depends_on: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyContainerDependencyArgsDict']]]]
        entrypoint: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        env: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        env_from: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyEnvFromArgsDict']]]]
        exec_: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        files: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyFileArgsDict']]]]
        healthchecks: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyContainerHealthcheckArgsDict']]]]
        image: NotRequired[pulumi.Input[str]]
        mounts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyContainerMountArgsDict']]]]
        name: NotRequired[pulumi.Input[str]]
        restart: NotRequired[pulumi.Input['FlyMachineRestartArgsDict']]
        secrets: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyMachineSecretArgsDict']]]]
        stop: NotRequired[pulumi.Input['FlyStopConfigArgsDict']]
        user: NotRequired[pulumi.Input[str]]
elif False:
    FlyContainerConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyContainerConfigArgs:
    def __init__(__self__, *,
                 cmd: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 depends_on: Optional[pulumi.Input[Sequence[pulumi.Input['FlyContainerDependencyArgs']]]] = None,
                 entrypoint: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 env_from: Optional[pulumi.Input[Sequence[pulumi.Input['FlyEnvFromArgs']]]] = None,
                 exec_: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 files: Optional[pulumi.Input[Sequence[pulumi.Input['FlyFileArgs']]]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input['FlyContainerHealthcheckArgs']]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 mounts: Optional[pulumi.Input[Sequence[pulumi.Input['FlyContainerMountArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 restart: Optional[pulumi.Input['FlyMachineRestartArgs']] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineSecretArgs']]]] = None,
                 stop: Optional[pulumi.Input['FlyStopConfigArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if cmd is not None:
            pulumi.set(__self__, "cmd", cmd)
        if depends_on is not None:
            pulumi.set(__self__, "depends_on", depends_on)
        if entrypoint is not None:
            pulumi.set(__self__, "entrypoint", entrypoint)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if healthchecks is not None:
            pulumi.set(__self__, "healthchecks", healthchecks)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if mounts is not None:
            pulumi.set(__self__, "mounts", mounts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if restart is not None:
            pulumi.set(__self__, "restart", restart)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if stop is not None:
            pulumi.set(__self__, "stop", stop)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def cmd(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cmd")

    @cmd.setter
    def cmd(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cmd", value)

    @property
    @pulumi.getter(name="dependsOn")
    def depends_on(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyContainerDependencyArgs']]]]:
        return pulumi.get(self, "depends_on")

    @depends_on.setter
    def depends_on(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyContainerDependencyArgs']]]]):
        pulumi.set(self, "depends_on", value)

    @property
    @pulumi.getter
    def entrypoint(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "entrypoint")

    @entrypoint.setter
    def entrypoint(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "entrypoint", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyEnvFromArgs']]]]:
        return pulumi.get(self, "env_from")

    @env_from.setter
    def env_from(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyEnvFromArgs']]]]):
        pulumi.set(self, "env_from", value)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyFileArgs']]]]:
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyFileArgs']]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def healthchecks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyContainerHealthcheckArgs']]]]:
        return pulumi.get(self, "healthchecks")

    @healthchecks.setter
    def healthchecks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyContainerHealthcheckArgs']]]]):
        pulumi.set(self, "healthchecks", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyContainerMountArgs']]]]:
        return pulumi.get(self, "mounts")

    @mounts.setter
    def mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyContainerMountArgs']]]]):
        pulumi.set(self, "mounts", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def restart(self) -> Optional[pulumi.Input['FlyMachineRestartArgs']]:
        return pulumi.get(self, "restart")

    @restart.setter
    def restart(self, value: Optional[pulumi.Input['FlyMachineRestartArgs']]):
        pulumi.set(self, "restart", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineSecretArgs']]]]:
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineSecretArgs']]]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter
    def stop(self) -> Optional[pulumi.Input['FlyStopConfigArgs']]:
        return pulumi.get(self, "stop")

    @stop.setter
    def stop(self, value: Optional[pulumi.Input['FlyStopConfigArgs']]):
        pulumi.set(self, "stop", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class FlyContainerDependencyArgsDict(TypedDict):
        condition: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
elif False:
    FlyContainerDependencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyContainerDependencyArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class FlyContainerHealthcheckArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['FlyExecHealthcheckArgsDict']]
        failure_threshold: NotRequired[pulumi.Input[int]]
        grace_period: NotRequired[pulumi.Input[int]]
        http: NotRequired[pulumi.Input['FlyHTTPHealthcheckArgsDict']]
        interval: NotRequired[pulumi.Input[int]]
        kind: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        success_threshold: NotRequired[pulumi.Input[int]]
        tcp: NotRequired[pulumi.Input['FlyTCPHealthcheckArgsDict']]
        timeout: NotRequired[pulumi.Input[int]]
        unhealthy: NotRequired[pulumi.Input[str]]
elif False:
    FlyContainerHealthcheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyContainerHealthcheckArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['FlyExecHealthcheckArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grace_period: Optional[pulumi.Input[int]] = None,
                 http: Optional[pulumi.Input['FlyHTTPHealthcheckArgs']] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp: Optional[pulumi.Input['FlyTCPHealthcheckArgs']] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 unhealthy: Optional[pulumi.Input[str]] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grace_period is not None:
            pulumi.set(__self__, "grace_period", grace_period)
        if http is not None:
            pulumi.set(__self__, "http", http)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy is not None:
            pulumi.set(__self__, "unhealthy", unhealthy)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['FlyExecHealthcheckArgs']]:
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['FlyExecHealthcheckArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="gracePeriod")
    def grace_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "grace_period")

    @grace_period.setter
    def grace_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "grace_period", value)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['FlyHTTPHealthcheckArgs']]:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['FlyHTTPHealthcheckArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['FlyTCPHealthcheckArgs']]:
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['FlyTCPHealthcheckArgs']]):
        pulumi.set(self, "tcp", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def unhealthy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unhealthy")

    @unhealthy.setter
    def unhealthy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unhealthy", value)


if not MYPY:
    class FlyContainerMountArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        path: NotRequired[pulumi.Input[str]]
elif False:
    FlyContainerMountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyContainerMountArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class FlyDNSConfigArgsDict(TypedDict):
        dns_forward_rules: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyDnsForwardRuleArgsDict']]]]
        hostname: NotRequired[pulumi.Input[str]]
        hostname_fqdn: NotRequired[pulumi.Input[str]]
        nameservers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        options: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyDnsOptionArgsDict']]]]
        searches: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        skip_registration: NotRequired[pulumi.Input[bool]]
elif False:
    FlyDNSConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyDNSConfigArgs:
    def __init__(__self__, *,
                 dns_forward_rules: Optional[pulumi.Input[Sequence[pulumi.Input['FlyDnsForwardRuleArgs']]]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 hostname_fqdn: Optional[pulumi.Input[str]] = None,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['FlyDnsOptionArgs']]]] = None,
                 searches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 skip_registration: Optional[pulumi.Input[bool]] = None):
        if dns_forward_rules is not None:
            pulumi.set(__self__, "dns_forward_rules", dns_forward_rules)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hostname_fqdn is not None:
            pulumi.set(__self__, "hostname_fqdn", hostname_fqdn)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if searches is not None:
            pulumi.set(__self__, "searches", searches)
        if skip_registration is not None:
            pulumi.set(__self__, "skip_registration", skip_registration)

    @property
    @pulumi.getter(name="dnsForwardRules")
    def dns_forward_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyDnsForwardRuleArgs']]]]:
        return pulumi.get(self, "dns_forward_rules")

    @dns_forward_rules.setter
    def dns_forward_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyDnsForwardRuleArgs']]]]):
        pulumi.set(self, "dns_forward_rules", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="hostnameFqdn")
    def hostname_fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname_fqdn")

    @hostname_fqdn.setter
    def hostname_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname_fqdn", value)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "nameservers")

    @nameservers.setter
    def nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nameservers", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyDnsOptionArgs']]]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyDnsOptionArgs']]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def searches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "searches")

    @searches.setter
    def searches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "searches", value)

    @property
    @pulumi.getter(name="skipRegistration")
    def skip_registration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_registration")

    @skip_registration.setter
    def skip_registration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_registration", value)


if not MYPY:
    class FlyDnsForwardRuleArgsDict(TypedDict):
        addr: NotRequired[pulumi.Input[str]]
        basename: NotRequired[pulumi.Input[str]]
elif False:
    FlyDnsForwardRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyDnsForwardRuleArgs:
    def __init__(__self__, *,
                 addr: Optional[pulumi.Input[str]] = None,
                 basename: Optional[pulumi.Input[str]] = None):
        if addr is not None:
            pulumi.set(__self__, "addr", addr)
        if basename is not None:
            pulumi.set(__self__, "basename", basename)

    @property
    @pulumi.getter
    def addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr")

    @addr.setter
    def addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr", value)

    @property
    @pulumi.getter
    def basename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basename")

    @basename.setter
    def basename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basename", value)


if not MYPY:
    class FlyDnsOptionArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    FlyDnsOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyDnsOptionArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FlyEnvFromArgsDict(TypedDict):
        env_var: NotRequired[pulumi.Input[str]]
        field_ref: NotRequired[pulumi.Input[str]]
elif False:
    FlyEnvFromArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyEnvFromArgs:
    def __init__(__self__, *,
                 env_var: Optional[pulumi.Input[str]] = None,
                 field_ref: Optional[pulumi.Input[str]] = None):
        if env_var is not None:
            pulumi.set(__self__, "env_var", env_var)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)

    @property
    @pulumi.getter(name="envVar")
    def env_var(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "env_var")

    @env_var.setter
    def env_var(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "env_var", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_ref", value)


if not MYPY:
    class FlyExecHealthcheckArgsDict(TypedDict):
        command: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    FlyExecHealthcheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyExecHealthcheckArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)


if not MYPY:
    class FlyFileArgsDict(TypedDict):
        guest_path: NotRequired[pulumi.Input[str]]
        mode: NotRequired[pulumi.Input[int]]
        raw_value: NotRequired[pulumi.Input[str]]
        secret_name: NotRequired[pulumi.Input[str]]
elif False:
    FlyFileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyFileArgs:
    def __init__(__self__, *,
                 guest_path: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[int]] = None,
                 raw_value: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        if guest_path is not None:
            pulumi.set(__self__, "guest_path", guest_path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if raw_value is not None:
            pulumi.set(__self__, "raw_value", raw_value)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="guestPath")
    def guest_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "guest_path")

    @guest_path.setter
    def guest_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guest_path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="rawValue")
    def raw_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "raw_value")

    @raw_value.setter
    def raw_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raw_value", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


if not MYPY:
    class FlyHTTPHealthcheckArgsDict(TypedDict):
        headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyMachineHTTPHeaderArgsDict']]]]
        method: NotRequired[pulumi.Input[str]]
        path: NotRequired[pulumi.Input[str]]
        port: NotRequired[pulumi.Input[int]]
        scheme: NotRequired[pulumi.Input[str]]
        tls_server_name: NotRequired[pulumi.Input[str]]
        tls_skip_verify: NotRequired[pulumi.Input[bool]]
elif False:
    FlyHTTPHealthcheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyHTTPHealthcheckArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineHTTPHeaderArgs']]]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 tls_server_name: Optional[pulumi.Input[str]] = None,
                 tls_skip_verify: Optional[pulumi.Input[bool]] = None):
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if tls_server_name is not None:
            pulumi.set(__self__, "tls_server_name", tls_server_name)
        if tls_skip_verify is not None:
            pulumi.set(__self__, "tls_skip_verify", tls_skip_verify)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineHTTPHeaderArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineHTTPHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter(name="tlsServerName")
    def tls_server_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_server_name")

    @tls_server_name.setter
    def tls_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_server_name", value)

    @property
    @pulumi.getter(name="tlsSkipVerify")
    def tls_skip_verify(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_skip_verify")

    @tls_skip_verify.setter
    def tls_skip_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_skip_verify", value)


if not MYPY:
    class FlyHTTPOptionsArgsDict(TypedDict):
        compress: NotRequired[pulumi.Input[bool]]
        h2_backend: NotRequired[pulumi.Input[bool]]
        headers_read_timeout: NotRequired[pulumi.Input[int]]
        idle_timeout: NotRequired[pulumi.Input[int]]
        response: NotRequired[pulumi.Input['FlyHTTPResponseOptionsArgsDict']]
elif False:
    FlyHTTPOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyHTTPOptionsArgs:
    def __init__(__self__, *,
                 compress: Optional[pulumi.Input[bool]] = None,
                 h2_backend: Optional[pulumi.Input[bool]] = None,
                 headers_read_timeout: Optional[pulumi.Input[int]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 response: Optional[pulumi.Input['FlyHTTPResponseOptionsArgs']] = None):
        if compress is not None:
            pulumi.set(__self__, "compress", compress)
        if h2_backend is not None:
            pulumi.set(__self__, "h2_backend", h2_backend)
        if headers_read_timeout is not None:
            pulumi.set(__self__, "headers_read_timeout", headers_read_timeout)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def compress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "compress")

    @compress.setter
    def compress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress", value)

    @property
    @pulumi.getter(name="h2Backend")
    def h2_backend(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "h2_backend")

    @h2_backend.setter
    def h2_backend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "h2_backend", value)

    @property
    @pulumi.getter(name="headersReadTimeout")
    def headers_read_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "headers_read_timeout")

    @headers_read_timeout.setter
    def headers_read_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "headers_read_timeout", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['FlyHTTPResponseOptionsArgs']]:
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['FlyHTTPResponseOptionsArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class FlyHTTPResponseOptionsArgsDict(TypedDict):
        headers: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, Any]]]]]
        pristine: NotRequired[pulumi.Input[bool]]
elif False:
    FlyHTTPResponseOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyHTTPResponseOptionsArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, Any]]]]] = None,
                 pristine: Optional[pulumi.Input[bool]] = None):
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if pristine is not None:
            pulumi.set(__self__, "pristine", pristine)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, Any]]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def pristine(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pristine")

    @pristine.setter
    def pristine(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pristine", value)


if not MYPY:
    class FlyMachineCheckArgsDict(TypedDict):
        grace_period: NotRequired[pulumi.Input[str]]
        headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyMachineHTTPHeaderArgsDict']]]]
        interval: NotRequired[pulumi.Input[str]]
        kind: NotRequired[pulumi.Input[str]]
        method: NotRequired[pulumi.Input[str]]
        path: NotRequired[pulumi.Input[str]]
        port: NotRequired[pulumi.Input[int]]
        protocol: NotRequired[pulumi.Input[str]]
        timeout: NotRequired[pulumi.Input[str]]
        tls_server_name: NotRequired[pulumi.Input[str]]
        tls_skip_verify: NotRequired[pulumi.Input[bool]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    FlyMachineCheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyMachineCheckArgs:
    def __init__(__self__, *,
                 grace_period: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineHTTPHeaderArgs']]]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[str]] = None,
                 tls_server_name: Optional[pulumi.Input[str]] = None,
                 tls_skip_verify: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if grace_period is not None:
            pulumi.set(__self__, "grace_period", grace_period)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if tls_server_name is not None:
            pulumi.set(__self__, "tls_server_name", tls_server_name)
        if tls_skip_verify is not None:
            pulumi.set(__self__, "tls_skip_verify", tls_skip_verify)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="gracePeriod")
    def grace_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grace_period")

    @grace_period.setter
    def grace_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grace_period", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineHTTPHeaderArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineHTTPHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="tlsServerName")
    def tls_server_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_server_name")

    @tls_server_name.setter
    def tls_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_server_name", value)

    @property
    @pulumi.getter(name="tlsSkipVerify")
    def tls_skip_verify(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_skip_verify")

    @tls_skip_verify.setter
    def tls_skip_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_skip_verify", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class FlyMachineConfigArgsDict(TypedDict):
        image: pulumi.Input[str]
        auto_destroy: NotRequired[pulumi.Input[bool]]
        checks: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['FlyMachineCheckArgsDict']]]]
        containers: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyContainerConfigArgsDict']]]]
        dns: NotRequired[pulumi.Input['FlyDNSConfigArgsDict']]
        env: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        files: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyFileArgsDict']]]]
        guest: NotRequired[pulumi.Input['FlyMachineGuestArgsDict']]
        init: NotRequired[pulumi.Input['FlyMachineInitArgsDict']]
        metadata: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        metrics: NotRequired[pulumi.Input['FlyMachineMetricsArgsDict']]
        mounts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyMachineMountArgsDict']]]]
        processes: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyMachineProcessArgsDict']]]]
        restart: NotRequired[pulumi.Input['FlyMachineRestartArgsDict']]
        schedule: NotRequired[pulumi.Input[str]]
        services: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyMachineServiceArgsDict']]]]
        standbys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        statics: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyStaticArgsDict']]]]
        stop_config: NotRequired[pulumi.Input['FlyStopConfigArgsDict']]
        volumes: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyVolumeConfigArgsDict']]]]
elif False:
    FlyMachineConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyMachineConfigArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 auto_destroy: Optional[pulumi.Input[bool]] = None,
                 checks: Optional[pulumi.Input[Mapping[str, pulumi.Input['FlyMachineCheckArgs']]]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['FlyContainerConfigArgs']]]] = None,
                 dns: Optional[pulumi.Input['FlyDNSConfigArgs']] = None,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 files: Optional[pulumi.Input[Sequence[pulumi.Input['FlyFileArgs']]]] = None,
                 guest: Optional[pulumi.Input['FlyMachineGuestArgs']] = None,
                 init: Optional[pulumi.Input['FlyMachineInitArgs']] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metrics: Optional[pulumi.Input['FlyMachineMetricsArgs']] = None,
                 mounts: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineMountArgs']]]] = None,
                 processes: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineProcessArgs']]]] = None,
                 restart: Optional[pulumi.Input['FlyMachineRestartArgs']] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineServiceArgs']]]] = None,
                 standbys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 statics: Optional[pulumi.Input[Sequence[pulumi.Input['FlyStaticArgs']]]] = None,
                 stop_config: Optional[pulumi.Input['FlyStopConfigArgs']] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['FlyVolumeConfigArgs']]]] = None):
        pulumi.set(__self__, "image", image)
        if auto_destroy is not None:
            pulumi.set(__self__, "auto_destroy", auto_destroy)
        if checks is not None:
            pulumi.set(__self__, "checks", checks)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if guest is not None:
            pulumi.set(__self__, "guest", guest)
        if init is not None:
            pulumi.set(__self__, "init", init)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if mounts is not None:
            pulumi.set(__self__, "mounts", mounts)
        if processes is not None:
            pulumi.set(__self__, "processes", processes)
        if restart is not None:
            pulumi.set(__self__, "restart", restart)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if standbys is not None:
            pulumi.set(__self__, "standbys", standbys)
        if statics is not None:
            pulumi.set(__self__, "statics", statics)
        if stop_config is not None:
            pulumi.set(__self__, "stop_config", stop_config)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="autoDestroy")
    def auto_destroy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_destroy")

    @auto_destroy.setter
    def auto_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_destroy", value)

    @property
    @pulumi.getter
    def checks(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['FlyMachineCheckArgs']]]]:
        return pulumi.get(self, "checks")

    @checks.setter
    def checks(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['FlyMachineCheckArgs']]]]):
        pulumi.set(self, "checks", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyContainerConfigArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyContainerConfigArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['FlyDNSConfigArgs']]:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['FlyDNSConfigArgs']]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyFileArgs']]]]:
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyFileArgs']]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def guest(self) -> Optional[pulumi.Input['FlyMachineGuestArgs']]:
        return pulumi.get(self, "guest")

    @guest.setter
    def guest(self, value: Optional[pulumi.Input['FlyMachineGuestArgs']]):
        pulumi.set(self, "guest", value)

    @property
    @pulumi.getter
    def init(self) -> Optional[pulumi.Input['FlyMachineInitArgs']]:
        return pulumi.get(self, "init")

    @init.setter
    def init(self, value: Optional[pulumi.Input['FlyMachineInitArgs']]):
        pulumi.set(self, "init", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input['FlyMachineMetricsArgs']]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input['FlyMachineMetricsArgs']]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter
    def mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineMountArgs']]]]:
        return pulumi.get(self, "mounts")

    @mounts.setter
    def mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineMountArgs']]]]):
        pulumi.set(self, "mounts", value)

    @property
    @pulumi.getter
    def processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineProcessArgs']]]]:
        return pulumi.get(self, "processes")

    @processes.setter
    def processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineProcessArgs']]]]):
        pulumi.set(self, "processes", value)

    @property
    @pulumi.getter
    def restart(self) -> Optional[pulumi.Input['FlyMachineRestartArgs']]:
        return pulumi.get(self, "restart")

    @restart.setter
    def restart(self, value: Optional[pulumi.Input['FlyMachineRestartArgs']]):
        pulumi.set(self, "restart", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineServiceArgs']]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def standbys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "standbys")

    @standbys.setter
    def standbys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "standbys", value)

    @property
    @pulumi.getter
    def statics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyStaticArgs']]]]:
        return pulumi.get(self, "statics")

    @statics.setter
    def statics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyStaticArgs']]]]):
        pulumi.set(self, "statics", value)

    @property
    @pulumi.getter(name="stopConfig")
    def stop_config(self) -> Optional[pulumi.Input['FlyStopConfigArgs']]:
        return pulumi.get(self, "stop_config")

    @stop_config.setter
    def stop_config(self, value: Optional[pulumi.Input['FlyStopConfigArgs']]):
        pulumi.set(self, "stop_config", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyVolumeConfigArgs']]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyVolumeConfigArgs']]]]):
        pulumi.set(self, "volumes", value)


if not MYPY:
    class FlyMachineGuestArgsDict(TypedDict):
        cpu_kind: pulumi.Input[str]
        cpus: pulumi.Input[int]
        memory_mb: pulumi.Input[int]
        gpu_kind: NotRequired[pulumi.Input[str]]
        gpus: NotRequired[pulumi.Input[int]]
        host_dedication_id: NotRequired[pulumi.Input[str]]
        kernel_args: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    FlyMachineGuestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyMachineGuestArgs:
    def __init__(__self__, *,
                 cpu_kind: pulumi.Input[str],
                 cpus: pulumi.Input[int],
                 memory_mb: pulumi.Input[int],
                 gpu_kind: Optional[pulumi.Input[str]] = None,
                 gpus: Optional[pulumi.Input[int]] = None,
                 host_dedication_id: Optional[pulumi.Input[str]] = None,
                 kernel_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "cpu_kind", cpu_kind)
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "memory_mb", memory_mb)
        if gpu_kind is not None:
            pulumi.set(__self__, "gpu_kind", gpu_kind)
        if gpus is not None:
            pulumi.set(__self__, "gpus", gpus)
        if host_dedication_id is not None:
            pulumi.set(__self__, "host_dedication_id", host_dedication_id)
        if kernel_args is not None:
            pulumi.set(__self__, "kernel_args", kernel_args)

    @property
    @pulumi.getter(name="cpuKind")
    def cpu_kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cpu_kind")

    @cpu_kind.setter
    def cpu_kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "cpu_kind", value)

    @property
    @pulumi.getter
    def cpus(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cpus")

    @cpus.setter
    def cpus(self, value: pulumi.Input[int]):
        pulumi.set(self, "cpus", value)

    @property
    @pulumi.getter(name="memoryMb")
    def memory_mb(self) -> pulumi.Input[int]:
        return pulumi.get(self, "memory_mb")

    @memory_mb.setter
    def memory_mb(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory_mb", value)

    @property
    @pulumi.getter(name="gpuKind")
    def gpu_kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gpu_kind")

    @gpu_kind.setter
    def gpu_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gpu_kind", value)

    @property
    @pulumi.getter
    def gpus(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gpus")

    @gpus.setter
    def gpus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gpus", value)

    @property
    @pulumi.getter(name="hostDedicationId")
    def host_dedication_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_dedication_id")

    @host_dedication_id.setter
    def host_dedication_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_dedication_id", value)

    @property
    @pulumi.getter(name="kernelArgs")
    def kernel_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "kernel_args")

    @kernel_args.setter
    def kernel_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kernel_args", value)


if not MYPY:
    class FlyMachineHTTPHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    FlyMachineHTTPHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyMachineHTTPHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class FlyMachineInitArgsDict(TypedDict):
        cmd: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        entrypoint: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        exec_: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        kernel_args: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        swap_size_mb: NotRequired[pulumi.Input[int]]
        tty: NotRequired[pulumi.Input[bool]]
elif False:
    FlyMachineInitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyMachineInitArgs:
    def __init__(__self__, *,
                 cmd: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 entrypoint: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exec_: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kernel_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 swap_size_mb: Optional[pulumi.Input[int]] = None,
                 tty: Optional[pulumi.Input[bool]] = None):
        if cmd is not None:
            pulumi.set(__self__, "cmd", cmd)
        if entrypoint is not None:
            pulumi.set(__self__, "entrypoint", entrypoint)
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if kernel_args is not None:
            pulumi.set(__self__, "kernel_args", kernel_args)
        if swap_size_mb is not None:
            pulumi.set(__self__, "swap_size_mb", swap_size_mb)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)

    @property
    @pulumi.getter
    def cmd(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cmd")

    @cmd.setter
    def cmd(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cmd", value)

    @property
    @pulumi.getter
    def entrypoint(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "entrypoint")

    @entrypoint.setter
    def entrypoint(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "entrypoint", value)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="kernelArgs")
    def kernel_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "kernel_args")

    @kernel_args.setter
    def kernel_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kernel_args", value)

    @property
    @pulumi.getter(name="swapSizeMb")
    def swap_size_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "swap_size_mb")

    @swap_size_mb.setter
    def swap_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "swap_size_mb", value)

    @property
    @pulumi.getter
    def tty(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tty")

    @tty.setter
    def tty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tty", value)


if not MYPY:
    class FlyMachineMetricsArgsDict(TypedDict):
        https: NotRequired[pulumi.Input[bool]]
        path: NotRequired[pulumi.Input[str]]
        port: NotRequired[pulumi.Input[int]]
elif False:
    FlyMachineMetricsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyMachineMetricsArgs:
    def __init__(__self__, *,
                 https: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        if https is not None:
            pulumi.set(__self__, "https", https)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def https(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "https")

    @https.setter
    def https(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "https", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class FlyMachineMountArgsDict(TypedDict):
        add_size_gb: NotRequired[pulumi.Input[int]]
        encrypted: NotRequired[pulumi.Input[bool]]
        extend_threshold_percent: NotRequired[pulumi.Input[int]]
        name: NotRequired[pulumi.Input[str]]
        path: NotRequired[pulumi.Input[str]]
        size_gb: NotRequired[pulumi.Input[int]]
        size_gb_limit: NotRequired[pulumi.Input[int]]
        volume: NotRequired[pulumi.Input[str]]
elif False:
    FlyMachineMountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyMachineMountArgs:
    def __init__(__self__, *,
                 add_size_gb: Optional[pulumi.Input[int]] = None,
                 encrypted: Optional[pulumi.Input[bool]] = None,
                 extend_threshold_percent: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 size_gb: Optional[pulumi.Input[int]] = None,
                 size_gb_limit: Optional[pulumi.Input[int]] = None,
                 volume: Optional[pulumi.Input[str]] = None):
        if add_size_gb is not None:
            pulumi.set(__self__, "add_size_gb", add_size_gb)
        if encrypted is not None:
            pulumi.set(__self__, "encrypted", encrypted)
        if extend_threshold_percent is not None:
            pulumi.set(__self__, "extend_threshold_percent", extend_threshold_percent)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if size_gb is not None:
            pulumi.set(__self__, "size_gb", size_gb)
        if size_gb_limit is not None:
            pulumi.set(__self__, "size_gb_limit", size_gb_limit)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter(name="addSizeGb")
    def add_size_gb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "add_size_gb")

    @add_size_gb.setter
    def add_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "add_size_gb", value)

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "encrypted")

    @encrypted.setter
    def encrypted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypted", value)

    @property
    @pulumi.getter(name="extendThresholdPercent")
    def extend_threshold_percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "extend_threshold_percent")

    @extend_threshold_percent.setter
    def extend_threshold_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "extend_threshold_percent", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="sizeGb")
    def size_gb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size_gb")

    @size_gb.setter
    def size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size_gb", value)

    @property
    @pulumi.getter(name="sizeGbLimit")
    def size_gb_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size_gb_limit")

    @size_gb_limit.setter
    def size_gb_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size_gb_limit", value)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume", value)


if not MYPY:
    class FlyMachinePortArgsDict(TypedDict):
        end_port: NotRequired[pulumi.Input[int]]
        force_https: NotRequired[pulumi.Input[bool]]
        handlers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        http_options: NotRequired[pulumi.Input['FlyHTTPOptionsArgsDict']]
        port: NotRequired[pulumi.Input[int]]
        proxy_proto_options: NotRequired[pulumi.Input['FlyProxyProtoOptionsArgsDict']]
        start_port: NotRequired[pulumi.Input[int]]
        tls_options: NotRequired[pulumi.Input['FlyTLSOptionsArgsDict']]
elif False:
    FlyMachinePortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyMachinePortArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 force_https: Optional[pulumi.Input[bool]] = None,
                 handlers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 http_options: Optional[pulumi.Input['FlyHTTPOptionsArgs']] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_proto_options: Optional[pulumi.Input['FlyProxyProtoOptionsArgs']] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 tls_options: Optional[pulumi.Input['FlyTLSOptionsArgs']] = None):
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if force_https is not None:
            pulumi.set(__self__, "force_https", force_https)
        if handlers is not None:
            pulumi.set(__self__, "handlers", handlers)
        if http_options is not None:
            pulumi.set(__self__, "http_options", http_options)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_proto_options is not None:
            pulumi.set(__self__, "proxy_proto_options", proxy_proto_options)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if tls_options is not None:
            pulumi.set(__self__, "tls_options", tls_options)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="forceHttps")
    def force_https(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_https")

    @force_https.setter
    def force_https(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_https", value)

    @property
    @pulumi.getter
    def handlers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "handlers")

    @handlers.setter
    def handlers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "handlers", value)

    @property
    @pulumi.getter(name="httpOptions")
    def http_options(self) -> Optional[pulumi.Input['FlyHTTPOptionsArgs']]:
        return pulumi.get(self, "http_options")

    @http_options.setter
    def http_options(self, value: Optional[pulumi.Input['FlyHTTPOptionsArgs']]):
        pulumi.set(self, "http_options", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyProtoOptions")
    def proxy_proto_options(self) -> Optional[pulumi.Input['FlyProxyProtoOptionsArgs']]:
        return pulumi.get(self, "proxy_proto_options")

    @proxy_proto_options.setter
    def proxy_proto_options(self, value: Optional[pulumi.Input['FlyProxyProtoOptionsArgs']]):
        pulumi.set(self, "proxy_proto_options", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter(name="tlsOptions")
    def tls_options(self) -> Optional[pulumi.Input['FlyTLSOptionsArgs']]:
        return pulumi.get(self, "tls_options")

    @tls_options.setter
    def tls_options(self, value: Optional[pulumi.Input['FlyTLSOptionsArgs']]):
        pulumi.set(self, "tls_options", value)


if not MYPY:
    class FlyMachineProcessArgsDict(TypedDict):
        cmd: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        entrypoint: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        env: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        env_from: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyEnvFromArgsDict']]]]
        exec_: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        ignore_app_secrets: NotRequired[pulumi.Input[bool]]
        secrets: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyMachineSecretArgsDict']]]]
        user: NotRequired[pulumi.Input[str]]
elif False:
    FlyMachineProcessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyMachineProcessArgs:
    def __init__(__self__, *,
                 cmd: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 entrypoint: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 env_from: Optional[pulumi.Input[Sequence[pulumi.Input['FlyEnvFromArgs']]]] = None,
                 exec_: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore_app_secrets: Optional[pulumi.Input[bool]] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineSecretArgs']]]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if cmd is not None:
            pulumi.set(__self__, "cmd", cmd)
        if entrypoint is not None:
            pulumi.set(__self__, "entrypoint", entrypoint)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if env_from is not None:
            pulumi.set(__self__, "env_from", env_from)
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if ignore_app_secrets is not None:
            pulumi.set(__self__, "ignore_app_secrets", ignore_app_secrets)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def cmd(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cmd")

    @cmd.setter
    def cmd(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cmd", value)

    @property
    @pulumi.getter
    def entrypoint(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "entrypoint")

    @entrypoint.setter
    def entrypoint(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "entrypoint", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="envFrom")
    def env_from(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyEnvFromArgs']]]]:
        return pulumi.get(self, "env_from")

    @env_from.setter
    def env_from(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyEnvFromArgs']]]]):
        pulumi.set(self, "env_from", value)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="ignoreAppSecrets")
    def ignore_app_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_app_secrets")

    @ignore_app_secrets.setter
    def ignore_app_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_app_secrets", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineSecretArgs']]]]:
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineSecretArgs']]]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class FlyMachineRestartArgsDict(TypedDict):
        gpu_bid_price: NotRequired[pulumi.Input[float]]
        max_retries: NotRequired[pulumi.Input[int]]
        policy: NotRequired[pulumi.Input[str]]
elif False:
    FlyMachineRestartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyMachineRestartArgs:
    def __init__(__self__, *,
                 gpu_bid_price: Optional[pulumi.Input[float]] = None,
                 max_retries: Optional[pulumi.Input[int]] = None,
                 policy: Optional[pulumi.Input[str]] = None):
        if gpu_bid_price is not None:
            pulumi.set(__self__, "gpu_bid_price", gpu_bid_price)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter(name="gpuBidPrice")
    def gpu_bid_price(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "gpu_bid_price")

    @gpu_bid_price.setter
    def gpu_bid_price(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "gpu_bid_price", value)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)


if not MYPY:
    class FlyMachineSecretArgsDict(TypedDict):
        env_var: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
elif False:
    FlyMachineSecretArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyMachineSecretArgs:
    def __init__(__self__, *,
                 env_var: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if env_var is not None:
            pulumi.set(__self__, "env_var", env_var)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="envVar")
    def env_var(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "env_var")

    @env_var.setter
    def env_var(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "env_var", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class FlyMachineServiceConcurrencyArgsDict(TypedDict):
        hard_limit: NotRequired[pulumi.Input[int]]
        soft_limit: NotRequired[pulumi.Input[int]]
        type: NotRequired[pulumi.Input[str]]
elif False:
    FlyMachineServiceConcurrencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyMachineServiceConcurrencyArgs:
    def __init__(__self__, *,
                 hard_limit: Optional[pulumi.Input[int]] = None,
                 soft_limit: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if hard_limit is not None:
            pulumi.set(__self__, "hard_limit", hard_limit)
        if soft_limit is not None:
            pulumi.set(__self__, "soft_limit", soft_limit)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="hardLimit")
    def hard_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hard_limit")

    @hard_limit.setter
    def hard_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hard_limit", value)

    @property
    @pulumi.getter(name="softLimit")
    def soft_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "soft_limit")

    @soft_limit.setter
    def soft_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "soft_limit", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class FlyMachineServiceArgsDict(TypedDict):
        autostart: NotRequired[pulumi.Input[bool]]
        autostop: NotRequired[pulumi.Input[str]]
        checks: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyMachineCheckArgsDict']]]]
        concurrency: NotRequired[pulumi.Input['FlyMachineServiceConcurrencyArgsDict']]
        force_instance_description: NotRequired[pulumi.Input[str]]
        force_instance_key: NotRequired[pulumi.Input[str]]
        internal_port: NotRequired[pulumi.Input[int]]
        min_machines_running: NotRequired[pulumi.Input[int]]
        ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['FlyMachinePortArgsDict']]]]
        protocol: NotRequired[pulumi.Input[str]]
elif False:
    FlyMachineServiceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyMachineServiceArgs:
    def __init__(__self__, *,
                 autostart: Optional[pulumi.Input[bool]] = None,
                 autostop: Optional[pulumi.Input[str]] = None,
                 checks: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineCheckArgs']]]] = None,
                 concurrency: Optional[pulumi.Input['FlyMachineServiceConcurrencyArgs']] = None,
                 force_instance_description: Optional[pulumi.Input[str]] = None,
                 force_instance_key: Optional[pulumi.Input[str]] = None,
                 internal_port: Optional[pulumi.Input[int]] = None,
                 min_machines_running: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachinePortArgs']]]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        if autostart is not None:
            pulumi.set(__self__, "autostart", autostart)
        if autostop is not None:
            pulumi.set(__self__, "autostop", autostop)
        if checks is not None:
            pulumi.set(__self__, "checks", checks)
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if force_instance_description is not None:
            pulumi.set(__self__, "force_instance_description", force_instance_description)
        if force_instance_key is not None:
            pulumi.set(__self__, "force_instance_key", force_instance_key)
        if internal_port is not None:
            pulumi.set(__self__, "internal_port", internal_port)
        if min_machines_running is not None:
            pulumi.set(__self__, "min_machines_running", min_machines_running)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def autostart(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "autostart")

    @autostart.setter
    def autostart(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autostart", value)

    @property
    @pulumi.getter
    def autostop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autostop")

    @autostop.setter
    def autostop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autostop", value)

    @property
    @pulumi.getter
    def checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineCheckArgs']]]]:
        return pulumi.get(self, "checks")

    @checks.setter
    def checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachineCheckArgs']]]]):
        pulumi.set(self, "checks", value)

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[pulumi.Input['FlyMachineServiceConcurrencyArgs']]:
        return pulumi.get(self, "concurrency")

    @concurrency.setter
    def concurrency(self, value: Optional[pulumi.Input['FlyMachineServiceConcurrencyArgs']]):
        pulumi.set(self, "concurrency", value)

    @property
    @pulumi.getter(name="forceInstanceDescription")
    def force_instance_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "force_instance_description")

    @force_instance_description.setter
    def force_instance_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_instance_description", value)

    @property
    @pulumi.getter(name="forceInstanceKey")
    def force_instance_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "force_instance_key")

    @force_instance_key.setter
    def force_instance_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_instance_key", value)

    @property
    @pulumi.getter(name="internalPort")
    def internal_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "internal_port")

    @internal_port.setter
    def internal_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internal_port", value)

    @property
    @pulumi.getter(name="minMachinesRunning")
    def min_machines_running(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_machines_running")

    @min_machines_running.setter
    def min_machines_running(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_machines_running", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachinePortArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlyMachinePortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class FlyProxyProtoOptionsArgsDict(TypedDict):
        version: NotRequired[pulumi.Input[str]]
elif False:
    FlyProxyProtoOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyProxyProtoOptionsArgs:
    def __init__(__self__, *,
                 version: Optional[pulumi.Input[str]] = None):
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class FlyStaticArgsDict(TypedDict):
        guest_path: pulumi.Input[str]
        url_prefix: pulumi.Input[str]
        index_document: NotRequired[pulumi.Input[str]]
        tigris_bucket: NotRequired[pulumi.Input[str]]
elif False:
    FlyStaticArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyStaticArgs:
    def __init__(__self__, *,
                 guest_path: pulumi.Input[str],
                 url_prefix: pulumi.Input[str],
                 index_document: Optional[pulumi.Input[str]] = None,
                 tigris_bucket: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "guest_path", guest_path)
        pulumi.set(__self__, "url_prefix", url_prefix)
        if index_document is not None:
            pulumi.set(__self__, "index_document", index_document)
        if tigris_bucket is not None:
            pulumi.set(__self__, "tigris_bucket", tigris_bucket)

    @property
    @pulumi.getter(name="guestPath")
    def guest_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "guest_path")

    @guest_path.setter
    def guest_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "guest_path", value)

    @property
    @pulumi.getter(name="urlPrefix")
    def url_prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url_prefix")

    @url_prefix.setter
    def url_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "url_prefix", value)

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "index_document")

    @index_document.setter
    def index_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_document", value)

    @property
    @pulumi.getter(name="tigrisBucket")
    def tigris_bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tigris_bucket")

    @tigris_bucket.setter
    def tigris_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tigris_bucket", value)


if not MYPY:
    class FlyStopConfigArgsDict(TypedDict):
        signal: NotRequired[pulumi.Input[str]]
        timeout: NotRequired[pulumi.Input[str]]
elif False:
    FlyStopConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyStopConfigArgs:
    def __init__(__self__, *,
                 signal: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


if not MYPY:
    class FlyTCPHealthcheckArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[int]]
elif False:
    FlyTCPHealthcheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyTCPHealthcheckArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[int]] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class FlyTLSOptionsArgsDict(TypedDict):
        alpn: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        default_self_signed: NotRequired[pulumi.Input[bool]]
        versions: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    FlyTLSOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyTLSOptionsArgs:
    def __init__(__self__, *,
                 alpn: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_self_signed: Optional[pulumi.Input[bool]] = None,
                 versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if alpn is not None:
            pulumi.set(__self__, "alpn", alpn)
        if default_self_signed is not None:
            pulumi.set(__self__, "default_self_signed", default_self_signed)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def alpn(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "alpn")

    @alpn.setter
    def alpn(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alpn", value)

    @property
    @pulumi.getter(name="defaultSelfSigned")
    def default_self_signed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default_self_signed")

    @default_self_signed.setter
    def default_self_signed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_self_signed", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "versions", value)


if not MYPY:
    class FlyTempDirVolumeArgsDict(TypedDict):
        size_mb: NotRequired[pulumi.Input[int]]
        storage_type: NotRequired[pulumi.Input[str]]
elif False:
    FlyTempDirVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyTempDirVolumeArgs:
    def __init__(__self__, *,
                 size_mb: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None):
        if size_mb is not None:
            pulumi.set(__self__, "size_mb", size_mb)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter(name="sizeMb")
    def size_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size_mb")

    @size_mb.setter
    def size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size_mb", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)


if not MYPY:
    class FlyVolumeConfigArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        temp_dir: NotRequired[pulumi.Input['FlyTempDirVolumeArgsDict']]
elif False:
    FlyVolumeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlyVolumeConfigArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 temp_dir: Optional[pulumi.Input['FlyTempDirVolumeArgs']] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if temp_dir is not None:
            pulumi.set(__self__, "temp_dir", temp_dir)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="tempDir")
    def temp_dir(self) -> Optional[pulumi.Input['FlyTempDirVolumeArgs']]:
        return pulumi.get(self, "temp_dir")

    @temp_dir.setter
    def temp_dir(self, value: Optional[pulumi.Input['FlyTempDirVolumeArgs']]):
        pulumi.set(self, "temp_dir", value)


