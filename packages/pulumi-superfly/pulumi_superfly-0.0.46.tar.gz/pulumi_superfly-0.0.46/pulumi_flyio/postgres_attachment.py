# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['PostgresAttachmentArgs', 'PostgresAttachment']

@pulumi.input_type
class PostgresAttachmentArgs:
    def __init__(__self__, *,
                 app: pulumi.Input[str],
                 postgres: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 database_user: Optional[pulumi.Input[str]] = None,
                 manual_entry: Optional[pulumi.Input[bool]] = None,
                 variable_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PostgresAttachment resource.
        :param pulumi.Input[str] app: The application to attach the Postgres database to.
        :param pulumi.Input[str] postgres: The Postgres cluster to attach.
        :param pulumi.Input[str] database_name: The name of the database to use.
        :param pulumi.Input[str] database_user: The database user to connect as.
        :param pulumi.Input[bool] manual_entry: Whether to manually enter the connection details.
        :param pulumi.Input[str] variable_name: The environment variable name to store the connection string.
        """
        pulumi.set(__self__, "app", app)
        pulumi.set(__self__, "postgres", postgres)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_user is not None:
            pulumi.set(__self__, "database_user", database_user)
        if manual_entry is not None:
            pulumi.set(__self__, "manual_entry", manual_entry)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def app(self) -> pulumi.Input[str]:
        """
        The application to attach the Postgres database to.
        """
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: pulumi.Input[str]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter
    def postgres(self) -> pulumi.Input[str]:
        """
        The Postgres cluster to attach.
        """
        return pulumi.get(self, "postgres")

    @postgres.setter
    def postgres(self, value: pulumi.Input[str]):
        pulumi.set(self, "postgres", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the database to use.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="databaseUser")
    def database_user(self) -> Optional[pulumi.Input[str]]:
        """
        The database user to connect as.
        """
        return pulumi.get(self, "database_user")

    @database_user.setter
    def database_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_user", value)

    @property
    @pulumi.getter(name="manualEntry")
    def manual_entry(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to manually enter the connection details.
        """
        return pulumi.get(self, "manual_entry")

    @manual_entry.setter
    def manual_entry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manual_entry", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[pulumi.Input[str]]:
        """
        The environment variable name to store the connection string.
        """
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable_name", value)


class PostgresAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 database_user: Optional[pulumi.Input[str]] = None,
                 manual_entry: Optional[pulumi.Input[bool]] = None,
                 postgres: Optional[pulumi.Input[str]] = None,
                 variable_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A Fly.io Postgres attachment connects a Postgres database to an application.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app: The application to attach the Postgres database to.
        :param pulumi.Input[str] database_name: The name of the database to use.
        :param pulumi.Input[str] database_user: The database user to connect as.
        :param pulumi.Input[bool] manual_entry: Whether to manually enter the connection details.
        :param pulumi.Input[str] postgres: The Postgres cluster to attach.
        :param pulumi.Input[str] variable_name: The environment variable name to store the connection string.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PostgresAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Fly.io Postgres attachment connects a Postgres database to an application.

        :param str resource_name: The name of the resource.
        :param PostgresAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PostgresAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 database_user: Optional[pulumi.Input[str]] = None,
                 manual_entry: Optional[pulumi.Input[bool]] = None,
                 postgres: Optional[pulumi.Input[str]] = None,
                 variable_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PostgresAttachmentArgs.__new__(PostgresAttachmentArgs)

            if app is None and not opts.urn:
                raise TypeError("Missing required property 'app'")
            __props__.__dict__["app"] = app
            __props__.__dict__["database_name"] = database_name
            __props__.__dict__["database_user"] = database_user
            __props__.__dict__["manual_entry"] = manual_entry
            if postgres is None and not opts.urn:
                raise TypeError("Missing required property 'postgres'")
            __props__.__dict__["postgres"] = postgres
            __props__.__dict__["variable_name"] = variable_name
            __props__.__dict__["attachment_id"] = None
            __props__.__dict__["connection_string"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["connectionString"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(PostgresAttachment, __self__).__init__(
            'flyio:index:PostgresAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PostgresAttachment':
        """
        Get an existing PostgresAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PostgresAttachmentArgs.__new__(PostgresAttachmentArgs)

        __props__.__dict__["app"] = None
        __props__.__dict__["attachment_id"] = None
        __props__.__dict__["connection_string"] = None
        __props__.__dict__["database_name"] = None
        __props__.__dict__["database_user"] = None
        __props__.__dict__["manual_entry"] = None
        __props__.__dict__["postgres"] = None
        __props__.__dict__["variable_name"] = None
        return PostgresAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def app(self) -> pulumi.Output[str]:
        """
        The application to attach the Postgres database to.
        """
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="attachmentId")
    def attachment_id(self) -> pulumi.Output[str]:
        """
        The unique ID of the Postgres attachment.
        """
        return pulumi.get(self, "attachment_id")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> pulumi.Output[str]:
        """
        The PostgreSQL connection string.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the database to use.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseUser")
    def database_user(self) -> pulumi.Output[Optional[str]]:
        """
        The database user to connect as.
        """
        return pulumi.get(self, "database_user")

    @property
    @pulumi.getter(name="manualEntry")
    def manual_entry(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to manually enter the connection details.
        """
        return pulumi.get(self, "manual_entry")

    @property
    @pulumi.getter
    def postgres(self) -> pulumi.Output[str]:
        """
        The Postgres cluster to attach.
        """
        return pulumi.get(self, "postgres")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> pulumi.Output[str]:
        """
        The environment variable name that contains the connection string.
        """
        return pulumi.get(self, "variable_name")

