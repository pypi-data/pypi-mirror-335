# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from . import _utilities
import typing
# Export this package's modules as members:
from .app import *
from .certificate import *
from .certificate_issuance_waiter import *
from .get_app import *
from .ip import *
from .machine import *
from .postgres_attachment import *
from .provider import *
from .random import *
from .secrets import *
from .volume import *
from .wire_guard_peer import *
from .wire_guard_token import *
from . import outputs

# Make subpackages available:
if typing.TYPE_CHECKING:
    import pulumi_flyio.config as __config
    config = __config
    import pulumi_flyio.flyio as __flyio
    flyio = __flyio
    import pulumi_flyio.time as __time
    time = __time
else:
    config = _utilities.lazy_import('pulumi_flyio.config')
    flyio = _utilities.lazy_import('pulumi_flyio.flyio')
    time = _utilities.lazy_import('pulumi_flyio.time')

_utilities.register(
    resource_modules="""
[
 {
  "pkg": "flyio",
  "mod": "index",
  "fqn": "pulumi_flyio",
  "classes": {
   "flyio:index:App": "App",
   "flyio:index:Certificate": "Certificate",
   "flyio:index:CertificateIssuanceWaiter": "CertificateIssuanceWaiter",
   "flyio:index:IP": "IP",
   "flyio:index:Machine": "Machine",
   "flyio:index:PostgresAttachment": "PostgresAttachment",
   "flyio:index:Random": "Random",
   "flyio:index:Secrets": "Secrets",
   "flyio:index:Volume": "Volume",
   "flyio:index:WireGuardPeer": "WireGuardPeer",
   "flyio:index:WireGuardToken": "WireGuardToken"
  }
 }
]
""",
    resource_packages="""
[
 {
  "pkg": "flyio",
  "token": "pulumi:providers:flyio",
  "fqn": "pulumi_flyio",
  "class": "Provider"
 }
]
"""
)
