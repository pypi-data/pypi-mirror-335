from logging import Logger
from .weather_station_info import WeatherStationInfo
from abc import ABC, abstractmethod

class Source(ABC):
    logger: Logger
    location_name: str
    url: str
    weather_data_provider: WeatherStationInfo | None
    owner: str | None
    def __init__(
        self,
        location_name: str,
        url: str,
        logger: Logger | None = ...,
        weather_data_on_images: bool = ...,
        weather_data_provider: WeatherStationInfo | None = ...,
        owner: str | None = ...,
    ) -> None: ...
    @property
    def has_weather_data(self) -> bool: ...
    @property
    def is_valid_url(self) -> bool: ...
    @property
    def images_collected(self) -> bool: ...
    @property
    def images_partially_collected(self) -> bool: ...
    @property
    def images_count(self) -> int: ...
    @property
    def daily_video_created(self) -> bool: ...
    @property
    def monthly_video_created(self) -> bool: ...
    def set_daily_video_created(self) -> None: ...
    def reset_daily_video_created(self) -> None: ...
    def set_monthly_video_created(self) -> None: ...
    def reset_monthly_video_created(self) -> None: ...
    def increase_images(self) -> None: ...
    def reset_images_counter(self) -> None: ...
    def set_all_images_collected(self) -> None: ...
    def set_images_partially_collected(self) -> None: ...
    def reset_all_images_collected(self) -> None: ...
    def reset_images_partially_collected(self) -> None: ...
    @abstractmethod
    def get_frame_bytes(self) -> bytes | None: ...
    @abstractmethod
    def validate_url(cls, url: str) -> bool: ...

class ImageSource(Source):
    def validate_url(self, url: str) -> bool: ...
    def get_frame_bytes(self) -> bytes | None: ...

class StreamSource(Source):
    @staticmethod
    def get_url_with_yt_dlp(url: str) -> str: ...
    def validate_url(self, url: str) -> bool: ...
    def get_frame_bytes(self) -> bytes | None: ...
