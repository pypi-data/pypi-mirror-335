name: Release New Version

on:
  push:
    branches: [master]
    paths:
      - "src/**/*.py"
  workflow_dispatch:

jobs:
  preflight-check:
    uses: ./.github/workflows/test.yml

  release:
    needs: preflight-check
    runs-on: ubuntu-latest
    permissions:
      contents: write # For pushing tag, commit and creating release

    outputs:
      version: ${{ steps.bumpver.outputs.version }}

    # Only run if push is from a human (not another workflow, to avoid loops on tag push)
    if: github.actor != 'github-actions[bot]' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for bumpver

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup uv
        uses: astral-sh/setup-uv@v5

      - name: Bump version
        id: bumpver
        run: |
          uv run --frozen bumpver update
          # Extract the new version
          NEW_VERSION=$(grep -m1 'current_version = ' pyproject.toml | cut -d'"' -f2)
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Push changes and tag
        run: |
          git push
          git push origin ${{ steps.bumpver.outputs.version }}

  publish:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write # For pushing tag, commit and creating release
      id-token: write # For trusted publishing to PyPI

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.version }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v5

      - name: Build package
        run: uv build --no-sources

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          "${{ needs.release.outputs.version }}"
          --repo "$GITHUB_REPOSITORY"
          --title "${{ needs.release.outputs.version }}"
          --generate-notes
          dist/*

      - name: Publish to PyPI
        run: uv publish

