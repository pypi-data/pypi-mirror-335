import base64

# الكود المشفر (يمكنك نسخه من ملف encrypted_code.txt)
encoded_code = b""

# فك تشفير الكود
decoded_code = base64.b64decode(encoded_code).decode('utf-8')

# تنفيذ الكود ديناميكيًا
exec(decoded_code)