"""
This file is generated by the openapi-python-client tool via the generate_api_client.py script

It is a customized template from the openapi-python-client tool's default template:
https://github.com/openapi-generators/openapi-python-client/blob/861ef5622f10fc96d240dc9becb0edf94e61446c/openapi_python_client/templates/model.py.jinja

The main change is:
- Fix typing issues
"""

# flake8: noqa: C901

from typing import TYPE_CHECKING, Any, List, Literal, Type, TypeVar, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

if TYPE_CHECKING:
    from ..models.field_validation_error import FieldValidationError


T = TypeVar("T", bound="UnprocessableInputErrorResponse")


@_attrs_define
class UnprocessableInputErrorResponse:
    """
    Attributes:
        status_code (Literal[422]):
        validation_issues (List['FieldValidationError']):
    """

    status_code: Literal[422]
    validation_issues: List["FieldValidationError"]
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        status_code = self.status_code

        validation_issues = []
        for validation_issues_item_data in self.validation_issues:
            validation_issues_item = validation_issues_item_data.to_dict()
            validation_issues.append(validation_issues_item)

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "status_code": status_code,
                "validation_issues": validation_issues,
            }
        )

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: dict[str, Any]) -> T:
        from ..models.field_validation_error import FieldValidationError

        d = src_dict.copy()
        status_code = cast(Literal[422], d.pop("status_code"))
        if status_code != 422:
            raise ValueError(f"status_code must match const 422, got '{status_code}'")

        validation_issues = []
        _validation_issues = d.pop("validation_issues")
        for validation_issues_item_data in _validation_issues:
            validation_issues_item = FieldValidationError.from_dict(validation_issues_item_data)

            validation_issues.append(validation_issues_item)

        unprocessable_input_error_response = cls(
            status_code=status_code,
            validation_issues=validation_issues,
        )

        unprocessable_input_error_response.additional_properties = d
        return unprocessable_input_error_response

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
