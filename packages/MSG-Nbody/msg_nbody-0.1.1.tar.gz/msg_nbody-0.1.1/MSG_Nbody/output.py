'''
Author: Elko Gerville-Reache
Date Created: 2025-03-17
Date Modified: 2025-03-19
Description:
    functions to manage the I/O operations of the simulation. creates a unique
    directory to save snapshots and manages the snapshot file naming
Dependencies:
    - os
    - time
'''

import os
import time
import numpy as np

def save_snapshot_2_binary_file(snapshot_array, pos, vel, potential, directory, N, i):
    '''
    save the current simulation snapshot to a binary file in working directory
    Parameters
    ----------
    snapshot_array: np.ndarray[np.float64]
        Nx7 array to store particle positions, velocities, and potentials
    pos: np.ndarray[np.float64]
        Nx3 array containing the [x, y, z] positions of all particles
    vel: np.ndarray[np.float64]
        Nx3 array containing the [x, y, z] velocities of all particles
    potential: np.ndarray[np.float64]
        Nx1 array containing the potential felt by each particle from
        the combined gravitational influence of all other particles
    directory: str
        path to directory where snapshot will be saved
    i: int
        current simulation timestep
    '''
    snapshot_array[:, 0:3] = pos
    snapshot_array[:, 3:6] = vel
    snapshot_array[:, 6:7] = potential
    filename = os.path.join(directory, f'snapshot_N{N}_timestep_{i}.npy')
    np.save(filename, snapshot_array)

def create_output_directory(N):
    '''
    creates a directory for storing simulation outputs
    if a directory with the specified name already exists, a unique name
    is generated by appending a timestamp. this ensures simulation
    outputs from different runs are stored separately
    Parameters
    ----------
    N : int
        number of particles in the simulation, used to name the directory
    Returns
    -------
    directory_name : str
        name of the created directory, where simulation snapshots will be saved
    Example
    -------
    -> create_output_directory(10000)
    'simulation_outputs_N10000'  # if unique
    'simulation_outputs_N10000_2025-03-18-14-30-55'  # if a conflict occurs
    '''
    directory_name = f'simulation_outputs_N{N}'
    # create a unique directory if one already exists
    if os.path.exists(directory_name):
        timestamp = time.strftime('%Y-%m-%d-%H-%M-%S')
        directory_name = f"{directory_name}_{timestamp}"
    os.makedirs(directory_name)

    return directory_name
