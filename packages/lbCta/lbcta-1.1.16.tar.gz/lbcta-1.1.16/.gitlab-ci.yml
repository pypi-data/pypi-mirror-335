# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence



stages:
- test
- build
- deploy

variables:
  #mamba-version: "https://micromamba.snakepit.net/api/micromamba/linux-64/latest"
  #test-name: test-env
  MAMBA_ROOT_PREFIX: $PWD/micromamba

.setup_env:
  tags:
    - k8s-default
  image: registry.cern.ch/docker.io/library/python
  before_script:
    - eval "$( curl -L micro.mamba.pm/install.sh )"
    - source $HOME/.bashrc
    - micromamba create --yes --name lbcta --file environment.yml
    - micromamba activate lbcta
    - python --version

code_analysis:
  extends: .setup_env
  stage: test
  before_script:
    - pip install pre-commit
    - pip install pylint

  script:
    - pip install .
    - pre-commit run --all-files
    - pylint $(git ls-files '*.py')

code_testing:
  extends: .setup_env
  stage: test
  before_script:
    - pip install pytest
  script:
    - pip install .
    - pytest -vvv

code-build:
  extends: .setup_env
  stage: build
  script:
    - python -m build .  --outdir public
    - ls -al public
  artifacts:
    paths:
      - public
    when: always
    expire_in: 1 hour


sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml

code-deploy:
  stage: deploy
  extends: .setup_env
  only:
    - tags
  when: manual
  dependencies: [code-build]
  before_script:
    - echo "lbcta packages:"
    - ls -al public
    - pip install twine
  script:
    - python --version
    - if [ -z "$TWINE_PASSWORD" ] ; then echo "Set TWINE_PASSWORD in CI variables" ; exit 1 ; fi
    - echo "Uploading to PyPI"
    - python -m twine upload --verbose -u __token__ public/*
