
add_library(tp_qt INTERFACE)
if (WIN32)

# TODO: Get this method of including Qt working in regular API tests before using in IPRM, so all the kinks have been
#	worked out, as our manual solution is fine enough for now
#[===[
set(extract_dir "${CMAKE_CURRENT_BINARY_DIR}/Archive")
set(archive_file "${CMAKE_CURRENT_SOURCE_DIR}/PLATFORM-win64/Qt-6.8.0.zip")
set(sentinel_file ${extract_dir}/tp_qt_unpack_archive.sentinel)


# Function to check if we can skip extraction
function(check_qt_archive_unpacked)
  if(EXISTS "${extract_dir}/lib/cmake/Qt6/Qt6Config.cmake")
    set(NEED_EXTRACTION FALSE PARENT_SCOPE)
  else()
    set(NEED_EXTRACTION TRUE PARENT_SCOPE)
  endif()
endfunction(check_qt_archive_unpacked)

check_qt_archive_unpacked()

# Extract at configure time only if necessary
if(NEED_EXTRACTION)
  message(STATUS "Qt6 archive not found in build directory, unpacking...")
  file(MAKE_DIRECTORY ${extract_dir})
  execute_process(
    COMMAND ${CMAKE_COMMAND} -E tar xz ${archive_file}
    WORKING_DIRECTORY ${extract_dir}
    RESULT_VARIABLE extract_result
  )
  
  if(NOT extract_result EQUAL 0)
    message(FATAL_ERROR "Failed to unpack Qt archive")
  endif()
  
  file(TOUCH ${sentinel_file})
  message(STATUS "Qt6 archive unpacked successfully")
else()
  message(STATUS "Using previously unpacked Qt6 archive")
endif()

# NOTE: ${extract_dir} doesn't actually exist until build time when this is ran
list(APPEND CMAKE_PREFIX_PATH "${extract_dir}/lib/cmake/Qt6")

# However, these are required at configure time if run in-line like this
find_package(Qt6 REQUIRED COMPONENTS Core Gui Widgets Svg)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)


add_custom_command(
	OUTPUT
		${sentinel_file}
		${archive_output_files}
	DEPENDS ${archive_file}
	COMMAND ${CMAKE_COMMAND} -E make_directory ${extract_dir}
	COMMAND ${CMAKE_COMMAND} -E tar xz ${archive_file}
	COMMENT "Unpacking ${archive_file} to ${extract_dir}"
	COMMAND ${CMAKE_COMMAND} -E touch ${sentinel_file}
	WORKING_DIRECTORY ${extract_dir}
	VERBATIM
	COMMAND_EXPAND_LISTS
)

add_custom_target(tp_qt_unpack_qt_archive DEPENDS ${sentinel_file})


add_library(tp_qt_Core INTERFACE)
target_link_libraries(tp_qt_Core
	INTERFACE
		Qt6::Core
)

add_library(tp_qt_Widgets INTERFACE)
target_link_libraries(tp_qt_Widgets
	INTERFACE
		Qt6::Widgets
)

add_library(tp_qt_Gui INTERFACE)
target_link_libraries(tp_qt_Gui
	INTERFACE
		Qt6::Gui
)

add_library(tp_qt_Svg INTERFACE)
target_link_libraries(tp_qt_Svg
	INTERFACE
		Qt6::Svg
)
add_library(tp_qt INTERFACE)
target_link_libraries(tp_qt
    INTERFACE
        tp_qt_Core
        tp_qt_Widgets
        tp_qt_Gui
        tp_qt_Svg
)
]===]

# =========================================================
# WARNING: This file is auto-generated. DO NOT EDIT MANUALLY
# Generated by: iprm (v0.1.0)
# Generated on: 2025-02-25 03:32:38 UTC
# Platform: Windows
# =========================================================
set(include_dirs
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/include"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/include/QtCore"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/include/QtWidgets"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/include/QtGui"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/include/QtSvg"
        PARENT_SCOPE
)
function(add_framework_shared_module target_name implib dll archive_name)
    add_library(${target_name} SHARED IMPORTED GLOBAL)

    file(MAKE_DIRECTORY "${include}")

    set_target_properties(${target_name}
            PROPERTIES
            IMPORTED_IMPLIB "${implib}"
            IMPORTED_LOCATION "${dll}"
            INTERFACE_INCLUDE_DIRECTORIES "${include_dirs}"
    )
    add_dependencies(${target_name}
            ${archive_name}
    )
endfunction(add_framework_shared_module)

set(archive_output_files
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/bin/moc.exe"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/bin/rcc.exe"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/bin/uic.exe"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Core.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Cored.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Gui.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Guid.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Svg.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Svgd.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Widgets.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Widgetsd.lib"
)

target_link_libraries(tp_qt
        INTERFACE
        $<$<CONFIG:Release>:tp_qt_Core_release>
        $<$<CONFIG:Release>:tp_qt_Widgets_release>
        $<$<CONFIG:Release>:tp_qt_Gui_release>
        $<$<CONFIG:Release>:tp_qt_Svg_release>
        $<$<CONFIG:Debug>:tp_qt_Core_debug>
        $<$<CONFIG:Debug>:tp_qt_Widgets_debug>
        $<$<CONFIG:Debug>:tp_qt_Gui_debug>
        $<$<CONFIG:Debug>:tp_qt_Svg_debug>
)
target_include_directories(tp_qt
        INTERFACE
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/include"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/include/QtCore"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/include/QtWidgets"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/include/QtGui"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/include/QtSvg"
)

add_framework_shared_module(tp_qt_Core_release
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Core.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/bin/Qt6Core.dll"
        tp_qt_unpack_qt_archive
)

add_framework_shared_module(tp_qt_Core_debug
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Cored.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/bin/Qt6Cored.dll"
        tp_qt_unpack_qt_archive
)

add_framework_shared_module(tp_qt_Widgets_release
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Widgets.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/bin/Qt6Widgets.dll"
        tp_qt_unpack_qt_archive
)

add_framework_shared_module(tp_qt_Widgets_debug
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Widgetsd.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/bin/Qt6Widgetsd.dll"
        tp_qt_unpack_qt_archive
)

add_framework_shared_module(tp_qt_Gui_release
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Gui.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/bin/Qt6Gui.dll"
        tp_qt_unpack_qt_archive
)

add_framework_shared_module(tp_qt_Gui_debug
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Guid.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/bin/Qt6Guid.dll"
        tp_qt_unpack_qt_archive
)

add_framework_shared_module(tp_qt_Svg_release
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Svg.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/bin/Qt6Svg.dll"
        tp_qt_unpack_qt_archive
)

add_framework_shared_module(tp_qt_Svg_debug
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/lib/Qt6Svgd.lib"
        "${CMAKE_CURRENT_BINARY_DIR}/Archive/bin/Qt6Svgd.dll"
        tp_qt_unpack_qt_archive
)

set(extract_dir "${CMAKE_CURRENT_BINARY_DIR}/Archive")
set(archive_file "${CMAKE_CURRENT_SOURCE_DIR}/PLATFORM-win64/qt_6_8_0_slim.tar.gz")
set(sentinel_file ${extract_dir}/tp_qt_unpack_qt_archive_unpack_archive.sentinel)

add_custom_command(
        OUTPUT
        ${sentinel_file}
        ${archive_output_files}
        DEPENDS ${archive_file}
        COMMAND ${CMAKE_COMMAND} -E make_directory ${extract_dir}
        COMMAND ${CMAKE_COMMAND} -E tar xzf ${archive_file}
        COMMENT "Unpacking ${archive_file} to ${extract_dir}"
        COMMAND ${CMAKE_COMMAND} -E touch ${sentinel_file}
        WORKING_DIRECTORY ${extract_dir}
        VERBATIM
        COMMAND_EXPAND_LISTS
)

add_custom_target(tp_qt_unpack_qt_archive DEPENDS ${sentinel_file})

add_library(tp_qt_Core INTERFACE)
target_link_libraries(tp_qt_Core
        INTERFACE
        tp_qt_Core_release
        tp_qt_Core_debug
)

add_library(tp_qt_Widgets INTERFACE)
target_link_libraries(tp_qt_Widgets
        INTERFACE
        tp_qt_Widgets_release
        tp_qt_Widgets_debug
)

add_library(tp_qt_Gui INTERFACE)
target_link_libraries(tp_qt_Gui
        INTERFACE
        tp_qt_Gui_release
        tp_qt_Gui_debug
)

add_library(tp_qt_Svg INTERFACE)
target_link_libraries(tp_qt_Svg
        INTERFACE
        tp_qt_Svg_release
        tp_qt_Svg_debug
)
else()

    find_package(Qt6 COMPONENTS Core Gui Widgets Svg REQUIRED)
    set(CMAKE_AUTOMOC ON)
    set(CMAKE_AUTORCC ON)
    add_library(tp_qt_Core INTERFACE)
    target_link_libraries(tp_qt_Core INTERFACE Qt6::Core)

    add_library(tp_qt_Gui INTERFACE)
    target_link_libraries(tp_qt_Gui INTERFACE Qt6::Gui)

    add_library(tp_qt_Widgets INTERFACE)
    target_link_libraries(tp_qt_Widgets INTERFACE Qt6::Widgets)

    add_library(tp_qt_Svg INTERFACE)
    target_link_libraries(tp_qt_Svg INTERFACE Qt6::Svg)

    target_link_libraries(tp_qt INTERFACE tp_qt_Core tp_qt_Gui tp_qt_Widgets tp_qt_Svg)

    set(CMAKE_AUTOMOC TRUE)

endif()

