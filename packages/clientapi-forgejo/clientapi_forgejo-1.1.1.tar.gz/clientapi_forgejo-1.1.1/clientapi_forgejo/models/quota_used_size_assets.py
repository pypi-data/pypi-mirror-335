# coding: utf-8

"""
    Forgejo API

    This documentation describes the Forgejo API.

    The version of the OpenAPI document: 10.0.0-93-60eedb9+gitea-1.22.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from clientapi_forgejo.models.quota_used_size_assets_attachments import QuotaUsedSizeAssetsAttachments
from clientapi_forgejo.models.quota_used_size_assets_packages import QuotaUsedSizeAssetsPackages
from typing import Optional, Set
from typing_extensions import Self

class QuotaUsedSizeAssets(BaseModel):
    """
    QuotaUsedSizeAssets represents the size-based asset usage of a user
    """ # noqa: E501
    artifacts: Optional[StrictInt] = Field(default=None, description="Storage size used for the user's artifacts")
    attachments: Optional[QuotaUsedSizeAssetsAttachments] = None
    packages: Optional[QuotaUsedSizeAssetsPackages] = None
    __properties: ClassVar[List[str]] = ["artifacts", "attachments", "packages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuotaUsedSizeAssets from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attachments
        if self.attachments:
            _dict['attachments'] = self.attachments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of packages
        if self.packages:
            _dict['packages'] = self.packages.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuotaUsedSizeAssets from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifacts": obj.get("artifacts"),
            "attachments": QuotaUsedSizeAssetsAttachments.from_dict(obj["attachments"]) if obj.get("attachments") is not None else None,
            "packages": QuotaUsedSizeAssetsPackages.from_dict(obj["packages"]) if obj.get("packages") is not None else None
        })
        return _obj


