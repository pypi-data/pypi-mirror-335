[tool.poetry]
name = "xt-st-common"
version = "1.1.5"
description = "Common Streamlit framework used by Exploration Toolkit"
authors = [
  "Alex Hunt <alex.hunt@csiro.au>",
  "Sam Bradley <sam.bradley@csiro.au>",
  "John Hille <john.hille@csiro.au>",
]
readme = "README.md"
packages = [
  { include = "xt_st_common", from = "src" },
  { include = "streamlit_plotly_events", from = "src" },
]

[tool.poe.tasks]

clean = { cmd = "rm -rf .coverage .mypy_cache .pytest_cache dist ./**/__pycache__ docs/build/ dist docs/build docs/source/_static docs/source/wpf.*.rst", help = "Clean up build artifacts" }
lint = { cmd = "pre-commit run", help = "Run pre-commit hooks" }
install = { cmd = "poetry install --all-extras", help = "Install all dependencies" }
format-black = { cmd = "black .", help = "Run Black formater" }
format-ruff = { cmd = "ruff src/xt_st_common --fix", help = "Run Ruff linter and apply fixes" }
format-docs = { cmd = "pydocstringformatter  src/xt_st_common", help = "Run docs formatter and apply fixes" }
format = { sequence = [
  "format-docs",
  "format-black",
  "format-ruff",
], help = "Run all formatters" }
test-deps-up = { cmd = "docker-compose -f test/docker-compose.yml up  -d" }
test-deps-down = { cmd = "docker-compose -f test/docker-compose.yml down " }
_test = { cmd = "pytest --cov-report term-missing --cov=src/xt_st_common", help = "Run unit tests, won't work if docker is not up" }
_wait = { script = "xt_st_common.utils:wait" }
test = { sequence = [
  "test-deps-up",
  "_wait",
  "_test",
  "test-deps-down",
], ignore_fail = "return_non_zero", help = "Run all tests" }


[tool.poetry.dependencies]
python = ">3.10, <4.0"
pydantic-settings = { version = "^2.1.0" }
pyjwt = { extras = ["crypto"], version = "^2.6.0" }
streamlit = ">=1.25.0"
streamlit-js-eval = "^0.1.5"
chardet = ">=4.0.0, <6.0"
streamlit-tree-select = "^0.0.5"
minio = { version = "^7.1.14", optional = true }
plotly = ">= 4.14.3"
pymongo = { version = ">=4.3.3", optional = true }
pymongo-auth-aws = { version = ">=1.1.0", optional = true }
botocore = { version = ">=1.33.13", optional = true }       # Needs to defined to get poetry to resolve
natsort = "^8.4.0"
pydantic = "^2.5.2"
pydantic-extra-types = "^2.2.0"


[tool.poetry.group.dev.dependencies]
pre-commit = "^3.2.2"
pytest = "^7.3.1"
coverage = { extras = ["toml"], version = "^7.2.3" }
pytest-cov = "^4.0.0"
ruff = "^0.1.7"
pytest-mock = "^3.10.0"
black = "^23.3.0"
poethepoet = "^0.20.0"
python-dotenv = "^1.0.0"
pydocstringformatter = "^0.7.3"

[tool.poetry.extras]
databases = ["pymongo", "pymongo-auth-aws", "botocore"]
storage = ["minio"]

[tool.black]
line-length = 120
target-version = ['py310']

[tool.pydocstringformatter]
write = true
max-line-length = 120
strip-whitespaces = true
split-summary-body = false
numpydoc-section-hyphen-length = false
linewrap-full-docstring = true

[tool.ruff]
ignore = [
  # zip=strict only valid for py3.10+
  "B905",
  "B008",
  "D",
]
line-length = 120
select = [
  "B",
  "D",
  "E",
  "F",
  "Q",
  "W",
  "I",
  "N",
  #"S",
  "A",
  "C4",
  "DTZ",
  "PIE",
  "PT",
  "RET",
  "SIM",
  #"ARG", # We make use of 'unused' cache parameters
  "PTH",
  "PD",
  "PLE",
  #"PLR",
  "NPY",
  "RUF",
]

[tool.ruff.flake8-quotes]
inline-quotes = "double"

[tool.ruff.per-file-ignores]
"**/__init__.py" = ["F401"]
"src/streamlit_plotly_events/__init__.py" = ["N816"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
