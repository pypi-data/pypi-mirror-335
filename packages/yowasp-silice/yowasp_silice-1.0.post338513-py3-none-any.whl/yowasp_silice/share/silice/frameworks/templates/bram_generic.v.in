// SL 2019, MIT license
module %MODULE%(
input                  [%WENABLE_WIDTH%-1:0] in_wenable,
input      %DATA_TYPE% [%DATA_WIDTH%-1:0]    in_wdata,
input                  [%ADDR_WIDTH%-1:0]    in_addr,
output reg %DATA_TYPE% [%DATA_WIDTH%-1:0]    out_rdata,
input                                        clock
);
  (* no_rw_check *) reg %DATA_TYPE% [%DATA_WIDTH%-1:0] buffer[%DATA_SIZE%-1:0];
`ifdef SIMULATION
  // in simulation we use a different code that matches yosys output with
  // no_rw_check enabled (which we use to preserve compact LUT designs)
  always @(posedge clock) begin
    if (in_wenable) begin
      buffer[in_addr] <= in_wdata;
      out_rdata       <= in_wdata;
    end else begin
      out_rdata       <= buffer[in_addr];
    end
  end
`else
  always @(posedge clock) begin
    if (in_wenable) begin
      buffer[in_addr] <= in_wdata;
    end
    out_rdata <= buffer[in_addr];
  end
`endif
%INITIAL%
endmodule
