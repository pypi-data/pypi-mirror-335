"""
    S&P Global Fixed Income Evaluated Prices & Analytics API

    Gain access to evaluated pricing and analytics data for Corporate Bonds, Municipal Bonds and Asset Backed Securities provided by S&P Global (formerly IHS Markit) .  Data returned through multiple endpoints like prices, spread, yield, yield curve, sensitivity, coupon information, securities metadata and details specific to the Asset Backed Securities.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.exceptions import ApiAttributeError



class BondSpread(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'request_id': (str,),  # noqa: E501
            'fsym_id': (str, none_type,),  # noqa: E501
            'date': (date, none_type,),  # noqa: E501
            'actual_cds_bond_basis_mid': (float, none_type,),  # noqa: E501
            'actual_immcds_bond_basis': (float, none_type,),  # noqa: E501
            'cds_bond_basis_date': (date, none_type,),  # noqa: E501
            'bid_discount_margin': (float, none_type,),  # noqa: E501
            'mid_discount_margin': (float, none_type,),  # noqa: E501
            'ask_discount_margin': (float, none_type,),  # noqa: E501
            'bid_oas': (float, none_type,),  # noqa: E501
            'mid_oas': (float, none_type,),  # noqa: E501
            'ask_oas': (float, none_type,),  # noqa: E501
            'bid_asset_swap_spread': (float, none_type,),  # noqa: E501
            'mid_asset_swap_spread': (float, none_type,),  # noqa: E501
            'ask_asset_swap_spread': (float, none_type,),  # noqa: E501
            'bid_z_spread': (float, none_type,),  # noqa: E501
            'mid_z_spread': (float, none_type,),  # noqa: E501
            'ask_z_spread': (float, none_type,),  # noqa: E501
            'bid_g_spread': (float, none_type,),  # noqa: E501
            'mid_g_spread': (float, none_type,),  # noqa: E501
            'ask_g_spread': (float, none_type,),  # noqa: E501
            'bid_yield_spreadv_benchmark': (float, none_type,),  # noqa: E501
            'mid_yield_spreadv_benchmark': (float, none_type,),  # noqa: E501
            'ask_yield_spreadv_benchmark': (float, none_type,),  # noqa: E501
            'bid_ask_price_spread': (float, none_type,),  # noqa: E501
            'bid_ask_yield_spread': (float, none_type,),  # noqa: E501
            'bid_stw_spread': (float, none_type,),  # noqa: E501
            'mid_i_spread': (float, none_type,),  # noqa: E501
            'mid_wal_treasury_spread': (float, none_type,),  # noqa: E501
            'mid_edsf_spread': (float, none_type,),  # noqa: E501
            'treasury_swap_spread': (float, none_type,),  # noqa: E501
            'mid_swap_spread': (float, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'request_id': 'requestId',  # noqa: E501
        'fsym_id': 'fsymId',  # noqa: E501
        'date': 'date',  # noqa: E501
        'actual_cds_bond_basis_mid': 'actualCDSBondBasisMid',  # noqa: E501
        'actual_immcds_bond_basis': 'actualIMMCDSBondBasis',  # noqa: E501
        'cds_bond_basis_date': 'CDSBondBasisDate',  # noqa: E501
        'bid_discount_margin': 'bidDiscountMargin',  # noqa: E501
        'mid_discount_margin': 'midDiscountMargin',  # noqa: E501
        'ask_discount_margin': 'askDiscountMargin',  # noqa: E501
        'bid_oas': 'bidOAS',  # noqa: E501
        'mid_oas': 'midOAS',  # noqa: E501
        'ask_oas': 'askOAS',  # noqa: E501
        'bid_asset_swap_spread': 'bidAssetSwapSpread',  # noqa: E501
        'mid_asset_swap_spread': 'midAssetSwapSpread',  # noqa: E501
        'ask_asset_swap_spread': 'askAssetSwapSpread',  # noqa: E501
        'bid_z_spread': 'bidZSpread',  # noqa: E501
        'mid_z_spread': 'midZSpread',  # noqa: E501
        'ask_z_spread': 'askZSpread',  # noqa: E501
        'bid_g_spread': 'bidGSpread',  # noqa: E501
        'mid_g_spread': 'midGSpread',  # noqa: E501
        'ask_g_spread': 'askGSpread',  # noqa: E501
        'bid_yield_spreadv_benchmark': 'bidYieldSpreadvBenchmark',  # noqa: E501
        'mid_yield_spreadv_benchmark': 'midYieldSpreadvBenchmark',  # noqa: E501
        'ask_yield_spreadv_benchmark': 'askYieldSpreadvBenchmark',  # noqa: E501
        'bid_ask_price_spread': 'bidAskPriceSpread',  # noqa: E501
        'bid_ask_yield_spread': 'bidAskYieldSpread',  # noqa: E501
        'bid_stw_spread': 'bidSTWSpread',  # noqa: E501
        'mid_i_spread': 'midISpread',  # noqa: E501
        'mid_wal_treasury_spread': 'midWALTreasurySpread',  # noqa: E501
        'mid_edsf_spread': 'midEDSFSpread',  # noqa: E501
        'treasury_swap_spread': 'treasurySwapSpread',  # noqa: E501
        'mid_swap_spread': 'midSwapSpread',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """BondSpread - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            request_id (str): Identifier that was used for the request.. [optional]  # noqa: E501
            fsym_id (str, none_type): FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.. [optional]  # noqa: E501
            date (date, none_type): The date on which the price is calculated.. [optional]  # noqa: E501
            actual_cds_bond_basis_mid (float, none_type): The difference between the CDS spread interpolated to the bond maturity and the asset swap spread of the bond .Available only  for `corporate bonds`. [optional]  # noqa: E501
            actual_immcds_bond_basis (float, none_type): The difference between the CDS spread interpolated to the IMM date immediately following the bond maturity,and the asset swap spread of the bond .Available only  for `corporate bonds`. [optional]  # noqa: E501
            cds_bond_basis_date (date, none_type): The date of the CDS Bond Basis .Available only  for `corporate bonds`. [optional]  # noqa: E501
            bid_discount_margin (float, none_type): The discount margin of a Floating Rate Note,denominated in basis points, based on the evaluated bid price. Discount margin is the return earned in addition to the index underlying the floating rate security .Available only  for `corporate bonds` and `asset-backed security bonds`.. [optional]  # noqa: E501
            mid_discount_margin (float, none_type): The discount margin of a Floating RateNote, denominate in basis points, based on the evaluated mid price. Discount margin is the return earned in addition to the index underlying the floating rate security .Available only  for `corporate bonds` and `asset-backed security bonds`.. [optional]  # noqa: E501
            ask_discount_margin (float, none_type): The discount margin of a Floating Rate Note, denominated in basis points, based on the evaluated ask price. Discount margin is the return earned in addition to the index underlying the floating rate security. Available only  for `corporate bonds` and `asset-backed security bonds`.. [optional]  # noqa: E501
            bid_oas (float, none_type): The Option Adjusted Spread (OAS), based on the bid price. OAS is the flat spread which has to be added to the treasury yield curve in a pricing model (that accounts for embedded options) to discount a security payment to match its market price. Available only  for `corporate bonds`. [optional]  # noqa: E501
            mid_oas (float, none_type): The Option Adjusted Spread (OAS), based on the mid price. OAS is the flat spread which has to be added to the treasury yield curve in a pricing model (that accounts for embedded options) to discount a security payment to match its market price .Available only  for `corporate bonds` and `asset-backed security bonds`.. [optional]  # noqa: E501
            ask_oas (float, none_type): The Option Adjusted Spread (OAS), based on the ask price. OAS is the flat spread which has to be added to the treasury yield curve in a pricing model (that accounts for embedded options) to discount a security payment to match its market price. Available only  for `corporate bonds`. [optional]  # noqa: E501
            bid_asset_swap_spread (float, none_type): The bid asset swap spread in the currency of the instrument. Asset Swap Spread is the difference between the yield of an instrument and the LIBOR curve .Available only  for `corporate bonds` and `asset-backed security bonds`.. [optional]  # noqa: E501
            mid_asset_swap_spread (float, none_type): The mid asset swap spread in the currency of the instrument. Asset Swap Spread is the difference between the yield of an instrument and the LIBOR curve .Available only  for `corporate bonds`.. [optional]  # noqa: E501
            ask_asset_swap_spread (float, none_type): The ask asset swap spread in the currency of the instrument. Asset Swap Spread is the difference between the yield of an instrument and the LIBOR curve .Available only  for `corporate bonds`.. [optional]  # noqa: E501
            bid_z_spread (float, none_type): The bid Z spread of the instrument, based on the bid price. Z spread is the constant spread that will make the price of an instrument equal to the present value of its cash flows, when added to the yield at each point on the spot rate treasury curve, where a cash flow is received. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            mid_z_spread (float, none_type): The bid Z spread of the instrument, based on the mid price. Z spread is the constant spread that will make the price of an instrument equal to the present value of its cash flows, when added to the yield at each point on the spot rate treasury curve, where a cash flow is received .Available only  for `corporate bonds`.. [optional]  # noqa: E501
            ask_z_spread (float, none_type): The bid Z spread of the instrument, based on the ask price. Z spread is the constant spread that will make the price of an instrument equal to the present value of its cash flows, when added to the yield at each point on the spot rate treasury curve, where a cash flow is received .Available only  for `corporate bonds`.. [optional]  # noqa: E501
            bid_g_spread (float, none_type): The G spread of the instrument, based on the bid price. G spread is the difference between the yield to maturity of the bond and the linearly interpolated yield to the same maturity on an appropriate government curve. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            mid_g_spread (float, none_type): The G spread of the instrument, based on the mid price. G spread is the difference between the yield to maturity of the bond and the linearly interpolated yield to the same maturity on an appropriate government curve. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            ask_g_spread (float, none_type): The G spread of the instrument, based on the ask price. G spread is the difference between the yield to maturity of the bond and the linearly interpolated yield to the same maturity on an appropriate government curve. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            bid_yield_spreadv_benchmark (float, none_type): The spread of the instrument bid yield against the assigned benchmark bid yield. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            mid_yield_spreadv_benchmark (float, none_type): The spread of the instrument mid yield against the assigned benchmark mid yield. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            ask_yield_spreadv_benchmark (float, none_type): The spread of the instrument ask yield against the assigned benchmark ask yield. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            bid_ask_price_spread (float, none_type): The difference between the ask price and the bid price.. [optional]  # noqa: E501
            bid_ask_yield_spread (float, none_type): The difference between the ask yield and bid yield .Available only  for `corporate bonds`.. [optional]  # noqa: E501
            bid_stw_spread (float, none_type): The difference, in terms of spread, between the bid yield to worst and the yield to maturity of the treasury bond with the closest maturity to the yieldToWorstDate. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            mid_i_spread (float, none_type): The I spread of the bond, based on the mid price. I spread is the difference between the yield to maturity of the bond and the linearly interpolated yield to the same maturity on an appropriate reference curve. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            mid_wal_treasury_spread (float, none_type): The value of Mid Spread to treasuries at same WAL of the bond. Available only  for `asset-backed security bonds`.. [optional]  # noqa: E501
            mid_edsf_spread (float, none_type): The mid spread to the Euro Dollar Synthetic Futures(EDSF) curve used in evaluated price of the instrument. Available only  for `asset-backed security bonds`.. [optional]  # noqa: E501
            treasury_swap_spread (float, none_type): Swap spread to treasuries for same maturity of the treasury bond and swap. Available only  for `asset-backed security bonds`.. [optional]  # noqa: E501
            mid_swap_spread (float, none_type): The mid spread to swaps .Available only  for `asset-backed security bonds`.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """BondSpread - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            request_id (str): Identifier that was used for the request.. [optional]  # noqa: E501
            fsym_id (str, none_type): FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.. [optional]  # noqa: E501
            date (date, none_type): The date on which the price is calculated.. [optional]  # noqa: E501
            actual_cds_bond_basis_mid (float, none_type): The difference between the CDS spread interpolated to the bond maturity and the asset swap spread of the bond .Available only  for `corporate bonds`. [optional]  # noqa: E501
            actual_immcds_bond_basis (float, none_type): The difference between the CDS spread interpolated to the IMM date immediately following the bond maturity,and the asset swap spread of the bond .Available only  for `corporate bonds`. [optional]  # noqa: E501
            cds_bond_basis_date (date, none_type): The date of the CDS Bond Basis .Available only  for `corporate bonds`. [optional]  # noqa: E501
            bid_discount_margin (float, none_type): The discount margin of a Floating Rate Note,denominated in basis points, based on the evaluated bid price. Discount margin is the return earned in addition to the index underlying the floating rate security .Available only  for `corporate bonds` and `asset-backed security bonds`.. [optional]  # noqa: E501
            mid_discount_margin (float, none_type): The discount margin of a Floating RateNote, denominate in basis points, based on the evaluated mid price. Discount margin is the return earned in addition to the index underlying the floating rate security .Available only  for `corporate bonds` and `asset-backed security bonds`.. [optional]  # noqa: E501
            ask_discount_margin (float, none_type): The discount margin of a Floating Rate Note, denominated in basis points, based on the evaluated ask price. Discount margin is the return earned in addition to the index underlying the floating rate security. Available only  for `corporate bonds` and `asset-backed security bonds`.. [optional]  # noqa: E501
            bid_oas (float, none_type): The Option Adjusted Spread (OAS), based on the bid price. OAS is the flat spread which has to be added to the treasury yield curve in a pricing model (that accounts for embedded options) to discount a security payment to match its market price. Available only  for `corporate bonds`. [optional]  # noqa: E501
            mid_oas (float, none_type): The Option Adjusted Spread (OAS), based on the mid price. OAS is the flat spread which has to be added to the treasury yield curve in a pricing model (that accounts for embedded options) to discount a security payment to match its market price .Available only  for `corporate bonds` and `asset-backed security bonds`.. [optional]  # noqa: E501
            ask_oas (float, none_type): The Option Adjusted Spread (OAS), based on the ask price. OAS is the flat spread which has to be added to the treasury yield curve in a pricing model (that accounts for embedded options) to discount a security payment to match its market price. Available only  for `corporate bonds`. [optional]  # noqa: E501
            bid_asset_swap_spread (float, none_type): The bid asset swap spread in the currency of the instrument. Asset Swap Spread is the difference between the yield of an instrument and the LIBOR curve .Available only  for `corporate bonds` and `asset-backed security bonds`.. [optional]  # noqa: E501
            mid_asset_swap_spread (float, none_type): The mid asset swap spread in the currency of the instrument. Asset Swap Spread is the difference between the yield of an instrument and the LIBOR curve .Available only  for `corporate bonds`.. [optional]  # noqa: E501
            ask_asset_swap_spread (float, none_type): The ask asset swap spread in the currency of the instrument. Asset Swap Spread is the difference between the yield of an instrument and the LIBOR curve .Available only  for `corporate bonds`.. [optional]  # noqa: E501
            bid_z_spread (float, none_type): The bid Z spread of the instrument, based on the bid price. Z spread is the constant spread that will make the price of an instrument equal to the present value of its cash flows, when added to the yield at each point on the spot rate treasury curve, where a cash flow is received. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            mid_z_spread (float, none_type): The bid Z spread of the instrument, based on the mid price. Z spread is the constant spread that will make the price of an instrument equal to the present value of its cash flows, when added to the yield at each point on the spot rate treasury curve, where a cash flow is received .Available only  for `corporate bonds`.. [optional]  # noqa: E501
            ask_z_spread (float, none_type): The bid Z spread of the instrument, based on the ask price. Z spread is the constant spread that will make the price of an instrument equal to the present value of its cash flows, when added to the yield at each point on the spot rate treasury curve, where a cash flow is received .Available only  for `corporate bonds`.. [optional]  # noqa: E501
            bid_g_spread (float, none_type): The G spread of the instrument, based on the bid price. G spread is the difference between the yield to maturity of the bond and the linearly interpolated yield to the same maturity on an appropriate government curve. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            mid_g_spread (float, none_type): The G spread of the instrument, based on the mid price. G spread is the difference between the yield to maturity of the bond and the linearly interpolated yield to the same maturity on an appropriate government curve. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            ask_g_spread (float, none_type): The G spread of the instrument, based on the ask price. G spread is the difference between the yield to maturity of the bond and the linearly interpolated yield to the same maturity on an appropriate government curve. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            bid_yield_spreadv_benchmark (float, none_type): The spread of the instrument bid yield against the assigned benchmark bid yield. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            mid_yield_spreadv_benchmark (float, none_type): The spread of the instrument mid yield against the assigned benchmark mid yield. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            ask_yield_spreadv_benchmark (float, none_type): The spread of the instrument ask yield against the assigned benchmark ask yield. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            bid_ask_price_spread (float, none_type): The difference between the ask price and the bid price.. [optional]  # noqa: E501
            bid_ask_yield_spread (float, none_type): The difference between the ask yield and bid yield .Available only  for `corporate bonds`.. [optional]  # noqa: E501
            bid_stw_spread (float, none_type): The difference, in terms of spread, between the bid yield to worst and the yield to maturity of the treasury bond with the closest maturity to the yieldToWorstDate. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            mid_i_spread (float, none_type): The I spread of the bond, based on the mid price. I spread is the difference between the yield to maturity of the bond and the linearly interpolated yield to the same maturity on an appropriate reference curve. Available only  for `corporate bonds`.. [optional]  # noqa: E501
            mid_wal_treasury_spread (float, none_type): The value of Mid Spread to treasuries at same WAL of the bond. Available only  for `asset-backed security bonds`.. [optional]  # noqa: E501
            mid_edsf_spread (float, none_type): The mid spread to the Euro Dollar Synthetic Futures(EDSF) curve used in evaluated price of the instrument. Available only  for `asset-backed security bonds`.. [optional]  # noqa: E501
            treasury_swap_spread (float, none_type): Swap spread to treasuries for same maturity of the treasury bond and swap. Available only  for `asset-backed security bonds`.. [optional]  # noqa: E501
            mid_swap_spread (float, none_type): The mid spread to swaps .Available only  for `asset-backed security bonds`.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
