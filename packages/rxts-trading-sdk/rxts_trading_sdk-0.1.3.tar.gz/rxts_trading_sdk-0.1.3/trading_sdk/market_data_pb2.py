# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: market_data.proto
# Protobuf Python Version: 5.26.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2
from google.protobuf import descriptor_pb2 as google_dot_protobuf_dot_descriptor__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x11market_data.proto\x12\x11tobus.market_data\x1a\x1fgoogle/protobuf/timestamp.proto\x1a google/protobuf/descriptor.proto\")\n\x13RtnMarketCloseField\x12\x12\n\ntrade_date\x18\x01 \x01(\x05\"(\n\x12RtnMarketOpenField\x12\x12\n\ntrade_date\x18\x01 \x01(\x05\">\n\x1bRtnSubscriptionSuccessField\x12\x0e\n\x06symbol\x18\x01 \x01(\t\x12\x0f\n\x07success\x18\x02 \x01(\x08\"\xb9\x03\n\x18SecuInstrumentStaticInfo\x12\x0e\n\x06symbol\x18\x02 \x01(\t\x12\x17\n\x0finstrument_name\x18\x03 \x01(\t\x12:\n\rsecurity_type\x18\x04 \x01(\x0e\x32#.tobus.market_data.SecurityTypeEnum\x12\x17\n\x0fpre_close_price\x18\x05 \x01(\x01\x12\x19\n\x11upper_limit_price\x18\x06 \x01(\x01\x12\x19\n\x11lower_limit_price\x18\x07 \x01(\x01\x12\x12\n\nprice_tick\x18\x08 \x01(\x01\x12\x17\n\x0f\x62uy_volume_unit\x18\t \x01(\x05\x12\x18\n\x10sell_volume_unit\x18\n \x01(\x05\x12\x12\n\ntrade_date\x18\x0b \x01(\x05\x12\x41\n\x11sub_security_type\x18\x0c \x01(\x0e\x32&.tobus.market_data.SubSecurityTypeEnum\x12\x39\n\x0f\x62ond_trade_info\x18\r \x03(\x0b\x32 .tobus.market_data.BondTradeInfo\x12\x10\n\x08rsv_flag\x18\x0e \x01(\x03\"\xfd\r\n\x13SecuDepthMarketData\x12\x1a\n\x06symbol\x18\x02 \x01(\tB\n\x82\xb5\x18\x06Symbol\x12!\n\nlast_price\x18\x03 \x01(\x01\x42\r\x82\xb5\x18\tLastPrice\x12\x17\n\x0fpre_close_price\x18\x04 \x01(\x01\x12\x12\n\nopen_price\x18\x05 \x01(\x01\x12\x12\n\nhigh_price\x18\x06 \x01(\x01\x12\x11\n\tlow_price\x18\x07 \x01(\x01\x12\x13\n\x0b\x63lose_price\x18\x08 \x01(\x01\x12&\n\x11upper_limit_price\x18\t \x01(\x01\x42\x0b\x82\xb5\x18\x07HighPrc\x12%\n\x11lower_limit_price\x18\n \x01(\x01\x42\n\x82\xb5\x18\x06LowPrc\x12\x12\n\ntrade_date\x18\x0b \x01(\x05\x12!\n\x0bupdate_time\x18\x0c \x01(\x05\x42\x0c\x82\xb5\x18\x08\x45xchTime\x12\'\n\x0ctrade_volume\x18\r \x01(\x03\x42\x11\x82\xb5\x18\rTotalTradeVol\x12\x15\n\rtrade_balance\x18\x0e \x01(\x01\x12\x15\n\raverage_price\x18\x0f \x01(\x01\x12\x1f\n\tbid_price\x18\x10 \x03(\x01\x42\x0c\x82\xb5\x18\x08\x42idPrice\x12\x1f\n\task_price\x18\x11 \x03(\x01\x42\x0c\x82\xb5\x18\x08\x41skPrice\x12\x1f\n\nbid_volume\x18\x12 \x03(\x03\x42\x0b\x82\xb5\x18\x07\x42idSize\x12\x1f\n\nask_volume\x18\x13 \x03(\x03\x42\x0b\x82\xb5\x18\x07\x41skSize\x12\x12\n\ntrades_num\x18\x14 \x01(\x03\x12M\n\x17instrument_trade_status\x18\x15 \x01(\x0e\x32,.tobus.market_data.InstrumentTradeStatusEnum\x12\x18\n\x10total_bid_volume\x18\x16 \x01(\x03\x12\x18\n\x10total_ask_volume\x18\x17 \x01(\x03\x12\x14\n\x0cma_bid_price\x18\x18 \x01(\x01\x12\x14\n\x0cma_ask_price\x18\x19 \x01(\x01\x12\x19\n\x11ma_bond_bid_price\x18\x1a \x01(\x01\x12\x19\n\x11ma_bond_ask_price\x18\x1b \x01(\x01\x12\x19\n\x11yield_to_maturity\x18\x1c \x01(\x01\x12\x0c\n\x04iopv\x18\x1d \x01(\x01\x12\x15\n\retf_buy_count\x18\x1e \x01(\x05\x12\x16\n\x0e\x65tf_sell_count\x18\x1f \x01(\x05\x12\x16\n\x0e\x65tf_buy_volume\x18  \x01(\x03\x12\x17\n\x0f\x65tf_buy_balance\x18! \x01(\x01\x12\x17\n\x0f\x65tf_sell_volume\x18\" \x01(\x03\x12\x18\n\x10\x65tf_sell_balance\x18# \x01(\x01\x12!\n\x19total_warrant_exec_volume\x18$ \x01(\x03\x12\x1b\n\x13warrant_lower_price\x18% \x01(\x01\x12\x1b\n\x13warrant_upper_price\x18& \x01(\x01\x12\x16\n\x0e\x63\x61ncel_buy_num\x18\' \x01(\x05\x12\x17\n\x0f\x63\x61ncel_sell_num\x18( \x01(\x05\x12\x19\n\x11\x63\x61ncel_buy_volume\x18) \x01(\x03\x12\x1a\n\x12\x63\x61ncel_sell_volume\x18* \x01(\x03\x12\x18\n\x10\x63\x61ncel_buy_value\x18+ \x01(\x01\x12\x19\n\x11\x63\x61ncel_sell_value\x18, \x01(\x01\x12\x15\n\rtotal_buy_num\x18- \x01(\x05\x12\x16\n\x0etotal_sell_num\x18. \x01(\x05\x12\x1a\n\x12\x64uration_after_buy\x18/ \x01(\x05\x12\x1b\n\x13\x64uration_after_sell\x18\x30 \x01(\x05\x12\x16\n\x0e\x62id_orders_num\x18\x31 \x01(\x05\x12\x16\n\x0e\x61sk_orders_num\x18\x32 \x01(\x05\x12\x10\n\x08pre_iopv\x18\x33 \x01(\x01\x12\x12\n\nchannel_no\x18\x34 \x01(\x05\x12\x1f\n\x17\x62ond_last_auction_price\x18\x35 \x01(\x01\x12\x1b\n\x13\x62ond_auction_volume\x18\x36 \x01(\x03\x12\x1c\n\x14\x62ond_auction_balance\x18\x37 \x01(\x01\x12@\n\x14\x62ond_last_trade_type\x18\x38 \x01(\x0e\x32\".tobus.market_data.BondTrdTypeEnum\x12G\n\x11\x62ond_trade_status\x18\x39 \x03(\x0e\x32,.tobus.market_data.InstrumentTradeStatusEnum\x12\n\n\x02r1\x18: \x01(\x0c\x12\x33\n\x0flocal_recv_time\x18\x64 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12\x13\n\x0bsequence_no\x18\x65 \x01(\x03\x12\x12\n\tis_warmup\x18\xf4\x03 \x01(\x08\x12\x1f\n\x08quantity\x18\xc8\x01 \x01(\x03\x42\x0c\x82\xb5\x18\x08Quantity\"\xa5\x04\n\x16TransactionEntrustData\x12\x1a\n\x06symbol\x18\x02 \x01(\tB\n\x82\xb5\x18\x06Symbol\x12\x34\n\ntrans_flag\x18\x03 \x01(\x0e\x32 .tobus.market_data.TransFlagEnum\x12\x0e\n\x06seq_no\x18\x04 \x01(\x03\x12\x12\n\nchannel_no\x18\x05 \x01(\x05\x12\x12\n\ntrade_date\x18\x06 \x01(\x05\x12\x1f\n\rtransact_time\x18\x07 \x01(\x05\x42\x08\x82\xb5\x18\x04Time\x12\x1e\n\x0border_price\x18\x08 \x01(\x01\x42\t\x82\xb5\x18\x05Price\x12 \n\x0corder_volume\x18\t \x01(\x03\x42\n\x82\xb5\x18\x06Volume\x12>\n\norder_side\x18\n \x01(\x0e\x32 .tobus.market_data.DirectionEnumB\x08\x82\xb5\x18\x04Side\x12\x38\n\norder_type\x18\x0b \x01(\x0e\x32$.tobus.market_data.OrdActionTypeEnum\x12:\n\x0btick_status\x18\x0c \x01(\x0e\x32%.tobus.market_data.TickStatusFlagEnum\x12\x1d\n\x08order_id\x18\r \x01(\x03\x42\x0b\x82\xb5\x18\x07OrderNo\x12\x1f\n\tbiz_index\x18\x0e \x01(\x03\x42\x0c\x82\xb5\x18\x08\x42izIndex\x12\x14\n\x0ctrade_volume\x18\x0f \x01(\x03\x12\x12\n\tis_warmup\x18\xf4\x03 \x01(\x08\"\x8f\x04\n\x14TransactionTradeData\x12\x1a\n\x06symbol\x18\x02 \x01(\tB\n\x82\xb5\x18\x06Symbol\x12\x34\n\ntrans_flag\x18\x03 \x01(\x0e\x32 .tobus.market_data.TransFlagEnum\x12\x0e\n\x06seq_no\x18\x04 \x01(\x03\x12\x12\n\nchannel_no\x18\x05 \x01(\x05\x12\x12\n\ntrade_date\x18\x06 \x01(\x05\x12$\n\rtransact_time\x18\x07 \x01(\x05\x42\r\x82\xb5\x18\tTradeTime\x12#\n\x0btrade_price\x18\x08 \x01(\x01\x42\x0e\x82\xb5\x18\nTradePrice\x12%\n\x0ctrade_volume\x18\t \x01(\x03\x42\x0f\x82\xb5\x18\x0bTradeVolume\x12\x13\n\x0btrade_money\x18\n \x01(\x01\x12$\n\x0ctrade_buy_no\x18\x0b \x01(\x03\x42\x0e\x82\xb5\x18\nBidOrderNo\x12%\n\rtrade_sell_no\x18\x0c \x01(\x03\x42\x0e\x82\xb5\x18\nAskOrderNo\x12<\n\ntrade_type\x18\r \x01(\x0e\x32\x1e.tobus.market_data.TrdTypeEnumB\x08\x82\xb5\x18\x04Side\x12\x1f\n\tbiz_index\x18\x0e \x01(\x03\x42\x0c\x82\xb5\x18\x08\x42izIndex\x12\x12\n\tis_warmup\x18\xf4\x03 \x01(\x08\x12&\n\x0ctrade_status\x18\xc8\x01 \x01(\tB\x0f\x82\xb5\x18\x0bTradeStatus\"\xf8\x02\n\x17SecuDepthMarketDataPlus\x12\x12\n\nchannel_no\x18\x01 \x01(\x05\x12\x0e\n\x06symbol\x18\x02 \x01(\t\x12\x12\n\nlast_price\x18\x04 \x01(\x01\x12\x12\n\nopen_price\x18\x05 \x01(\x01\x12\x12\n\nhigh_price\x18\x06 \x01(\x01\x12\x11\n\tlow_price\x18\x07 \x01(\x01\x12\x12\n\ntrade_date\x18\x08 \x01(\x05\x12\x13\n\x0bupdate_time\x18\t \x01(\x05\x12\x14\n\x0ctrade_volume\x18\n \x01(\x03\x12\x15\n\rtrade_balance\x18\x0b \x01(\x01\x12\x18\n\x10total_bid_volume\x18\x0c \x01(\x03\x12\x18\n\x10total_ask_volume\x18\r \x01(\x03\x12\x12\n\ntrades_num\x18\x0e \x01(\x03\x12\x11\n\tbid_price\x18\x0f \x03(\x01\x12\x12\n\nbid_volume\x18\x10 \x03(\x03\x12\x11\n\task_price\x18\x11 \x03(\x01\x12\x12\n\nask_volume\x18\x12 \x03(\x03\"\xf9\x04\n\x13\x46utuDepthMarketData\x12\x13\n\x0btrading_day\x18\x01 \x01(\x05\x12\x0e\n\x06symbol\x18\x02 \x01(\t\x12\x12\n\nlast_price\x18\x04 \x01(\x01\x12\x1c\n\x14pre_settlement_price\x18\x05 \x01(\x01\x12\x17\n\x0fpre_close_price\x18\x06 \x01(\x01\x12\x12\n\nopen_price\x18\x07 \x01(\x01\x12\x15\n\rhighest_price\x18\x08 \x01(\x01\x12\x14\n\x0clowest_price\x18\t \x01(\x01\x12\x14\n\x0ctrade_volume\x18\n \x01(\x03\x12\x15\n\rtrade_balance\x18\x0b \x01(\x01\x12\x15\n\ropen_interest\x18\x0c \x01(\x03\x12\x13\n\x0b\x63lose_price\x18\r \x01(\x01\x12\x18\n\x10settlement_price\x18\x0e \x01(\x01\x12\x19\n\x11upper_limit_price\x18\x0f \x01(\x01\x12\x19\n\x11lower_limit_price\x18\x10 \x01(\x01\x12\x13\n\x0bupdate_time\x18\x11 \x01(\x05\x12\x11\n\tbid_price\x18\x12 \x03(\x01\x12\x11\n\task_price\x18\x13 \x03(\x01\x12\x12\n\nbid_volume\x18\x14 \x03(\x03\x12\x12\n\nask_volume\x18\x15 \x03(\x03\x12\x15\n\raverage_price\x18\x16 \x01(\x01\x12\x19\n\x11pre_open_interest\x18\x17 \x01(\x03\x12M\n\x17instrument_trade_status\x18\x18 \x01(\x0e\x32,.tobus.market_data.InstrumentTradeStatusEnum\x12\x11\n\tpre_delta\x18\x19 \x01(\x01\x12\x11\n\tcur_delta\x18\x1a \x01(\x01\"\xa9\x02\n\x18\x46utuInstrumentStaticInfo\x12\x0e\n\x06symbol\x18\x02 \x01(\t\x12\x17\n\x0finstrument_name\x18\x03 \x01(\t\x12:\n\rsecurity_type\x18\x04 \x01(\x0e\x32#.tobus.market_data.SecurityTypeEnum\x12\x17\n\x0fpre_close_price\x18\x05 \x01(\x01\x12\x19\n\x11upper_limit_price\x18\x06 \x01(\x01\x12\x19\n\x11lower_limit_price\x18\x07 \x01(\x01\x12\x12\n\nprice_tick\x18\x08 \x01(\x01\x12\x17\n\x0f\x62uy_volume_unit\x18\t \x01(\x05\x12\x18\n\x10sell_volume_unit\x18\n \x01(\x05\x12\x12\n\ntrade_date\x18\x0b \x01(\x05\"E\n\rBondTradeInfo\x12\x19\n\x11upper_limit_price\x18\x01 \x01(\x01\x12\x19\n\x11lower_limit_price\x18\x02 \x01(\x01\"\x8a\x07\n\x17OptInstrumentStaticInfo\x12\x0e\n\x06symbol\x18\x02 \x01(\t\x12\x1b\n\x13instrument_trade_id\x18\x03 \x01(\t\x12\x17\n\x0finstrument_name\x18\x04 \x01(\t\x12:\n\rsecurity_type\x18\x05 \x01(\x0e\x32#.tobus.market_data.SecurityTypeEnum\x12\x1b\n\x13underlying_instr_id\x18\x06 \x01(\t\x12\x38\n\x0coptions_type\x18\x07 \x01(\x0e\x32\".tobus.market_data.OptionsTypeEnum\x12<\n\x0e\x65xercise_style\x18\x08 \x01(\x0e\x32$.tobus.market_data.ExerciseStyleEnum\x12 \n\x18\x63ontract_multiplier_unit\x18\t \x01(\x03\x12\x16\n\x0e\x65xercise_price\x18\n \x01(\x01\x12\x12\n\nstart_date\x18\x0b \x01(\x05\x12\x10\n\x08\x65nd_date\x18\x0c \x01(\x05\x12\x15\n\rexercise_date\x18\r \x01(\x05\x12\x15\n\rdelivery_date\x18\x0e \x01(\x05\x12\x13\n\x0b\x65xpire_date\x18\x0f \x01(\x05\x12\x1b\n\x13total_long_position\x18\x10 \x01(\x03\x12\x17\n\x0fpre_close_price\x18\x11 \x01(\x01\x12\x17\n\x0fpre_settl_price\x18\x12 \x01(\x01\x12\x1e\n\x16underlying_close_price\x18\x13 \x01(\x01\x12\x19\n\x11upper_limit_price\x18\x14 \x01(\x01\x12\x19\n\x11lower_limit_price\x18\x15 \x01(\x01\x12\x13\n\x0bmargin_unit\x18\x16 \x01(\x01\x12\x1b\n\x13margin_ratio_param1\x18\x17 \x01(\x01\x12\x1b\n\x13margin_ratio_param2\x18\x18 \x01(\x01\x12\x17\n\x0fvolume_multiple\x18\x19 \x01(\x03\x12\x1e\n\x16min_limit_order_volume\x18\x1a \x01(\x03\x12\x1e\n\x16max_limit_order_volume\x18\x1b \x01(\x03\x12\x1f\n\x17min_market_order_volume\x18\x1c \x01(\x03\x12\x1f\n\x17max_market_order_volume\x18\x1d \x01(\x03\x12\x12\n\nprice_tick\x18\x1e \x01(\x01\x12\x12\n\ntrade_date\x18\x1f \x01(\x05\"\x9c\x06\n\x12OptDepthMarketData\x12\x0e\n\x06symbol\x18\x02 \x01(\t\x12\x12\n\nlast_price\x18\x03 \x01(\x01\x12\x17\n\x0fpre_close_price\x18\x04 \x01(\x01\x12\x12\n\nopen_price\x18\x05 \x01(\x01\x12\x12\n\nhigh_price\x18\x06 \x01(\x01\x12\x11\n\tlow_price\x18\x07 \x01(\x01\x12\x13\n\x0b\x63lose_price\x18\x08 \x01(\x01\x12\x19\n\x11pre_open_interest\x18\t \x01(\x03\x12\x15\n\ropen_interest\x18\n \x01(\x03\x12\x1c\n\x14pre_settlement_price\x18\x0b \x01(\x01\x12\x18\n\x10settlement_price\x18\x0c \x01(\x01\x12\x19\n\x11upper_limit_price\x18\r \x01(\x01\x12\x19\n\x11lower_limit_price\x18\x0e \x01(\x01\x12\x11\n\tpre_delta\x18\x0f \x01(\x01\x12\x11\n\tcur_delta\x18\x10 \x01(\x01\x12\x12\n\ntrade_date\x18\x11 \x01(\x05\x12\x13\n\x0bupdate_time\x18\x12 \x01(\x05\x12\x14\n\x0ctrade_volume\x18\x13 \x01(\x03\x12\x15\n\rtrade_balance\x18\x14 \x01(\x01\x12\x15\n\raverage_price\x18\x15 \x01(\x01\x12\x11\n\tbid_price\x18\x16 \x03(\x01\x12\x11\n\task_price\x18\x17 \x03(\x01\x12\x12\n\nbid_volume\x18\x18 \x03(\x03\x12\x12\n\nask_volume\x18\x19 \x03(\x03\x12\x12\n\ntrades_num\x18\x1a \x01(\x03\x12M\n\x17instrument_trade_status\x18\x1b \x01(\x0e\x32,.tobus.market_data.InstrumentTradeStatusEnum\x12\x18\n\x10open_restriction\x18\x1c \x01(\t\x12\x15\n\rauction_price\x18\x1d \x01(\x01\x12\x16\n\x0e\x61uction_volume\x18\x1e \x01(\x03\x12\x19\n\x11last_enquiry_time\x18\x1f \x01(\x05\x12\x11\n\tleave_qty\x18  \x01(\x03\x12\x12\n\nchannel_no\x18! \x01(\x05\x12\n\n\x02r1\x18\" \x01(\x0c\"\xde\x01\n\x17HktInstrumentStaticInfo\x12\x0e\n\x06symbol\x18\x02 \x01(\t\x12\x17\n\x0finstrument_name\x18\x03 \x01(\t\x12:\n\rsecurity_type\x18\x04 \x01(\x0e\x32#.tobus.market_data.SecurityTypeEnum\x12\x17\n\x0fpre_close_price\x18\x05 \x01(\x01\x12\x17\n\x0f\x62uy_volume_unit\x18\x06 \x01(\x05\x12\x18\n\x10sell_volume_unit\x18\x07 \x01(\x05\x12\x12\n\ntrade_date\x18\x08 \x01(\x05\"\xc2\x05\n\x12HktDepthMarketData\x12\x0e\n\x06symbol\x18\x02 \x01(\t\x12\x12\n\nlast_price\x18\x03 \x01(\x01\x12\x17\n\x0fpre_close_price\x18\x04 \x01(\x01\x12\x12\n\nhigh_price\x18\x05 \x01(\x01\x12\x11\n\tlow_price\x18\x06 \x01(\x01\x12\x15\n\rnominal_price\x18\x07 \x01(\x01\x12\x12\n\ntrade_date\x18\x08 \x01(\x05\x12\x13\n\x0bupdate_time\x18\t \x01(\x05\x12\x14\n\x0ctrade_volume\x18\n \x01(\x03\x12\x15\n\rtrade_balance\x18\x0b \x01(\x01\x12\x11\n\tbid_price\x18\x0c \x03(\x01\x12\x11\n\task_price\x18\r \x03(\x01\x12\x12\n\nbid_volume\x18\x0e \x03(\x03\x12\x12\n\nask_volume\x18\x0f \x03(\x03\x12M\n\x17instrument_trade_status\x18\x10 \x01(\x0e\x32,.tobus.market_data.InstrumentTradeStatusEnum\x12G\n\x19\x62oard_lot_order_bid_limit\x18\x11 \x01(\x0e\x32$.tobus.market_data.HktTradeLimitEnum\x12G\n\x19\x62oard_lot_order_ask_limit\x18\x12 \x01(\x0e\x32$.tobus.market_data.HktTradeLimitEnum\x12\x45\n\x17odd_lot_order_bid_limit\x18\x13 \x01(\x0e\x32$.tobus.market_data.HktTradeLimitEnum\x12\x45\n\x17odd_lot_order_ask_limit\x18\x14 \x01(\x0e\x32$.tobus.market_data.HktTradeLimitEnum\x12\x12\n\nchannel_no\x18\x15 \x01(\x05\x12\n\n\x02r1\x18\x16 \x01(\x0c\"\x9f\x04\n\x18\x42ondTransactionTradeData\x12\x0e\n\x06symbol\x18\x02 \x01(\t\x12\x12\n\ntrans_flag\x18\x03 \x01(\x05\x12\x0e\n\x06seq_no\x18\x04 \x01(\x03\x12\x12\n\nchannel_no\x18\x05 \x01(\x05\x12\x12\n\ntrade_date\x18\x06 \x01(\x05\x12\x15\n\rtransact_time\x18\x07 \x01(\x05\x12\x13\n\x0btrade_price\x18\x08 \x01(\x01\x12\x14\n\x0ctrade_volume\x18\t \x01(\x03\x12\x14\n\x0ctrade_buy_no\x18\n \x01(\x03\x12\x15\n\rtrade_sell_no\x18\x0b \x01(\x03\x12\x32\n\ntrade_type\x18\x0c \x01(\x0e\x32\x1e.tobus.market_data.TrdTypeEnum\x12;\n\x0f\x62ond_trade_type\x18\r \x01(\x0e\x32\".tobus.market_data.BondTrdTypeEnum\x12\x15\n\rsettle_period\x18\x0e \x01(\r\x12\x36\n\x0bsettle_type\x18\x0f \x01(\x0e\x32!.tobus.market_data.SettleTypeEnum\x12\x1a\n\x12secondary_order_id\x18\x10 \x01(\t\x12\x46\n\x12\x62id_exec_inst_type\x18\x11 \x01(\x0e\x32*.tobus.market_data.BondBidExecInstTypeEnum\x12\x14\n\x0cmargin_price\x18\x12 \x01(\x01\"\xad\x06\n\x1a\x42ondTransactionEntrustData\x12\x0e\n\x06symbol\x18\x02 \x01(\t\x12\x12\n\ntrans_flag\x18\x03 \x01(\x05\x12\x0e\n\x06seq_no\x18\x04 \x01(\x03\x12\x12\n\nchannel_no\x18\x05 \x01(\x05\x12\x12\n\ntrade_date\x18\x06 \x01(\x05\x12\x15\n\rtransact_time\x18\x07 \x01(\x05\x12\x13\n\x0border_price\x18\x08 \x01(\x01\x12\x14\n\x0corder_volume\x18\t \x01(\x03\x12\x34\n\norder_side\x18\n \x01(\x0e\x32 .tobus.market_data.DirectionEnum\x12\x38\n\norder_type\x18\x0b \x01(\x0e\x32$.tobus.market_data.OrdActionTypeEnum\x12;\n\x0f\x62ond_trade_type\x18\x0c \x01(\x0e\x32\".tobus.market_data.BondTrdTypeEnum\x12\x14\n\x0csettl_period\x18\r \x01(\r\x12\x12\n\nsettl_type\x18\x0e \x01(\r\x12\x10\n\x08quote_id\x18\x0f \x01(\t\x12\x11\n\tmember_id\x18\x10 \x01(\t\x12:\n\rinvestor_type\x18\x11 \x01(\x0e\x32#.tobus.market_data.InvestorTypeEnum\x12\x13\n\x0binvestor_id\x18\x12 \x01(\t\x12\x13\n\x0btrader_code\x18\x13 \x01(\t\x12?\n\x0e\x62id_trans_type\x18\x14 \x01(\x0e\x32\'.tobus.market_data.BondBidTransTypeEnum\x12\x46\n\x12\x62id_exec_inst_type\x18\x15 \x01(\x0e\x32*.tobus.market_data.BondBidExecInstTypeEnum\x12\x1a\n\x12secondary_order_id\x18\x16 \x01(\t\x12\x0c\n\x04memo\x18\x17 \x01(\t\x12\x18\n\x10high_limit_price\x18\x18 \x01(\x01\x12\x19\n\x11lower_limit_price\x18\x19 \x01(\x01\x12\x0f\n\x07min_qty\x18\x1a \x01(\x03\x12\x16\n\x0e\x62id_trade_date\x18\x1b \x01(\x05\"\xfa\x0b\n\x08\x45nvelope\x12\x38\n\x0cmessage_type\x18\x01 \x01(\x0e\x32\".tobus.market_data.MessageTypeEnum\x12-\n\ttimestamp\x18\x02 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12\x0e\n\x06source\x18\x03 \x01(\t\x12\x10\n\x08sequence\x18\x04 \x01(\x03\x12I\n\x16transaction_trade_data\x18\n \x01(\x0b\x32\'.tobus.market_data.TransactionTradeDataH\x00\x12M\n\x18transaction_entrust_data\x18\x0b \x01(\x0b\x32).tobus.market_data.TransactionEntrustDataH\x00\x12H\n\x16\x66utu_depth_market_data\x18\x0c \x01(\x0b\x32&.tobus.market_data.FutuDepthMarketDataH\x00\x12R\n\x1b\x66utu_instrument_static_info\x18\r \x01(\x0b\x32+.tobus.market_data.FutuInstrumentStaticInfoH\x00\x12H\n\x16secu_depth_market_data\x18\x0e \x01(\x0b\x32&.tobus.market_data.SecuDepthMarketDataH\x00\x12Q\n\x1bsecu_depth_market_data_plus\x18\x0f \x01(\x0b\x32*.tobus.market_data.SecuDepthMarketDataPlusH\x00\x12R\n\x1bsecu_instrument_static_info\x18\x10 \x01(\x0b\x32+.tobus.market_data.SecuInstrumentStaticInfoH\x00\x12\x46\n\x15opt_depth_market_data\x18\x11 \x01(\x0b\x32%.tobus.market_data.OptDepthMarketDataH\x00\x12P\n\x1aopt_instrument_static_info\x18\x12 \x01(\x0b\x32*.tobus.market_data.OptInstrumentStaticInfoH\x00\x12\x46\n\x15hkt_depth_market_data\x18\x13 \x01(\x0b\x32%.tobus.market_data.HktDepthMarketDataH\x00\x12P\n\x1ahkt_instrument_static_info\x18\x14 \x01(\x0b\x32*.tobus.market_data.HktInstrumentStaticInfoH\x00\x12R\n\x1b\x62ond_transaction_trade_data\x18\x15 \x01(\x0b\x32+.tobus.market_data.BondTransactionTradeDataH\x00\x12V\n\x1d\x62ond_transaction_entrust_data\x18\x16 \x01(\x0b\x32-.tobus.market_data.BondTransactionEntrustDataH\x00\x12\x43\n\x10rtn_market_close\x18\xe3\x04 \x01(\x0b\x32&.tobus.market_data.RtnMarketCloseFieldH\x00\x12\x41\n\x0frtn_market_open\x18\xe4\x04 \x01(\x0b\x32%.tobus.market_data.RtnMarketOpenFieldH\x00\x12S\n\x18rtn_subscription_success\x18\xe5\x04 \x01(\x0b\x32..tobus.market_data.RtnSubscriptionSuccessFieldH\x00\x12?\n\nextensions\x18\x64 \x03(\x0b\x32+.tobus.market_data.Envelope.ExtensionsEntry\x1a\x31\n\x0f\x45xtensionsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x42\t\n\x07payload*\xb0\x02\n\x19InstrumentTradeStatusEnum\x12\x11\n\rINSTS_UNKNOWN\x10\x00\x12\x0e\n\nINSTS_Init\x10S\x12\x15\n\x11INSTS_CallAuction\x10\x43\x12\x12\n\x0eINSTS_Trinding\x10T\x12\x0f\n\x0bINSTS_Pause\x10\x42\x12\x0f\n\x0bINSTS_Close\x10\x45\x12\x1c\n\x18INSTS_ClosingCallAuction\x10U\x12\x10\n\x0cINSTS_Fusing\x10V\x12\x0e\n\nINSTS_Halt\x10P\x12\x14\n\x10INSTS_HaltAllDay\x10\x31\x12\x1b\n\x17INSTS_FuseToCallAuction\x10M\x12\x15\n\x11INSTS_FuseToClose\x10N\x12\x19\n\x15INSTS_AfterCloseTrade\x10\x41*C\n\rTransFlagEnum\x12\x10\n\x0cTRSF_UnKnown\x10\x00\x12\x0e\n\nTRSF_Alone\x10\x01\x12\x10\n\x0cTRSF_Unified\x10\x02*\x82\x01\n\x0bTrdTypeEnum\x12\x13\n\x0fTRDTRDT_UNKNOWN\x10\x00\x12\x0f\n\x0bTRDTRDT_BUY\x10\x42\x12\x10\n\x0cTRDTRDT_SELL\x10S\x12\x15\n\x11TRDTRDT_UNKNOWN_N\x10N\x12\x12\n\x0eTRDTRDT_CANCEL\x10\x34\x12\x10\n\x0cTRDTRDT_DEAL\x10\x46*c\n\rDirectionEnum\x12\x11\n\rTSDIR_UNKNOWN\x10\x00\x12\r\n\tTSDIR_BUY\x10\x31\x12\x0e\n\nTSDIR_SELL\x10\x32\x12\x10\n\x0cTSDIR_BORROW\x10G\x12\x0e\n\nTSDIR_LOAN\x10\x46*\x8b\x01\n\x11OrdActionTypeEnum\x12\x10\n\x0cTORT_UNKNOWN\x10\x00\x12\x0f\n\x0bTORT_Market\x10\x31\x12\x0e\n\nTORT_Limit\x10\x32\x12\x13\n\x0fTORT_MarketSelf\x10U\x12\x0c\n\x08TORT_Add\x10\x41\x12\x0f\n\x0bTORT_Delete\x10\x44\x12\x0f\n\x0bTORT_Status\x10S*\x9a\x01\n\x12TickStatusFlagEnum\x12\x0f\n\x0bTSF_UNKNOWN\x10\x00\x12\x0b\n\x07TSF_ADD\x10\x31\x12\r\n\tTSF_START\x10\x32\x12\r\n\tTSF_OCALL\x10\x33\x12\r\n\tTSF_TRADE\x10\x34\x12\x0c\n\x08TSF_SUSP\x10\x35\x12\r\n\tTSF_CCALL\x10\x36\x12\r\n\tTSF_CLOSE\x10\x37\x12\r\n\tTSF_ENDTR\x10\x38*\x94\x01\n\x0f\x42ondTrdTypeEnum\x12\x0f\n\x0b\x42TT_UNKNOWN\x10\x00\x12\x0c\n\x08\x42TT_PPCJ\x10\x01\x12\x0c\n\x08\x42TT_XSCJ\x10\x02\x12\x0c\n\x08\x42TT_DJCJ\x10\x03\x12\x0c\n\x08\x42TT_XJCJ\x10\x04\x12\x0c\n\x08\x42TT_JMCJ\x10\x05\x12\x0c\n\x08\x42TT_YXSB\x10\x06\x12\x0c\n\x08\x42TT_PPDE\x10\x07\x12\x0e\n\nBTT_ZYPPCJ\x10\x08*W\n\x10InvestorTypeEnum\x12\x0f\n\x0bINT_UNKNOWN\x10\x00\x12\n\n\x06INT_ZY\x10\x01\x12\n\n\x06INT_ZG\x10\x02\x12\x0c\n\x08INT_JGJJ\x10\x03\x12\x0c\n\x08INT_GRJJ\x10\x04*\xbf\x01\n\x10SecurityTypeEnum\x12\x12\n\x0eSECT_ErrorType\x10\x00\x12\x10\n\x0cSECT_UnKnown\x10\x30\x12\x0e\n\nSECT_Stock\x10\x31\x12\x0e\n\nSECT_Index\x10\x32\x12\r\n\tSECT_Fund\x10\x33\x12\r\n\tSECT_Bond\x10\x34\x12\x0f\n\x0bSECT_Option\x10\x35\x12\x12\n\x0eSECT_ETFOption\x10\x36\x12\r\n\tSECT_FUTU\x10\x37\x12\x13\n\x0fSECT_FUTUOption\x10\x38*\xe1\x03\n\x13SubSecurityTypeEnum\x12\x10\n\x0cSSET_UnKnown\x10\x00\x12\x0e\n\nSSET_Index\x10\x01\x12\x0c\n\x08SSET_S_A\x10\x02\x12\x0c\n\x08SSET_S_B\x10\x03\x12\x0f\n\x0bSSET_S_Star\x10\x04\x12\x0e\n\nSSET_S_Gem\x10\x05\x12\x11\n\rSSET_S_Prefer\x10\x06\x12\x15\n\x11SSET_S_OtherStock\x10\x07\x12\x0f\n\x0bSSET_S_ZSZR\x10\x08\x12\x0f\n\x0bSSET_S_JJZR\x10\t\x12\x0f\n\x0bSSET_S_LWTS\x10\n\x12\x0f\n\x0bSSET_S_LXJJ\x10\x0b\x12\x0f\n\x0bSSET_S_QTZR\x10\x0c\x12\x0e\n\nSSET_F_ETF\x10\r\x12\x0e\n\nSSET_F_LOF\x10\x0e\x12\x0e\n\nSSET_F_CEF\x10\x0f\x12\r\n\tSSET_F_SF\x10\x10\x12\x0e\n\nSSET_F_OEF\x10\x11\x12\x10\n\x0cSSET_F_REITs\x10\x12\x12\x14\n\x10SSET_F_OtherFund\x10\x13\x12\x0e\n\nSSET_D_GBF\x10\x14\x12\x0e\n\nSSET_D_CBF\x10\x15\x12\x0e\n\nSSET_D_CPF\x10\x16\x12\x0e\n\nSSET_D_CCF\x10\x17\x12\x0f\n\x0bSSET_D_REPO\x10\x18\x12\x0e\n\nSSET_D_WIT\x10\x19\x12\x14\n\x10SSET_D_OtherBond\x10\x1a*b\n\x11MarketBizTypeEnum\x12\r\n\tMBT_Error\x10\x00\x12\x0f\n\x0bMBT_UnKnown\x10\x30\x12\r\n\tMBT_Stock\x10\x31\x12\x0e\n\nMBT_Option\x10\x32\x12\x0e\n\nMBT_Future\x10\x33*Q\n\x0fOptionsTypeEnum\x12\x11\n\rOPTST_UNKNOWN\x10\x00\x12\x15\n\x11OPTST_CallOptions\x10\x43\x12\x14\n\x10OPTST_PutOptions\x10P*[\n\x11\x45xerciseStyleEnum\x12\x10\n\x0c\x45XES_UNKNOWN\x10\x00\x12\x19\n\x15\x45XES_American_Options\x10\x41\x12\x19\n\x15\x45XES_European_Options\x10\x45*O\n\x0eSettleTypeEnum\x12\x15\n\x11SETTLTYPE_UNKNOWN\x10\x00\x12\x12\n\x0eSETTLTYPE_DBJE\x10g\x12\x12\n\x0eSETTLTYPE_ZBQE\x10h*\\\n\x17\x42ondBidExecInstTypeEnum\x12\x10\n\x0c\x42\x45IT_UNKNOWN\x10\x00\x12\r\n\tBEIT_DYZT\x10\x01\x12\x0f\n\x0b\x42\x45IT_DZTDYJ\x10\x02\x12\x0f\n\x0b\x42\x45IT_DZTDCJ\x10\x03*U\n\x14\x42ondBidTransTypeEnum\x12\x10\n\x0c\x42\x42TT_UNKNOWN\x10\x00\x12\r\n\tBBTT_YYSB\x10\x01\x12\r\n\tBBTT_FQSB\x10\x02\x12\r\n\tBBTT_YJSB\x10\x03*q\n\x14RebuildTransTypeEnum\x12\x0f\n\x0bRTT_UNKNOWN\x10\x00\x12\r\n\tRTT_Trade\x10\x31\x12\x0f\n\x0bRTT_Entrust\x10\x32\x12\x12\n\x0eRTT_BOND_Trade\x10\x33\x12\x14\n\x10RTT_BOND_Entrust\x10\x34*g\n\x11HktTradeLimitEnum\x12\x12\n\x0eHKTL_ErrorType\x10\x00\x12\x10\n\x0cHKTL_UNKNOWN\x10\x30\x12\x14\n\x10HKTL_ORDER_LIMIT\x10\x31\x12\x16\n\x12HKTL_ORDER_UNLIMIT\x10\x32*\xf5\x03\n\x0fMessageTypeEnum\x12\x0f\n\x0bMSG_UNKNOWN\x10\x00\x12\x1f\n\x1aMSG_SECU_DEPTH_MARKET_DATA\x10\xe9\x07\x12\x1c\n\x17MSG_TRANSACTION_ENTRUST\x10\xea\x07\x12\x1a\n\x15MSG_TRANSACTION_TRADE\x10\xeb\x07\x12\x15\n\x10MSG_SUBSCRIBE_OK\x10\xec\x07\x12\x1f\n\x1aMSG_FUTU_DEPTH_MARKET_DATA\x10\xed\x07\x12$\n\x1fMSG_FUTU_INSTRUMENT_STATIC_INFO\x10\xee\x07\x12$\n\x1fMSG_SECU_INSTRUMENT_STATIC_INFO\x10\xef\x07\x12\x1e\n\x19MSG_OPT_DEPTH_MARKET_DATA\x10\xf0\x07\x12#\n\x1eMSG_OPT_INSTRUMENT_STATIC_INFO\x10\xf1\x07\x12\x1e\n\x19MSG_HKT_DEPTH_MARKET_DATA\x10\xf2\x07\x12#\n\x1eMSG_HKT_INSTRUMENT_STATIC_INFO\x10\xf3\x07\x12\x1f\n\x1aMSG_BOND_TRANSACTION_TRADE\x10\xf4\x07\x12!\n\x1cMSG_BOND_TRANSACTION_ENTRUST\x10\xf5\x07\x12$\n\x1fMSG_SECU_DEPTH_MARKET_DATA_PLUS\x10\xf7\x07:.\n\x05\x61lias\x12\x1d.google.protobuf.FieldOptions\x18\xd0\x86\x03 \x01(\tb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'market_data_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  DESCRIPTOR._loaded_options = None
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['symbol']._loaded_options = None
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['symbol']._serialized_options = b'\202\265\030\006Symbol'
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['last_price']._loaded_options = None
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['last_price']._serialized_options = b'\202\265\030\tLastPrice'
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['upper_limit_price']._loaded_options = None
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['upper_limit_price']._serialized_options = b'\202\265\030\007HighPrc'
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['lower_limit_price']._loaded_options = None
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['lower_limit_price']._serialized_options = b'\202\265\030\006LowPrc'
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['update_time']._loaded_options = None
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['update_time']._serialized_options = b'\202\265\030\010ExchTime'
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['trade_volume']._loaded_options = None
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['trade_volume']._serialized_options = b'\202\265\030\rTotalTradeVol'
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['bid_price']._loaded_options = None
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['bid_price']._serialized_options = b'\202\265\030\010BidPrice'
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['ask_price']._loaded_options = None
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['ask_price']._serialized_options = b'\202\265\030\010AskPrice'
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['bid_volume']._loaded_options = None
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['bid_volume']._serialized_options = b'\202\265\030\007BidSize'
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['ask_volume']._loaded_options = None
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['ask_volume']._serialized_options = b'\202\265\030\007AskSize'
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['quantity']._loaded_options = None
  _globals['_SECUDEPTHMARKETDATA'].fields_by_name['quantity']._serialized_options = b'\202\265\030\010Quantity'
  _globals['_TRANSACTIONENTRUSTDATA'].fields_by_name['symbol']._loaded_options = None
  _globals['_TRANSACTIONENTRUSTDATA'].fields_by_name['symbol']._serialized_options = b'\202\265\030\006Symbol'
  _globals['_TRANSACTIONENTRUSTDATA'].fields_by_name['transact_time']._loaded_options = None
  _globals['_TRANSACTIONENTRUSTDATA'].fields_by_name['transact_time']._serialized_options = b'\202\265\030\004Time'
  _globals['_TRANSACTIONENTRUSTDATA'].fields_by_name['order_price']._loaded_options = None
  _globals['_TRANSACTIONENTRUSTDATA'].fields_by_name['order_price']._serialized_options = b'\202\265\030\005Price'
  _globals['_TRANSACTIONENTRUSTDATA'].fields_by_name['order_volume']._loaded_options = None
  _globals['_TRANSACTIONENTRUSTDATA'].fields_by_name['order_volume']._serialized_options = b'\202\265\030\006Volume'
  _globals['_TRANSACTIONENTRUSTDATA'].fields_by_name['order_side']._loaded_options = None
  _globals['_TRANSACTIONENTRUSTDATA'].fields_by_name['order_side']._serialized_options = b'\202\265\030\004Side'
  _globals['_TRANSACTIONENTRUSTDATA'].fields_by_name['order_id']._loaded_options = None
  _globals['_TRANSACTIONENTRUSTDATA'].fields_by_name['order_id']._serialized_options = b'\202\265\030\007OrderNo'
  _globals['_TRANSACTIONENTRUSTDATA'].fields_by_name['biz_index']._loaded_options = None
  _globals['_TRANSACTIONENTRUSTDATA'].fields_by_name['biz_index']._serialized_options = b'\202\265\030\010BizIndex'
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['symbol']._loaded_options = None
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['symbol']._serialized_options = b'\202\265\030\006Symbol'
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['transact_time']._loaded_options = None
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['transact_time']._serialized_options = b'\202\265\030\tTradeTime'
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['trade_price']._loaded_options = None
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['trade_price']._serialized_options = b'\202\265\030\nTradePrice'
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['trade_volume']._loaded_options = None
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['trade_volume']._serialized_options = b'\202\265\030\013TradeVolume'
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['trade_buy_no']._loaded_options = None
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['trade_buy_no']._serialized_options = b'\202\265\030\nBidOrderNo'
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['trade_sell_no']._loaded_options = None
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['trade_sell_no']._serialized_options = b'\202\265\030\nAskOrderNo'
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['trade_type']._loaded_options = None
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['trade_type']._serialized_options = b'\202\265\030\004Side'
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['biz_index']._loaded_options = None
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['biz_index']._serialized_options = b'\202\265\030\010BizIndex'
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['trade_status']._loaded_options = None
  _globals['_TRANSACTIONTRADEDATA'].fields_by_name['trade_status']._serialized_options = b'\202\265\030\013TradeStatus'
  _globals['_ENVELOPE_EXTENSIONSENTRY']._loaded_options = None
  _globals['_ENVELOPE_EXTENSIONSENTRY']._serialized_options = b'8\001'
  _globals['_INSTRUMENTTRADESTATUSENUM']._serialized_start=10498
  _globals['_INSTRUMENTTRADESTATUSENUM']._serialized_end=10802
  _globals['_TRANSFLAGENUM']._serialized_start=10804
  _globals['_TRANSFLAGENUM']._serialized_end=10871
  _globals['_TRDTYPEENUM']._serialized_start=10874
  _globals['_TRDTYPEENUM']._serialized_end=11004
  _globals['_DIRECTIONENUM']._serialized_start=11006
  _globals['_DIRECTIONENUM']._serialized_end=11105
  _globals['_ORDACTIONTYPEENUM']._serialized_start=11108
  _globals['_ORDACTIONTYPEENUM']._serialized_end=11247
  _globals['_TICKSTATUSFLAGENUM']._serialized_start=11250
  _globals['_TICKSTATUSFLAGENUM']._serialized_end=11404
  _globals['_BONDTRDTYPEENUM']._serialized_start=11407
  _globals['_BONDTRDTYPEENUM']._serialized_end=11555
  _globals['_INVESTORTYPEENUM']._serialized_start=11557
  _globals['_INVESTORTYPEENUM']._serialized_end=11644
  _globals['_SECURITYTYPEENUM']._serialized_start=11647
  _globals['_SECURITYTYPEENUM']._serialized_end=11838
  _globals['_SUBSECURITYTYPEENUM']._serialized_start=11841
  _globals['_SUBSECURITYTYPEENUM']._serialized_end=12322
  _globals['_MARKETBIZTYPEENUM']._serialized_start=12324
  _globals['_MARKETBIZTYPEENUM']._serialized_end=12422
  _globals['_OPTIONSTYPEENUM']._serialized_start=12424
  _globals['_OPTIONSTYPEENUM']._serialized_end=12505
  _globals['_EXERCISESTYLEENUM']._serialized_start=12507
  _globals['_EXERCISESTYLEENUM']._serialized_end=12598
  _globals['_SETTLETYPEENUM']._serialized_start=12600
  _globals['_SETTLETYPEENUM']._serialized_end=12679
  _globals['_BONDBIDEXECINSTTYPEENUM']._serialized_start=12681
  _globals['_BONDBIDEXECINSTTYPEENUM']._serialized_end=12773
  _globals['_BONDBIDTRANSTYPEENUM']._serialized_start=12775
  _globals['_BONDBIDTRANSTYPEENUM']._serialized_end=12860
  _globals['_REBUILDTRANSTYPEENUM']._serialized_start=12862
  _globals['_REBUILDTRANSTYPEENUM']._serialized_end=12975
  _globals['_HKTTRADELIMITENUM']._serialized_start=12977
  _globals['_HKTTRADELIMITENUM']._serialized_end=13080
  _globals['_MESSAGETYPEENUM']._serialized_start=13083
  _globals['_MESSAGETYPEENUM']._serialized_end=13584
  _globals['_RTNMARKETCLOSEFIELD']._serialized_start=107
  _globals['_RTNMARKETCLOSEFIELD']._serialized_end=148
  _globals['_RTNMARKETOPENFIELD']._serialized_start=150
  _globals['_RTNMARKETOPENFIELD']._serialized_end=190
  _globals['_RTNSUBSCRIPTIONSUCCESSFIELD']._serialized_start=192
  _globals['_RTNSUBSCRIPTIONSUCCESSFIELD']._serialized_end=254
  _globals['_SECUINSTRUMENTSTATICINFO']._serialized_start=257
  _globals['_SECUINSTRUMENTSTATICINFO']._serialized_end=698
  _globals['_SECUDEPTHMARKETDATA']._serialized_start=701
  _globals['_SECUDEPTHMARKETDATA']._serialized_end=2490
  _globals['_TRANSACTIONENTRUSTDATA']._serialized_start=2493
  _globals['_TRANSACTIONENTRUSTDATA']._serialized_end=3042
  _globals['_TRANSACTIONTRADEDATA']._serialized_start=3045
  _globals['_TRANSACTIONTRADEDATA']._serialized_end=3572
  _globals['_SECUDEPTHMARKETDATAPLUS']._serialized_start=3575
  _globals['_SECUDEPTHMARKETDATAPLUS']._serialized_end=3951
  _globals['_FUTUDEPTHMARKETDATA']._serialized_start=3954
  _globals['_FUTUDEPTHMARKETDATA']._serialized_end=4587
  _globals['_FUTUINSTRUMENTSTATICINFO']._serialized_start=4590
  _globals['_FUTUINSTRUMENTSTATICINFO']._serialized_end=4887
  _globals['_BONDTRADEINFO']._serialized_start=4889
  _globals['_BONDTRADEINFO']._serialized_end=4958
  _globals['_OPTINSTRUMENTSTATICINFO']._serialized_start=4961
  _globals['_OPTINSTRUMENTSTATICINFO']._serialized_end=5867
  _globals['_OPTDEPTHMARKETDATA']._serialized_start=5870
  _globals['_OPTDEPTHMARKETDATA']._serialized_end=6666
  _globals['_HKTINSTRUMENTSTATICINFO']._serialized_start=6669
  _globals['_HKTINSTRUMENTSTATICINFO']._serialized_end=6891
  _globals['_HKTDEPTHMARKETDATA']._serialized_start=6894
  _globals['_HKTDEPTHMARKETDATA']._serialized_end=7600
  _globals['_BONDTRANSACTIONTRADEDATA']._serialized_start=7603
  _globals['_BONDTRANSACTIONTRADEDATA']._serialized_end=8146
  _globals['_BONDTRANSACTIONENTRUSTDATA']._serialized_start=8149
  _globals['_BONDTRANSACTIONENTRUSTDATA']._serialized_end=8962
  _globals['_ENVELOPE']._serialized_start=8965
  _globals['_ENVELOPE']._serialized_end=10495
  _globals['_ENVELOPE_EXTENSIONSENTRY']._serialized_start=10435
  _globals['_ENVELOPE_EXTENSIONSENTRY']._serialized_end=10484
# @@protoc_insertion_point(module_scope)


# 添加字段别名支持
def _add_aliases():
    """为消息类添加字段别名"""
    import sys
    current_module = sys.modules[__name__]

    # 为 SecuDepthMarketData 添加别名
    try:
        # 尝试多种可能的类名
        if hasattr(current_module, 'SecuDepthMarketData'):
            cls = getattr(current_module, 'SecuDepthMarketData')
        elif hasattr(current_module, '_SecuDepthMarketData'):
            cls = getattr(current_module, '_SecuDepthMarketData')
        elif hasattr(current_module, 'tobus_market_data_SecuDepthMarketData'):
            cls = getattr(current_module, 'tobus_market_data_SecuDepthMarketData')
        elif hasattr(current_module, '_tobus_market_data_SecuDepthMarketData'):
            cls = getattr(current_module, '_tobus_market_data_SecuDepthMarketData')
        else:
            # 尝试查找部分匹配的类
            cls = None
            for name in dir(current_module):
                if 'secudepthmarketdata' in name.lower():
                    obj = getattr(current_module, name)
                    if hasattr(obj, 'DESCRIPTOR'):
                        cls = obj
                        break
        
        if cls is not None:
            # 添加别名 Symbol -> symbol
            cls.Symbol = property(lambda self: getattr(self, 'symbol'), lambda self, v: setattr(self, 'symbol', v))
            # 添加别名 LastPrice -> last_price
            cls.LastPrice = property(lambda self: getattr(self, 'last_price'), lambda self, v: setattr(self, 'last_price', v))
            # 添加别名 HighPrc -> upper_limit_price
            cls.HighPrc = property(lambda self: getattr(self, 'upper_limit_price'), lambda self, v: setattr(self, 'upper_limit_price', v))
            # 添加别名 LowPrc -> lower_limit_price
            cls.LowPrc = property(lambda self: getattr(self, 'lower_limit_price'), lambda self, v: setattr(self, 'lower_limit_price', v))
            # 添加别名 ExchTime -> update_time
            cls.ExchTime = property(lambda self: getattr(self, 'update_time'), lambda self, v: setattr(self, 'update_time', v))
            # 添加别名 TotalTradeVol -> trade_volume
            cls.TotalTradeVol = property(lambda self: getattr(self, 'trade_volume'), lambda self, v: setattr(self, 'trade_volume', v))
            # 添加别名 BidPrice -> bid_price
            cls.BidPrice = property(lambda self: getattr(self, 'bid_price'), lambda self, v: setattr(self, 'bid_price', v))
            # 添加别名 AskPrice -> ask_price
            cls.AskPrice = property(lambda self: getattr(self, 'ask_price'), lambda self, v: setattr(self, 'ask_price', v))
            # 添加别名 BidSize -> bid_volume
            cls.BidSize = property(lambda self: getattr(self, 'bid_volume'), lambda self, v: setattr(self, 'bid_volume', v))
            # 添加别名 AskSize -> ask_volume
            cls.AskSize = property(lambda self: getattr(self, 'ask_volume'), lambda self, v: setattr(self, 'ask_volume', v))
            # 添加别名 Quantity -> quantity
            cls.Quantity = property(lambda self: getattr(self, 'quantity'), lambda self, v: setattr(self, 'quantity', v))
            print('成功为 SecuDepthMarketData 添加了 11 个别名')
        else:
            print('警告: 无法找到消息 SecuDepthMarketData 对应的类')
    except Exception as e:
        print(f'为 SecuDepthMarketData 添加别名时出错: {e}')

    # 为 TransactionEntrustData 添加别名
    try:
        # 尝试多种可能的类名
        if hasattr(current_module, 'TransactionEntrustData'):
            cls = getattr(current_module, 'TransactionEntrustData')
        elif hasattr(current_module, '_TransactionEntrustData'):
            cls = getattr(current_module, '_TransactionEntrustData')
        elif hasattr(current_module, 'tobus_market_data_TransactionEntrustData'):
            cls = getattr(current_module, 'tobus_market_data_TransactionEntrustData')
        elif hasattr(current_module, '_tobus_market_data_TransactionEntrustData'):
            cls = getattr(current_module, '_tobus_market_data_TransactionEntrustData')
        else:
            # 尝试查找部分匹配的类
            cls = None
            for name in dir(current_module):
                if 'transactionentrustdata' in name.lower():
                    obj = getattr(current_module, name)
                    if hasattr(obj, 'DESCRIPTOR'):
                        cls = obj
                        break
        
        if cls is not None:
            # 添加别名 Symbol -> symbol
            cls.Symbol = property(lambda self: getattr(self, 'symbol'), lambda self, v: setattr(self, 'symbol', v))
            # 添加别名 Time -> transact_time
            cls.Time = property(lambda self: getattr(self, 'transact_time'), lambda self, v: setattr(self, 'transact_time', v))
            # 添加别名 Price -> order_price
            cls.Price = property(lambda self: getattr(self, 'order_price'), lambda self, v: setattr(self, 'order_price', v))
            # 添加别名 Volume -> order_volume
            cls.Volume = property(lambda self: getattr(self, 'order_volume'), lambda self, v: setattr(self, 'order_volume', v))
            # 添加别名 Side -> order_side
            cls.Side = property(lambda self: getattr(self, 'order_side'), lambda self, v: setattr(self, 'order_side', v))
            # 添加别名 OrderNo -> order_id
            cls.OrderNo = property(lambda self: getattr(self, 'order_id'), lambda self, v: setattr(self, 'order_id', v))
            # 添加别名 BizIndex -> biz_index
            cls.BizIndex = property(lambda self: getattr(self, 'biz_index'), lambda self, v: setattr(self, 'biz_index', v))
            print('成功为 TransactionEntrustData 添加了 7 个别名')
        else:
            print('警告: 无法找到消息 TransactionEntrustData 对应的类')
    except Exception as e:
        print(f'为 TransactionEntrustData 添加别名时出错: {e}')

    # 为 TransactionTradeData 添加别名
    try:
        # 尝试多种可能的类名
        if hasattr(current_module, 'TransactionTradeData'):
            cls = getattr(current_module, 'TransactionTradeData')
        elif hasattr(current_module, '_TransactionTradeData'):
            cls = getattr(current_module, '_TransactionTradeData')
        elif hasattr(current_module, 'tobus_market_data_TransactionTradeData'):
            cls = getattr(current_module, 'tobus_market_data_TransactionTradeData')
        elif hasattr(current_module, '_tobus_market_data_TransactionTradeData'):
            cls = getattr(current_module, '_tobus_market_data_TransactionTradeData')
        else:
            # 尝试查找部分匹配的类
            cls = None
            for name in dir(current_module):
                if 'transactiontradedata' in name.lower():
                    obj = getattr(current_module, name)
                    if hasattr(obj, 'DESCRIPTOR'):
                        cls = obj
                        break
        
        if cls is not None:
            # 添加别名 Symbol -> symbol
            cls.Symbol = property(lambda self: getattr(self, 'symbol'), lambda self, v: setattr(self, 'symbol', v))
            # 添加别名 TradeTime -> transact_time
            cls.TradeTime = property(lambda self: getattr(self, 'transact_time'), lambda self, v: setattr(self, 'transact_time', v))
            # 添加别名 TradePrice -> trade_price
            cls.TradePrice = property(lambda self: getattr(self, 'trade_price'), lambda self, v: setattr(self, 'trade_price', v))
            # 添加别名 TradeVolume -> trade_volume
            cls.TradeVolume = property(lambda self: getattr(self, 'trade_volume'), lambda self, v: setattr(self, 'trade_volume', v))
            # 添加别名 BidOrderNo -> trade_buy_no
            cls.BidOrderNo = property(lambda self: getattr(self, 'trade_buy_no'), lambda self, v: setattr(self, 'trade_buy_no', v))
            # 添加别名 AskOrderNo -> trade_sell_no
            cls.AskOrderNo = property(lambda self: getattr(self, 'trade_sell_no'), lambda self, v: setattr(self, 'trade_sell_no', v))
            # 添加别名 Side -> trade_type
            cls.Side = property(lambda self: getattr(self, 'trade_type'), lambda self, v: setattr(self, 'trade_type', v))
            # 添加别名 BizIndex -> biz_index
            cls.BizIndex = property(lambda self: getattr(self, 'biz_index'), lambda self, v: setattr(self, 'biz_index', v))
            # 添加别名 TradeStatus -> trade_status
            cls.TradeStatus = property(lambda self: getattr(self, 'trade_status'), lambda self, v: setattr(self, 'trade_status', v))
            print('成功为 TransactionTradeData 添加了 9 个别名')
        else:
            print('警告: 无法找到消息 TransactionTradeData 对应的类')
    except Exception as e:
        print(f'为 TransactionTradeData 添加别名时出错: {e}')


# 执行别名添加
_add_aliases()
