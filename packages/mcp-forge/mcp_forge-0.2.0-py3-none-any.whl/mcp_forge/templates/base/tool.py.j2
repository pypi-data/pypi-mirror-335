"""Interfaces for tool abstractions."""
from abc import ABC, abstractmethod
from typing import Any, Dict, List, Optional, ClassVar, Type, get_type_hints
from pydantic import BaseModel, Field


class ToolContent(BaseModel):
    """Model for content in tool responses."""
    type: str = Field(default="text")
    text: str


class ToolResponse(BaseModel):
    """Model for tool responses."""
    content: List[ToolContent]


class BaseToolInput(BaseModel):
    """Base class for tool input models."""
    class Config:
        extra = "forbid"  # Equivalent to additionalProperties: false


class Tool(ABC):
    """Abstract base class for all tools."""
    name: ClassVar[str]
    description: ClassVar[str]
    input_model: ClassVar[Type[BaseToolInput]]

    @abstractmethod
    async def execute(self, input_data: BaseToolInput) -> ToolResponse:
        """Execute the tool with given arguments."""
        pass

    @classmethod
    def get_input_schema(cls) -> Dict[str, Any]:
        """Get JSON schema for the tool's input model."""
        schema = cls.input_model.model_json_schema()
        # Clean up the schema to match expected format
        return schema
