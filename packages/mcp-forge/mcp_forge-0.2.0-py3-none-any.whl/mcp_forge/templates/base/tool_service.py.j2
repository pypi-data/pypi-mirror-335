"""Service layer for managing tools."""
from typing import Dict, List, Any, Type, cast
from {{ config.package_name }}.interfaces.tool import Tool, ToolResponse, BaseToolInput


class ToolService:
    """Service for managing and executing tools."""

    def __init__(self):
        self._tools: Dict[str, Tool] = {}

    def register_tool(self, tool: Tool) -> None:
        """Register a new tool."""
        self._tools[tool.name] = tool

    def register_tools(self, tools: List[Tool]) -> None:
        """Register multiple tools."""
        for tool in tools:
            self.register_tool(tool)

    def get_tool(self, tool_name: str) -> Tool:
        """Get a tool by name."""
        if tool_name not in self._tools:
            raise ValueError(f"Tool not found: {tool_name}")
        return self._tools[tool_name]

    async def execute_tool(self, tool_name: str, input_data: Dict[str, Any]) -> ToolResponse:
        """Execute a tool by name with given arguments."""
        tool = self.get_tool(tool_name)

        # Convert input dictionary to the tool's input model
        input_model = tool.input_model(**input_data)

        # Execute the tool with validated input
        return await tool.execute(input_model)
