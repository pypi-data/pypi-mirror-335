from typing import overload


class AutodiffEvaluator:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg0: AutodiffSymbolicStructure, arg1: int, arg2: int, arg3: int, arg4: int, /) -> None: ...

class AutodiffSymbolicStructure:
    def __init__(self) -> None: ...

    @property
    def nx(self) -> int: ...

    @property
    def np(self) -> int: ...

    @property
    def ny(self) -> int: ...

    @property
    def m_jacobian_rows(self) -> list[int]: ...

    @property
    def m_jacobian_cols(self) -> list[int]: ...

    @property
    def m_jacobian_nnz(self) -> int: ...

    @property
    def m_hessian_rows(self) -> list[int]: ...

    @property
    def m_hessian_cols(self) -> list[int]: ...

    @property
    def m_hessian_nnz(self) -> int: ...

    @property
    def has_parameter(self) -> bool: ...

    @property
    def has_jacobian(self) -> bool: ...

    @property
    def has_hessian(self) -> bool: ...

class FunctionIndex:
    def __init__(self, arg: int, /) -> None: ...

    @property
    def index(self) -> int: ...

class NLConstraintIndex:
    @property
    def index(self) -> int: ...

    @property
    def dim(self) -> int: ...

class ParameterIndex:
    def __init__(self, arg: int, /) -> None: ...

    @property
    def index(self) -> int: ...
