# SPDX-FileCopyrightText: 2021 - 2024 Mewbot Developers <mewbot@quicksilver.london>
#
# SPDX-License-Identifier: CC0-1.0

[project]
name = "bastet"
description="Bastet Python Developers Tools (https://github.com/mewbotorg/bastet)"
dynamic = ["version"]

readme = {file = "README.md", content-type = "text/markdown"}
license = {file = "BSD-2-Clause"}

urls = {"Source" = "https://github.com/mewbotorg/bastet"}
authors = [{name = "MewBot Org", email="mewbot@quicksilver.london" }]
maintainers = [{name = "MewBot Org", email="mewbot@quicksilver.london" }]

requires-python = ">=3.11"

classifiers=[
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: BSD License",
]

# Terminal colouring and formatting
dependencies = [
    # Output Libraries
    "clint >=0.5.1",
    "gitignore-parser >=0.1.11",

    # Copyright linting toolchain
    "reuse >=2.1",

    # Python Linting toolchain
    "black >=23.1.0",
    "flake8 >=6.0.0",
    "pylint >=2.16.0",
    "pydocstyle >=6.3.0",
    "isort >=5.12.0",
    "ruff >=0.2.1",
    "mypy >=0.991",

    # Security Audit toolchain
    "bandit >=1.7.5",

    # Testing toolchain
    "pytest >=7.1.1",
    "pytest-asyncio ~=0.21.1",
    "pytest-cov >=3.0.0",
    "pytest-xdist >=2.5.0",
    "defusedxml >=0.7.1",
]

[project.optional-dependencies]
dev = [
    "pylint-per-file-ignores",
    "types-defusedxml",
]

[project.scripts]
bastet = "bastet.__main__:main"

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic.version]
file = "version"

[tool.bastet]

disable = ["isort"]

[tool.black]

line-length = 100

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]

select = ["ALL", "TD"]
ignore = [
    "D200",  # Single line doc strings do not need to fit on a single line in code.
    "D202",  # Allow a blank line after docstring.
    "D203",  # Use Zero blank lines before docstring, as per D211.
    "D212",  # Multi-line docstring summary should start at the second line.

    "ANN101", "ANN102", # Don't require type annotations for 'self' and 'cls'

    "TCH001", "TCH002", "TCH003",  # Don't use if TYPE_CHECKING: blocks.

    "EM101",  # Exceptions can use string literals
]

[tool.ruff.lint.per-file-ignores]

"tests/**/test_*.py" = [
    "S101", # assert statements are allowed in tests.
    "SLF001" # allow direct access to "private" members in tests.
]

[tool.ruff.lint.flake8-bandit]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]

# Section ordering
section-order = ["future", "typing", "standard-library", "third-party", "first-party", "local-folder"]
sections = {"typing" = ["typing", "types", "typing_extensions", "collections.abc"]}
required-imports  = ["from __future__ import annotations as _future_annotations"]

[tool.isort]
profile = "black"
py_version = 311

# Section ordering
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_typing = ["typing", "types", "typing_extensions", "collections.abc"]

# Always have deferred annotation processing. We rename it so we can use 'annotations' as a name.
add_imports = ["from __future__ import annotations as _future_annotations"]

# 9 is black compatible, but does not look great
multi_line_output = 3

[tool.flake8]

max-complexity = 8
max-line-length = 100

[tool.pylint.MASTER]
load-plugins=["pylint_per_file_ignores"]

[tool.pylint."MESSAGES CONTROL"]
per-file-ignores = [
    "/tests/:W0212",
]

[tool.bandit]
assert_used = {skips = ['*_test.py', '*test_*.py']}

[tool.coverage]

html = {show_contexts=true}

[tool.coverage.run]

branch=true
relative_files=true
source=["src"]
omit=["tests/*"]
dynamic_context = "test_function"
