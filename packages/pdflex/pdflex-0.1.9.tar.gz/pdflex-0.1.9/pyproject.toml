[project]
name = "pdflex"
version = "0.1.9"
description = "Python tools for PDF automation."
dynamic = ["readme"]
keywords = [
    "pdf-automation",
    "pdf-converter",
    "pdf-data-extraction",
    "pdf-document",
    "pdf-document-parser",
    "pdf-document-processor",
    "pdf-extractor",
    "pdf-generator",
    "pdf-library",
    "pdf-manipulation",
    "pdf-parser",
    "pdf-processor",
    "pdf-python",
    "pdf-reader",
    "pdf-regex",
    "pdf-search",
    "pdf-text-extraction",
    "pdf-tools",
    "python-pdf",
    "python-pdf-tools"
]
license = "MIT"
authors = [ { name = "Eli Salamie", email = "egsalamie@gmail.com" } ]
requires-python = ">=3.9, <=3.14"
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Legal Industry",
    "Environment :: Console",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Text Processing :: Filters",
    "Topic :: Text Processing :: General",
    "Topic :: Text Processing :: Indexing",
    "Topic :: Printing",
    "Topic :: Documentation",
    "Framework :: Pytest",
    "Typing :: Typed",
    "Natural Language :: English",
]
dependencies = [
    "pydantic-settings",
    "pydantic",
    "pymupdf",
    "pypdf",
    "reportlab",
    "rich",
    "pdfplumber>=0.11.5",
]

urls.Homepage = 'https://github.com/eli64s/pdflex'
scripts.pdflex = "pdflex.cli:main"

[dependency-groups]
dev = [
    "hatch",
    "ipykernel",
]
test = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "pytest-pretty",
    "pytest-randomly",
    "pytest-sugar",
    "pytest-xdist",
]
lint = [
    "mypy",
    "pyright",
    "ruff",
]

[tool.hatch.build]
include = [
  "src/*"
]

[tool.hatch.build.targets.wheel]
packages = [ "src/pdflex" ]

[tool.hatch.build.targets.sdist]
include = [
  "Makefile",
  "/*.toml",
  "/*.json",
  "/*.lock",
  "/*.md",
  "docs/*",
  "src/*",
  "tests/*",
]

[tool.hatch.version]
path = 'src/pdflex/__init__.py'

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = 'text/markdown'
substitutions = [
    { pattern = '(\s+)#(\d+)', replacement = '\1[#\2](https://github.com/eli64s/pdflex/issues/\2)' },
    { pattern = '(\s+)@([\w\-]+)', replacement = '\1[@\2](https://github.com/\2)' },
    # replace relative links with absolute links
    { pattern = '\[(.+?)\]\(((?!https?://)\S+?)\)', replacement = '[\1](https://github.com/eli64s/pdflex/tree/main/\g<2>)'},
]

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"# replace relative links with absolute links

[tool.pytest.ini_options]
addopts = [
    "-vv",
    "-n=auto",
    "--tb=short",
    "--durations=3",
    "--cov=pdflex",
    "--cov-branch",
    "--cov-fail-under=0",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=json:tests/.reports/coverage.json",
]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
testpaths = ["tests"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def repr",
    "raise NotImplementedError",
    "if name == .__main__.:",
    "if TYPE_CHECKING:",
    "pass",
    "\\.\\.\\.",
]
precision = 2
show_missing = true
skip_empty = true
sort = "cover"

[tool.coverage.run]
data_file = "tests/.reports/.coverage"
omit = [
    "docs/*",
    "examples/*",
    "tests/*",
    "**/__init__.py",
    "noxfile.py",
]
source = ["pdflex"]

[tool.coverage.json]
output = "tests/.reports/coverage.json"
pretty_print = true

[tool.pyright]
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnnecessaryIsInstance = false
reportUnnecessaryTypeIgnoreComment = true
include = [ "pdflex", "tests" ]
venvPath = ".venv"
executionEnvironments = [
    { root = "tests", reportUnusedFunction = false },
]

[build-system]
build-backend = 'hatchling.build'
requires = [ "hatch-fancy-pypi-readme", "hatchling" ]
