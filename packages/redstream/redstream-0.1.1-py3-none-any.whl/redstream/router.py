import asyncio
import logging
import redis.asyncio as redis
import traceback
import uuid
from redis.exceptions import ConnectionError, ResponseError
from .types.rs_message import RSMessage

logger = logging.getLogger("redstream.redis_stream_router")


class RedisStreamRouter:
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏ Redis Streams."""

    def __init__(self, max_concurrent_requests=100):
        """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis."""
        self.redis_url = None
        self.redis_conn = None  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ
        self.source_streams = []
        self.consumer_groups = {}
        self.handlers = {}
        self.shutdown_event = asyncio.Event()
        self.queue = asyncio.Queue()
        self.tasks = []

        self.request_semaphore = asyncio.Semaphore(max_concurrent_requests)

    async def set_config(self, redis_url, redis_handler, package_name, source_streams=None, consumer_groups=None, consumer_group=None, handlers=None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ RedisStreamRouter + –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis."""
        
        self.redis_url = redis_url
        self.redis_conn = redis.from_url(self.redis_url, decode_responses=True)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        redis_handler.auto_register_handlers(package_name)
        handlers = redis_handler.get_handlers()
        registered_consumer_groups = redis_handler.get_consumer_groups()
        logger.info(f"üîÑ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã: {handlers}")

        # üîÑ –û–ø—Ä–µ–¥–µ–ª—è–µ–º `source_streams`
        if source_streams is not None:
            self.source_streams = source_streams
        elif consumer_groups is not None:
            self.source_streams = list(consumer_groups.keys())
        elif handlers is not None:
            self.source_streams = list(handlers.keys())

        # üîÑ –û–±—ä–µ–¥–∏–Ω—è–µ–º `consumer_groups`
        self.consumer_groups = {}
        for stream in self.source_streams:
            if stream in registered_consumer_groups:
                self.consumer_groups[stream] = registered_consumer_groups[stream]  
            elif consumer_groups and stream in consumer_groups:
                self.consumer_groups[stream] = consumer_groups[stream]
            elif consumer_group:
                self.consumer_groups[stream] = consumer_group

        # ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞
        missing_groups = [s for s in self.source_streams if s not in self.consumer_groups]
        if missing_groups:
            package_group = f"{package_name}_group" if package_name else "default_group"
            for stream in missing_groups:
                self.consumer_groups[stream] = package_group
            logger.warning(f"‚ö†Ô∏è –ü–æ—Ç–æ–∫–∏ {missing_groups} –Ω–µ –∏–º–µ–ª–∏ –≥—Ä—É–ø–ø. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `{package_group}`.")

        if handlers is not None:
            self.handlers = handlers

        await self._initialize_consumer_groups()
        logger.info(f"üîÑ –ò—Ç–æ–≥–æ–≤—ã–π source_streams: {self.source_streams}")
        logger.info(f"üîÑ –ò—Ç–æ–≥–æ–≤—ã–π consumer_groups: {self.consumer_groups}")

    async def _initialize_consumer_groups(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø—ã –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
        for stream, group in self.consumer_groups.items():
            try:
                await self.redis_conn.xgroup_create(stream, group, id="0", mkstream=True)
                logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group} —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {stream}")
            except ResponseError as e:
                if "BUSYGROUP" in str(e):
                    logger.info(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è {stream}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {group} –¥–ª—è {stream}: {e}")
                    logger.debug(traceback.format_exc())

    async def publish_message(self, target_stream, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ Redis."""
        if not self.redis_conn:
            logger.error("üö® –û—à–∏–±–∫–∞: Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            return

        try:
            await self.redis_conn.xadd(target_stream, message)
            logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {target_stream}: {message}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {target_stream}: {e}")
            logger.debug(traceback.format_exc())

    async def read_messages(self, source_stream):
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–æ—Ç–æ–∫–∞ –∏ –ø–æ–º–µ—â–∞–µ—Ç –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å."""
        if not self.redis_conn:
            logger.error("üö® –û—à–∏–±–∫–∞: Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            return

        group = self.consumer_groups[source_stream]
        consumer = f"{source_stream}_consumer"

        while not self.shutdown_event.is_set():
            try:
                messages = await self.redis_conn.xreadgroup(
                    groupname=group,
                    consumername=consumer,
                    streams={source_stream: ">"},
                    count=10,
                    block=2000
                )
                if messages:
                    for stream, msg_list in messages:
                        for message_id, message_data in msg_list:
                            await self.queue.put((stream, message_id, message_data))
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ {source_stream}: {e}")
                logger.debug(traceback.format_exc())

        logger.info(f"üõë –ß—Ç–µ–Ω–∏–µ –∏–∑ {source_stream} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

    async def process_messages(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –≤—ã–∑—ã–≤–∞—è –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        while not self.shutdown_event.is_set():
            try:
                stream, message_id, message_data = await self.queue.get()
                logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {stream}: {message_data}")

                if stream not in self.handlers or not self.handlers[stream]:
                    logger.warning(f"‚ö† –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream}")
                    continue

                processed_data_list = []

                # ‚úÖ –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ—Ç–æ–∫–∞
                for handler in self.handlers[stream]:
                    try:
                        logger.debug(f"üîç –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler.__name__}' –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream}")
                        result = await handler(message_data, message_id, stream)
                        if result:
                            processed_data_list.append(result)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ '{handler.__name__}': {e}")
                        logger.debug(traceback.format_exc())

                # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ `correlation_id`
                correlation_id = message_data.get("correlation_id")
                for processed_data in processed_data_list:
                    if isinstance(processed_data, dict):
                        for target_stream, result in processed_data.items():
                            if correlation_id:
                                result["correlation_id"] = correlation_id  # –ü–µ—Ä–µ–¥–∞–µ–º ID –æ—Ç–≤–µ—Ç–∞
                            await self.publish_message(target_stream, result)

                # ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis
                await self.redis_conn.xack(stream, self.consumer_groups[stream], message_id)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {message_id} –∏–∑ {stream}: {e}")
                logger.debug(traceback.format_exc())

    async def send_request_with_timeout(self, target_stream, message, response_stream=None, timeout=5, max_retries=3):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º. –ï—Å–ª–∏ `response_stream` –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞—ë—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫.
        """
        async with self.request_semaphore:
            correlation_id = str(uuid.uuid4())
            message["correlation_id"] = correlation_id

            # ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if response_stream is None:
                response_stream = f"response_stream_{correlation_id}"

            response_redis_conn = None

            try:
                response_redis_conn = redis.from_url(
                    self.redis_url,
                    decode_responses=True,
                    socket_timeout=5,
                    socket_connect_timeout=5
                )
                response_group = f"{response_stream}_group"
                consumer_name = f"consumer_{correlation_id}"

                # ‚úÖ –°–æ–∑–¥–∞—ë–º –ø–æ—Ç–æ–∫ –∏ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                try:
                    await response_redis_conn.xgroup_create(response_stream, response_group, id="0", mkstream=True)
                except ResponseError as e:
                    if "BUSYGROUP" not in str(e):
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")

                # üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ—Ç–æ–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                message["response_stream"] = response_stream  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫ –≤ —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                for attempt in range(max_retries):
                    try:
                        await self.redis_conn.xadd(target_stream, message)
                        logger.info(f"üì§ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {target_stream}, –æ–∂–∏–¥–∞–µ–º –≤ {response_stream}, correlation_id={correlation_id} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1})")
                        break
                    except Exception as e:
                        if attempt == max_retries - 1:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {e}")
                            return None
                        await asyncio.sleep(0.5 * (2 ** attempt))  # Backoff

                # ‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
                start_time = asyncio.get_event_loop().time()
                while (asyncio.get_event_loop().time() - start_time) < timeout:
                    try:
                        messages = await response_redis_conn.xreadgroup(
                            groupname=response_group,
                            consumername=consumer_name,
                            streams={response_stream: ">"},
                            count=1,
                            block=500
                        )
                        if messages:
                            for stream, msg_list in messages:
                                for msg_id, data in msg_list:
                                    if data.get("correlation_id") == correlation_id:
                                        await response_redis_conn.xack(stream, response_group, msg_id)
                                        return data
                                    else:
                                        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–¥—Ä—É–≥–æ–π correlation_id): {data}")

                    except ConnectionError as e:
                        logger.warning(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: {e}")
                        await asyncio.sleep(1)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
                        await asyncio.sleep(0.5)

                logger.warning(f"‚è≥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è correlation_id={correlation_id}")

            finally:
                if response_redis_conn:
                    try:
                        await response_redis_conn.xgroup_delconsumer(response_stream, response_group, consumer_name)
                        await response_redis_conn.aclose()
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

            return None

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–≥—Ä—É–ø–ø—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã)."""
        self.shutdown_event.clear()

        for stream in self.source_streams:
            self.tasks.append(asyncio.create_task(self.read_messages(stream)))
        self.tasks.append(asyncio.create_task(self.process_messages()))

        try:
            await asyncio.gather(*self.tasks)
        except asyncio.CancelledError:
            logger.info("üõë RedisStreamRouter –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä, –¥–æ–∂–∏–¥–∞—è—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏."""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RedisStreamRouter...")
        self.shutdown_event.set()

        # –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        while not self.queue.empty():
            await asyncio.sleep(0.1)

        for task in self.tasks:
            task.cancel()

        await asyncio.gather(*self.tasks, return_exceptions=True)
        logger.info("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")


# ‚úÖ –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç `redis_router`
redis_router = RedisStreamRouter()
