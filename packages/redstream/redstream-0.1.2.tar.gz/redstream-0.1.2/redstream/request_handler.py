import asyncio
import logging
import uuid
import traceback
import redis.asyncio as redis
from redis.exceptions import ConnectionError, ResponseError

logger = logging.getLogger("redstream.redis_stream_router.request_handler")

async def send_request_with_timeout(redis_conn, redis_url, target_stream, message, response_stream=None, timeout=5, max_retries=3):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º.
    –ï—Å–ª–∏ response_stream –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ None.
    """
    correlation_id = message.get("correlation_id") or str(uuid.uuid4())
    message["correlation_id"] = correlation_id

    if response_stream is None:
        response_stream = f"response_stream_{correlation_id}"

    response_redis_conn = None

    try:
        response_redis_conn = redis.from_url(
            redis_url,
            decode_responses=True,
            socket_timeout=5,
            socket_connect_timeout=5
        )
        response_group = f"{response_stream}_group"
        consumer_name = f"consumer_{correlation_id}"

        try:
            await response_redis_conn.xgroup_create(response_stream, response_group, id="0", mkstream=True)
        except ResponseError as e:
            if "BUSYGROUP" not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")

        message["response_stream"] = response_stream
        for attempt in range(max_retries):
            try:
                await redis_conn.xadd(target_stream, message)
                logger.info(f"üì§ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {target_stream}, –æ–∂–∏–¥–∞–µ–º –≤ {response_stream}, correlation_id={correlation_id} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1})")
                break
            except Exception as e:
                if attempt == max_retries - 1:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {e}")
                    return None
                await asyncio.sleep(0.5 * (2 ** attempt))

        start_time = asyncio.get_event_loop().time()
        while (asyncio.get_event_loop().time() - start_time) < timeout:
            try:
                messages = await response_redis_conn.xreadgroup(
                    groupname=response_group,
                    consumername=consumer_name,
                    streams={response_stream: ">"},
                    count=1,
                    block=500
                )
                if messages:
                    for stream_name, msg_list in messages:
                        for msg_id, data in msg_list:
                            if data.get("correlation_id") == correlation_id:
                                logger.debug(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: stream={stream_name}, group={response_group}, msg_id={msg_id}")
                                await response_redis_conn.xack(stream_name, response_group, msg_id)
                                logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
                                return data
                            else:
                                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–¥—Ä—É–≥–æ–π correlation_id): {data}")
            except ConnectionError as e:
                logger.warning(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: {e}")
                await asyncio.sleep(1)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
                await asyncio.sleep(0.5)

        logger.warning(f"‚è≥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è correlation_id={correlation_id}")
    finally:
        if response_redis_conn:
            try:
                logger.debug(f"–£–¥–∞–ª—è–µ–º consumer '{consumer_name}' –∏–∑ –≥—Ä—É–ø–ø—ã '{response_group}' –Ω–∞ –ø–æ—Ç–æ–∫–µ '{response_stream}'")
                await response_redis_conn.xgroup_delconsumer(response_stream, response_group, consumer_name)
                await response_redis_conn.aclose()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

    return None

async def send_streaming_request(
    redis_conn, redis_url, target_stream, message, response_stream=None,
    initial_timeout=5, max_retries=3, track_own_responses=True
):
    correlation_id = message.get("correlation_id") or str(uuid.uuid4())
    message["correlation_id"] = correlation_id

    if response_stream is None:
        response_stream = f"response_stream_{correlation_id}"
    response_group = f"{response_stream}_group"
    consumer_name = f"consumer_{correlation_id}"

    await redis_conn.xadd(target_stream, {**message, "response_stream": response_stream})
    logger.info(f"üì§ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {target_stream}, –æ–∂–∏–¥–∞–µ–º –≤ {response_stream}, correlation_id={correlation_id}")

    response_redis_conn = redis.from_url(redis_url, decode_responses=True)

    try:
        try:
            await response_redis_conn.xgroup_create(response_stream, response_group, id="0", mkstream=True)
        except ResponseError as e:
            if "BUSYGROUP" not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")

        final_received = False

        while not final_received:
            messages = await response_redis_conn.xreadgroup(
                groupname=response_group,
                consumername=consumer_name,
                streams={response_stream: ">"},
                count=10,
                block=2000
            )

            for stream_name, msg_list in messages or []:
                for msg_id, data in msg_list:
                    if not track_own_responses or data.get("correlation_id") == correlation_id:
                        await response_redis_conn.xack(stream_name, response_group, msg_id)
                        try:
                            yield data
                        except GeneratorExit:
                            logger.warning("üßπ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É.")
                            raise
                        if data.get("final_chunk") == "1":
                            logger.info("‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ –ø—Ä–∏–∑–Ω–∞–∫—É final_chunk.")
                            final_received = True
                            return
                    else:
                        logger.debug(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä —á—É–∂–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {data}")
            await asyncio.sleep(0.05)

    except GeneratorExit:
        logger.warning("üßπ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ—Ä–≤–∞–Ω ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞.")
        raise

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_streaming_request: {e}")

    finally:
        try:
            await response_redis_conn.xgroup_delconsumer(response_stream, response_group, consumer_name)
            await response_redis_conn.aclose()
            logger.debug("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Redis –∑–∞–∫—Ä—ã—Ç–æ.")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Redis: {e}")

