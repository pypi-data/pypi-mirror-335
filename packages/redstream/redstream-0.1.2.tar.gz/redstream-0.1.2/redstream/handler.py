import os
import logging
import importlib
import pkgutil
import redis.asyncio as redis  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Redis
import traceback
from functools import wraps

logger = logging.getLogger("redstream.redis_handler")


class RedisHandlerRegistry:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Redis Stream."""

    def __init__(self, auto_register_package=None, redis_url="redis://localhost:6379/0"):
        self.handlers = {}  # –°–ª–æ–≤–∞—Ä—å –ø–æ—Ç–æ–∫ -> —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.consumer_groups = {}  # –°–ª–æ–≤–∞—Ä—å –ø–æ—Ç–æ–∫ -> consumer_group
        self.redis = redis.Redis.from_url(redis_url, decode_responses=True)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Redis

        if auto_register_package:
            self.auto_register_handlers(auto_register_package)

    def message(self, stream_name, consumer_group=None, filter_func=None):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Redis Stream."""
        def decorator(func):
            @wraps(func)
            async def wrapper(message_data, message_id, source_stream):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä—É
                    if filter_func and not filter_func(message_data):
                        logger.info(f"‚è© –§–∏–ª—å—Ç—Ä '{func.__name__}' –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_data.get('message_id')}")
                        return None
                    logger.info(f"‚úÖ –§–∏–ª—å—Ç—Ä '{func.__name__}' –ø—Ä–∏–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_data.get('message_id')}")

                    return await func(message_data, message_id, source_stream)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {func.__name__}: {e}")
                    logger.debug(traceback.format_exc())
                    return None

            # ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ `self.handlers[stream_name]` ‚Äì —Å–ø–∏—Å–æ–∫
            if stream_name not in self.handlers:
                self.handlers[stream_name] = []
            elif not isinstance(self.handlers[stream_name], list):
                logger.warning(f"‚ö† self.handlers[{stream_name}] –±—ã–ª {type(self.handlers[stream_name])}, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫!")
                self.handlers[stream_name] = [self.handlers[stream_name]]

            # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Å–ø–∏—Å–æ–∫
            self.handlers[stream_name].append(wrapper)

            if consumer_group:
                self.consumer_groups[stream_name] = consumer_group  # üî• –°–æ—Ö—Ä–∞–Ω—è–µ–º consumer_group

            logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {stream_name} -> {func.__name__} (consumer_group={consumer_group})")
            return wrapper

        return decorator

    def get_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
        return self.handlers

    def get_consumer_groups(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ consumer_groups."""
        return self.consumer_groups

    def auto_register_handlers(self, package_name):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–æ –≤—Å–µ–º –ø–∞–∫–µ—Ç–µ –∏ –µ–≥–æ –ø–æ–¥–ø–∞–∫–µ—Ç–∞—Ö."""
        logger.info(f"üîç –ü–æ–∏—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ {package_name}...")

        try:
            package = importlib.import_module(package_name)
            package_path = package.__path__[0]  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–∫–µ—Ç—É
            for module_info in pkgutil.walk_packages([package_path], prefix=f"{package_name}."):
                module_name = module_info.name
                if module_name.endswith("__main__") or module_name.endswith("__init__"):
                    continue

                try:
                    logger.info(f"üì• –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {module_name}")
                    importlib.import_module(module_name)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {module_name}: {e}")
                    logger.debug(traceback.format_exc())

        except ModuleNotFoundError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            logger.debug(traceback.format_exc())

        logger.info(f"‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫: {list(self.handlers.keys())}")


# ‚úÖ –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
redis_handler = RedisHandlerRegistry()


#–ú–Ω–µ –Ω–∞–¥–æ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞—Ä–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–∫ "—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è". –í–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å.
#–ü–æ–ø—ã—Ç–∫–∞ –≤–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å –≤ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –¥–æ–ª–∂–Ω–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—Ä–Ω–∏–Ω–≥–æ–º –≤ –ª–æ–≥–∞—Ö 
#–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∏–º–µ–Ω–∞–º —Å–µ—Ä–≤–∏—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–æ–≤