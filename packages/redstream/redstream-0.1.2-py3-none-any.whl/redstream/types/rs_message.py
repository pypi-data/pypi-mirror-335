import json
import pytz
import uuid
from typing import Optional, Dict, Any, Union
import logging

logger = logging.getLogger("redstream.types.rs_message")


class RSMessage:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (Redis Streams)."""
    
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –¢–µ–∫—Å—Ç–æ–≤—ã–µ, –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    - –û—Ç–≤–µ—Ç—ã (`reply_to_message_id`)
    - Text-to-Speech (`tts_generated`)
    - Correlation ID –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å aiogram Message (–µ—Å–ª–∏ aiogram –¥–æ—Å—Ç—É–ø–µ–Ω)
    - –ì–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RedisStreamRouter
    """

    def __init__(
        self,
        event_type: str,                        # –¢–∏–ø —Å–æ–±—ã—Ç–∏—è ("message", "edit_message"...)
        message_type: Optional[str] = "text",   # –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        action: Optional[str] = "",             # –¢—Ä–µ–±—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        status: Optional[str] = "",             # –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
        chat_id: Optional[str] = None,          # ID —á–∞—Ç–∞ (–≥—Ä—É–ø–ø—ã)
        user_id: Optional[str] = None,          # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_id: Optional[str] = None,       # ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        text: Optional[str] = "",               # –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è
        is_command: Optional[bool] = False,     # –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
        first_name: Optional[str] = "",         # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username: Optional[str] = "",           # –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        date: Optional[str] = None,             # –î–∞—Ç–∞/–≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_to_message_id: Optional[Union[str, int]] = None,
        media_data: Optional[Dict[str, Any]] = None,
        file_path: Optional[str] = None,
        tts_generated: Optional[bool] = False,
        correlation_id: Optional[str] = None,
        response_stream: Optional[str] = None,
        extra_data: Optional[Dict[str, Any]] = None,
        callback_data: Optional[Union[str, Dict[str, Any]]] = None, # üî• –î–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞
        callback_action: Optional[str] = None,                      # üî• –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –∫–æ–ª–±—ç–∫–µ
    ):
        self.event_type = event_type
        self.message_type = message_type
        self.action = action
        self.status = status
        self.chat_id = chat_id
        self.user_id = user_id
        self.message_id = message_id
        self.text = text or ""
        self.is_command = is_command
        self.first_name = first_name
        self.username = username
        self.date = date or self._current_time()
        self.reply_to_message_id = str(reply_to_message_id) if reply_to_message_id else None
        self.media_data = media_data
        self.file_path = file_path
        self.tts_generated = tts_generated
        self.correlation_id = correlation_id or str(uuid.uuid4())
        self.response_stream = response_stream
        self.extra_data = extra_data
        self.callback_data = callback_data  # ‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞
        self.callback_action = callback_action  # ‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –∫–æ–ª–±—ç–∫–µ

    @staticmethod
    def _current_time() -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC."""
        return pytz.utc.localize(pytz.datetime.datetime.utcnow()).isoformat()

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "RSMessage":
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç RSMessage –∏–∑ —Å–ª–æ–≤–∞—Ä—è."""

        def safe_json_loads(value: Any) -> Any:
            """–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON-—Å—Ç—Ä–æ–∫—É, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å."""
            if isinstance(value, str):
                try:
                    return json.loads(value)
                except json.JSONDecodeError:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {value}")
                    return value  # –ï—Å–ª–∏ JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É (–Ω–æ –ª—É—á—à–µ –∏–∑–±–µ–≥–∞—Ç—å —Ç–∞–∫–æ–≥–æ)
            return value

        logger.debug(f"üì© from_dict() –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

        instance = cls(
            event_type=data.get("event_type", "message"),
            message_type=data.get("message_type", "text"),
            action=data.get("action", ""),
            status=data.get("status", ""),
            chat_id=data.get("chat_id"),
            user_id=int(data["user_id"]) if data.get("user_id") is not None else None,
            message_id=data.get("message_id") or "unknown",
            text=data.get("text", ""),
            is_command=data.get("is_command", False),
            first_name=data.get("first_name", ""),
            username=data.get("username", ""),
            date=data.get("date"),
            reply_to_message_id=str(data["reply_to_message_id"]) if data.get("reply_to_message_id") else None,
            media_data=data.get("media_data"),
            file_path=data.get("file_path"),
            tts_generated=data.get("tts_generated", False),
            correlation_id=data.get("correlation_id") or str(uuid.uuid4()),
            response_stream=data.get("response_stream"),
            extra_data=safe_json_loads(data.get("extra_data")),  # üõ† –¢–µ–ø–µ—Ä—å `extra_data` –≤—Å–µ–≥–¥–∞ —Å–ª–æ–≤–∞—Ä—å
            callback_data=data.get("callback_data"),
            callback_action=data.get("callback_action"),
        )

        logger.debug(f"üì© from_dict() —Å–æ–∑–¥–∞–ª RSMessage —Å message_id={instance.message_id}, correlation_id={instance.correlation_id}")

        return instance

    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ Redis."""
        result = {
            k: ("1" if isinstance(v, bool) and v else "0" if isinstance(v, bool) else str(v) if isinstance(v, uuid.UUID) else v)
            for k, v in self.__dict__.items()
            if v is not None
        }

        if isinstance(self.extra_data, dict):
            result["extra_data"] = json.dumps(self.extra_data, ensure_ascii=False)

        if isinstance(self.callback_data, dict):
            result["callback_data"] = json.dumps(self.callback_data, ensure_ascii=False)

        result["correlation_id"] = str(self.correlation_id)  # ‚úÖ –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ

        return result

    def to_json(self) -> str:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ JSON."""
        return json.dumps(self.to_dict(), ensure_ascii=False)

    @classmethod
    def from_json(cls, json_str: str) -> "RSMessage":
        """–°–æ–∑–¥–∞–µ—Ç RSMessage –∏–∑ JSON-—Å—Ç—Ä–æ–∫–∏."""
        return cls.from_dict(json.loads(json_str))

    # === –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å aiogram (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω) ===
    @classmethod
    def from_aiogram_message(cls, message: Any) -> "RSMessage":
        """–°–æ–∑–¥–∞–µ—Ç RSMessage –∏–∑ aiogram.types.Message."""
        if not hasattr(message, "chat") or not hasattr(message, "from_user"):
            raise ValueError("–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è aiogram Message.")

        return cls(
            event_type="message",
            message_type=message.content_type.value,
            chat_id=str(message.chat.id),
            user_id=str(message.from_user.id),
            message_id=str(message.message_id),
            text=message.text or message.caption or "",
            is_command=bool(message.text and message.text.startswith("/")),
            first_name=message.from_user.first_name or "",
            username=message.from_user.username or "",
            date=str(message.date),
            reply_to_message_id=str(message.reply_to_message.message_id) if message.reply_to_message else None,
            media_data=cls.extract_media_data(message),
        )

    def to_aiogram_message(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç RSMessage –≤ JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Å—Ö–æ–∂—É—é —Å aiogram Message."""
        return {
            "chat": {"id": int(self.chat_id) if self.chat_id else None},
            "from_user": {
                "id": int(self.user_id) if self.user_id else None,
                "first_name": self.first_name,
                "username": self.username,
            },
            "message_id": int(self.message_id) if self.message_id else None,
            "date": self.date,
            "text": self.text,
            "content_type": self.message_type,
            "media_data": self.media_data,
            "reply_to_message_id": int(self.reply_to_message_id) if self.reply_to_message_id else None,
            "correlation_id": self.correlation_id,
        }

    @staticmethod
    def extract_media_data(message: Any) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã) –∏–∑ aiogram Message."""
        media_data = None
        if hasattr(message, "photo") and message.photo:
            media_data = {"type": "photo", "file_id": message.photo[-1].file_id}
        elif hasattr(message, "video") and message.video:
            media_data = {"type": "video", "file_id": message.video.file_id}
        elif hasattr(message, "document") and message.document:
            media_data = {
                "type": "document",
                "file_id": message.document.file_id,
                "file_name": message.document.file_name,
            }
        elif hasattr(message, "voice") and message.voice:
            media_data = {"type": "voice", "file_id": message.voice.file_id}
        elif hasattr(message, "audio") and message.audio:
            media_data = {"type": "audio", "file_id": message.audio.file_id}
        return media_data
