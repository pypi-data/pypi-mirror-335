# coding: utf-8

"""
    Hightop API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.agent_public_response import AgentPublicResponse
from openapi_client.models.message_send_response_action_inner import MessageSendResponseActionInner
from typing import Optional, Set
from typing_extensions import Self

class MessageAgent(BaseModel):
    """
    MessageAgent
    """ # noqa: E501
    id: StrictStr
    agentic_wallet: StrictStr = Field(alias="agenticWallet")
    sender: StrictStr
    message: StrictStr
    created_at: StrictStr = Field(alias="createdAt")
    updated_at: StrictStr = Field(alias="updatedAt")
    local_id: Optional[StrictStr] = Field(default=None, alias="localId")
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    conversation_id: Optional[StrictStr] = Field(default=None, alias="conversationId")
    agent: AgentPublicResponse
    action: Optional[List[MessageSendResponseActionInner]] = Field(default=None, alias="Action")
    agent_context: Optional[StrictStr] = Field(default=None, alias="agentContext")
    __properties: ClassVar[List[str]] = ["id", "agenticWallet", "sender", "message", "createdAt", "updatedAt", "localId", "userId", "conversationId", "agent", "Action", "agentContext"]

    @field_validator('sender')
    def sender_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['agent', 'user']):
            raise ValueError("must be one of enum values ('agent', 'user')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageAgent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agent
        if self.agent:
            _dict['agent'] = self.agent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in action (list)
        _items = []
        if self.action:
            for _item_action in self.action:
                if _item_action:
                    _items.append(_item_action.to_dict())
            _dict['Action'] = _items
        # set to None if local_id (nullable) is None
        # and model_fields_set contains the field
        if self.local_id is None and "local_id" in self.model_fields_set:
            _dict['localId'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['userId'] = None

        # set to None if conversation_id (nullable) is None
        # and model_fields_set contains the field
        if self.conversation_id is None and "conversation_id" in self.model_fields_set:
            _dict['conversationId'] = None

        # set to None if action (nullable) is None
        # and model_fields_set contains the field
        if self.action is None and "action" in self.model_fields_set:
            _dict['Action'] = None

        # set to None if agent_context (nullable) is None
        # and model_fields_set contains the field
        if self.agent_context is None and "agent_context" in self.model_fields_set:
            _dict['agentContext'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageAgent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "agenticWallet": obj.get("agenticWallet"),
            "sender": obj.get("sender"),
            "message": obj.get("message"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "localId": obj.get("localId"),
            "userId": obj.get("userId"),
            "conversationId": obj.get("conversationId"),
            "agent": AgentPublicResponse.from_dict(obj["agent"]) if obj.get("agent") is not None else None,
            "Action": [MessageSendResponseActionInner.from_dict(_item) for _item in obj["Action"]] if obj.get("Action") is not None else None,
            "agentContext": obj.get("agentContext")
        })
        return _obj


