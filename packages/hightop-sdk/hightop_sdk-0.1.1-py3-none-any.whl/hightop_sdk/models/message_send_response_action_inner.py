# coding: utf-8

"""
    Hightop API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.action_status import ActionStatus
from openapi_client.models.action_type import ActionType
from typing import Optional, Set
from typing_extensions import Self

class MessageSendResponseActionInner(BaseModel):
    """
    MessageSendResponseActionInner
    """ # noqa: E501
    id: StrictStr
    type: ActionType
    status: ActionStatus
    agentic_wallet: Optional[Any] = Field(description="Ethereum address", alias="agenticWallet")
    lego_id: Optional[Any] = Field(default=None, alias="legoId")
    asset: Optional[Any] = Field(default=None, description="Ethereum address")
    vault: Optional[Any] = Field(default=None, description="Ethereum address")
    amount: Optional[Any] = None
    recipient: Optional[Any] = Field(default=None, description="Ethereum address")
    alt_lego_id: Optional[Any] = Field(default=None, alias="altLegoId")
    alt_vault: Optional[Any] = Field(default=None, description="Ethereum address", alias="altVault")
    alt_asset: Optional[Any] = Field(default=None, description="Ethereum address", alias="altAsset")
    alt_amount: Optional[Any] = Field(default=None, alias="altAmount")
    estimated_gas: Optional[StrictStr] = Field(default=None, alias="estimatedGas")
    expiration: Optional[StrictStr] = None
    tx_hash: Optional[StrictStr] = Field(default=None, alias="txHash")
    created_at: StrictStr = Field(alias="createdAt")
    updated_at: StrictStr = Field(alias="updatedAt")
    __properties: ClassVar[List[str]] = ["id", "type", "status", "agenticWallet", "legoId", "asset", "vault", "amount", "recipient", "altLegoId", "altVault", "altAsset", "altAmount", "estimatedGas", "expiration", "txHash", "createdAt", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageSendResponseActionInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if agentic_wallet (nullable) is None
        # and model_fields_set contains the field
        if self.agentic_wallet is None and "agentic_wallet" in self.model_fields_set:
            _dict['agenticWallet'] = None

        # set to None if lego_id (nullable) is None
        # and model_fields_set contains the field
        if self.lego_id is None and "lego_id" in self.model_fields_set:
            _dict['legoId'] = None

        # set to None if asset (nullable) is None
        # and model_fields_set contains the field
        if self.asset is None and "asset" in self.model_fields_set:
            _dict['asset'] = None

        # set to None if vault (nullable) is None
        # and model_fields_set contains the field
        if self.vault is None and "vault" in self.model_fields_set:
            _dict['vault'] = None

        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['amount'] = None

        # set to None if recipient (nullable) is None
        # and model_fields_set contains the field
        if self.recipient is None and "recipient" in self.model_fields_set:
            _dict['recipient'] = None

        # set to None if alt_lego_id (nullable) is None
        # and model_fields_set contains the field
        if self.alt_lego_id is None and "alt_lego_id" in self.model_fields_set:
            _dict['altLegoId'] = None

        # set to None if alt_vault (nullable) is None
        # and model_fields_set contains the field
        if self.alt_vault is None and "alt_vault" in self.model_fields_set:
            _dict['altVault'] = None

        # set to None if alt_asset (nullable) is None
        # and model_fields_set contains the field
        if self.alt_asset is None and "alt_asset" in self.model_fields_set:
            _dict['altAsset'] = None

        # set to None if alt_amount (nullable) is None
        # and model_fields_set contains the field
        if self.alt_amount is None and "alt_amount" in self.model_fields_set:
            _dict['altAmount'] = None

        # set to None if estimated_gas (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_gas is None and "estimated_gas" in self.model_fields_set:
            _dict['estimatedGas'] = None

        # set to None if expiration (nullable) is None
        # and model_fields_set contains the field
        if self.expiration is None and "expiration" in self.model_fields_set:
            _dict['expiration'] = None

        # set to None if tx_hash (nullable) is None
        # and model_fields_set contains the field
        if self.tx_hash is None and "tx_hash" in self.model_fields_set:
            _dict['txHash'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageSendResponseActionInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "agenticWallet": obj.get("agenticWallet"),
            "legoId": obj.get("legoId"),
            "asset": obj.get("asset"),
            "vault": obj.get("vault"),
            "amount": obj.get("amount"),
            "recipient": obj.get("recipient"),
            "altLegoId": obj.get("altLegoId"),
            "altVault": obj.get("altVault"),
            "altAsset": obj.get("altAsset"),
            "altAmount": obj.get("altAmount"),
            "estimatedGas": obj.get("estimatedGas"),
            "expiration": obj.get("expiration"),
            "txHash": obj.get("txHash"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


