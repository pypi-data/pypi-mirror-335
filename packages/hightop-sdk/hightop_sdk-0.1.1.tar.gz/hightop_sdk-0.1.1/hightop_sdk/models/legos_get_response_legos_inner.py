# coding: utf-8

"""
    Hightop API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.legos_get_response_legos_inner_opportunities_inner import LegosGetResponseLegosInnerOpportunitiesInner
from typing import Optional, Set
from typing_extensions import Self

class LegosGetResponseLegosInner(BaseModel):
    """
    LegosGetResponseLegosInner
    """ # noqa: E501
    lego_id: Optional[Any] = Field(default=None, alias="legoId")
    addr: Optional[Any] = Field(description="Ethereum address")
    version: Optional[Any] = None
    last_modified: Optional[Any] = Field(default=None, alias="lastModified")
    description: Optional[StrictStr] = None
    lego_type: Optional[Any] = Field(default=None, alias="legoType")
    opportunities: List[LegosGetResponseLegosInnerOpportunitiesInner]
    __properties: ClassVar[List[str]] = ["legoId", "addr", "version", "lastModified", "description", "legoType", "opportunities"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LegosGetResponseLegosInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in opportunities (list)
        _items = []
        if self.opportunities:
            for _item_opportunities in self.opportunities:
                if _item_opportunities:
                    _items.append(_item_opportunities.to_dict())
            _dict['opportunities'] = _items
        # set to None if lego_id (nullable) is None
        # and model_fields_set contains the field
        if self.lego_id is None and "lego_id" in self.model_fields_set:
            _dict['legoId'] = None

        # set to None if addr (nullable) is None
        # and model_fields_set contains the field
        if self.addr is None and "addr" in self.model_fields_set:
            _dict['addr'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['lastModified'] = None

        # set to None if lego_type (nullable) is None
        # and model_fields_set contains the field
        if self.lego_type is None and "lego_type" in self.model_fields_set:
            _dict['legoType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LegosGetResponseLegosInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "legoId": obj.get("legoId"),
            "addr": obj.get("addr"),
            "version": obj.get("version"),
            "lastModified": obj.get("lastModified"),
            "description": obj.get("description"),
            "legoType": obj.get("legoType"),
            "opportunities": [LegosGetResponseLegosInnerOpportunitiesInner.from_dict(_item) for _item in obj["opportunities"]] if obj.get("opportunities") is not None else None
        })
        return _obj


