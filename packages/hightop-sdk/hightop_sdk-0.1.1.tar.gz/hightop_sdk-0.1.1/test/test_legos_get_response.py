# coding: utf-8

"""
    Hightop API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.legos_get_response import LegosGetResponse

class TestLegosGetResponse(unittest.TestCase):
    """LegosGetResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LegosGetResponse:
        """Test LegosGetResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LegosGetResponse`
        """
        model = LegosGetResponse()
        if include_optional:
            return LegosGetResponse(
                tokens = [
                    openapi_client.models.legos_get_response_tokens_inner.LegosGetResponse_tokens_inner(
                        address = null, 
                        name = '', 
                        symbol = '', 
                        decimals = 1.337, 
                        logo = '', )
                    ],
                vault_tokens = [
                    openapi_client.models.legos_get_response_tokens_inner.LegosGetResponse_tokens_inner(
                        address = null, 
                        name = '', 
                        symbol = '', 
                        decimals = 1.337, 
                        logo = '', )
                    ],
                legos = [
                    openapi_client.models.legos_get_response_legos_inner.LegosGetResponse_legos_inner(
                        lego_id = null, 
                        addr = null, 
                        version = null, 
                        last_modified = null, 
                        description = '', 
                        lego_type = null, 
                        opportunities = [
                            openapi_client.models.legos_get_response_legos_inner_opportunities_inner.LegosGetResponse_legos_inner_opportunities_inner(
                                token = openapi_client.models.legos_get_response_legos_inner_opportunities_inner_token.LegosGetResponse_legos_inner_opportunities_inner_token(
                                    address = null, 
                                    name = '', 
                                    symbol = '', 
                                    decimals = 1.337, 
                                    logo = '', ), 
                                vaults = [
                                    openapi_client.models.legos_get_response_legos_inner_opportunities_inner_vaults_inner.LegosGetResponse_legos_inner_opportunities_inner_vaults_inner(
                                        address = null, 
                                        name = '', 
                                        apy = 1.337, 
                                        tvl = '', 
                                        description = '', 
                                        number_of_holders = 1.337, 
                                        score = 1.337, )
                                    ], )
                            ], )
                    ]
            )
        else:
            return LegosGetResponse(
                tokens = [
                    openapi_client.models.legos_get_response_tokens_inner.LegosGetResponse_tokens_inner(
                        address = null, 
                        name = '', 
                        symbol = '', 
                        decimals = 1.337, 
                        logo = '', )
                    ],
                vault_tokens = [
                    openapi_client.models.legos_get_response_tokens_inner.LegosGetResponse_tokens_inner(
                        address = null, 
                        name = '', 
                        symbol = '', 
                        decimals = 1.337, 
                        logo = '', )
                    ],
                legos = [
                    openapi_client.models.legos_get_response_legos_inner.LegosGetResponse_legos_inner(
                        lego_id = null, 
                        addr = null, 
                        version = null, 
                        last_modified = null, 
                        description = '', 
                        lego_type = null, 
                        opportunities = [
                            openapi_client.models.legos_get_response_legos_inner_opportunities_inner.LegosGetResponse_legos_inner_opportunities_inner(
                                token = openapi_client.models.legos_get_response_legos_inner_opportunities_inner_token.LegosGetResponse_legos_inner_opportunities_inner_token(
                                    address = null, 
                                    name = '', 
                                    symbol = '', 
                                    decimals = 1.337, 
                                    logo = '', ), 
                                vaults = [
                                    openapi_client.models.legos_get_response_legos_inner_opportunities_inner_vaults_inner.LegosGetResponse_legos_inner_opportunities_inner_vaults_inner(
                                        address = null, 
                                        name = '', 
                                        apy = 1.337, 
                                        tvl = '', 
                                        description = '', 
                                        number_of_holders = 1.337, 
                                        score = 1.337, )
                                    ], )
                            ], )
                    ],
        )
        """

    def testLegosGetResponse(self):
        """Test LegosGetResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
