# coding: utf-8

"""
    Hightop API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.message_user_send_context_balances_inner_underlying_data import MessageUserSendContextBalancesInnerUnderlyingData
from typing import Optional, Set
from typing_extensions import Self

class MessageUserSendContextBalancesInner(BaseModel):
    """
    MessageUserSendContextBalancesInner
    """ # noqa: E501
    contract_address: Optional[Any] = Field(description="Ethereum address", alias="contractAddress")
    symbol: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    balance: Optional[StrictStr] = None
    decimals: Optional[Union[StrictFloat, StrictInt]] = None
    raw_balance: Optional[StrictStr] = Field(default=None, alias="rawBalance")
    underlying_data: MessageUserSendContextBalancesInnerUnderlyingData = Field(alias="underlyingData")
    __properties: ClassVar[List[str]] = ["contractAddress", "symbol", "name", "balance", "decimals", "rawBalance", "underlyingData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageUserSendContextBalancesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of underlying_data
        if self.underlying_data:
            _dict['underlyingData'] = self.underlying_data.to_dict()
        # set to None if contract_address (nullable) is None
        # and model_fields_set contains the field
        if self.contract_address is None and "contract_address" in self.model_fields_set:
            _dict['contractAddress'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageUserSendContextBalancesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contractAddress": obj.get("contractAddress"),
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "balance": obj.get("balance"),
            "decimals": obj.get("decimals"),
            "rawBalance": obj.get("rawBalance"),
            "underlyingData": MessageUserSendContextBalancesInnerUnderlyingData.from_dict(obj["underlyingData"]) if obj.get("underlyingData") is not None else None
        })
        return _obj


