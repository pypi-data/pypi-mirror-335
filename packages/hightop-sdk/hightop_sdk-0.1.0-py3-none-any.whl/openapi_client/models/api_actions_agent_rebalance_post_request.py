# coding: utf-8

"""
    Hightop API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_actions_agent_batch_post_request_message import ApiActionsAgentBatchPostRequestMessage
from typing import Optional, Set
from typing_extensions import Self

class ApiActionsAgentRebalancePostRequest(BaseModel):
    """
    ApiActionsAgentRebalancePostRequest
    """ # noqa: E501
    agentic_wallet: Optional[Any] = Field(description="Ethereum address", alias="agenticWallet")
    from_lego_id: Optional[Any] = Field(description="BigInt", alias="fromLegoId")
    asset: Optional[Any] = Field(description="Ethereum address")
    from_vault_token: Optional[Any] = Field(description="Ethereum address", alias="fromVaultToken")
    to_lego_id: Optional[Any] = Field(description="BigInt", alias="toLegoId")
    to_vault: Optional[Any] = Field(description="Ethereum address", alias="toVault")
    amount: Optional[Any] = Field(default=None, description="BigInt")
    message: ApiActionsAgentBatchPostRequestMessage
    local_message_id: Optional[StrictStr] = Field(default=None, alias="localMessageId")
    __properties: ClassVar[List[str]] = ["agenticWallet", "fromLegoId", "asset", "fromVaultToken", "toLegoId", "toVault", "amount", "message", "localMessageId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiActionsAgentRebalancePostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # set to None if agentic_wallet (nullable) is None
        # and model_fields_set contains the field
        if self.agentic_wallet is None and "agentic_wallet" in self.model_fields_set:
            _dict['agenticWallet'] = None

        # set to None if from_lego_id (nullable) is None
        # and model_fields_set contains the field
        if self.from_lego_id is None and "from_lego_id" in self.model_fields_set:
            _dict['fromLegoId'] = None

        # set to None if asset (nullable) is None
        # and model_fields_set contains the field
        if self.asset is None and "asset" in self.model_fields_set:
            _dict['asset'] = None

        # set to None if from_vault_token (nullable) is None
        # and model_fields_set contains the field
        if self.from_vault_token is None and "from_vault_token" in self.model_fields_set:
            _dict['fromVaultToken'] = None

        # set to None if to_lego_id (nullable) is None
        # and model_fields_set contains the field
        if self.to_lego_id is None and "to_lego_id" in self.model_fields_set:
            _dict['toLegoId'] = None

        # set to None if to_vault (nullable) is None
        # and model_fields_set contains the field
        if self.to_vault is None and "to_vault" in self.model_fields_set:
            _dict['toVault'] = None

        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['amount'] = None

        # set to None if local_message_id (nullable) is None
        # and model_fields_set contains the field
        if self.local_message_id is None and "local_message_id" in self.model_fields_set:
            _dict['localMessageId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiActionsAgentRebalancePostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agenticWallet": obj.get("agenticWallet"),
            "fromLegoId": obj.get("fromLegoId"),
            "asset": obj.get("asset"),
            "fromVaultToken": obj.get("fromVaultToken"),
            "toLegoId": obj.get("toLegoId"),
            "toVault": obj.get("toVault"),
            "amount": obj.get("amount"),
            "message": ApiActionsAgentBatchPostRequestMessage.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "localMessageId": obj.get("localMessageId")
        })
        return _obj


