# coding: utf-8

"""
    Hightop API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiUserGetGet200ResponseWalletsInner(BaseModel):
    """
    ApiUserGetGet200ResponseWalletsInner
    """ # noqa: E501
    wallet_address: Optional[Any] = Field(description="Ethereum address", alias="walletAddress")
    owner_wallet_address: Optional[Any] = Field(description="Ethereum address", alias="ownerWalletAddress")
    smart_account_address: Optional[Any] = Field(description="Ethereum address", alias="smartAccountAddress")
    yield_optimizer_enabled: Optional[StrictBool] = Field(default=None, alias="yieldOptimizerEnabled")
    __properties: ClassVar[List[str]] = ["walletAddress", "ownerWalletAddress", "smartAccountAddress", "yieldOptimizerEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiUserGetGet200ResponseWalletsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if wallet_address (nullable) is None
        # and model_fields_set contains the field
        if self.wallet_address is None and "wallet_address" in self.model_fields_set:
            _dict['walletAddress'] = None

        # set to None if owner_wallet_address (nullable) is None
        # and model_fields_set contains the field
        if self.owner_wallet_address is None and "owner_wallet_address" in self.model_fields_set:
            _dict['ownerWalletAddress'] = None

        # set to None if smart_account_address (nullable) is None
        # and model_fields_set contains the field
        if self.smart_account_address is None and "smart_account_address" in self.model_fields_set:
            _dict['smartAccountAddress'] = None

        # set to None if yield_optimizer_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.yield_optimizer_enabled is None and "yield_optimizer_enabled" in self.model_fields_set:
            _dict['yieldOptimizerEnabled'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiUserGetGet200ResponseWalletsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "walletAddress": obj.get("walletAddress"),
            "ownerWalletAddress": obj.get("ownerWalletAddress"),
            "smartAccountAddress": obj.get("smartAccountAddress"),
            "yieldOptimizerEnabled": obj.get("yieldOptimizerEnabled")
        })
        return _obj


