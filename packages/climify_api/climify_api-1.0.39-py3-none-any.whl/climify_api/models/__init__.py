# generated by datamodel-codegen:
#   filename:  OpenAPIdoc.yaml
#   timestamp: 2023-07-25T06:44:00+00:00

from __future__ import annotations

from datetime import datetime, date, time
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from pandas import DataFrame

from pydantic import BaseModel, Field


class Error(BaseModel):
    field: Optional[str] = None
    message: Optional[str] = None


class ErrorResponse(BaseModel):
    status: Optional[int] = None
    message: Optional[str] = None
    stackTrace: Optional[str] = None
    errors: Optional[List[Error]] = None


class ChangeTemperatureDto(BaseModel):
    temperature: int
    devEUI: str


class Status(Enum):
    ACTIVE = 'ACTIVE'
    BLOCKED = 'BLOCKED'
    PARENT_BLOCKED = 'PARENT_BLOCKED'


class AuthorizationTarget(BaseModel):
    name: Optional[str] = None
    id: Optional[int] = None
    status: Optional[Status] = None


class Role(Enum):
    ADMIN = 'ADMIN'
    ORGANISATION_MANAGER = 'ORGANISATION_MANAGER'
    BUILDING_MANAGER = 'BUILDING_MANAGER'
    ROOM_MANAGER = 'ROOM_MANAGER'
    ROOM_USER = 'ROOM_USER'


class ResourceDto(BaseModel):
    role: Optional[Role] = None
    resource: Optional[AuthorizationTarget] = None


class GeoPoint(BaseModel):
    latitude: Optional[float] = None
    longitude: Optional[float] = None


class JsonNode(BaseModel):
    pass


class Status5Enum(Enum):
    INACTIVE = 'INACTIVE'
    ACTIVE = 'ACTIVE'


class DeviceType(Enum):
    SENSOR = 'SENSOR'
    BLE_BEACON = 'BLE_BEACON'
    METERING_POINT = 'METERING_POINT'


class DeviceModelDto(BaseModel):
    id: Optional[int] = None
    name: str
    manufacturer: str
    type: DeviceType
    attributes: List[str]


class IntegrationType(Enum):
    CHIRPSTACK = 'CHIRPSTACK'
    MQTT = 'MQTT'
    IC_METER = 'IC_METER'
    DANFOSS = 'DANFOSS'
    OS2IOT = 'OS2IOT'
    ELOVERBLIK = 'ELOVERBLIK'


class Data(BaseModel):
    time: Optional[datetime] = None
    values: Optional[Dict[str, Any]] = None


class SensorDataExtDto(BaseModel):
    devId: Optional[str] = None
    data: Optional[Union[List[Data],DataFrame]] = None

    class Config:
        arbitrary_types_allowed = True


class BuildingOperatingHourDto(BaseModel):
    id: Optional[int] = None
    dayOfWeek: Optional[int] = None

    openTime: Optional[time] = None
    closeTime: Optional[time] = None
    active: Optional[bool] = None

class BuildingOperatingHourExceptionDto(BaseModel):
    id: Optional[int] = None
    dateFrom: Optional[date] = None
    dateTo: Optional[date] = None
    openTime: Optional[time] = None
    closeTime: Optional[time] = None
    reason: Optional[str] = None
    active: Optional[bool] = None

class BuildingDto(BaseModel):
    id: Optional[int] = None
    status: Optional[Status] = None
    name: Optional[str] = None
    country: Optional[str] = None
    address: Optional[str] = None
    zipCode: Optional[str] = None
    city: Optional[str] = None
    timeZone: Optional[str] = None
    organisation: Optional[OrganisationDto] = None
    coordinates: Optional[GeoPoint] = None
    maps: Optional[List[MapDto]] = []
    buildingOperatingHours: Optional[List[BuildingOperatingHourDto]] = []
    buildingOperatingHourExceptions: Optional[List[BuildingOperatingHourExceptionDto]] = []


class LocationDto(BaseModel):
    id: Optional[int] = None
    status: Optional[Status] = None
    name: Optional[str] = None
    nameAlternate: Optional[str] = None
    map: Optional[MapDto] = None
    locationProfile: Optional[LocationProfileDto] = None
    schedulerProfile: Optional[SchedulerProfileDto] = None
    points: Optional[List[Dict[str, float]]] = None


class LocationProfileDto(BaseModel):
    id: Optional[int] = None
    organisation: Optional[OrganisationDto] = None
    name: Optional[str] = None
    parameters: Optional[JsonNode] = None
    version: Optional[int] = None


class MapDto(BaseModel):
    id: Optional[int] = None
    status: Optional[Status] = None
    name: Optional[str] = None
    building: Optional[BuildingDto] = None
    image: Optional[str] = None
    locations: Optional[List[LocationDto]] = None


class OrganisationDto(BaseModel):
    id: Optional[int] = None
    status: Optional[Status] = None
    name: Optional[str] = None
    country: Optional[str] = None
    address: Optional[str] = None
    address2: Optional[str] = None
    zipCode: Optional[str] = None
    city: Optional[str] = None
    registrationCode: Optional[str] = None
    buildings: Optional[List[BuildingDto]] = []
    locationProfiles: Optional[List[LocationProfileDto]] = []
    schedulerProfiles: Optional[List[SchedulerProfileDto]] = []


class SchedulerProfileDto(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    settings: JsonNode
    status: Optional[Status5Enum] = None
    organisation: Optional[OrganisationDto] = None
    locations: Optional[List[LocationDto]] = []


class DeviceDto(BaseModel):
    id: Optional[int] = None
    externalId: str
    deviceModel: Optional[DeviceModelDto]
    alias: Optional[str] = None
    integration: Optional[IntegrationDto] = None
    resources: Optional[List[DeviceResourceDto]] = []
    historySyncedAt: Optional[datetime] = None

class MeteringPointDto(BaseModel):
    id: Optional[int] = None
    externalId: str
    deviceModel: DeviceModelDto
    alias: Optional[str] = None
    integration: Optional[IntegrationDto] = None
    resources: Optional[List[DeviceResourceDto]] = []
    historySyncedAt: Optional[datetime] = None

class DeviceResourceDto(BaseModel):
    id: Optional[int] = None
    organisation: Optional[OrganisationDto] = None
    building: Optional[BuildingDto] = None
    map: Optional[MapDto] = None
    location: Optional[LocationDto] = None


class IntegrationDto(BaseModel):
    id: Optional[int] = None
    integrationType: IntegrationType
    userDefined: bool
    settings: Optional[Dict[str, str]] = None
    alias: str
    authorized: Optional[bool] = None
    organisation: Optional[OrganisationDto] = None

# Feedback forms
class FormQuestionBase(BaseModel):
    name: str
    type: str

class FormQuestionResponse(BaseModel):
    date: Optional[date] = None

class FormTextQuestionResponse(FormQuestionResponse):
    username: str
    response: str

class FormTextQuestionDto(FormQuestionBase):
    type: str = Field('Text')
    responses: Optional[List[FormTextQuestionResponse]]

class FormChoiceQuestionResponse(FormQuestionResponse):
    value: str
    count: int

class FormChoiceQuestionBase(FormQuestionBase):
    responses: Optional[List[FormChoiceQuestionResponse]]
    
class FormSingleChoiceQuestionDto(FormChoiceQuestionBase):
    type: str = Field('SingleChoice')

class FormMultipleChoiceQuestionDto(FormChoiceQuestionBase):
    type: str = Field('MultipleChoice')

FormQuestionType = Union[
        FormTextQuestionDto,
        FormSingleChoiceQuestionDto,
        FormMultipleChoiceQuestionDto
    ]