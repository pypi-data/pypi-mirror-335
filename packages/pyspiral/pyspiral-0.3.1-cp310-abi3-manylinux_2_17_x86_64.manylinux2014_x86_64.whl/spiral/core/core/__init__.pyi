from typing import Any, Literal

import pyarrow as pa
from spiral.core.manifests import FragmentManifest
from spiral.core.metastore import PyMetastore
from spiral.core.spec import ColumnGroup, ColumnGroupMetadata, FileFormat, KeyRange, Schema, WriteAheadLog
from spiral.expressions import Expr

class Table:
    def __init__(self, metastore: PyMetastore): ...

    id: str
    root_uri: str
    key_schema: Schema
    metastore: PyMetastore

    def get_wal(self, *, asof: int | None) -> WriteAheadLog: ...
    def get_schema(self, *, asof: int | None) -> Schema: ...
    def get_column_group_metadata(self, column_group: ColumnGroup, *, asof: int | None) -> ColumnGroupMetadata: ...
    def list_column_groups(self, *, asof: int | None) -> list[ColumnGroup] | None: ...

class TableScan:
    def __init__(
        self,
        projection: Expr,
        filter: Expr | None = None,
        asof: int | None = None,
        exclude_keys: bool = False,
        aux_schema: pa.Schema | None = None,
    ) -> TableScan: ...
    def key_schema(self) -> Schema: ...
    def schema(self) -> Schema: ...
    def is_empty(self) -> bool: ...
    def split(self) -> list[KeyRange]: ...
    def table_ids(self) -> list[str]: ...
    def column_groups(self) -> list[ColumnGroup]: ...
    def to_record_batches(
        self,
        key_table: pa.Table | pa.RecordBatch | None = None,
        batch_readahead: int | None = None,
    ) -> pa.RecordBatchReader: ...
    def column_group_scan(self, column_group: ColumnGroup) -> ColumnGroupScan: ...
    def key_space_scan(self, table_id: str) -> KeySpaceScan: ...
    def metrics(self) -> dict[str, Any]: ...

class KeySpaceScan:
    manifest: FragmentManifest

    def key_schema(self) -> Schema: ...

class ColumnGroupScan:
    manifest: FragmentManifest

    def schema(self) -> Schema: ...

class TableTransaction:
    def __init__(self, metastore: PyMetastore, format: FileFormat): ...
    @property
    def status(self) -> str: ...
    def write(self, expr: Expr, *, partition_size_bytes: int | None = None): ...
    def commit(self): ...
    def abort(self): ...
    def metrics(self) -> dict[str, Any]: ...

class TableMaintenance:
    def __init__(self, metastore: PyMetastore, format: FileFormat): ...
    def flush_wal(self): ...
    def compact_key_space(
        self,
        *,
        mode: Literal["plan", "read", "write"] | None = None,
        partition_bytes_min: int | None = None,
    ): ...
    def compact_column_group(
        self,
        column_group: ColumnGroup,
        *,
        mode: Literal["plan", "read", "write"] | None = None,
        partition_bytes_min: int | None = None,
    ): ...
    def metrics(self) -> dict[str, Any]: ...
