.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "bin2pass" "1" "" "" "converts binary input to passwords"
.SH NAME
bin2pass \- converts binary input to passwords
.SH SYNOPSIS
.IP
.EX
bin2pass [d|u|l] [<max size>] [<symbols>] <binary
.EE
.SH DESCRIPTION
\f[CR]bin2pass\f[R] reads standard input, and accepts three optional
parameters (note this is the same syntax as accepted by
\f[CR]sphinx(1)\f[R]):
.IP \[bu] 2
a combination of the letters \[lq]uld\[rq] enabling upper\-, lower\-case
letters and digits respectively.
If this is not provided \f[CR]bin2pass\f[R] defaults to \[lq]uld\[rq].
.IP \[bu] 2
a number setting the maximum length of the password to be converted to.
Note if you specify a larger number than is possible to generate from
the input the output will be padded by leading \[lq]A\[rq] characters.
The default is the longest possible output depending on the input
.IP \[bu] 2
a string listing all the symbols allowed in the password.
Any of the following is allowed (and this is also the default if not
specified):
.IP
.EX
| !\[dq]#$%&\[aq]()*+,\-./:;<=>?\[at][\[rs]]\[ha]_\[ga]{}\[ti]
.EE
.PP
Please note that  is allowed, and also be careful in quoting special
characters that might be interpreted by your shell, such as
\f[CR]\[dq]\f[R], \f[CR]!\f[R], \f[CR]\[rs]\f[R], etc\&...
.SH EXAMPLES
Generate the longest possible random password from /dev/random, with the
resulting password having characters from digits, lower\- and
upper\-case letters and the  and * symbols.
.IP
.EX
dd if=/dev/random bs=1 count=32 | ./pwdsphinx/bin2pass.py \[dq] *\[dq]
.EE
.SH REPORTING BUGS
https://github.com/stef/pwdsphinx/issues/
.SH AUTHOR
Written by Stefan Marsiske.
.SH COPYRIGHT
Copyright Â© 2023 Stefan Marsiske.
License GPLv3+: GNU GPL version 3 or later \c
.UR https://gnu.org/licenses/gpl.html
.UE \c
\&.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH SEE ALSO
\f[CR]sphinx(1)\f[R]
