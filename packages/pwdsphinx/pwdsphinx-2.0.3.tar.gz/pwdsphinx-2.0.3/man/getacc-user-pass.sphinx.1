.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "sphinx\-x11" "1" "" "" "simple script interpreter for integrating password managers with X11"
.SH NAME
sphinx\-x11 \- simple script interpreter for integrating password
managers with X11
.SH DESCRIPTION
\f[CR]sphinx\-x11(1)\f[R] is a simple \[lq]script\[rq] language
interpreter that integrates the SPHINX CLI with X11.
.SH SPHINX\-SCRIPT PARAMETERS
All \f[CR]sphinx\-x11(1)\f[R] scripts expect a username and a hostname
as the first and second parameter respectively.
.SH VOCABULARY
.IP \[bu] 2
\f[CR]type \[dq]text...\[dq]\f[R]: types the text into the currently
focused X11 window.
.IP \[bu] 2
\f[CR]wait\-for\-click\f[R]: waits until the user clicks anywhere.
.IP \[bu] 2
\f[CR]user\f[R]: types the username \- usually given as the first
parameter to the sphinx\-script \- into the currently focused X11
window.
.IP \[bu] 2
\f[CR]host\f[R]: types the hostname \- usually given as the second
parameter to the sphinx\-script \- into the currently focused X11
window.
.IP \[bu] 2
\f[CR]pwd\f[R]: gets a password using \f[CR]getpwd(1)\f[R] and
\f[CR]sphinx(1)\f[R], and types it into the currently focused X11
window.
.IP \[bu] 2
\f[CR]otp\f[R]: calculates the current TOTP pin code using the a TOTP
secret stored in \f[CR]sphinx(1)\f[R] using \f[CR]getpwd(1)\f[R] , which
is then typed into the currently focused X11 window.
.IP \[bu] 2
\f[CR]tab\f[R]: types a tabulator into the current X11 window, possibly
advancing between form\-fields.
.IP \[bu] 2
\f[CR]enter\f[R]: sends an enter key press to the currently focused X11
window, possibly submitting a form.
.IP \[bu] 2
\f[CR]gethost\f[R]: waits for a left mouse\-click on a browser window,
and then copies the URL from the urlbar into the clipboard, and then
strips it down to the hostname and sets an internal \[lq]$host\[rq]
variable that can then be used with \f[CR]host\f[R] or \f[CR]pwd\f[R].
.IP \[bu] 2
\f[CR]getuser\f[R] dispatches a \f[CR]sphinx list $host\f[R] and if more
than one user is returned, offers them in a dmenu widget, if/when one
user is found/selected it is set as an internal \f[CR]$user\f[R]
variable which can then used for verbs like \f[CR]user\f[R] or
\f[CR]pwd\f[R].
.PP
Any lines not consisting of these tokens are simply ignored.
.SH OTP SUPPORT
In this interpreter/implementation a TOTP value is assumed to be stored
with a username prefixed with \f[CR]otp://\f[R], so that a regular login
name can co\-exist with the according TOTP secret in sphinx.
.PP
For example in a common 2FA login the first \f[CR]pwd\f[R] operation
uses e.g.\ \f[CR]joe\f[R] as a username and then for the TOTP value it
uses \f[CR]otp://joe\f[R] as the username, which allows for seamless 2FA
login.
.SH DEFAULT SCRIPTS
\f[CR]sphinx\-x11(1)\f[R] comes with 5 default sphinx\-scripts (note on
debian and derivates instead of a \f[CR].sphinx\f[R] extension they have
a \f[CR]sx11\-\f[R] prefix):
.IP \[bu] 2
pass.sphinx  : gets a password using \f[CR]sphinx(1)\f[R], types it and
submits it.
.IP \[bu] 2
user\-pass.sphinx  : gets a password using \f[CR]sphinx(1)\f[R], types
the user, then the password and submits it.
.IP \[bu] 2
user\-pass\-otp.sphinx  : gets a password, and a TOTP pin code using
\f[CR]sphinx(1)\f[R], first types the username, then the password, then
submits the form, and finally enters the TOTP pin and submits that as
well.
.IP \[bu] 2
otp.sphinx  : gets a TOTP pin code using \f[CR]sphinx(1)\f[R] and types
and submits it.
.IP \[bu] 2
getacc\-user\-pass.sphinx: waits for a click on a browser window, from
with it gets the target \f[CR]host\f[R] value, then using that uses
\f[CR]sphinx list\f[R] to get the users associated with this host, and
if one is selected, waits for another click in the user input field of a
login form, then gets a password using \f[CR]sphinx(1)\f[R], types the
user, then the password and submits it.
.PP
Each of these scripts waits for the user to click, then they retrieve
the relevant password (and/or TOTP token) before inserting it into the
form fields, navigating between them with \f[CR]tab\f[R] and
\f[CR]enter\f[R].
You are welcome to contribute adapted sphinx\-scripts for websites that
have other login semantics.
.SH EXAMPLE
As an example the \f[CR]user\-pass\-otp.sphinx\f[R] script is explained
below:
.IP
.EX
#!sphinx\-x11

wait\-for\-click
user
tab
pwd
tab
enter
wait\-for\-click
otp
enter
.EE
.PP
The first line specifies \f[CR]sphinx\-x11(1)\f[R] as the interpreter.
The script itself then waits for the user to click (line 3), then in
line 4 inserts the \f[CR]user\f[R] \- which is specified as the first
parameter to this script.
Line 5 injects a \f[CR]tab\f[R] so the next form field is selected.
Then pwdsphinx/getpwd is used to get the password for \f[CR]user\f[R]
and \f[CR]host\f[R] \- the host being the 2nd parameter to this script.
\f[CR]enter\f[R] is used to submit this form in line 8.
Since this is a new form the script waits (line 9) for the user to click
in the field where the TOTP value needs to be inserted.
Then in line 10 the TOTP value is queried using pwdsphinx/getpwd, and
finally in the last line the TOTP value is submitted by injecting
\f[CR]enter\f[R] into the application.
.SH REPORTING BUGS
https://github.com/stef/pwdsphinx/issues/
.SH AUTHOR
Written by Stefan Marsiske.
.SH COPYRIGHT
Copyright Â© 2023 Stefan Marsiske.
License GPLv3+: GNU GPL version 3 or later \c
.UR https://gnu.org/licenses/gpl.html
.UE \c
\&.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH SEE ALSO
\f[CR]sphinx(1)\f[R], \f[CR]type\-pwd(1)\f[R],
\f[CR]exec\-on\-click(1)\f[R], \f[CR]getpwd(1)\f[R]
