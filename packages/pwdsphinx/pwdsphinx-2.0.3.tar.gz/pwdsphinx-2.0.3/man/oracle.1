.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "oracle" "1" "" "" "server for the SPHINX password manager"
.SH NAME
oracle \- server for the SPHINX password manager
.SH SYNOPSIS
\f[CR]oracle [init]\f[R]
.SH DESCRIPTION
The SPHINX protocol only makes sense if the server (called oracle) is
somewhere else than where you type your password, pwdsphinx comes with a
server implemented in python3 which you can host off\-site from your
usual desktop/smartphone.
.PP
The server can be started simply by running \f[CR]oracle\f[R] it does
not take any parameters.
.SH CONFIGURATION
The server can be configured by any of the following files:
.IP \[bu] 2
\f[CR]/etc/sphinx/config\f[R]
.IP \[bu] 2
\f[CR]\[ti]/.sphinxrc\f[R]
.IP \[bu] 2
\f[CR]\[ti]/.config/sphinx/config\f[R]
.IP \[bu] 2
\f[CR]./sphinx.cfg\f[R]
.PP
Files are parsed in this order, this means global settings can be
overridden by per\-user and per\-directory settings.
.PP
The server can be configured by changing the variables in the
\f[CR][server]\f[R] section of the config file.
.PP
The \f[CR]address\f[R] is the IP address on which the server is
listening, default is \f[CR]localhost\f[R] \- you might want to change
that.
.PP
The \f[CR]port\f[R] where the server is listening is by default 2355.
Another recommended values is to use port 433 which is allowed by most
firewalls while 2355 is not.
.PP
\f[CR]ssl_key\f[R] and \f[CR]ssl_cert\f[R] must be specified, they point
at a traditional TLS certificate and secret key file.
It is recommended to not use self\-signed certs, but to use certs that
signed by CAs that are recognized widely by browsers and other TLS
clients.
.PP
\f[CR]datadir\f[R] specifies the data directory where all the device
\[lq]secrets\[rq] are stored, this defaults to \[lq]data/\[rq] in the
current directory.
You might want to back up this directory from time to time to an
encrypted medium.
.PP
\f[CR]verbose\f[R] enables logging to standard output.
.PP
\f[CR]timeout\f[R] sets the timeout for any connection the server keeps
open.
.PP
\f[CR]max_kids\f[R] sets the number maximum requests handled in
parallel.
The \f[CR]timeout\f[R] config variable makes sure that all handlers are
recycled in predictable time.
.PP
\f[CR]rl_decay\f[R] specifies the number of seconds after which a
ratelimit level decays to an easier difficulty.
.PP
\f[CR]rl_threshold\f[R] increase the difficulty of ratelimit puzzles if
not decaying.
.PP
\f[CR]rl_gracetime\f[R] gracetime in seconds added to the expected time
to solve a rate\-limiting puzzle.
.PP
\f[CR]ltsigkey\f[R] a path pointing at a long\-term signature private
key.
This can be generated by running \f[CR]oracle init\f[R].
.SH Initializing an oracle
Given a configuration, the oracle can generate its own long\-term
signature key.
To do so, simply run \f[CR]oracle init\f[R] and it will store the
private key at the location pointed by the \f[CR]ltsigkey\f[R]
configuration value.
This operation will also output the public key, at the same location as
the private key, but with a \f[CR].pub\f[R] extension.
Furthermore the public key is also displayed as a Base64 encoded string
on the standard output.
.SH SECURITY CONSIDERATIONS
The configuration values \f[CR]max_kids\f[R] and \f[CR]timeout\f[R] can
be used to tune how many requests are served in parallel and how long
each request is allowed to take before it gets killed.
An attacker might be able to run a denial\-of\-service attack against
your server, by keeping all \f[CR]max_kids\f[R] connections
\[lq]occupied\[rq].
.PP
Since the server does only know about failed authorizations for
management operations, but not about correctness of master passwords for
get requests, there is no way to mitigate master password bruteforce
attempts aside from ratelimiting.
By tuning the configuration variables starting with \f[CR]rl_\f[R] it is
possible to configure this.
If you have clients that have less than 1G RAM, it might be possible to
increase the difficulty to the maximum level where those devices will
not be able to solve the ratelimting puzzles.
Rate\-limiting in general should not be noticeable, only if dozens of
get requests are served to the same record.
At the highest level the solution should take about 20\-40 seconds
(depending on your cpu).
.SH REPORTING BUGS
https://github.com/stef/pwdsphinx/issues/
.SH AUTHOR
Written by Stefan Marsiske.
.SH COPYRIGHT
Copyright Â© 2024 Stefan Marsiske.
License GPLv3+: GNU GPL version 3 or later \c
.UR https://gnu.org/licenses/gpl.html
.UE \c
\&.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH SEE ALSO
\f[CR]sphinx(1)\f[R], \f[CR]getpwd(1)\f[R]
