name: Release

on:
  push:
    tags:
      - 'v*' # Run workflow on version tags, e.g. v1.0.0

jobs:
  release:
    name: Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for setuptools_scm to work

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: ${{ matrix.target }}

    - name: Extract version from tag
      id: extract_version
      shell: bash
      run: |
        # Strip v prefix from tag
        VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Install UV and dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install uv
        uv venv .venv

    - name: Activate virtual environment and install dependencies
      shell: bash
      run: |
        source .venv/bin/activate
        uv pip install maturin tomli

    - name: Update version
      shell: bash
      run: |
        source .venv/bin/activate
        python sync_version.py --set ${{ steps.extract_version.outputs.version }}

    - name: Build wheels
      env:
        VERSION: ${{ steps.extract_version.outputs.version }}
      shell: bash
      run: |
        source .venv/bin/activate
        maturin build --release --out dist
      
    - name: Build universal2 wheels (macOS only)
      if: matrix.os == 'macos-latest'
      env:
        VERSION: ${{ steps.extract_version.outputs.version }}
        MACOSX_DEPLOYMENT_TARGET: "10.14"
      shell: bash
      run: |
        source .venv/bin/activate
        # On macOS, build universal2 wheels (x86_64 + arm64)
        maturin build --release --universal2 --out dist

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
        path: dist/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Extract version from tag
        id: extract_version
        shell: bash
        run: |
          # Strip v prefix from tag
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Install UV and dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install uv
          uv venv .venv
          source .venv/bin/activate
          uv pip install maturin tomli
          
      - name: Update version
        shell: bash
        run: |
          source .venv/bin/activate
          python sync_version.py --set ${{ steps.extract_version.outputs.version }}
          
      - name: Build sdist
        env:
          VERSION: ${{ steps.extract_version.outputs.version }}
        shell: bash
        run: |
          source .venv/bin/activate
          maturin sdist --out dist
          
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish-pypi:
    name: Publish to PyPI
    needs: [release, build-sdist]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
          
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
          
      - name: List files to be published
        run: |
          ls -la dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist/

  publish-github:
    name: Create GitHub Release
    needs: publish-pypi
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version and changelog
        id: extract_info
        shell: bash
        run: |
          # Strip v prefix from tag
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Try to extract changelog for this version if available
          # Default message if no changelog is found
          CHANGELOG="See the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details."
          
          if [ -f "CHANGELOG.md" ]; then
            SECTION=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d')
            if [ ! -z "$SECTION" ]; then
              CHANGELOG="$SECTION"
            fi
          fi
          
          # Escape newlines for GitHub Actions output
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: artifacts
          merge-multiple: true
          
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: "rs_bpe ${{ steps.extract_info.outputs.version }}"
          body: "${{ steps.extract_info.outputs.changelog }}"
          files: artifacts/*
          fail_on_unmatched_files: true
          generate_release_notes: true 