# Generated by Django 5.1.6 on 2025-02-22 14:58

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "identifier",
                    models.TextField(
                        help_text="The unique identifier for the location",
                        unique=True,
                        verbose_name="identifier",
                    ),
                ),
                (
                    "type",
                    models.TextField(
                        blank=True,
                        help_text="The location type, e.g. personal, hotspot, town, etc.",
                        verbose_name="type",
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        help_text="The name of the location", verbose_name="name"
                    ),
                ),
                (
                    "county",
                    models.TextField(
                        blank=True,
                        help_text="The name of the county (subnational2).",
                        verbose_name="county",
                    ),
                ),
                (
                    "county_code",
                    models.TextField(
                        blank=True,
                        db_index=True,
                        help_text="The code used to identify the county.",
                        verbose_name="county code",
                    ),
                ),
                (
                    "state",
                    models.TextField(
                        help_text="The name of the state (subnational1).",
                        verbose_name="state",
                    ),
                ),
                (
                    "state_code",
                    models.TextField(
                        db_index=True,
                        help_text="The code used to identify the state.",
                        verbose_name="state code",
                    ),
                ),
                (
                    "country",
                    models.TextField(
                        help_text="The name of the country.", verbose_name="country"
                    ),
                ),
                (
                    "country_code",
                    models.TextField(
                        db_index=True,
                        help_text="The code used to identify the country.",
                        verbose_name="country code",
                    ),
                ),
                (
                    "iba_code",
                    models.TextField(
                        blank=True,
                        help_text="The code used to identify an Important Bird Area.",
                        verbose_name="IBA code",
                    ),
                ),
                (
                    "bcr_code",
                    models.TextField(
                        blank=True,
                        help_text="The code used to identify a Bird Conservation Region.",
                        verbose_name="BCR code",
                    ),
                ),
                (
                    "usfws_code",
                    models.TextField(
                        blank=True,
                        help_text="The code used to identify a US Fish & Wildlife Service region.",
                        verbose_name="USFWS code",
                    ),
                ),
                (
                    "atlas_block",
                    models.TextField(
                        blank=True,
                        help_text="The code used to identify an area for an atlas.",
                        verbose_name="atlas block",
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="The decimal latitude of the location, relative to the equator",
                        max_digits=9,
                        null=True,
                        verbose_name="latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="The decimal longitude of the location, relative to the prime meridian",
                        max_digits=10,
                        null=True,
                        verbose_name="longitude",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        help_text="URL of the location page on eBird.",
                        verbose_name="url",
                    ),
                ),
                (
                    "hotspot",
                    models.BooleanField(
                        blank=True,
                        help_text="Is the location a hotspot",
                        null=True,
                        verbose_name="is hotspot",
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Data describing a Location",
                        verbose_name="Data",
                    ),
                ),
            ],
            options={
                "verbose_name": "location",
                "verbose_name_plural": "locations",
            },
        ),
        migrations.CreateModel(
            name="Observer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "identifier",
                    models.TextField(
                        help_text="The code for the person submitted the checklist.",
                        verbose_name="identifier",
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        blank=True,
                        help_text="The observer's name.",
                        unique=True,
                        verbose_name="name",
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Data describing an Observer.",
                        verbose_name="Data",
                    ),
                ),
            ],
            options={
                "verbose_name": "observer",
                "verbose_name_plural": "observers",
            },
        ),
        migrations.CreateModel(
            name="Species",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "taxon_order",
                    models.IntegerField(
                        blank=True,
                        help_text="The position in the eBird/Clements taxonomic order.",
                        null=True,
                        verbose_name="taxonomy order",
                    ),
                ),
                (
                    "order",
                    models.TextField(
                        blank=True,
                        help_text="The order, e.g. Struthioniformes, from the eBird/Clements taxonomy.",
                        verbose_name="order",
                    ),
                ),
                (
                    "category",
                    models.TextField(
                        blank=True,
                        help_text="The category from the eBird/Clements taxonomy.",
                        verbose_name="category",
                    ),
                ),
                (
                    "species_code",
                    models.TextField(
                        blank=True,
                        help_text="The species code, e.g. ostric2, used in the eBird API.",
                        verbose_name="species code",
                    ),
                ),
                (
                    "family_code",
                    models.TextField(
                        blank=True,
                        help_text="The family code, e.g. struth1, used in the eBird API.",
                        verbose_name="family code",
                    ),
                ),
                (
                    "common_name",
                    models.TextField(
                        help_text="The species common name in the eBird/Clements taxonomy.",
                        verbose_name="common name",
                    ),
                ),
                (
                    "scientific_name",
                    models.TextField(
                        help_text="The species scientific name in the eBird/Clements taxonomy.",
                        verbose_name="scientific name",
                    ),
                ),
                (
                    "family_common_name",
                    models.TextField(
                        blank=True,
                        help_text="The common name for the species family in the eBird/Clements taxonomy.",
                        verbose_name="family common name",
                    ),
                ),
                (
                    "family_scientific_name",
                    models.TextField(
                        blank=True,
                        help_text="The scientific name for the species family in the eBird/Clements taxonomy.",
                        verbose_name="family scientific name",
                    ),
                ),
                (
                    "subspecies_common_name",
                    models.TextField(
                        blank=True,
                        help_text="The subspecies, group or form common name in the eBird/Clements taxonomy.",
                        verbose_name="subspecies common name",
                    ),
                ),
                (
                    "subspecies_scientific_name",
                    models.TextField(
                        blank=True,
                        help_text="The subspecies, group or form scientific name in the eBird/Clements taxonomy.",
                        verbose_name="Scientific name",
                    ),
                ),
                (
                    "exotic_code",
                    models.TextField(
                        blank=True,
                        help_text="The code used if the species is non-native.",
                        verbose_name="exotic code",
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Data describing a Species.",
                        verbose_name="Data",
                    ),
                ),
            ],
            options={
                "verbose_name": "species",
                "verbose_name_plural": "species",
            },
        ),
        migrations.CreateModel(
            name="Checklist",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date and time the checklist was added to eBird",
                        null=True,
                        verbose_name="created",
                    ),
                ),
                (
                    "edited",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date and time the eBird checklist was last edited",
                        null=True,
                        verbose_name="edited",
                    ),
                ),
                (
                    "identifier",
                    models.TextField(
                        help_text="The unique identifier for the checklist.",
                        unique=True,
                        verbose_name="identifier",
                    ),
                ),
                (
                    "group",
                    models.TextField(
                        blank=True,
                        help_text="The identifier for a group of observers.",
                        verbose_name="group",
                    ),
                ),
                (
                    "observer_count",
                    models.IntegerField(
                        blank=True,
                        help_text="The total number of observers.",
                        null=True,
                        verbose_name="observer count",
                    ),
                ),
                (
                    "species_count",
                    models.IntegerField(
                        blank=True,
                        help_text="The number of species reported.",
                        null=True,
                        verbose_name="species count",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        db_index=True,
                        help_text="The date the checklist was started.",
                        verbose_name="date",
                    ),
                ),
                (
                    "time",
                    models.TimeField(
                        blank=True,
                        help_text="The time the checklist was started.",
                        null=True,
                        verbose_name="time",
                    ),
                ),
                (
                    "started",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="The date and time the checklist was started.",
                        null=True,
                        verbose_name="date & time",
                    ),
                ),
                (
                    "protocol",
                    models.TextField(
                        blank=True,
                        help_text="The protocol followed, e.g. travelling, stationary, etc.",
                        verbose_name="protocol",
                    ),
                ),
                (
                    "protocol_code",
                    models.TextField(
                        blank=True,
                        help_text="The code used to identify the protocol.",
                        verbose_name="protocol code",
                    ),
                ),
                (
                    "project_code",
                    models.TextField(
                        blank=True,
                        help_text="The code used to identify the project (portal).",
                        verbose_name="project code",
                    ),
                ),
                (
                    "duration",
                    models.IntegerField(
                        blank=True,
                        help_text="The number of minutes spent counting.",
                        null=True,
                        verbose_name="duration",
                    ),
                ),
                (
                    "distance",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="The distance, in metres, covered while travelling.",
                        max_digits=6,
                        null=True,
                        verbose_name="distance",
                    ),
                ),
                (
                    "area",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="The area covered, in hectares.",
                        max_digits=6,
                        null=True,
                        verbose_name="area",
                    ),
                ),
                (
                    "complete",
                    models.BooleanField(
                        default=False,
                        help_text="All species seen are reported.",
                        verbose_name="complete",
                    ),
                ),
                (
                    "comments",
                    models.TextField(
                        blank=True,
                        help_text="Any comments about the checklist.",
                        verbose_name="comments",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        help_text="URL where the original checklist can be viewed.",
                        verbose_name="url",
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Data describing a Checklist.",
                        verbose_name="Data",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        help_text="The location where checklist was made.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="checklists",
                        to="checklists.location",
                        verbose_name="location",
                    ),
                ),
                (
                    "observer",
                    models.ForeignKey(
                        help_text="The person who submitted the checklist.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="checklists",
                        to="checklists.observer",
                        verbose_name="observer",
                    ),
                ),
            ],
            options={
                "verbose_name": "checklist",
                "verbose_name_plural": "checklists",
            },
        ),
        migrations.CreateModel(
            name="Observation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "edited",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date and time the eBird checklist was last edited",
                        null=True,
                        verbose_name="edited",
                    ),
                ),
                (
                    "identifier",
                    models.TextField(
                        help_text="A global unique identifier for the observation.",
                        unique=True,
                        verbose_name="identifier",
                    ),
                ),
                (
                    "count",
                    models.IntegerField(
                        blank=True,
                        help_text="The number of birds seen.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="count",
                    ),
                ),
                (
                    "breeding_code",
                    models.TextField(
                        blank=True,
                        help_text="eBird code identifying the breeding status",
                        verbose_name="breeding code",
                    ),
                ),
                (
                    "breeding_category",
                    models.TextField(
                        blank=True,
                        help_text="eBird code identifying the breeding category",
                        verbose_name="breeding category",
                    ),
                ),
                (
                    "behavior_code",
                    models.TextField(
                        blank=True,
                        help_text="eBird code identifying the behaviour",
                        verbose_name="behaviour code",
                    ),
                ),
                (
                    "age_sex",
                    models.TextField(
                        blank=True,
                        help_text="The number of birds seen in each combination of age and sex.",
                        verbose_name="Age & Sex",
                    ),
                ),
                (
                    "media",
                    models.BooleanField(
                        blank=True,
                        help_text="Has audio, photo or video uploaded to the Macaulay library.",
                        null=True,
                        verbose_name="has media",
                    ),
                ),
                (
                    "approved",
                    models.BooleanField(
                        blank=True,
                        help_text="Has the observation been accepted by eBird's review process.",
                        null=True,
                        verbose_name="Approved",
                    ),
                ),
                (
                    "reviewed",
                    models.BooleanField(
                        blank=True,
                        help_text="Was the observation reviewed because it failed automatic checks.",
                        null=True,
                        verbose_name="Reviewed",
                    ),
                ),
                (
                    "reason",
                    models.TextField(
                        blank=True,
                        help_text="The reason given for the observation to be marked as not confirmed.",
                        verbose_name="Reason",
                    ),
                ),
                (
                    "comments",
                    models.TextField(
                        blank=True,
                        help_text="Any comments about the observation.",
                        verbose_name="comments",
                    ),
                ),
                (
                    "urn",
                    models.TextField(
                        blank=True,
                        help_text="The globally unique identifier for the observation",
                        verbose_name="URN",
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Data describing an Observation.",
                        verbose_name="Data",
                    ),
                ),
                (
                    "checklist",
                    models.ForeignKey(
                        help_text="The checklist this observation belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="observations",
                        to="checklists.checklist",
                        verbose_name="checklist",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        help_text="The location where the observation was made.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="observations",
                        to="checklists.location",
                        verbose_name="location",
                    ),
                ),
                (
                    "observer",
                    models.ForeignKey(
                        help_text="The person who made the observation.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="observations",
                        to="checklists.observer",
                        verbose_name="observer",
                    ),
                ),
                (
                    "species",
                    models.ForeignKey(
                        help_text="The identified species.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="observations",
                        to="checklists.species",
                        verbose_name="species",
                    ),
                ),
            ],
            options={
                "verbose_name": "observation",
                "verbose_name_plural": "observations",
            },
        ),
    ]
