Metadata-Version: 2.4
Name: dbtk-dnabert
Version: 1.2.1
Summary: A general DNABERT implementation using the deepbio-toolkit.
Author-email: "David W. Ludwig II" <davidludwigii@gmail.com>
License: MIT License
        
        Copyright (c) 2024 DLii-Research
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/DLii-Research/dbtk-dnabert
Project-URL: Bug Tracker, https://github.com/DLii-Research/dbtk-dnabert/issues
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: deepbio-toolkit>=0.4.1
Requires-Dist: lightning
Dynamic: license-file

# DNABERT

A complete DNABERT implementation in Pytorch using th deepbio-toolkit library.

## Model Configuration

Template model configurations can be generated using the `dbtk model config` command.

## Pre-training

The model can be pre-trained using the supplied configurations with the command:

```bash
dbtk model fit -c configs/768d.yaml ./logs/768d
```

## Exporting

The trained model can be exported to a Huggingface model with the following command.

```bash
dbtk model export ./logs/768d/last.ckpt ./exports/768d
```
