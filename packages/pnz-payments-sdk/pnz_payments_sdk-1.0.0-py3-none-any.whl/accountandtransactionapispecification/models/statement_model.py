# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.statement_amount import StatementAmount
from accountandtransactionapispecification.models.statement_benefit import StatementBenefit
from accountandtransactionapispecification.models.statement_date_time import StatementDateTime
from accountandtransactionapispecification.models.statement_fee import StatementFee
from accountandtransactionapispecification.models.statement_interest import StatementInterest
from accountandtransactionapispecification.models.statement_rate import StatementRate
from accountandtransactionapispecification.models.statement_value import StatementValue


class StatementModel(object):

    """Implementation of the 'StatementModel' model.

    Provides further details on a statement resource.

    Attributes:
        account_id (str): A unique and immutable identifier used to identify
            the account resource. This identifier has no meaning to the
            account owner.
        statement_id (str): Unique identifier for the statement resource
            within an servicing institution. This identifier is both unique
            and immutable.
        statement_reference (str): Unique reference for the statement. This
            reference may be optionally populated if available.
        mtype (StatementTypeEnum): Statement type, in a coded form.
        start_date_time (datetime): Date and time at which the statement
            period starts. All dates in the JSON payloads are represented in
            ISO 8601 date-time format. All date-time fields in responses must
            include the timezone. An example is below:
            2017-04-05T10:43:07+00:00
        end_date_time (datetime): Date and time at which the statement period
            ends. All dates in the JSON payloads are represented in ISO 8601
            date-time format. All date-time fields in responses must include
            the timezone. An example is below: 2017-04-05T10:43:07+00:00
        creation_date_time (datetime): Date and time at which the resource was
            created. All dates in the JSON payloads are represented in ISO
            8601 date-time format. All date-time fields in responses must
            include the timezone. An example is below:
            2017-04-05T10:43:07+00:00
        statement_description (List[str]): Other descriptions that may be
            available for the statement resource.
        statement_benefit (List[StatementBenefit]): Set of elements used to
            provide details of a benefit or reward amount for the statement
            resource.
        statement_fee (List[StatementFee]): Set of elements used to provide
            details of a fee for the statement resource.
        statement_interest (List[StatementInterest]): Set of elements used to
            provide details of a generic interest amount related to the
            statement resource.
        statement_date_time (List[StatementDateTime]): Set of elements used to
            provide details of a generic date time for the statement resource.
        statement_rate (List[StatementRate]): Set of elements used to provide
            details of a generic rate related to the statement resource.
        statement_value (List[StatementValue]): Set of elements used to
            provide details of a generic number value related to the statement
            resource.
        statement_amount (List[StatementAmount]): Set of elements used to
            provide details of a generic amount for the statement resource.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_id": 'AccountId',
        "mtype": 'Type',
        "start_date_time": 'StartDateTime',
        "end_date_time": 'EndDateTime',
        "creation_date_time": 'CreationDateTime',
        "statement_id": 'StatementId',
        "statement_reference": 'StatementReference',
        "statement_description": 'StatementDescription',
        "statement_benefit": 'StatementBenefit',
        "statement_fee": 'StatementFee',
        "statement_interest": 'StatementInterest',
        "statement_date_time": 'StatementDateTime',
        "statement_rate": 'StatementRate',
        "statement_value": 'StatementValue',
        "statement_amount": 'StatementAmount'
    }

    _optionals = [
        'statement_id',
        'statement_reference',
        'statement_description',
        'statement_benefit',
        'statement_fee',
        'statement_interest',
        'statement_date_time',
        'statement_rate',
        'statement_value',
        'statement_amount',
    ]

    def __init__(self,
                 account_id=None,
                 mtype=None,
                 start_date_time=None,
                 end_date_time=None,
                 creation_date_time=None,
                 statement_id=APIHelper.SKIP,
                 statement_reference=APIHelper.SKIP,
                 statement_description=APIHelper.SKIP,
                 statement_benefit=APIHelper.SKIP,
                 statement_fee=APIHelper.SKIP,
                 statement_interest=APIHelper.SKIP,
                 statement_date_time=APIHelper.SKIP,
                 statement_rate=APIHelper.SKIP,
                 statement_value=APIHelper.SKIP,
                 statement_amount=APIHelper.SKIP):
        """Constructor for the StatementModel class"""

        # Initialize members of the class
        self.account_id = account_id 
        if statement_id is not APIHelper.SKIP:
            self.statement_id = statement_id 
        if statement_reference is not APIHelper.SKIP:
            self.statement_reference = statement_reference 
        self.mtype = mtype 
        self.start_date_time = APIHelper.apply_datetime_converter(start_date_time, APIHelper.RFC3339DateTime) if start_date_time else None 
        self.end_date_time = APIHelper.apply_datetime_converter(end_date_time, APIHelper.RFC3339DateTime) if end_date_time else None 
        self.creation_date_time = APIHelper.apply_datetime_converter(creation_date_time, APIHelper.RFC3339DateTime) if creation_date_time else None 
        if statement_description is not APIHelper.SKIP:
            self.statement_description = statement_description 
        if statement_benefit is not APIHelper.SKIP:
            self.statement_benefit = statement_benefit 
        if statement_fee is not APIHelper.SKIP:
            self.statement_fee = statement_fee 
        if statement_interest is not APIHelper.SKIP:
            self.statement_interest = statement_interest 
        if statement_date_time is not APIHelper.SKIP:
            self.statement_date_time = statement_date_time 
        if statement_rate is not APIHelper.SKIP:
            self.statement_rate = statement_rate 
        if statement_value is not APIHelper.SKIP:
            self.statement_value = statement_value 
        if statement_amount is not APIHelper.SKIP:
            self.statement_amount = statement_amount 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else None
        mtype = dictionary.get("Type") if dictionary.get("Type") else None
        start_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("StartDateTime")).datetime if dictionary.get("StartDateTime") else None
        end_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("EndDateTime")).datetime if dictionary.get("EndDateTime") else None
        creation_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("CreationDateTime")).datetime if dictionary.get("CreationDateTime") else None
        statement_id = dictionary.get("StatementId") if dictionary.get("StatementId") else APIHelper.SKIP
        statement_reference = dictionary.get("StatementReference") if dictionary.get("StatementReference") else APIHelper.SKIP
        statement_description = dictionary.get("StatementDescription") if dictionary.get("StatementDescription") else APIHelper.SKIP
        statement_benefit = None
        if dictionary.get('StatementBenefit') is not None:
            statement_benefit = [StatementBenefit.from_dictionary(x) for x in dictionary.get('StatementBenefit')]
        else:
            statement_benefit = APIHelper.SKIP
        statement_fee = None
        if dictionary.get('StatementFee') is not None:
            statement_fee = [StatementFee.from_dictionary(x) for x in dictionary.get('StatementFee')]
        else:
            statement_fee = APIHelper.SKIP
        statement_interest = None
        if dictionary.get('StatementInterest') is not None:
            statement_interest = [StatementInterest.from_dictionary(x) for x in dictionary.get('StatementInterest')]
        else:
            statement_interest = APIHelper.SKIP
        statement_date_time = None
        if dictionary.get('StatementDateTime') is not None:
            statement_date_time = [StatementDateTime.from_dictionary(x) for x in dictionary.get('StatementDateTime')]
        else:
            statement_date_time = APIHelper.SKIP
        statement_rate = None
        if dictionary.get('StatementRate') is not None:
            statement_rate = [StatementRate.from_dictionary(x) for x in dictionary.get('StatementRate')]
        else:
            statement_rate = APIHelper.SKIP
        statement_value = None
        if dictionary.get('StatementValue') is not None:
            statement_value = [StatementValue.from_dictionary(x) for x in dictionary.get('StatementValue')]
        else:
            statement_value = APIHelper.SKIP
        statement_amount = None
        if dictionary.get('StatementAmount') is not None:
            statement_amount = [StatementAmount.from_dictionary(x) for x in dictionary.get('StatementAmount')]
        else:
            statement_amount = APIHelper.SKIP
        # Return an object of this model
        return cls(account_id,
                   mtype,
                   start_date_time,
                   end_date_time,
                   creation_date_time,
                   statement_id,
                   statement_reference,
                   statement_description,
                   statement_benefit,
                   statement_fee,
                   statement_interest,
                   statement_date_time,
                   statement_rate,
                   statement_value,
                   statement_amount)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!r}, '
                f'statement_id={(self.statement_id if hasattr(self, "statement_id") else None)!r}, '
                f'statement_reference={(self.statement_reference if hasattr(self, "statement_reference") else None)!r}, '
                f'mtype={self.mtype!r}, '
                f'start_date_time={self.start_date_time!r}, '
                f'end_date_time={self.end_date_time!r}, '
                f'creation_date_time={self.creation_date_time!r}, '
                f'statement_description={(self.statement_description if hasattr(self, "statement_description") else None)!r}, '
                f'statement_benefit={(self.statement_benefit if hasattr(self, "statement_benefit") else None)!r}, '
                f'statement_fee={(self.statement_fee if hasattr(self, "statement_fee") else None)!r}, '
                f'statement_interest={(self.statement_interest if hasattr(self, "statement_interest") else None)!r}, '
                f'statement_date_time={(self.statement_date_time if hasattr(self, "statement_date_time") else None)!r}, '
                f'statement_rate={(self.statement_rate if hasattr(self, "statement_rate") else None)!r}, '
                f'statement_value={(self.statement_value if hasattr(self, "statement_value") else None)!r}, '
                f'statement_amount={(self.statement_amount if hasattr(self, "statement_amount") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!s}, '
                f'statement_id={(self.statement_id if hasattr(self, "statement_id") else None)!s}, '
                f'statement_reference={(self.statement_reference if hasattr(self, "statement_reference") else None)!s}, '
                f'mtype={self.mtype!s}, '
                f'start_date_time={self.start_date_time!s}, '
                f'end_date_time={self.end_date_time!s}, '
                f'creation_date_time={self.creation_date_time!s}, '
                f'statement_description={(self.statement_description if hasattr(self, "statement_description") else None)!s}, '
                f'statement_benefit={(self.statement_benefit if hasattr(self, "statement_benefit") else None)!s}, '
                f'statement_fee={(self.statement_fee if hasattr(self, "statement_fee") else None)!s}, '
                f'statement_interest={(self.statement_interest if hasattr(self, "statement_interest") else None)!s}, '
                f'statement_date_time={(self.statement_date_time if hasattr(self, "statement_date_time") else None)!s}, '
                f'statement_rate={(self.statement_rate if hasattr(self, "statement_rate") else None)!s}, '
                f'statement_value={(self.statement_value if hasattr(self, "statement_value") else None)!s}, '
                f'statement_amount={(self.statement_amount if hasattr(self, "statement_amount") else None)!s})')
