# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper


class Error(object):

    """Implementation of the 'Error' model.

    Attributes:
        error_code (ErrorCodeEnum): Low level textual error code.
        message (str): A free text description of the error that occurred.
            E.g., 'A mandatory field isn't supplied'.
        path (str): A recommended but optional reference to the JSON Path of
            the field with error, e.g., Data.Consent.InstructedAmount.Currency
        url (str): URL to help remediate the problem, provide more information
            or to API Reference.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "error_code": 'ErrorCode',
        "message": 'Message',
        "path": 'Path',
        "url": 'Url'
    }

    _optionals = [
        'path',
        'url',
    ]

    def __init__(self,
                 error_code=None,
                 message=None,
                 path=APIHelper.SKIP,
                 url=APIHelper.SKIP):
        """Constructor for the Error class"""

        # Initialize members of the class
        self.error_code = error_code 
        self.message = message 
        if path is not APIHelper.SKIP:
            self.path = path 
        if url is not APIHelper.SKIP:
            self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        error_code = dictionary.get("ErrorCode") if dictionary.get("ErrorCode") else None
        message = dictionary.get("Message") if dictionary.get("Message") else None
        path = dictionary.get("Path") if dictionary.get("Path") else APIHelper.SKIP
        url = dictionary.get("Url") if dictionary.get("Url") else APIHelper.SKIP
        # Return an object of this model
        return cls(error_code,
                   message,
                   path,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'error_code={self.error_code!r}, '
                f'message={self.message!r}, '
                f'path={(self.path if hasattr(self, "path") else None)!r}, '
                f'url={(self.url if hasattr(self, "url") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'error_code={self.error_code!s}, '
                f'message={self.message!s}, '
                f'path={(self.path if hasattr(self, "path") else None)!s}, '
                f'url={(self.url if hasattr(self, "url") else None)!s})')
