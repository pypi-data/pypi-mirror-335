# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper


class Consent(object):

    """Implementation of the 'Consent' model.

    Contains the requested consent

    Attributes:
        permissions (List[PermissionEnum]): Specifies the Open Banking account
            access consent types. This is a list of the data clusters being
            consented by the Customer, and requested for authorisation with
            the API Provider.
        expiration_date_time (datetime): Specified date and time the
            permissions will expire. If this is not populated, the permissions
            will be open ended. All dates in the JSON payloads are represented
            in ISO 8601 date-time format. All date-time fields in responses
            must include the timezone. An example is below:
            2017-04-05T10:43:07+00:00
        transaction_from_date_time (datetime): Specified start date and time
            for the transaction query period. If this is not populated, the
            start date will be open ended, and data will be returned from the
            earliest available transaction. All dates in the JSON payloads are
            represented in ISO 8601 date-time format. All date-time fields in
            responses must include the timezone. An example is below:
            2017-04-05T10:43:07+00:00
        transaction_to_date_time (datetime): Specified end date and time for
            the transaction query period. If this is not populated, the end
            date will be open ended, and data will be returned to the latest
            available transaction. All dates in the JSON payloads are
            represented in ISO 8601 date-time format. All date-time fields in
            responses must include the timezone. An example is below:
            2017-04-05T10:43:07+00:00

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "permissions": 'Permissions',
        "expiration_date_time": 'ExpirationDateTime',
        "transaction_from_date_time": 'TransactionFromDateTime',
        "transaction_to_date_time": 'TransactionToDateTime'
    }

    _optionals = [
        'expiration_date_time',
        'transaction_from_date_time',
        'transaction_to_date_time',
    ]

    def __init__(self,
                 permissions=None,
                 expiration_date_time=APIHelper.SKIP,
                 transaction_from_date_time=APIHelper.SKIP,
                 transaction_to_date_time=APIHelper.SKIP):
        """Constructor for the Consent class"""

        # Initialize members of the class
        self.permissions = permissions 
        if expiration_date_time is not APIHelper.SKIP:
            self.expiration_date_time = APIHelper.apply_datetime_converter(expiration_date_time, APIHelper.RFC3339DateTime) if expiration_date_time else None 
        if transaction_from_date_time is not APIHelper.SKIP:
            self.transaction_from_date_time = APIHelper.apply_datetime_converter(transaction_from_date_time, APIHelper.RFC3339DateTime) if transaction_from_date_time else None 
        if transaction_to_date_time is not APIHelper.SKIP:
            self.transaction_to_date_time = APIHelper.apply_datetime_converter(transaction_to_date_time, APIHelper.RFC3339DateTime) if transaction_to_date_time else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        permissions = dictionary.get("Permissions") if dictionary.get("Permissions") else None
        expiration_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("ExpirationDateTime")).datetime if dictionary.get("ExpirationDateTime") else APIHelper.SKIP
        transaction_from_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("TransactionFromDateTime")).datetime if dictionary.get("TransactionFromDateTime") else APIHelper.SKIP
        transaction_to_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("TransactionToDateTime")).datetime if dictionary.get("TransactionToDateTime") else APIHelper.SKIP
        # Return an object of this model
        return cls(permissions,
                   expiration_date_time,
                   transaction_from_date_time,
                   transaction_to_date_time)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'permissions={self.permissions!r}, '
                f'expiration_date_time={(self.expiration_date_time if hasattr(self, "expiration_date_time") else None)!r}, '
                f'transaction_from_date_time={(self.transaction_from_date_time if hasattr(self, "transaction_from_date_time") else None)!r}, '
                f'transaction_to_date_time={(self.transaction_to_date_time if hasattr(self, "transaction_to_date_time") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'permissions={self.permissions!s}, '
                f'expiration_date_time={(self.expiration_date_time if hasattr(self, "expiration_date_time") else None)!s}, '
                f'transaction_from_date_time={(self.transaction_from_date_time if hasattr(self, "transaction_from_date_time") else None)!s}, '
                f'transaction_to_date_time={(self.transaction_to_date_time if hasattr(self, "transaction_to_date_time") else None)!s})')
