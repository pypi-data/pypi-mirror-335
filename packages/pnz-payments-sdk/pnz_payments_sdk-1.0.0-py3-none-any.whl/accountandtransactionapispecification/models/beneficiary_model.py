# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.creditor_account import CreditorAccount
from accountandtransactionapispecification.models.creditor_agent import CreditorAgent
from accountandtransactionapispecification.models.reference import Reference


class BeneficiaryModel(object):

    """Implementation of the 'BeneficiaryModel' model.

    Attributes:
        account_id (str): A unique and immutable identifier used to identify
            the account resource. This identifier has no meaning to the
            account owner.
        beneficiary_id (str): A unique and immutable identifier used to
            identify the beneficiary resource. This identifier has no meaning
            to the account owner.
        reference (Reference): The model property of type Reference.
        creditor_agent (CreditorAgent): Party that manages the account on
            behalf of the account owner, that is manages the registration and
            booking of entries on the account, calculates balances on the
            account and provides information about the account. This is the
            servicer of the beneficiary account.
        creditor_account (CreditorAccount): Unambiguous identification of the
            account of the creditor, in the case of a debit transaction.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_id": 'AccountId',
        "beneficiary_id": 'BeneficiaryId',
        "reference": 'Reference',
        "creditor_agent": 'CreditorAgent',
        "creditor_account": 'CreditorAccount'
    }

    _optionals = [
        'beneficiary_id',
        'reference',
        'creditor_agent',
        'creditor_account',
    ]

    def __init__(self,
                 account_id=None,
                 beneficiary_id=APIHelper.SKIP,
                 reference=APIHelper.SKIP,
                 creditor_agent=APIHelper.SKIP,
                 creditor_account=APIHelper.SKIP):
        """Constructor for the BeneficiaryModel class"""

        # Initialize members of the class
        self.account_id = account_id 
        if beneficiary_id is not APIHelper.SKIP:
            self.beneficiary_id = beneficiary_id 
        if reference is not APIHelper.SKIP:
            self.reference = reference 
        if creditor_agent is not APIHelper.SKIP:
            self.creditor_agent = creditor_agent 
        if creditor_account is not APIHelper.SKIP:
            self.creditor_account = creditor_account 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else None
        beneficiary_id = dictionary.get("BeneficiaryId") if dictionary.get("BeneficiaryId") else APIHelper.SKIP
        reference = Reference.from_dictionary(dictionary.get('Reference')) if 'Reference' in dictionary.keys() else APIHelper.SKIP
        creditor_agent = CreditorAgent.from_dictionary(dictionary.get('CreditorAgent')) if 'CreditorAgent' in dictionary.keys() else APIHelper.SKIP
        creditor_account = CreditorAccount.from_dictionary(dictionary.get('CreditorAccount')) if 'CreditorAccount' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(account_id,
                   beneficiary_id,
                   reference,
                   creditor_agent,
                   creditor_account)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!r}, '
                f'beneficiary_id={(self.beneficiary_id if hasattr(self, "beneficiary_id") else None)!r}, '
                f'reference={(self.reference if hasattr(self, "reference") else None)!r}, '
                f'creditor_agent={(self.creditor_agent if hasattr(self, "creditor_agent") else None)!r}, '
                f'creditor_account={(self.creditor_account if hasattr(self, "creditor_account") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!s}, '
                f'beneficiary_id={(self.beneficiary_id if hasattr(self, "beneficiary_id") else None)!s}, '
                f'reference={(self.reference if hasattr(self, "reference") else None)!s}, '
                f'creditor_agent={(self.creditor_agent if hasattr(self, "creditor_agent") else None)!s}, '
                f'creditor_account={(self.creditor_account if hasattr(self, "creditor_account") else None)!s})')
