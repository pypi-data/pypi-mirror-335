# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Servicer(object):

    """Implementation of the 'Servicer' model.

    Party that manages the account on behalf of the account owner, that is
    manages the registration and booking of entries on the account, calculates
    balances on the account and provides information about the account.

    Attributes:
        scheme_name (str): Name of the identification scheme, in a coded form
            as published in an external list.
        identification (str): Unique and unambiguous identification of the
            servicing institution.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "scheme_name": 'SchemeName',
        "identification": 'Identification'
    }

    def __init__(self,
                 identification=None):
        """Constructor for the Servicer class"""

        # Initialize members of the class
        self.scheme_name = 'BICFI' 
        self.identification = identification 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        identification = dictionary.get("Identification") if dictionary.get("Identification") else None
        # Return an object of this model
        return cls(identification)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'scheme_name={self.scheme_name!r}, '
                f'identification={self.identification!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'scheme_name={self.scheme_name!s}, '
                f'identification={self.identification!s})')
