# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.consent import Consent


class AccountAccessConsentResponseModel(object):

    """Implementation of the 'AccountAccessConsentResponseModel' model.

    Attributes:
        consent_id (str): Unique identification as assigned to identify the
            account access consent.
        status (AccountAccessStatusEnum): Specifies the status of the account
            access consent.
        creation_date_time (datetime): Date and time at which the consent was
            created. All dates in the JSON payloads are represented in ISO
            8601 date-time format. All date-time fields in responses must
            include the timezone. An example is below:
            2017-04-05T10:43:07+00:00
        status_update_date_time (datetime): Date and time at which the consent
            status was updated. All dates in the JSON payloads are represented
            in ISO 8601 date-time format. All date-time fields in responses
            must include the timezone. An example is below:
            2017-04-05T10:43:07+00:00
        consent (Consent): Contains the requested consent

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "consent_id": 'ConsentId',
        "status": 'Status',
        "creation_date_time": 'CreationDateTime',
        "status_update_date_time": 'StatusUpdateDateTime',
        "consent": 'Consent'
    }

    def __init__(self,
                 consent_id=None,
                 status=None,
                 creation_date_time=None,
                 status_update_date_time=None,
                 consent=None):
        """Constructor for the AccountAccessConsentResponseModel class"""

        # Initialize members of the class
        self.consent_id = consent_id 
        self.status = status 
        self.creation_date_time = APIHelper.apply_datetime_converter(creation_date_time, APIHelper.RFC3339DateTime) if creation_date_time else None 
        self.status_update_date_time = APIHelper.apply_datetime_converter(status_update_date_time, APIHelper.RFC3339DateTime) if status_update_date_time else None 
        self.consent = consent 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        consent_id = dictionary.get("ConsentId") if dictionary.get("ConsentId") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        creation_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("CreationDateTime")).datetime if dictionary.get("CreationDateTime") else None
        status_update_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("StatusUpdateDateTime")).datetime if dictionary.get("StatusUpdateDateTime") else None
        consent = Consent.from_dictionary(dictionary.get('Consent')) if dictionary.get('Consent') else None
        # Return an object of this model
        return cls(consent_id,
                   status,
                   creation_date_time,
                   status_update_date_time,
                   consent)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'consent_id={self.consent_id!r}, '
                f'status={self.status!r}, '
                f'creation_date_time={self.creation_date_time!r}, '
                f'status_update_date_time={self.status_update_date_time!r}, '
                f'consent={self.consent!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'consent_id={self.consent_id!s}, '
                f'status={self.status!s}, '
                f'creation_date_time={self.creation_date_time!s}, '
                f'status_update_date_time={self.status_update_date_time!s}, '
                f'consent={self.consent!s})')
