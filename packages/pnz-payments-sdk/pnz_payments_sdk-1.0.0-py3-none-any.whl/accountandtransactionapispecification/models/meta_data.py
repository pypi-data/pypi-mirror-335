# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper


class MetaData(object):

    """Implementation of the 'MetaData' model.

    Meta Data relevant to the payload

    Attributes:
        total_pages (int): The model property of type int.
        first_available_date_time (datetime): All dates in the JSON payloads
            are represented in ISO 8601 date-time format. All date-time fields
            in responses must include the timezone. An example is below:
            2017-04-05T10:43:07+00:00
        last_available_date_time (datetime): All dates in the JSON payloads
            are represented in ISO 8601 date-time format. All date-time fields
            in responses must include the timezone. An example is below:
            2017-04-05T10:43:07+00:00

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "total_pages": 'TotalPages',
        "first_available_date_time": 'FirstAvailableDateTime',
        "last_available_date_time": 'LastAvailableDateTime'
    }

    _optionals = [
        'total_pages',
        'first_available_date_time',
        'last_available_date_time',
    ]

    def __init__(self,
                 total_pages=APIHelper.SKIP,
                 first_available_date_time=APIHelper.SKIP,
                 last_available_date_time=APIHelper.SKIP):
        """Constructor for the MetaData class"""

        # Initialize members of the class
        if total_pages is not APIHelper.SKIP:
            self.total_pages = total_pages 
        if first_available_date_time is not APIHelper.SKIP:
            self.first_available_date_time = APIHelper.apply_datetime_converter(first_available_date_time, APIHelper.RFC3339DateTime) if first_available_date_time else None 
        if last_available_date_time is not APIHelper.SKIP:
            self.last_available_date_time = APIHelper.apply_datetime_converter(last_available_date_time, APIHelper.RFC3339DateTime) if last_available_date_time else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        total_pages = dictionary.get("TotalPages") if dictionary.get("TotalPages") else APIHelper.SKIP
        first_available_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("FirstAvailableDateTime")).datetime if dictionary.get("FirstAvailableDateTime") else APIHelper.SKIP
        last_available_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("LastAvailableDateTime")).datetime if dictionary.get("LastAvailableDateTime") else APIHelper.SKIP
        # Return an object of this model
        return cls(total_pages,
                   first_available_date_time,
                   last_available_date_time)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'total_pages={(self.total_pages if hasattr(self, "total_pages") else None)!r}, '
                f'first_available_date_time={(self.first_available_date_time if hasattr(self, "first_available_date_time") else None)!r}, '
                f'last_available_date_time={(self.last_available_date_time if hasattr(self, "last_available_date_time") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'total_pages={(self.total_pages if hasattr(self, "total_pages") else None)!s}, '
                f'first_available_date_time={(self.first_available_date_time if hasattr(self, "first_available_date_time") else None)!s}, '
                f'last_available_date_time={(self.last_available_date_time if hasattr(self, "last_available_date_time") else None)!s})')
