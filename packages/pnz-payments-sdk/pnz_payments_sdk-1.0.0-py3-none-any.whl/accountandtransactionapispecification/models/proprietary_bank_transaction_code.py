# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper


class ProprietaryBankTransactionCode(object):

    """Implementation of the 'ProprietaryBankTransactionCode' model.

    Set of elements to fully identify a proprietary bank transaction code.

    Attributes:
        code (str): Proprietary bank transaction code to identify the
            underlying transaction.
        issuer (str): Identification of the issuer of the proprietary bank
            transaction code.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "code": 'Code',
        "issuer": 'Issuer'
    }

    _optionals = [
        'issuer',
    ]

    def __init__(self,
                 code=None,
                 issuer=APIHelper.SKIP):
        """Constructor for the ProprietaryBankTransactionCode class"""

        # Initialize members of the class
        self.code = code 
        if issuer is not APIHelper.SKIP:
            self.issuer = issuer 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        code = dictionary.get("Code") if dictionary.get("Code") else None
        issuer = dictionary.get("Issuer") if dictionary.get("Issuer") else APIHelper.SKIP
        # Return an object of this model
        return cls(code,
                   issuer)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'code={self.code!r}, '
                f'issuer={(self.issuer if hasattr(self, "issuer") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'code={self.code!s}, '
                f'issuer={(self.issuer if hasattr(self, "issuer") else None)!s})')
