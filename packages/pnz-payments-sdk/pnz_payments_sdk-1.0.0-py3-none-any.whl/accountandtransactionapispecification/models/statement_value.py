# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class StatementValue(object):

    """Implementation of the 'StatementValue' model.

    Set of elements used to provide details of a generic number value related
    to the statement resource.

    Attributes:
        value (int): Value associated with the statement value type.
        mtype (StatementValueTypeEnum): Statement value type, in a coded form.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "value": 'Value',
        "mtype": 'Type'
    }

    def __init__(self,
                 value=None,
                 mtype=None):
        """Constructor for the StatementValue class"""

        # Initialize members of the class
        self.value = value 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        value = dictionary.get("Value") if dictionary.get("Value") else None
        mtype = dictionary.get("Type") if dictionary.get("Type") else None
        # Return an object of this model
        return cls(value,
                   mtype)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'value={self.value!r}, '
                f'mtype={self.mtype!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'value={self.value!s}, '
                f'mtype={self.mtype!s})')
