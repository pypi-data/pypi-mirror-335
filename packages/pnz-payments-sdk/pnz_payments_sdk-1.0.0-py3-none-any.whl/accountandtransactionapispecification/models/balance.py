# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.models.amount import Amount


class Balance(object):

    """Implementation of the 'Balance' model.

    Set of elements used to define the balance as a numerical representation
    of the net increases and decreases in an account after a transaction entry
    is applied to the account.

    Attributes:
        amount (Amount): Amount of money of the cash balance.
        credit_debit_indicator (CreditDebitIndicatorEnum): Indicates whether
            the balance is a credit or a debit balance. Usage: A zero balance
            is considered to be a credit balance.
        mtype (BalanceModelTypeEnum): Balance type, in a coded form.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "amount": 'Amount',
        "credit_debit_indicator": 'CreditDebitIndicator',
        "mtype": 'Type'
    }

    def __init__(self,
                 amount=None,
                 credit_debit_indicator=None,
                 mtype=None):
        """Constructor for the Balance class"""

        # Initialize members of the class
        self.amount = amount 
        self.credit_debit_indicator = credit_debit_indicator 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        amount = Amount.from_dictionary(dictionary.get('Amount')) if dictionary.get('Amount') else None
        credit_debit_indicator = dictionary.get("CreditDebitIndicator") if dictionary.get("CreditDebitIndicator") else None
        mtype = dictionary.get("Type") if dictionary.get("Type") else None
        # Return an object of this model
        return cls(amount,
                   credit_debit_indicator,
                   mtype)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'amount={self.amount!r}, '
                f'credit_debit_indicator={self.credit_debit_indicator!r}, '
                f'mtype={self.mtype!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'amount={self.amount!s}, '
                f'credit_debit_indicator={self.credit_debit_indicator!s}, '
                f'mtype={self.mtype!s})')
