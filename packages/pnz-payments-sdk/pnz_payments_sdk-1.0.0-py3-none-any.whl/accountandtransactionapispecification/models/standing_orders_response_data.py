# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.standing_order_model import StandingOrderModel


class StandingOrdersResponseData(object):

    """Implementation of the 'StandingOrdersResponseData' model.

    Attributes:
        standing_order (List[StandingOrderModel]): StandingOrder

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "standing_order": 'StandingOrder'
    }

    _optionals = [
        'standing_order',
    ]

    def __init__(self,
                 standing_order=APIHelper.SKIP):
        """Constructor for the StandingOrdersResponseData class"""

        # Initialize members of the class
        if standing_order is not APIHelper.SKIP:
            self.standing_order = standing_order 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        standing_order = None
        if dictionary.get('StandingOrder') is not None:
            standing_order = [StandingOrderModel.from_dictionary(x) for x in dictionary.get('StandingOrder')]
        else:
            standing_order = APIHelper.SKIP
        # Return an object of this model
        return cls(standing_order)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'standing_order={(self.standing_order if hasattr(self, "standing_order") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'standing_order={(self.standing_order if hasattr(self, "standing_order") else None)!s})')
