# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.creditor_reference import CreditorReference


class Reference(object):

    """Implementation of the 'Reference' model.

    Attributes:
        creditor_name (str): The model property of type str.
        creditor_reference (CreditorReference): The model property of type
            CreditorReference.
        debtor_name (str): The model property of type str.
        debtor_reference (CreditorReference): The model property of type
            CreditorReference.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "creditor_name": 'CreditorName',
        "creditor_reference": 'CreditorReference',
        "debtor_name": 'DebtorName',
        "debtor_reference": 'DebtorReference'
    }

    _optionals = [
        'creditor_reference',
        'debtor_name',
        'debtor_reference',
    ]

    def __init__(self,
                 creditor_name=None,
                 creditor_reference=APIHelper.SKIP,
                 debtor_name=APIHelper.SKIP,
                 debtor_reference=APIHelper.SKIP):
        """Constructor for the Reference class"""

        # Initialize members of the class
        self.creditor_name = creditor_name 
        if creditor_reference is not APIHelper.SKIP:
            self.creditor_reference = creditor_reference 
        if debtor_name is not APIHelper.SKIP:
            self.debtor_name = debtor_name 
        if debtor_reference is not APIHelper.SKIP:
            self.debtor_reference = debtor_reference 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        creditor_name = dictionary.get("CreditorName") if dictionary.get("CreditorName") else None
        creditor_reference = CreditorReference.from_dictionary(dictionary.get('CreditorReference')) if 'CreditorReference' in dictionary.keys() else APIHelper.SKIP
        debtor_name = dictionary.get("DebtorName") if dictionary.get("DebtorName") else APIHelper.SKIP
        debtor_reference = CreditorReference.from_dictionary(dictionary.get('DebtorReference')) if 'DebtorReference' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(creditor_name,
                   creditor_reference,
                   debtor_name,
                   debtor_reference)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'creditor_name={self.creditor_name!r}, '
                f'creditor_reference={(self.creditor_reference if hasattr(self, "creditor_reference") else None)!r}, '
                f'debtor_name={(self.debtor_name if hasattr(self, "debtor_name") else None)!r}, '
                f'debtor_reference={(self.debtor_reference if hasattr(self, "debtor_reference") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'creditor_name={self.creditor_name!s}, '
                f'creditor_reference={(self.creditor_reference if hasattr(self, "creditor_reference") else None)!s}, '
                f'debtor_name={(self.debtor_name if hasattr(self, "debtor_name") else None)!s}, '
                f'debtor_reference={(self.debtor_reference if hasattr(self, "debtor_reference") else None)!s})')
