# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper


class CardInstrument(object):

    """Implementation of the 'CardInstrument' model.

    Set of elements to describe the card instrument used in the transaction.

    Attributes:
        card_scheme_name (CardSchemeNameEnum): Name of the card scheme.
        authorisation_type (AuthorisationTypeEnum): The card authorisation
            type.
        name (str): Name of the cardholder using the card instrument.
        identification (str): Identification assigned by an institution to
            identify the card instrument used in the transaction. This
            identification is known by the account owner, and may be masked.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "card_scheme_name": 'CardSchemeName',
        "authorisation_type": 'AuthorisationType',
        "name": 'Name',
        "identification": 'Identification'
    }

    _optionals = [
        'authorisation_type',
        'name',
        'identification',
    ]

    def __init__(self,
                 card_scheme_name=None,
                 authorisation_type=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 identification=APIHelper.SKIP):
        """Constructor for the CardInstrument class"""

        # Initialize members of the class
        self.card_scheme_name = card_scheme_name 
        if authorisation_type is not APIHelper.SKIP:
            self.authorisation_type = authorisation_type 
        if name is not APIHelper.SKIP:
            self.name = name 
        if identification is not APIHelper.SKIP:
            self.identification = identification 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        card_scheme_name = dictionary.get("CardSchemeName") if dictionary.get("CardSchemeName") else None
        authorisation_type = dictionary.get("AuthorisationType") if dictionary.get("AuthorisationType") else APIHelper.SKIP
        name = dictionary.get("Name") if dictionary.get("Name") else APIHelper.SKIP
        identification = dictionary.get("Identification") if dictionary.get("Identification") else APIHelper.SKIP
        # Return an object of this model
        return cls(card_scheme_name,
                   authorisation_type,
                   name,
                   identification)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'card_scheme_name={self.card_scheme_name!r}, '
                f'authorisation_type={(self.authorisation_type if hasattr(self, "authorisation_type") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'identification={(self.identification if hasattr(self, "identification") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'card_scheme_name={self.card_scheme_name!s}, '
                f'authorisation_type={(self.authorisation_type if hasattr(self, "authorisation_type") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'identification={(self.identification if hasattr(self, "identification") else None)!s})')
