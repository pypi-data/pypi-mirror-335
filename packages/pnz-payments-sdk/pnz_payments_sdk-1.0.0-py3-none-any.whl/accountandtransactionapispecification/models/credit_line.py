# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.amount import Amount


class CreditLine(object):

    """Implementation of the 'CreditLine' model.

    Attributes:
        included (bool): Indicates whether or not the credit line is included
            in the balance of the account. Usage: If not present, credit line
            is not included in the balance amount of the account.
        amount (Amount): Amount of money of the cash balance.
        mtype (CreditLineTypeEnum): Limit type, in a coded form.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "included": 'Included',
        "amount": 'Amount',
        "mtype": 'Type'
    }

    _optionals = [
        'amount',
        'mtype',
    ]

    def __init__(self,
                 included=None,
                 amount=APIHelper.SKIP,
                 mtype=APIHelper.SKIP):
        """Constructor for the CreditLine class"""

        # Initialize members of the class
        self.included = included 
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        included = dictionary.get("Included") if "Included" in dictionary.keys() else None
        amount = Amount.from_dictionary(dictionary.get('Amount')) if 'Amount' in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("Type") if dictionary.get("Type") else APIHelper.SKIP
        # Return an object of this model
        return cls(included,
                   amount,
                   mtype)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'included={self.included!r}, '
                f'amount={(self.amount if hasattr(self, "amount") else None)!r}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'included={self.included!s}, '
                f'amount={(self.amount if hasattr(self, "amount") else None)!s}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s})')
