# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class StatementRate(object):

    """Implementation of the 'StatementRate' model.

    Set of elements used to provide details of a generic rate related to the
    statement resource.

    Attributes:
        rate (str): Rate associated with the statement rate type.
        mtype (StatementRateTypeEnum): Statement rate type, in a coded form.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "rate": 'Rate',
        "mtype": 'Type'
    }

    def __init__(self,
                 rate=None,
                 mtype=None):
        """Constructor for the StatementRate class"""

        # Initialize members of the class
        self.rate = rate 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        rate = dictionary.get("Rate") if dictionary.get("Rate") else None
        mtype = dictionary.get("Type") if dictionary.get("Type") else None
        # Return an object of this model
        return cls(rate,
                   mtype)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'rate={self.rate!r}, '
                f'mtype={self.mtype!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'rate={self.rate!s}, '
                f'mtype={self.mtype!s})')
