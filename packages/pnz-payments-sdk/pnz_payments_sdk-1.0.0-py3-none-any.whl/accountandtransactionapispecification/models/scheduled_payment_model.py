# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.creditor_account import CreditorAccount
from accountandtransactionapispecification.models.creditor_agent import CreditorAgent
from accountandtransactionapispecification.models.instructed_amount import InstructedAmount
from accountandtransactionapispecification.models.reference import Reference


class ScheduledPaymentModel(object):

    """Implementation of the 'ScheduledPaymentModel' model.

    Attributes:
        account_id (str): A unique and immutable identifier used to identify
            the account resource. This identifier has no meaning to the
            account owner.
        scheduled_payment_id (str): A unique and immutable identifier used to
            identify the scheduled payment resource. This identifier has no
            meaning to the account owner.
        scheduled_payment_date_time (datetime): The date on which the
            scheduled payment will be made. All dates in the JSON payloads are
            represented in ISO 8601 date-time format. All date-time fields in
            responses must include the timezone. An example is below:
            2017-04-05T10:43:07+00:00
        scheduled_type (ScheduledTypeEnum): Specifies the scheduled payment
            date type requested
        instructed_amount (InstructedAmount): Amount of money of the cash
            balance after a transaction entry is applied to the account..
        reference (Reference): The model property of type Reference.
        creditor_agent (CreditorAgent): Party that manages the account on
            behalf of the account owner, that is manages the registration and
            booking of entries on the account, calculates balances on the
            account and provides information about the account. This is the
            servicer of the beneficiary account.
        creditor_account (CreditorAccount): Unambiguous identification of the
            account of the creditor, in the case of a debit transaction.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_id": 'AccountId',
        "scheduled_payment_date_time": 'ScheduledPaymentDateTime',
        "scheduled_type": 'ScheduledType',
        "instructed_amount": 'InstructedAmount',
        "scheduled_payment_id": 'ScheduledPaymentId',
        "reference": 'Reference',
        "creditor_agent": 'CreditorAgent',
        "creditor_account": 'CreditorAccount'
    }

    _optionals = [
        'scheduled_payment_id',
        'reference',
        'creditor_agent',
        'creditor_account',
    ]

    def __init__(self,
                 account_id=None,
                 scheduled_payment_date_time=None,
                 scheduled_type=None,
                 instructed_amount=None,
                 scheduled_payment_id=APIHelper.SKIP,
                 reference=APIHelper.SKIP,
                 creditor_agent=APIHelper.SKIP,
                 creditor_account=APIHelper.SKIP):
        """Constructor for the ScheduledPaymentModel class"""

        # Initialize members of the class
        self.account_id = account_id 
        if scheduled_payment_id is not APIHelper.SKIP:
            self.scheduled_payment_id = scheduled_payment_id 
        self.scheduled_payment_date_time = APIHelper.apply_datetime_converter(scheduled_payment_date_time, APIHelper.RFC3339DateTime) if scheduled_payment_date_time else None 
        self.scheduled_type = scheduled_type 
        self.instructed_amount = instructed_amount 
        if reference is not APIHelper.SKIP:
            self.reference = reference 
        if creditor_agent is not APIHelper.SKIP:
            self.creditor_agent = creditor_agent 
        if creditor_account is not APIHelper.SKIP:
            self.creditor_account = creditor_account 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else None
        scheduled_payment_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("ScheduledPaymentDateTime")).datetime if dictionary.get("ScheduledPaymentDateTime") else None
        scheduled_type = dictionary.get("ScheduledType") if dictionary.get("ScheduledType") else None
        instructed_amount = InstructedAmount.from_dictionary(dictionary.get('InstructedAmount')) if dictionary.get('InstructedAmount') else None
        scheduled_payment_id = dictionary.get("ScheduledPaymentId") if dictionary.get("ScheduledPaymentId") else APIHelper.SKIP
        reference = Reference.from_dictionary(dictionary.get('Reference')) if 'Reference' in dictionary.keys() else APIHelper.SKIP
        creditor_agent = CreditorAgent.from_dictionary(dictionary.get('CreditorAgent')) if 'CreditorAgent' in dictionary.keys() else APIHelper.SKIP
        creditor_account = CreditorAccount.from_dictionary(dictionary.get('CreditorAccount')) if 'CreditorAccount' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(account_id,
                   scheduled_payment_date_time,
                   scheduled_type,
                   instructed_amount,
                   scheduled_payment_id,
                   reference,
                   creditor_agent,
                   creditor_account)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!r}, '
                f'scheduled_payment_id={(self.scheduled_payment_id if hasattr(self, "scheduled_payment_id") else None)!r}, '
                f'scheduled_payment_date_time={self.scheduled_payment_date_time!r}, '
                f'scheduled_type={self.scheduled_type!r}, '
                f'instructed_amount={self.instructed_amount!r}, '
                f'reference={(self.reference if hasattr(self, "reference") else None)!r}, '
                f'creditor_agent={(self.creditor_agent if hasattr(self, "creditor_agent") else None)!r}, '
                f'creditor_account={(self.creditor_account if hasattr(self, "creditor_account") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!s}, '
                f'scheduled_payment_id={(self.scheduled_payment_id if hasattr(self, "scheduled_payment_id") else None)!s}, '
                f'scheduled_payment_date_time={self.scheduled_payment_date_time!s}, '
                f'scheduled_type={self.scheduled_type!s}, '
                f'instructed_amount={self.instructed_amount!s}, '
                f'reference={(self.reference if hasattr(self, "reference") else None)!s}, '
                f'creditor_agent={(self.creditor_agent if hasattr(self, "creditor_agent") else None)!s}, '
                f'creditor_account={(self.creditor_account if hasattr(self, "creditor_account") else None)!s})')
