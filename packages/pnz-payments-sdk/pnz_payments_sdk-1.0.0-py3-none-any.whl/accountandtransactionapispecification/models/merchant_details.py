# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper


class MerchantDetails(object):

    """Implementation of the 'MerchantDetails' model.

    Details of the merchant involved in the transaction.

    Attributes:
        merchant_name (str): Name by which the merchant is known.
        merchant_category_code (str): Category code conform to ISO 18245,
            related to the type of services or goods the merchant provides for
            the transaction.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "merchant_name": 'MerchantName',
        "merchant_category_code": 'MerchantCategoryCode'
    }

    _optionals = [
        'merchant_name',
        'merchant_category_code',
    ]

    def __init__(self,
                 merchant_name=APIHelper.SKIP,
                 merchant_category_code=APIHelper.SKIP):
        """Constructor for the MerchantDetails class"""

        # Initialize members of the class
        if merchant_name is not APIHelper.SKIP:
            self.merchant_name = merchant_name 
        if merchant_category_code is not APIHelper.SKIP:
            self.merchant_category_code = merchant_category_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        merchant_name = dictionary.get("MerchantName") if dictionary.get("MerchantName") else APIHelper.SKIP
        merchant_category_code = dictionary.get("MerchantCategoryCode") if dictionary.get("MerchantCategoryCode") else APIHelper.SKIP
        # Return an object of this model
        return cls(merchant_name,
                   merchant_category_code)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'merchant_name={(self.merchant_name if hasattr(self, "merchant_name") else None)!r}, '
                f'merchant_category_code={(self.merchant_category_code if hasattr(self, "merchant_category_code") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'merchant_name={(self.merchant_name if hasattr(self, "merchant_name") else None)!s}, '
                f'merchant_category_code={(self.merchant_category_code if hasattr(self, "merchant_category_code") else None)!s})')
