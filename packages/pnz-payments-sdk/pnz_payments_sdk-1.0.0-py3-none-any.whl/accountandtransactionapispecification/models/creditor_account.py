# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper


class CreditorAccount(object):

    """Implementation of the 'CreditorAccount' model.

    Unambiguous identification of the account of the creditor, in the case of
    a debit transaction.

    Attributes:
        scheme_name (AccountSchemeModelEnum): The model property of type
            AccountSchemeModelEnum.
        identification (str): Identification assigned by an institution to
            identify an account. This identification is known by the account
            owner.
        name (str): Name of the account, as assigned by the account servicing
            institution, in agreement with the account owner in order to
            provide an additional means of identification of the account.
            Usage: The account name is different from the account owner name.
            The account name is used in certain user communities to provide a
            means of identifying the account, in addition to the account
            owner's identity and the account number.
        secondary_identification (str): This is secondary identification of
            the account, as assigned by the account servicing institution.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "scheme_name": 'SchemeName',
        "identification": 'Identification',
        "name": 'Name',
        "secondary_identification": 'SecondaryIdentification'
    }

    _optionals = [
        'name',
        'secondary_identification',
    ]

    def __init__(self,
                 scheme_name=None,
                 identification=None,
                 name=APIHelper.SKIP,
                 secondary_identification=APIHelper.SKIP):
        """Constructor for the CreditorAccount class"""

        # Initialize members of the class
        self.scheme_name = scheme_name 
        self.identification = identification 
        if name is not APIHelper.SKIP:
            self.name = name 
        if secondary_identification is not APIHelper.SKIP:
            self.secondary_identification = secondary_identification 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        scheme_name = dictionary.get("SchemeName") if dictionary.get("SchemeName") else None
        identification = dictionary.get("Identification") if dictionary.get("Identification") else None
        name = dictionary.get("Name") if dictionary.get("Name") else APIHelper.SKIP
        secondary_identification = dictionary.get("SecondaryIdentification") if dictionary.get("SecondaryIdentification") else APIHelper.SKIP
        # Return an object of this model
        return cls(scheme_name,
                   identification,
                   name,
                   secondary_identification)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'scheme_name={self.scheme_name!r}, '
                f'identification={self.identification!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'secondary_identification={(self.secondary_identification if hasattr(self, "secondary_identification") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'scheme_name={self.scheme_name!s}, '
                f'identification={self.identification!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'secondary_identification={(self.secondary_identification if hasattr(self, "secondary_identification") else None)!s})')
