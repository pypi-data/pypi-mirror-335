# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.creditor_account import CreditorAccount
from accountandtransactionapispecification.models.creditor_agent import CreditorAgent
from accountandtransactionapispecification.models.final_payment_amount import FinalPaymentAmount
from accountandtransactionapispecification.models.first_payment_amount import FirstPaymentAmount
from accountandtransactionapispecification.models.next_payment_amount import NextPaymentAmount
from accountandtransactionapispecification.models.reference import Reference


class StandingOrderModel(object):

    """Implementation of the 'StandingOrderModel' model.

    Attributes:
        account_id (str): A unique and immutable identifier used to identify
            the account resource. This identifier has no meaning to the
            account owner.
        standing_order_id (str): A unique and immutable identifier used to
            identify the standing order resource. This identifier has no
            meaning to the account owner.
        frequency (str): EvryDay - Every day EvryWorkgDay - Every working day
            IntrvlWkDay - An interval specified in weeks (01 to 09), and the
            day within the week (01 to 07) WkInMnthDay - A monthly interval,
            specifying the week of the month (01 to 05) and day within the
            week (01 to 07) IntrvlMnthDay - An interval specified in months
            (between 01 to 06, 12, 24), specifying the day within the month
            (-5 to -1, 1 to 31)  Patterns: EvryDay (ScheduleCode) EvryWorkgDay
            (ScheduleCode) IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode
            + IntervalInWeeks + DayInWeek) WkInMnthDay:WeekInMonth:DayInWeek
            (ScheduleCode + WeekInMonth + DayInWeek)
            IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode +
            IntervalInMonths + DayInMonth)  The regular expression for this
            element combines five smaller versions for each permitted pattern.
            To aid legibility - the components are presented individually
            here: EvryDay EvryWorkgDay IntrvlWkDay:0[1-9]:0[1-7]
            WkInMnthDay:0[1-5]:0[1-7]
            IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
        reference (Reference): The model property of type Reference.
        first_payment_date_time (datetime): The date on which the first
            payment for a Standing Order schedule will be made. All dates in
            the JSON payloads are represented in ISO 8601 date-time format.
            All date-time fields in responses must include the timezone. An
            example is below: 2017-04-05T10:43:07+00:00
        first_payment_amount (FirstPaymentAmount): The amount of the first
            Standing Order
        next_payment_date_time (datetime): The date on which the next payment
            for a Standing Order schedule will be made. All dates in the JSON
            payloads are represented in ISO 8601 date-time format. All
            date-time fields in responses must include the timezone. An
            example is below: 2017-04-05T10:43:07+00:00
        next_payment_amount (NextPaymentAmount): The amount of the next
            Standing Order
        final_payment_date_time (datetime): The date on which the final
            payment for a Standing Order schedule will be made. All dates in
            the JSON payloads are represented in ISO 8601 date-time format.
            All date-time fields in responses must include the timezone. An
            example is below: 2017-04-05T10:43:07+00:00
        final_payment_amount (FinalPaymentAmount): The amount of the final
            Standing Order
        standing_order_status_code (StandingOrderStatusCodeEnum): Specifies
            the status of the standing order in code form.
        creditor_agent (CreditorAgent): Party that manages the account on
            behalf of the account owner, that is manages the registration and
            booking of entries on the account, calculates balances on the
            account and provides information about the account. This is the
            servicer of the beneficiary account.
        creditor_account (CreditorAccount): Unambiguous identification of the
            account of the creditor, in the case of a debit transaction.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_id": 'AccountId',
        "frequency": 'Frequency',
        "next_payment_date_time": 'NextPaymentDateTime',
        "next_payment_amount": 'NextPaymentAmount',
        "standing_order_id": 'StandingOrderId',
        "reference": 'Reference',
        "first_payment_date_time": 'FirstPaymentDateTime',
        "first_payment_amount": 'FirstPaymentAmount',
        "final_payment_date_time": 'FinalPaymentDateTime',
        "final_payment_amount": 'FinalPaymentAmount',
        "standing_order_status_code": 'StandingOrderStatusCode',
        "creditor_agent": 'CreditorAgent',
        "creditor_account": 'CreditorAccount'
    }

    _optionals = [
        'standing_order_id',
        'reference',
        'first_payment_date_time',
        'first_payment_amount',
        'final_payment_date_time',
        'final_payment_amount',
        'standing_order_status_code',
        'creditor_agent',
        'creditor_account',
    ]

    def __init__(self,
                 account_id=None,
                 frequency=None,
                 next_payment_date_time=None,
                 next_payment_amount=None,
                 standing_order_id=APIHelper.SKIP,
                 reference=APIHelper.SKIP,
                 first_payment_date_time=APIHelper.SKIP,
                 first_payment_amount=APIHelper.SKIP,
                 final_payment_date_time=APIHelper.SKIP,
                 final_payment_amount=APIHelper.SKIP,
                 standing_order_status_code=APIHelper.SKIP,
                 creditor_agent=APIHelper.SKIP,
                 creditor_account=APIHelper.SKIP):
        """Constructor for the StandingOrderModel class"""

        # Initialize members of the class
        self.account_id = account_id 
        if standing_order_id is not APIHelper.SKIP:
            self.standing_order_id = standing_order_id 
        self.frequency = frequency 
        if reference is not APIHelper.SKIP:
            self.reference = reference 
        if first_payment_date_time is not APIHelper.SKIP:
            self.first_payment_date_time = APIHelper.apply_datetime_converter(first_payment_date_time, APIHelper.RFC3339DateTime) if first_payment_date_time else None 
        if first_payment_amount is not APIHelper.SKIP:
            self.first_payment_amount = first_payment_amount 
        self.next_payment_date_time = APIHelper.apply_datetime_converter(next_payment_date_time, APIHelper.RFC3339DateTime) if next_payment_date_time else None 
        self.next_payment_amount = next_payment_amount 
        if final_payment_date_time is not APIHelper.SKIP:
            self.final_payment_date_time = APIHelper.apply_datetime_converter(final_payment_date_time, APIHelper.RFC3339DateTime) if final_payment_date_time else None 
        if final_payment_amount is not APIHelper.SKIP:
            self.final_payment_amount = final_payment_amount 
        if standing_order_status_code is not APIHelper.SKIP:
            self.standing_order_status_code = standing_order_status_code 
        if creditor_agent is not APIHelper.SKIP:
            self.creditor_agent = creditor_agent 
        if creditor_account is not APIHelper.SKIP:
            self.creditor_account = creditor_account 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else None
        frequency = dictionary.get("Frequency") if dictionary.get("Frequency") else None
        next_payment_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("NextPaymentDateTime")).datetime if dictionary.get("NextPaymentDateTime") else None
        next_payment_amount = NextPaymentAmount.from_dictionary(dictionary.get('NextPaymentAmount')) if dictionary.get('NextPaymentAmount') else None
        standing_order_id = dictionary.get("StandingOrderId") if dictionary.get("StandingOrderId") else APIHelper.SKIP
        reference = Reference.from_dictionary(dictionary.get('Reference')) if 'Reference' in dictionary.keys() else APIHelper.SKIP
        first_payment_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("FirstPaymentDateTime")).datetime if dictionary.get("FirstPaymentDateTime") else APIHelper.SKIP
        first_payment_amount = FirstPaymentAmount.from_dictionary(dictionary.get('FirstPaymentAmount')) if 'FirstPaymentAmount' in dictionary.keys() else APIHelper.SKIP
        final_payment_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("FinalPaymentDateTime")).datetime if dictionary.get("FinalPaymentDateTime") else APIHelper.SKIP
        final_payment_amount = FinalPaymentAmount.from_dictionary(dictionary.get('FinalPaymentAmount')) if 'FinalPaymentAmount' in dictionary.keys() else APIHelper.SKIP
        standing_order_status_code = dictionary.get("StandingOrderStatusCode") if dictionary.get("StandingOrderStatusCode") else APIHelper.SKIP
        creditor_agent = CreditorAgent.from_dictionary(dictionary.get('CreditorAgent')) if 'CreditorAgent' in dictionary.keys() else APIHelper.SKIP
        creditor_account = CreditorAccount.from_dictionary(dictionary.get('CreditorAccount')) if 'CreditorAccount' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(account_id,
                   frequency,
                   next_payment_date_time,
                   next_payment_amount,
                   standing_order_id,
                   reference,
                   first_payment_date_time,
                   first_payment_amount,
                   final_payment_date_time,
                   final_payment_amount,
                   standing_order_status_code,
                   creditor_agent,
                   creditor_account)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!r}, '
                f'standing_order_id={(self.standing_order_id if hasattr(self, "standing_order_id") else None)!r}, '
                f'frequency={self.frequency!r}, '
                f'reference={(self.reference if hasattr(self, "reference") else None)!r}, '
                f'first_payment_date_time={(self.first_payment_date_time if hasattr(self, "first_payment_date_time") else None)!r}, '
                f'first_payment_amount={(self.first_payment_amount if hasattr(self, "first_payment_amount") else None)!r}, '
                f'next_payment_date_time={self.next_payment_date_time!r}, '
                f'next_payment_amount={self.next_payment_amount!r}, '
                f'final_payment_date_time={(self.final_payment_date_time if hasattr(self, "final_payment_date_time") else None)!r}, '
                f'final_payment_amount={(self.final_payment_amount if hasattr(self, "final_payment_amount") else None)!r}, '
                f'standing_order_status_code={(self.standing_order_status_code if hasattr(self, "standing_order_status_code") else None)!r}, '
                f'creditor_agent={(self.creditor_agent if hasattr(self, "creditor_agent") else None)!r}, '
                f'creditor_account={(self.creditor_account if hasattr(self, "creditor_account") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!s}, '
                f'standing_order_id={(self.standing_order_id if hasattr(self, "standing_order_id") else None)!s}, '
                f'frequency={self.frequency!s}, '
                f'reference={(self.reference if hasattr(self, "reference") else None)!s}, '
                f'first_payment_date_time={(self.first_payment_date_time if hasattr(self, "first_payment_date_time") else None)!s}, '
                f'first_payment_amount={(self.first_payment_amount if hasattr(self, "first_payment_amount") else None)!s}, '
                f'next_payment_date_time={self.next_payment_date_time!s}, '
                f'next_payment_amount={self.next_payment_amount!s}, '
                f'final_payment_date_time={(self.final_payment_date_time if hasattr(self, "final_payment_date_time") else None)!s}, '
                f'final_payment_amount={(self.final_payment_amount if hasattr(self, "final_payment_amount") else None)!s}, '
                f'standing_order_status_code={(self.standing_order_status_code if hasattr(self, "standing_order_status_code") else None)!s}, '
                f'creditor_agent={(self.creditor_agent if hasattr(self, "creditor_agent") else None)!s}, '
                f'creditor_account={(self.creditor_account if hasattr(self, "creditor_account") else None)!s})')
