# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.statement import Statement


class GetAccountStatementResponseData(object):

    """Implementation of the 'GetAccountStatementResponseData' model.

    Attributes:
        statement (Statement): The model property of type Statement.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "statement": 'Statement'
    }

    _optionals = [
        'statement',
    ]

    def __init__(self,
                 statement=APIHelper.SKIP):
        """Constructor for the GetAccountStatementResponseData class"""

        # Initialize members of the class
        if statement is not APIHelper.SKIP:
            self.statement = statement 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        statement = Statement.from_dictionary(dictionary.get('Statement')) if 'Statement' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(statement)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'statement={(self.statement if hasattr(self, "statement") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'statement={(self.statement if hasattr(self, "statement") else None)!s})')
