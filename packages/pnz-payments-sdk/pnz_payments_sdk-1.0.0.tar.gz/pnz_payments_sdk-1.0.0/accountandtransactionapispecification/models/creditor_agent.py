# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.postal_address import PostalAddress


class CreditorAgent(object):

    """Implementation of the 'CreditorAgent' model.

    Party that manages the account on behalf of the account owner, that is
    manages the registration and booking of entries on the account, calculates
    balances on the account and provides information about the account.
    This is the servicer of the beneficiary account.

    Attributes:
        scheme_name (SchemeNameEnum): Name of the identification scheme, in a
            coded form as published in an external list.
        identification (str): Unique and unambiguous identification of the
            servicing institution.
        name (str): Name by which an agent is known and which is usually used
            to identify that agent.
        postal_address (PostalAddress): Information that locates and
            identifies a specific address, as defined by postal services.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "scheme_name": 'SchemeName',
        "identification": 'Identification',
        "name": 'Name',
        "postal_address": 'PostalAddress'
    }

    _optionals = [
        'scheme_name',
        'identification',
        'name',
        'postal_address',
    ]

    def __init__(self,
                 scheme_name=APIHelper.SKIP,
                 identification=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 postal_address=APIHelper.SKIP):
        """Constructor for the CreditorAgent class"""

        # Initialize members of the class
        if scheme_name is not APIHelper.SKIP:
            self.scheme_name = scheme_name 
        if identification is not APIHelper.SKIP:
            self.identification = identification 
        if name is not APIHelper.SKIP:
            self.name = name 
        if postal_address is not APIHelper.SKIP:
            self.postal_address = postal_address 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        scheme_name = dictionary.get("SchemeName") if dictionary.get("SchemeName") else APIHelper.SKIP
        identification = dictionary.get("Identification") if dictionary.get("Identification") else APIHelper.SKIP
        name = dictionary.get("Name") if dictionary.get("Name") else APIHelper.SKIP
        postal_address = PostalAddress.from_dictionary(dictionary.get('PostalAddress')) if 'PostalAddress' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(scheme_name,
                   identification,
                   name,
                   postal_address)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'scheme_name={(self.scheme_name if hasattr(self, "scheme_name") else None)!r}, '
                f'identification={(self.identification if hasattr(self, "identification") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'postal_address={(self.postal_address if hasattr(self, "postal_address") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'scheme_name={(self.scheme_name if hasattr(self, "scheme_name") else None)!s}, '
                f'identification={(self.identification if hasattr(self, "identification") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'postal_address={(self.postal_address if hasattr(self, "postal_address") else None)!s})')
