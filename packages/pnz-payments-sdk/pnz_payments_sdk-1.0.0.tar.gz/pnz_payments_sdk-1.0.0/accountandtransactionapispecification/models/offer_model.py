# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.amount import Amount
from accountandtransactionapispecification.models.fee import Fee


class OfferModel(object):

    """Implementation of the 'OfferModel' model.

    Attributes:
        account_id (str): A unique and immutable identifier used to identify
            the account resource. This identifier has no meaning to the
            account owner.
        offer_id (str): A unique and immutable identifier used to identify the
            offer resource. This identifier has no meaning to the account
            owner.
        offer_type (OfferTypeEnum): Offer type, in a coded form.
        description (str): Further details of the offer.
        start_date_time (datetime): Date and time at which the offer starts.
            All dates in the JSON payloads are represented in ISO 8601
            date-time format. All date-time fields in responses must include
            the timezone. An example is below: 2017-04-05T10:43:07+00:00
        end_date_time (datetime): Date and time at which the offer ends. All
            dates in the JSON payloads are represented in ISO 8601 date-time
            format. All date-time fields in responses must include the
            timezone. An example is below: 2017-04-05T10:43:07+00:00
        amount (Amount): Amount of money of the cash balance.
        fee (Fee): Fee associated with the offer type.
        rate (str): Rate associated with the offer type.
        value (int): Value associated with the offer type.
        term (str): Further details of the term of the offer.
        url (str): URL (Uniform Resource Locator) where the document can be
            found

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_id": 'AccountId',
        "offer_id": 'OfferId',
        "offer_type": 'OfferType',
        "description": 'Description',
        "start_date_time": 'StartDateTime',
        "end_date_time": 'EndDateTime',
        "amount": 'Amount',
        "fee": 'Fee',
        "rate": 'Rate',
        "value": 'Value',
        "term": 'Term',
        "url": 'URL'
    }

    _optionals = [
        'offer_id',
        'offer_type',
        'description',
        'start_date_time',
        'end_date_time',
        'amount',
        'fee',
        'rate',
        'value',
        'term',
        'url',
    ]

    def __init__(self,
                 account_id=None,
                 offer_id=APIHelper.SKIP,
                 offer_type=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 start_date_time=APIHelper.SKIP,
                 end_date_time=APIHelper.SKIP,
                 amount=APIHelper.SKIP,
                 fee=APIHelper.SKIP,
                 rate=APIHelper.SKIP,
                 value=APIHelper.SKIP,
                 term=APIHelper.SKIP,
                 url=APIHelper.SKIP):
        """Constructor for the OfferModel class"""

        # Initialize members of the class
        self.account_id = account_id 
        if offer_id is not APIHelper.SKIP:
            self.offer_id = offer_id 
        if offer_type is not APIHelper.SKIP:
            self.offer_type = offer_type 
        if description is not APIHelper.SKIP:
            self.description = description 
        if start_date_time is not APIHelper.SKIP:
            self.start_date_time = APIHelper.apply_datetime_converter(start_date_time, APIHelper.RFC3339DateTime) if start_date_time else None 
        if end_date_time is not APIHelper.SKIP:
            self.end_date_time = APIHelper.apply_datetime_converter(end_date_time, APIHelper.RFC3339DateTime) if end_date_time else None 
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if fee is not APIHelper.SKIP:
            self.fee = fee 
        if rate is not APIHelper.SKIP:
            self.rate = rate 
        if value is not APIHelper.SKIP:
            self.value = value 
        if term is not APIHelper.SKIP:
            self.term = term 
        if url is not APIHelper.SKIP:
            self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else None
        offer_id = dictionary.get("OfferId") if dictionary.get("OfferId") else APIHelper.SKIP
        offer_type = dictionary.get("OfferType") if dictionary.get("OfferType") else APIHelper.SKIP
        description = dictionary.get("Description") if dictionary.get("Description") else APIHelper.SKIP
        start_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("StartDateTime")).datetime if dictionary.get("StartDateTime") else APIHelper.SKIP
        end_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("EndDateTime")).datetime if dictionary.get("EndDateTime") else APIHelper.SKIP
        amount = Amount.from_dictionary(dictionary.get('Amount')) if 'Amount' in dictionary.keys() else APIHelper.SKIP
        fee = Fee.from_dictionary(dictionary.get('Fee')) if 'Fee' in dictionary.keys() else APIHelper.SKIP
        rate = dictionary.get("Rate") if dictionary.get("Rate") else APIHelper.SKIP
        value = dictionary.get("Value") if dictionary.get("Value") else APIHelper.SKIP
        term = dictionary.get("Term") if dictionary.get("Term") else APIHelper.SKIP
        url = dictionary.get("URL") if dictionary.get("URL") else APIHelper.SKIP
        # Return an object of this model
        return cls(account_id,
                   offer_id,
                   offer_type,
                   description,
                   start_date_time,
                   end_date_time,
                   amount,
                   fee,
                   rate,
                   value,
                   term,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!r}, '
                f'offer_id={(self.offer_id if hasattr(self, "offer_id") else None)!r}, '
                f'offer_type={(self.offer_type if hasattr(self, "offer_type") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'start_date_time={(self.start_date_time if hasattr(self, "start_date_time") else None)!r}, '
                f'end_date_time={(self.end_date_time if hasattr(self, "end_date_time") else None)!r}, '
                f'amount={(self.amount if hasattr(self, "amount") else None)!r}, '
                f'fee={(self.fee if hasattr(self, "fee") else None)!r}, '
                f'rate={(self.rate if hasattr(self, "rate") else None)!r}, '
                f'value={(self.value if hasattr(self, "value") else None)!r}, '
                f'term={(self.term if hasattr(self, "term") else None)!r}, '
                f'url={(self.url if hasattr(self, "url") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!s}, '
                f'offer_id={(self.offer_id if hasattr(self, "offer_id") else None)!s}, '
                f'offer_type={(self.offer_type if hasattr(self, "offer_type") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'start_date_time={(self.start_date_time if hasattr(self, "start_date_time") else None)!s}, '
                f'end_date_time={(self.end_date_time if hasattr(self, "end_date_time") else None)!s}, '
                f'amount={(self.amount if hasattr(self, "amount") else None)!s}, '
                f'fee={(self.fee if hasattr(self, "fee") else None)!s}, '
                f'rate={(self.rate if hasattr(self, "rate") else None)!s}, '
                f'value={(self.value if hasattr(self, "value") else None)!s}, '
                f'term={(self.term if hasattr(self, "term") else None)!s}, '
                f'url={(self.url if hasattr(self, "url") else None)!s})')
