# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.amount import Amount
from accountandtransactionapispecification.models.balance import Balance
from accountandtransactionapispecification.models.bank_transaction_code import BankTransactionCode
from accountandtransactionapispecification.models.card_instrument import CardInstrument
from accountandtransactionapispecification.models.creditor_account import CreditorAccount
from accountandtransactionapispecification.models.creditor_agent import CreditorAgent
from accountandtransactionapispecification.models.currency_exchange import CurrencyExchange
from accountandtransactionapispecification.models.debtor_account import DebtorAccount
from accountandtransactionapispecification.models.debtor_agent import DebtorAgent
from accountandtransactionapispecification.models.merchant_details import MerchantDetails
from accountandtransactionapispecification.models.proprietary_bank_transaction_code import ProprietaryBankTransactionCode
from accountandtransactionapispecification.models.transaction_reference import TransactionReference


class TransactionModel(object):

    """Implementation of the 'TransactionModel' model.

    Attributes:
        account_id (str): A unique and immutable identifier used to identify
            the account resource. This identifier has no meaning to the
            account owner.
        transaction_id (str): Unique identifier for the transaction within an
            servicing institution. This identifier is both unique and
            immutable.
        transaction_reference (TransactionReference): The model property of
            type TransactionReference.
        statement_reference (List[str]): Unique reference for the statement.
            This reference may be optionally populated if available.
        amount (Amount): Amount of money of the cash balance.
        credit_debit_indicator (CreditDebitIndicatorEnum): Indicates whether
            the balance is a credit or a debit balance. Usage: A zero balance
            is considered to be a credit balance.
        status (TransactionStatusEnum): Status of a transaction entry on the
            books of the account servicer.
        booking_date_time (datetime): Date and time when a transaction entry
            is posted to an account on the account servicer's books. Usage:
            Booking date is the expected booking date, unless the status is
            booked, in which case it is the actual booking date. All dates in
            the JSON payloads are represented in ISO 8601 date-time format.
            All date-time fields in responses must include the timezone. An
            example is below: 2017-04-05T10:43:07+00:00
        value_date_time (datetime): Date and time at which assets become
            available to the account owner in case of a credit entry, or cease
            to be available to the account owner in case of a debit entry. 
            Usage: If entry status is pending and value date is present, then
            the value date refers to an expected/requested value date. For
            entries subject to availability/float and for which availability
            information is provided, the value date must not be used. In this
            case the availability component identifies the  number of
            availability days. All dates in the JSON payloads are represented
            in ISO 8601 date-time format. All date-time fields in responses
            must include the timezone. An example is below:
            2017-04-05T10:43:07+00:00
        address_line (str): Information that locates and identifies a specific
            address, as defined by postal services, that is presented in free
            format text.
        bank_transaction_code (BankTransactionCode): Set of elements used to
            fully identify the type of underlying transaction resulting in an
            entry.
        proprietary_bank_transaction_code (ProprietaryBankTransactionCode):
            Set of elements to fully identify a proprietary bank transaction
            code.
        currency_exchange (CurrencyExchange): Set of elements used to provide
            details on the currency exchange.
        creditor_agent (CreditorAgent): Party that manages the account on
            behalf of the account owner, that is manages the registration and
            booking of entries on the account, calculates balances on the
            account and provides information about the account. This is the
            servicer of the beneficiary account.
        debtor_agent (DebtorAgent): Financial institution servicing an account
            for the debtor.
        card_instrument (CardInstrument): Set of elements to describe the card
            instrument used in the transaction.
        transaction_information (str): Further details of the transaction.
            This is the transaction narrative, which is unstructured text.
        balance (Balance): Set of elements used to define the balance as a
            numerical representation of the net increases and decreases in an
            account after a transaction entry is applied to the account.
        merchant_details (MerchantDetails): Details of the merchant involved
            in the transaction.
        creditor_account (CreditorAccount): Unambiguous identification of the
            account of the creditor, in the case of a debit transaction.
        debtor_account (DebtorAccount): Unambiguous identification of the
            account of the debtor, in the case of a crebit transaction.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_id": 'AccountId',
        "amount": 'Amount',
        "credit_debit_indicator": 'CreditDebitIndicator',
        "status": 'Status',
        "booking_date_time": 'BookingDateTime',
        "transaction_id": 'TransactionId',
        "transaction_reference": 'TransactionReference',
        "statement_reference": 'StatementReference',
        "value_date_time": 'ValueDateTime',
        "address_line": 'AddressLine',
        "bank_transaction_code": 'BankTransactionCode',
        "proprietary_bank_transaction_code": 'ProprietaryBankTransactionCode',
        "currency_exchange": 'CurrencyExchange',
        "creditor_agent": 'CreditorAgent',
        "debtor_agent": 'DebtorAgent',
        "card_instrument": 'CardInstrument',
        "transaction_information": 'TransactionInformation',
        "balance": 'Balance',
        "merchant_details": 'MerchantDetails',
        "creditor_account": 'CreditorAccount',
        "debtor_account": 'DebtorAccount'
    }

    _optionals = [
        'transaction_id',
        'transaction_reference',
        'statement_reference',
        'value_date_time',
        'address_line',
        'bank_transaction_code',
        'proprietary_bank_transaction_code',
        'currency_exchange',
        'creditor_agent',
        'debtor_agent',
        'card_instrument',
        'transaction_information',
        'balance',
        'merchant_details',
        'creditor_account',
        'debtor_account',
    ]

    def __init__(self,
                 account_id=None,
                 amount=None,
                 credit_debit_indicator=None,
                 status=None,
                 booking_date_time=None,
                 transaction_id=APIHelper.SKIP,
                 transaction_reference=APIHelper.SKIP,
                 statement_reference=APIHelper.SKIP,
                 value_date_time=APIHelper.SKIP,
                 address_line=APIHelper.SKIP,
                 bank_transaction_code=APIHelper.SKIP,
                 proprietary_bank_transaction_code=APIHelper.SKIP,
                 currency_exchange=APIHelper.SKIP,
                 creditor_agent=APIHelper.SKIP,
                 debtor_agent=APIHelper.SKIP,
                 card_instrument=APIHelper.SKIP,
                 transaction_information=APIHelper.SKIP,
                 balance=APIHelper.SKIP,
                 merchant_details=APIHelper.SKIP,
                 creditor_account=APIHelper.SKIP,
                 debtor_account=APIHelper.SKIP):
        """Constructor for the TransactionModel class"""

        # Initialize members of the class
        self.account_id = account_id 
        if transaction_id is not APIHelper.SKIP:
            self.transaction_id = transaction_id 
        if transaction_reference is not APIHelper.SKIP:
            self.transaction_reference = transaction_reference 
        if statement_reference is not APIHelper.SKIP:
            self.statement_reference = statement_reference 
        self.amount = amount 
        self.credit_debit_indicator = credit_debit_indicator 
        self.status = status 
        self.booking_date_time = APIHelper.apply_datetime_converter(booking_date_time, APIHelper.RFC3339DateTime) if booking_date_time else None 
        if value_date_time is not APIHelper.SKIP:
            self.value_date_time = APIHelper.apply_datetime_converter(value_date_time, APIHelper.RFC3339DateTime) if value_date_time else None 
        if address_line is not APIHelper.SKIP:
            self.address_line = address_line 
        if bank_transaction_code is not APIHelper.SKIP:
            self.bank_transaction_code = bank_transaction_code 
        if proprietary_bank_transaction_code is not APIHelper.SKIP:
            self.proprietary_bank_transaction_code = proprietary_bank_transaction_code 
        if currency_exchange is not APIHelper.SKIP:
            self.currency_exchange = currency_exchange 
        if creditor_agent is not APIHelper.SKIP:
            self.creditor_agent = creditor_agent 
        if debtor_agent is not APIHelper.SKIP:
            self.debtor_agent = debtor_agent 
        if card_instrument is not APIHelper.SKIP:
            self.card_instrument = card_instrument 
        if transaction_information is not APIHelper.SKIP:
            self.transaction_information = transaction_information 
        if balance is not APIHelper.SKIP:
            self.balance = balance 
        if merchant_details is not APIHelper.SKIP:
            self.merchant_details = merchant_details 
        if creditor_account is not APIHelper.SKIP:
            self.creditor_account = creditor_account 
        if debtor_account is not APIHelper.SKIP:
            self.debtor_account = debtor_account 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else None
        amount = Amount.from_dictionary(dictionary.get('Amount')) if dictionary.get('Amount') else None
        credit_debit_indicator = dictionary.get("CreditDebitIndicator") if dictionary.get("CreditDebitIndicator") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        booking_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("BookingDateTime")).datetime if dictionary.get("BookingDateTime") else None
        transaction_id = dictionary.get("TransactionId") if dictionary.get("TransactionId") else APIHelper.SKIP
        transaction_reference = TransactionReference.from_dictionary(dictionary.get('TransactionReference')) if 'TransactionReference' in dictionary.keys() else APIHelper.SKIP
        statement_reference = dictionary.get("StatementReference") if dictionary.get("StatementReference") else APIHelper.SKIP
        value_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("ValueDateTime")).datetime if dictionary.get("ValueDateTime") else APIHelper.SKIP
        address_line = dictionary.get("AddressLine") if dictionary.get("AddressLine") else APIHelper.SKIP
        bank_transaction_code = BankTransactionCode.from_dictionary(dictionary.get('BankTransactionCode')) if 'BankTransactionCode' in dictionary.keys() else APIHelper.SKIP
        proprietary_bank_transaction_code = ProprietaryBankTransactionCode.from_dictionary(dictionary.get('ProprietaryBankTransactionCode')) if 'ProprietaryBankTransactionCode' in dictionary.keys() else APIHelper.SKIP
        currency_exchange = CurrencyExchange.from_dictionary(dictionary.get('CurrencyExchange')) if 'CurrencyExchange' in dictionary.keys() else APIHelper.SKIP
        creditor_agent = CreditorAgent.from_dictionary(dictionary.get('CreditorAgent')) if 'CreditorAgent' in dictionary.keys() else APIHelper.SKIP
        debtor_agent = DebtorAgent.from_dictionary(dictionary.get('DebtorAgent')) if 'DebtorAgent' in dictionary.keys() else APIHelper.SKIP
        card_instrument = CardInstrument.from_dictionary(dictionary.get('CardInstrument')) if 'CardInstrument' in dictionary.keys() else APIHelper.SKIP
        transaction_information = dictionary.get("TransactionInformation") if dictionary.get("TransactionInformation") else APIHelper.SKIP
        balance = Balance.from_dictionary(dictionary.get('Balance')) if 'Balance' in dictionary.keys() else APIHelper.SKIP
        merchant_details = MerchantDetails.from_dictionary(dictionary.get('MerchantDetails')) if 'MerchantDetails' in dictionary.keys() else APIHelper.SKIP
        creditor_account = CreditorAccount.from_dictionary(dictionary.get('CreditorAccount')) if 'CreditorAccount' in dictionary.keys() else APIHelper.SKIP
        debtor_account = DebtorAccount.from_dictionary(dictionary.get('DebtorAccount')) if 'DebtorAccount' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(account_id,
                   amount,
                   credit_debit_indicator,
                   status,
                   booking_date_time,
                   transaction_id,
                   transaction_reference,
                   statement_reference,
                   value_date_time,
                   address_line,
                   bank_transaction_code,
                   proprietary_bank_transaction_code,
                   currency_exchange,
                   creditor_agent,
                   debtor_agent,
                   card_instrument,
                   transaction_information,
                   balance,
                   merchant_details,
                   creditor_account,
                   debtor_account)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!r}, '
                f'transaction_id={(self.transaction_id if hasattr(self, "transaction_id") else None)!r}, '
                f'transaction_reference={(self.transaction_reference if hasattr(self, "transaction_reference") else None)!r}, '
                f'statement_reference={(self.statement_reference if hasattr(self, "statement_reference") else None)!r}, '
                f'amount={self.amount!r}, '
                f'credit_debit_indicator={self.credit_debit_indicator!r}, '
                f'status={self.status!r}, '
                f'booking_date_time={self.booking_date_time!r}, '
                f'value_date_time={(self.value_date_time if hasattr(self, "value_date_time") else None)!r}, '
                f'address_line={(self.address_line if hasattr(self, "address_line") else None)!r}, '
                f'bank_transaction_code={(self.bank_transaction_code if hasattr(self, "bank_transaction_code") else None)!r}, '
                f'proprietary_bank_transaction_code={(self.proprietary_bank_transaction_code if hasattr(self, "proprietary_bank_transaction_code") else None)!r}, '
                f'currency_exchange={(self.currency_exchange if hasattr(self, "currency_exchange") else None)!r}, '
                f'creditor_agent={(self.creditor_agent if hasattr(self, "creditor_agent") else None)!r}, '
                f'debtor_agent={(self.debtor_agent if hasattr(self, "debtor_agent") else None)!r}, '
                f'card_instrument={(self.card_instrument if hasattr(self, "card_instrument") else None)!r}, '
                f'transaction_information={(self.transaction_information if hasattr(self, "transaction_information") else None)!r}, '
                f'balance={(self.balance if hasattr(self, "balance") else None)!r}, '
                f'merchant_details={(self.merchant_details if hasattr(self, "merchant_details") else None)!r}, '
                f'creditor_account={(self.creditor_account if hasattr(self, "creditor_account") else None)!r}, '
                f'debtor_account={(self.debtor_account if hasattr(self, "debtor_account") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!s}, '
                f'transaction_id={(self.transaction_id if hasattr(self, "transaction_id") else None)!s}, '
                f'transaction_reference={(self.transaction_reference if hasattr(self, "transaction_reference") else None)!s}, '
                f'statement_reference={(self.statement_reference if hasattr(self, "statement_reference") else None)!s}, '
                f'amount={self.amount!s}, '
                f'credit_debit_indicator={self.credit_debit_indicator!s}, '
                f'status={self.status!s}, '
                f'booking_date_time={self.booking_date_time!s}, '
                f'value_date_time={(self.value_date_time if hasattr(self, "value_date_time") else None)!s}, '
                f'address_line={(self.address_line if hasattr(self, "address_line") else None)!s}, '
                f'bank_transaction_code={(self.bank_transaction_code if hasattr(self, "bank_transaction_code") else None)!s}, '
                f'proprietary_bank_transaction_code={(self.proprietary_bank_transaction_code if hasattr(self, "proprietary_bank_transaction_code") else None)!s}, '
                f'currency_exchange={(self.currency_exchange if hasattr(self, "currency_exchange") else None)!s}, '
                f'creditor_agent={(self.creditor_agent if hasattr(self, "creditor_agent") else None)!s}, '
                f'debtor_agent={(self.debtor_agent if hasattr(self, "debtor_agent") else None)!s}, '
                f'card_instrument={(self.card_instrument if hasattr(self, "card_instrument") else None)!s}, '
                f'transaction_information={(self.transaction_information if hasattr(self, "transaction_information") else None)!s}, '
                f'balance={(self.balance if hasattr(self, "balance") else None)!s}, '
                f'merchant_details={(self.merchant_details if hasattr(self, "merchant_details") else None)!s}, '
                f'creditor_account={(self.creditor_account if hasattr(self, "creditor_account") else None)!s}, '
                f'debtor_account={(self.debtor_account if hasattr(self, "debtor_account") else None)!s})')
