# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.address import Address


class PartyModel(object):

    """Implementation of the 'PartyModel' model.

    Attributes:
        party_id (str): A unique and immutable identifier used to identify the
            customer resource. This identifier has no meaning to the account
            owner.
        party_number (str): Number assigned by an agent to identify its
            customer.
        party_type (PartyTypeEnum): Party type, in a coded form.
        name (str): Name by which a party is known and which is usually used
            to identify that party.
        email_address (str): Address for electronic mail (e-mail).
        phone (str): Collection of information that identifies a phone number,
            as defined by telecom services.
        mobile (str): Collection of information that identifies a mobile phone
            number, as defined by telecom services.
        address (List[Address]): Postal address of a party.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "party_id": 'PartyId',
        "party_number": 'PartyNumber',
        "party_type": 'PartyType',
        "name": 'Name',
        "email_address": 'EmailAddress',
        "phone": 'Phone',
        "mobile": 'Mobile',
        "address": 'Address'
    }

    _optionals = [
        'party_number',
        'party_type',
        'name',
        'email_address',
        'phone',
        'mobile',
        'address',
    ]

    def __init__(self,
                 party_id=None,
                 party_number=APIHelper.SKIP,
                 party_type=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 email_address=APIHelper.SKIP,
                 phone=APIHelper.SKIP,
                 mobile=APIHelper.SKIP,
                 address=APIHelper.SKIP):
        """Constructor for the PartyModel class"""

        # Initialize members of the class
        self.party_id = party_id 
        if party_number is not APIHelper.SKIP:
            self.party_number = party_number 
        if party_type is not APIHelper.SKIP:
            self.party_type = party_type 
        if name is not APIHelper.SKIP:
            self.name = name 
        if email_address is not APIHelper.SKIP:
            self.email_address = email_address 
        if phone is not APIHelper.SKIP:
            self.phone = phone 
        if mobile is not APIHelper.SKIP:
            self.mobile = mobile 
        if address is not APIHelper.SKIP:
            self.address = address 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        party_id = dictionary.get("PartyId") if dictionary.get("PartyId") else None
        party_number = dictionary.get("PartyNumber") if dictionary.get("PartyNumber") else APIHelper.SKIP
        party_type = dictionary.get("PartyType") if dictionary.get("PartyType") else APIHelper.SKIP
        name = dictionary.get("Name") if dictionary.get("Name") else APIHelper.SKIP
        email_address = dictionary.get("EmailAddress") if dictionary.get("EmailAddress") else APIHelper.SKIP
        phone = dictionary.get("Phone") if dictionary.get("Phone") else APIHelper.SKIP
        mobile = dictionary.get("Mobile") if dictionary.get("Mobile") else APIHelper.SKIP
        address = None
        if dictionary.get('Address') is not None:
            address = [Address.from_dictionary(x) for x in dictionary.get('Address')]
        else:
            address = APIHelper.SKIP
        # Return an object of this model
        return cls(party_id,
                   party_number,
                   party_type,
                   name,
                   email_address,
                   phone,
                   mobile,
                   address)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'party_id={self.party_id!r}, '
                f'party_number={(self.party_number if hasattr(self, "party_number") else None)!r}, '
                f'party_type={(self.party_type if hasattr(self, "party_type") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'email_address={(self.email_address if hasattr(self, "email_address") else None)!r}, '
                f'phone={(self.phone if hasattr(self, "phone") else None)!r}, '
                f'mobile={(self.mobile if hasattr(self, "mobile") else None)!r}, '
                f'address={(self.address if hasattr(self, "address") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'party_id={self.party_id!s}, '
                f'party_number={(self.party_number if hasattr(self, "party_number") else None)!s}, '
                f'party_type={(self.party_type if hasattr(self, "party_type") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'email_address={(self.email_address if hasattr(self, "email_address") else None)!s}, '
                f'phone={(self.phone if hasattr(self, "phone") else None)!s}, '
                f'mobile={(self.mobile if hasattr(self, "mobile") else None)!s}, '
                f'address={(self.address if hasattr(self, "address") else None)!s})')
