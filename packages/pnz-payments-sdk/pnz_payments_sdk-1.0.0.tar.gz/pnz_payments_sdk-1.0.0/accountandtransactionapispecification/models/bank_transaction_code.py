# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class BankTransactionCode(object):

    """Implementation of the 'BankTransactionCode' model.

    Set of elements used to fully identify the type of underlying transaction
    resulting in an entry.

    Attributes:
        code (str): Specifies the family within a domain.
        sub_code (str): Specifies the sub-product family within a specific
            family.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "code": 'Code',
        "sub_code": 'SubCode'
    }

    def __init__(self,
                 code=None,
                 sub_code=None):
        """Constructor for the BankTransactionCode class"""

        # Initialize members of the class
        self.code = code 
        self.sub_code = sub_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        code = dictionary.get("Code") if dictionary.get("Code") else None
        sub_code = dictionary.get("SubCode") if dictionary.get("SubCode") else None
        # Return an object of this model
        return cls(code,
                   sub_code)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'code={self.code!r}, '
                f'sub_code={self.sub_code!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'code={self.code!s}, '
                f'sub_code={self.sub_code!s})')
