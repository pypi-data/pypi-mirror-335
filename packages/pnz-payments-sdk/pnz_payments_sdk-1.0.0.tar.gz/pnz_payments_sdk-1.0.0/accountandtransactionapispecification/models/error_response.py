# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.error import Error


class ErrorResponse(object):

    """Implementation of the 'ErrorResponse' model.

    An array of detail error codes, and messages, and URLs to documentation to
    help remediation.

    Attributes:
        code (str): High level textual error code to help categorise the
            errors.
        id (str): A unique reference for the error instance, for audit
            purposes, in case of unknown/unclassified errors.
        message (str): Brief Error message. E.g., 'There is something wrong
            with the request parameters provided'
        errors (List[Error]): The model property of type List[Error].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "code": 'Code',
        "message": 'Message',
        "errors": 'Errors',
        "id": 'Id'
    }

    _optionals = [
        'id',
    ]

    def __init__(self,
                 code=None,
                 message=None,
                 errors=None,
                 id=APIHelper.SKIP):
        """Constructor for the ErrorResponse class"""

        # Initialize members of the class
        self.code = code 
        if id is not APIHelper.SKIP:
            self.id = id 
        self.message = message 
        self.errors = errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        code = dictionary.get("Code") if dictionary.get("Code") else None
        message = dictionary.get("Message") if dictionary.get("Message") else None
        errors = None
        if dictionary.get('Errors') is not None:
            errors = [Error.from_dictionary(x) for x in dictionary.get('Errors')]
        id = dictionary.get("Id") if dictionary.get("Id") else APIHelper.SKIP
        # Return an object of this model
        return cls(code,
                   message,
                   errors,
                   id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'code={self.code!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'message={self.message!r}, '
                f'errors={self.errors!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'code={self.code!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'message={self.message!s}, '
                f'errors={self.errors!s})')
