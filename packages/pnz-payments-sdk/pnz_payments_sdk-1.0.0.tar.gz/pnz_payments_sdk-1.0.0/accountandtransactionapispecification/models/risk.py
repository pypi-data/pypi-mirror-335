# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.delivery_address import DeliveryAddress
from accountandtransactionapispecification.models.geo_location import GeoLocation


class Risk(object):

    """Implementation of the 'Risk' model.

    The Risk section is sent by the initiating party to the API Provider. It
    is used to specify additional details for risk scoring.

    Attributes:
        geo_location (GeoLocation): Location of the end-user on the earth
            specified by two numbers representing vertical and horizontal
            position
        payment_context_code (PaymentContextCodeEnum): Specifies the payment
            context
        merchant_category_code (str): Category code conforms to ISO 18245,
            related to the type of services or goods the merchant provides for
            the transaction
        merchant_customer_identification (str): The unique customer identifier
            of the Customer with the merchant.
        delivery_address (DeliveryAddress): Information that locates and
            identifies a specific address, as defined by postal services or in
            free format text.
        end_user_app_name (str): Name of the end user facing application
        end_user_app_version (str): Version of the end user facing application
        merchant_name (str): Name of the merchant
        merchant_nzbn (str): NZ business number for the merchant

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "geo_location": 'GeoLocation',
        "payment_context_code": 'PaymentContextCode',
        "merchant_category_code": 'MerchantCategoryCode',
        "merchant_customer_identification": 'MerchantCustomerIdentification',
        "delivery_address": 'DeliveryAddress',
        "end_user_app_name": 'EndUserAppName',
        "end_user_app_version": 'EndUserAppVersion',
        "merchant_name": 'MerchantName',
        "merchant_nzbn": 'MerchantNZBN'
    }

    _optionals = [
        'geo_location',
        'payment_context_code',
        'merchant_category_code',
        'merchant_customer_identification',
        'delivery_address',
        'end_user_app_name',
        'end_user_app_version',
        'merchant_name',
        'merchant_nzbn',
    ]

    def __init__(self,
                 geo_location=APIHelper.SKIP,
                 payment_context_code=APIHelper.SKIP,
                 merchant_category_code=APIHelper.SKIP,
                 merchant_customer_identification=APIHelper.SKIP,
                 delivery_address=APIHelper.SKIP,
                 end_user_app_name=APIHelper.SKIP,
                 end_user_app_version=APIHelper.SKIP,
                 merchant_name=APIHelper.SKIP,
                 merchant_nzbn=APIHelper.SKIP):
        """Constructor for the Risk class"""

        # Initialize members of the class
        if geo_location is not APIHelper.SKIP:
            self.geo_location = geo_location 
        if payment_context_code is not APIHelper.SKIP:
            self.payment_context_code = payment_context_code 
        if merchant_category_code is not APIHelper.SKIP:
            self.merchant_category_code = merchant_category_code 
        if merchant_customer_identification is not APIHelper.SKIP:
            self.merchant_customer_identification = merchant_customer_identification 
        if delivery_address is not APIHelper.SKIP:
            self.delivery_address = delivery_address 
        if end_user_app_name is not APIHelper.SKIP:
            self.end_user_app_name = end_user_app_name 
        if end_user_app_version is not APIHelper.SKIP:
            self.end_user_app_version = end_user_app_version 
        if merchant_name is not APIHelper.SKIP:
            self.merchant_name = merchant_name 
        if merchant_nzbn is not APIHelper.SKIP:
            self.merchant_nzbn = merchant_nzbn 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        geo_location = GeoLocation.from_dictionary(dictionary.get('GeoLocation')) if 'GeoLocation' in dictionary.keys() else APIHelper.SKIP
        payment_context_code = dictionary.get("PaymentContextCode") if dictionary.get("PaymentContextCode") else APIHelper.SKIP
        merchant_category_code = dictionary.get("MerchantCategoryCode") if dictionary.get("MerchantCategoryCode") else APIHelper.SKIP
        merchant_customer_identification = dictionary.get("MerchantCustomerIdentification") if dictionary.get("MerchantCustomerIdentification") else APIHelper.SKIP
        delivery_address = DeliveryAddress.from_dictionary(dictionary.get('DeliveryAddress')) if 'DeliveryAddress' in dictionary.keys() else APIHelper.SKIP
        end_user_app_name = dictionary.get("EndUserAppName") if dictionary.get("EndUserAppName") else APIHelper.SKIP
        end_user_app_version = dictionary.get("EndUserAppVersion") if dictionary.get("EndUserAppVersion") else APIHelper.SKIP
        merchant_name = dictionary.get("MerchantName") if dictionary.get("MerchantName") else APIHelper.SKIP
        merchant_nzbn = dictionary.get("MerchantNZBN") if dictionary.get("MerchantNZBN") else APIHelper.SKIP
        # Return an object of this model
        return cls(geo_location,
                   payment_context_code,
                   merchant_category_code,
                   merchant_customer_identification,
                   delivery_address,
                   end_user_app_name,
                   end_user_app_version,
                   merchant_name,
                   merchant_nzbn)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'geo_location={(self.geo_location if hasattr(self, "geo_location") else None)!r}, '
                f'payment_context_code={(self.payment_context_code if hasattr(self, "payment_context_code") else None)!r}, '
                f'merchant_category_code={(self.merchant_category_code if hasattr(self, "merchant_category_code") else None)!r}, '
                f'merchant_customer_identification={(self.merchant_customer_identification if hasattr(self, "merchant_customer_identification") else None)!r}, '
                f'delivery_address={(self.delivery_address if hasattr(self, "delivery_address") else None)!r}, '
                f'end_user_app_name={(self.end_user_app_name if hasattr(self, "end_user_app_name") else None)!r}, '
                f'end_user_app_version={(self.end_user_app_version if hasattr(self, "end_user_app_version") else None)!r}, '
                f'merchant_name={(self.merchant_name if hasattr(self, "merchant_name") else None)!r}, '
                f'merchant_nzbn={(self.merchant_nzbn if hasattr(self, "merchant_nzbn") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'geo_location={(self.geo_location if hasattr(self, "geo_location") else None)!s}, '
                f'payment_context_code={(self.payment_context_code if hasattr(self, "payment_context_code") else None)!s}, '
                f'merchant_category_code={(self.merchant_category_code if hasattr(self, "merchant_category_code") else None)!s}, '
                f'merchant_customer_identification={(self.merchant_customer_identification if hasattr(self, "merchant_customer_identification") else None)!s}, '
                f'delivery_address={(self.delivery_address if hasattr(self, "delivery_address") else None)!s}, '
                f'end_user_app_name={(self.end_user_app_name if hasattr(self, "end_user_app_name") else None)!s}, '
                f'end_user_app_version={(self.end_user_app_version if hasattr(self, "end_user_app_version") else None)!s}, '
                f'merchant_name={(self.merchant_name if hasattr(self, "merchant_name") else None)!s}, '
                f'merchant_nzbn={(self.merchant_nzbn if hasattr(self, "merchant_nzbn") else None)!s})')
