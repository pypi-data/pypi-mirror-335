# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper


class PostalAddress(object):

    """Implementation of the 'PostalAddress' model.

    Information that locates and identifies a specific address, as defined by
    postal services.

    Attributes:
        address_type (AddressTypeOptionEnum): Identifies the nature of the
            postal address.
        address_line (List[str]): Information that locates and identifies a
            specific address, as defined by postal services, that is presented
            in free format text.
        street_name (str): Name of a street or thoroughfare.
        building_number (str): Number that identifies the position of a
            building on a street.
        post_code (str): Identifier consisting of a group of letters and/or
            numbers that is added to a postal address to assist the sorting of
            mail.
        town_name (str): Name of a built-up area, with defined boundaries, and
            a local government.
        country_sub_division (str): Identifies a subdivision of a country such
            as state, region, county.
        country (str): Nation with its own government.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "country": 'Country',
        "address_type": 'AddressType',
        "address_line": 'AddressLine',
        "street_name": 'StreetName',
        "building_number": 'BuildingNumber',
        "post_code": 'PostCode',
        "town_name": 'TownName',
        "country_sub_division": 'CountrySubDivision'
    }

    _optionals = [
        'address_type',
        'address_line',
        'street_name',
        'building_number',
        'post_code',
        'town_name',
        'country_sub_division',
    ]

    def __init__(self,
                 country=None,
                 address_type=APIHelper.SKIP,
                 address_line=APIHelper.SKIP,
                 street_name=APIHelper.SKIP,
                 building_number=APIHelper.SKIP,
                 post_code=APIHelper.SKIP,
                 town_name=APIHelper.SKIP,
                 country_sub_division=APIHelper.SKIP):
        """Constructor for the PostalAddress class"""

        # Initialize members of the class
        if address_type is not APIHelper.SKIP:
            self.address_type = address_type 
        if address_line is not APIHelper.SKIP:
            self.address_line = address_line 
        if street_name is not APIHelper.SKIP:
            self.street_name = street_name 
        if building_number is not APIHelper.SKIP:
            self.building_number = building_number 
        if post_code is not APIHelper.SKIP:
            self.post_code = post_code 
        if town_name is not APIHelper.SKIP:
            self.town_name = town_name 
        if country_sub_division is not APIHelper.SKIP:
            self.country_sub_division = country_sub_division 
        self.country = country 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        country = dictionary.get("Country") if dictionary.get("Country") else None
        address_type = dictionary.get("AddressType") if dictionary.get("AddressType") else APIHelper.SKIP
        address_line = dictionary.get("AddressLine") if dictionary.get("AddressLine") else APIHelper.SKIP
        street_name = dictionary.get("StreetName") if dictionary.get("StreetName") else APIHelper.SKIP
        building_number = dictionary.get("BuildingNumber") if dictionary.get("BuildingNumber") else APIHelper.SKIP
        post_code = dictionary.get("PostCode") if dictionary.get("PostCode") else APIHelper.SKIP
        town_name = dictionary.get("TownName") if dictionary.get("TownName") else APIHelper.SKIP
        country_sub_division = dictionary.get("CountrySubDivision") if dictionary.get("CountrySubDivision") else APIHelper.SKIP
        # Return an object of this model
        return cls(country,
                   address_type,
                   address_line,
                   street_name,
                   building_number,
                   post_code,
                   town_name,
                   country_sub_division)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'address_type={(self.address_type if hasattr(self, "address_type") else None)!r}, '
                f'address_line={(self.address_line if hasattr(self, "address_line") else None)!r}, '
                f'street_name={(self.street_name if hasattr(self, "street_name") else None)!r}, '
                f'building_number={(self.building_number if hasattr(self, "building_number") else None)!r}, '
                f'post_code={(self.post_code if hasattr(self, "post_code") else None)!r}, '
                f'town_name={(self.town_name if hasattr(self, "town_name") else None)!r}, '
                f'country_sub_division={(self.country_sub_division if hasattr(self, "country_sub_division") else None)!r}, '
                f'country={self.country!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'address_type={(self.address_type if hasattr(self, "address_type") else None)!s}, '
                f'address_line={(self.address_line if hasattr(self, "address_line") else None)!s}, '
                f'street_name={(self.street_name if hasattr(self, "street_name") else None)!s}, '
                f'building_number={(self.building_number if hasattr(self, "building_number") else None)!s}, '
                f'post_code={(self.post_code if hasattr(self, "post_code") else None)!s}, '
                f'town_name={(self.town_name if hasattr(self, "town_name") else None)!s}, '
                f'country_sub_division={(self.country_sub_division if hasattr(self, "country_sub_division") else None)!s}, '
                f'country={self.country!s})')
