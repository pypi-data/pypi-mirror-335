# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.amount import Amount
from accountandtransactionapispecification.models.credit_line import CreditLine


class BalanceModel(object):

    """Implementation of the 'BalanceModel' model.

    Balance object schema

    Attributes:
        account_id (str): A unique and immutable identifier used to identify
            the account resource. This identifier has no meaning to the
            account owner.
        amount (Amount): Amount of money of the cash balance.
        credit_debit_indicator (CreditDebitIndicatorEnum): Indicates whether
            the balance is a credit or a debit balance. Usage: A zero balance
            is considered to be a credit balance.
        mtype (BalanceModelTypeEnum): Balance type, in a coded form.
        date_time (datetime): Indicates the date (and time) of the balance.
            All dates in the JSON payloads are represented in ISO 8601
            date-time format. All date-time fields in responses must include
            the timezone. An example is below: 2017-04-05T10:43:07+00:00
        credit_line (List[CreditLine]): The model property of type
            List[CreditLine].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_id": 'AccountId',
        "amount": 'Amount',
        "credit_debit_indicator": 'CreditDebitIndicator',
        "mtype": 'Type',
        "date_time": 'DateTime',
        "credit_line": 'CreditLine'
    }

    _optionals = [
        'credit_line',
    ]

    def __init__(self,
                 account_id=None,
                 amount=None,
                 credit_debit_indicator=None,
                 mtype=None,
                 date_time=None,
                 credit_line=APIHelper.SKIP):
        """Constructor for the BalanceModel class"""

        # Initialize members of the class
        self.account_id = account_id 
        self.amount = amount 
        self.credit_debit_indicator = credit_debit_indicator 
        self.mtype = mtype 
        self.date_time = APIHelper.apply_datetime_converter(date_time, APIHelper.RFC3339DateTime) if date_time else None 
        if credit_line is not APIHelper.SKIP:
            self.credit_line = credit_line 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else None
        amount = Amount.from_dictionary(dictionary.get('Amount')) if dictionary.get('Amount') else None
        credit_debit_indicator = dictionary.get("CreditDebitIndicator") if dictionary.get("CreditDebitIndicator") else None
        mtype = dictionary.get("Type") if dictionary.get("Type") else None
        date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("DateTime")).datetime if dictionary.get("DateTime") else None
        credit_line = None
        if dictionary.get('CreditLine') is not None:
            credit_line = [CreditLine.from_dictionary(x) for x in dictionary.get('CreditLine')]
        else:
            credit_line = APIHelper.SKIP
        # Return an object of this model
        return cls(account_id,
                   amount,
                   credit_debit_indicator,
                   mtype,
                   date_time,
                   credit_line)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!r}, '
                f'amount={self.amount!r}, '
                f'credit_debit_indicator={self.credit_debit_indicator!r}, '
                f'mtype={self.mtype!r}, '
                f'date_time={self.date_time!r}, '
                f'credit_line={(self.credit_line if hasattr(self, "credit_line") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!s}, '
                f'amount={self.amount!s}, '
                f'credit_debit_indicator={self.credit_debit_indicator!s}, '
                f'mtype={self.mtype!s}, '
                f'date_time={self.date_time!s}, '
                f'credit_line={(self.credit_line if hasattr(self, "credit_line") else None)!s})')
