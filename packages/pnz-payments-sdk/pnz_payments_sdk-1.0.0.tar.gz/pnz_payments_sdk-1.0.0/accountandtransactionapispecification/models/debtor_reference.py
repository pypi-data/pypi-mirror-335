# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper


class DebtorReference(object):

    """Implementation of the 'DebtorReference' model.

    Attributes:
        particulars (str): The model property of type str.
        code (str): The model property of type str.
        reference (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "particulars": 'Particulars',
        "code": 'Code',
        "reference": 'Reference'
    }

    _optionals = [
        'particulars',
        'code',
        'reference',
    ]

    def __init__(self,
                 particulars=APIHelper.SKIP,
                 code=APIHelper.SKIP,
                 reference=APIHelper.SKIP):
        """Constructor for the DebtorReference class"""

        # Initialize members of the class
        if particulars is not APIHelper.SKIP:
            self.particulars = particulars 
        if code is not APIHelper.SKIP:
            self.code = code 
        if reference is not APIHelper.SKIP:
            self.reference = reference 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        particulars = dictionary.get("Particulars") if dictionary.get("Particulars") else APIHelper.SKIP
        code = dictionary.get("Code") if dictionary.get("Code") else APIHelper.SKIP
        reference = dictionary.get("Reference") if dictionary.get("Reference") else APIHelper.SKIP
        # Return an object of this model
        return cls(particulars,
                   code,
                   reference)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'particulars={(self.particulars if hasattr(self, "particulars") else None)!r}, '
                f'code={(self.code if hasattr(self, "code") else None)!r}, '
                f'reference={(self.reference if hasattr(self, "reference") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'particulars={(self.particulars if hasattr(self, "particulars") else None)!s}, '
                f'code={(self.code if hasattr(self, "code") else None)!s}, '
                f'reference={(self.reference if hasattr(self, "reference") else None)!s})')
