# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper


class StatementDateTime(object):

    """Implementation of the 'StatementDateTime' model.

    Set of elements used to provide details of a generic date time for the
    statement resource.

    Attributes:
        date_time (datetime): Date and time associated with the date time
            type. All dates in the JSON payloads are represented in ISO 8601
            date-time format. All date-time fields in responses must include
            the timezone. An example is below: 2017-04-05T10:43:07+00:00
        mtype (StatementDateTimeTypeEnum): Date time type, in a coded form.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "date_time": 'DateTime',
        "mtype": 'Type'
    }

    def __init__(self,
                 date_time=None,
                 mtype=None):
        """Constructor for the StatementDateTime class"""

        # Initialize members of the class
        self.date_time = APIHelper.apply_datetime_converter(date_time, APIHelper.RFC3339DateTime) if date_time else None 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("DateTime")).datetime if dictionary.get("DateTime") else None
        mtype = dictionary.get("Type") if dictionary.get("Type") else None
        # Return an object of this model
        return cls(date_time,
                   mtype)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'date_time={self.date_time!r}, '
                f'mtype={self.mtype!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'date_time={self.date_time!s}, '
                f'mtype={self.mtype!s})')
