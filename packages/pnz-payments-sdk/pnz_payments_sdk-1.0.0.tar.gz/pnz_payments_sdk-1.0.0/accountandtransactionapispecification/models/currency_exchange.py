# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.instructed_amount import InstructedAmount


class CurrencyExchange(object):

    """Implementation of the 'CurrencyExchange' model.

    Set of elements used to provide details on the currency exchange.

    Attributes:
        source_currency (str): Currency from which an amount is to be
            converted in a currency conversion.
        target_currency (str): Currency from which an amount is to be
            converted in a currency conversion.
        unit_currency (str): Currency from which an amount is to be converted
            in a currency conversion.
        exchange_rate (float): Factor used to convert an amount from one
            currency into another. This reflects the price at which one
            currency was bought with another currency. Usage: ExchangeRate
            expresses the ratio between UnitCurrency and QuotedCurrency
            (ExchangeRate = UnitCurrency/QuotedCurrency).
        contract_identification (str): Unique identification to unambiguously
            identify the foreign exchange contract.
        quotation_date (datetime): Date and time at which an exchange rate is
            quoted. All dates in the JSON payloads are represented in ISO 8601
            date-time format. All date-time fields in responses must include
            the timezone. An example is below: 2017-04-05T10:43:07+00:00
        instructed_amount (InstructedAmount): Amount of money of the cash
            balance after a transaction entry is applied to the account..

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "source_currency": 'SourceCurrency',
        "exchange_rate": 'ExchangeRate',
        "target_currency": 'TargetCurrency',
        "unit_currency": 'UnitCurrency',
        "contract_identification": 'ContractIdentification',
        "quotation_date": 'QuotationDate',
        "instructed_amount": 'InstructedAmount'
    }

    _optionals = [
        'target_currency',
        'unit_currency',
        'contract_identification',
        'quotation_date',
        'instructed_amount',
    ]

    def __init__(self,
                 source_currency=None,
                 exchange_rate=None,
                 target_currency=APIHelper.SKIP,
                 unit_currency=APIHelper.SKIP,
                 contract_identification=APIHelper.SKIP,
                 quotation_date=APIHelper.SKIP,
                 instructed_amount=APIHelper.SKIP):
        """Constructor for the CurrencyExchange class"""

        # Initialize members of the class
        self.source_currency = source_currency 
        if target_currency is not APIHelper.SKIP:
            self.target_currency = target_currency 
        if unit_currency is not APIHelper.SKIP:
            self.unit_currency = unit_currency 
        self.exchange_rate = exchange_rate 
        if contract_identification is not APIHelper.SKIP:
            self.contract_identification = contract_identification 
        if quotation_date is not APIHelper.SKIP:
            self.quotation_date = APIHelper.apply_datetime_converter(quotation_date, APIHelper.RFC3339DateTime) if quotation_date else None 
        if instructed_amount is not APIHelper.SKIP:
            self.instructed_amount = instructed_amount 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        source_currency = dictionary.get("SourceCurrency") if dictionary.get("SourceCurrency") else None
        exchange_rate = dictionary.get("ExchangeRate") if dictionary.get("ExchangeRate") else None
        target_currency = dictionary.get("TargetCurrency") if dictionary.get("TargetCurrency") else APIHelper.SKIP
        unit_currency = dictionary.get("UnitCurrency") if dictionary.get("UnitCurrency") else APIHelper.SKIP
        contract_identification = dictionary.get("ContractIdentification") if dictionary.get("ContractIdentification") else APIHelper.SKIP
        quotation_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("QuotationDate")).datetime if dictionary.get("QuotationDate") else APIHelper.SKIP
        instructed_amount = InstructedAmount.from_dictionary(dictionary.get('InstructedAmount')) if 'InstructedAmount' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(source_currency,
                   exchange_rate,
                   target_currency,
                   unit_currency,
                   contract_identification,
                   quotation_date,
                   instructed_amount)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'source_currency={self.source_currency!r}, '
                f'target_currency={(self.target_currency if hasattr(self, "target_currency") else None)!r}, '
                f'unit_currency={(self.unit_currency if hasattr(self, "unit_currency") else None)!r}, '
                f'exchange_rate={self.exchange_rate!r}, '
                f'contract_identification={(self.contract_identification if hasattr(self, "contract_identification") else None)!r}, '
                f'quotation_date={(self.quotation_date if hasattr(self, "quotation_date") else None)!r}, '
                f'instructed_amount={(self.instructed_amount if hasattr(self, "instructed_amount") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'source_currency={self.source_currency!s}, '
                f'target_currency={(self.target_currency if hasattr(self, "target_currency") else None)!s}, '
                f'unit_currency={(self.unit_currency if hasattr(self, "unit_currency") else None)!s}, '
                f'exchange_rate={self.exchange_rate!s}, '
                f'contract_identification={(self.contract_identification if hasattr(self, "contract_identification") else None)!s}, '
                f'quotation_date={(self.quotation_date if hasattr(self, "quotation_date") else None)!s}, '
                f'instructed_amount={(self.instructed_amount if hasattr(self, "instructed_amount") else None)!s})')
