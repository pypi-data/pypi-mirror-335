# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.scheduled_payment_model import ScheduledPaymentModel


class GetScheduledPaymentsResponseData(object):

    """Implementation of the 'GetScheduledPaymentsResponseData' model.

    Attributes:
        scheduled_payment (List[ScheduledPaymentModel]): The model property of
            type List[ScheduledPaymentModel].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "scheduled_payment": 'ScheduledPayment'
    }

    _optionals = [
        'scheduled_payment',
    ]

    def __init__(self,
                 scheduled_payment=APIHelper.SKIP):
        """Constructor for the GetScheduledPaymentsResponseData class"""

        # Initialize members of the class
        if scheduled_payment is not APIHelper.SKIP:
            self.scheduled_payment = scheduled_payment 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        scheduled_payment = None
        if dictionary.get('ScheduledPayment') is not None:
            scheduled_payment = [ScheduledPaymentModel.from_dictionary(x) for x in dictionary.get('ScheduledPayment')]
        else:
            scheduled_payment = APIHelper.SKIP
        # Return an object of this model
        return cls(scheduled_payment)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'scheduled_payment={(self.scheduled_payment if hasattr(self, "scheduled_payment") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'scheduled_payment={(self.scheduled_payment if hasattr(self, "scheduled_payment") else None)!s})')
