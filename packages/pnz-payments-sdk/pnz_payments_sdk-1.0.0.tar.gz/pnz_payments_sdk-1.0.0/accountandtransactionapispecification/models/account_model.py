# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.models.account import Account
from accountandtransactionapispecification.models.servicer import Servicer


class AccountModel(object):

    """Implementation of the 'AccountModel' model.

    Attributes:
        account_id (str): A unique and immutable identifier used to identify
            the account resource. This identifier has no meaning to the
            account owner.
        currency (str): Identification of the currency in which the account is
            held.  Usage: Currency should only be used in case one and the
            same account number covers several currencies and the initiating
            party needs to identify which currency needs to be used for
            settlement on the account.
        account_type (AccountTypeEnum): Specifies the type of account
            (personal or business).
        account_sub_type (AccountSubTypeEnum): Specifies the sub type of
            account (product family group).
        description (str): Specifies the description of the account type.
        nickname (str): The nickname of the account, assigned by the account
            owner in order to provide an additional means of identification of
            the account.
        account (Account): Provides the details to identify an account.
        servicer (Servicer): Party that manages the account on behalf of the
            account owner, that is manages the registration and booking of
            entries on the account, calculates balances on the account and
            provides information about the account.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_id": 'AccountId',
        "currency": 'Currency',
        "nickname": 'Nickname',
        "account_type": 'AccountType',
        "account_sub_type": 'AccountSubType',
        "description": 'Description',
        "account": 'Account',
        "servicer": 'Servicer'
    }

    _optionals = [
        'account_type',
        'account_sub_type',
        'description',
        'account',
        'servicer',
    ]

    def __init__(self,
                 account_id=None,
                 currency=None,
                 nickname=None,
                 account_type=APIHelper.SKIP,
                 account_sub_type=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 account=APIHelper.SKIP,
                 servicer=APIHelper.SKIP):
        """Constructor for the AccountModel class"""

        # Initialize members of the class
        self.account_id = account_id 
        self.currency = currency 
        if account_type is not APIHelper.SKIP:
            self.account_type = account_type 
        if account_sub_type is not APIHelper.SKIP:
            self.account_sub_type = account_sub_type 
        if description is not APIHelper.SKIP:
            self.description = description 
        self.nickname = nickname 
        if account is not APIHelper.SKIP:
            self.account = account 
        if servicer is not APIHelper.SKIP:
            self.servicer = servicer 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else None
        currency = dictionary.get("Currency") if dictionary.get("Currency") else None
        nickname = dictionary.get("Nickname") if dictionary.get("Nickname") else None
        account_type = dictionary.get("AccountType") if dictionary.get("AccountType") else APIHelper.SKIP
        account_sub_type = dictionary.get("AccountSubType") if dictionary.get("AccountSubType") else APIHelper.SKIP
        description = dictionary.get("Description") if dictionary.get("Description") else APIHelper.SKIP
        account = Account.from_dictionary(dictionary.get('Account')) if 'Account' in dictionary.keys() else APIHelper.SKIP
        servicer = Servicer.from_dictionary(dictionary.get('Servicer')) if 'Servicer' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(account_id,
                   currency,
                   nickname,
                   account_type,
                   account_sub_type,
                   description,
                   account,
                   servicer)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!r}, '
                f'currency={self.currency!r}, '
                f'account_type={(self.account_type if hasattr(self, "account_type") else None)!r}, '
                f'account_sub_type={(self.account_sub_type if hasattr(self, "account_sub_type") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'nickname={self.nickname!r}, '
                f'account={(self.account if hasattr(self, "account") else None)!r}, '
                f'servicer={(self.servicer if hasattr(self, "servicer") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={self.account_id!s}, '
                f'currency={self.currency!s}, '
                f'account_type={(self.account_type if hasattr(self, "account_type") else None)!s}, '
                f'account_sub_type={(self.account_sub_type if hasattr(self, "account_sub_type") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'nickname={self.nickname!s}, '
                f'account={(self.account if hasattr(self, "account") else None)!s}, '
                f'servicer={(self.servicer if hasattr(self, "servicer") else None)!s})')
