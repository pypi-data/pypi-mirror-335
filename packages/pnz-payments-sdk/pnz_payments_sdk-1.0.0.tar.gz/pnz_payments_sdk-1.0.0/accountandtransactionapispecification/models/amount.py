# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Amount(object):

    """Implementation of the 'Amount' model.

    Amount of money of the cash balance.

    Attributes:
        amount (str): The model property of type str.
        currency (str): A code allocated to a currency by a Maintenance Agency
            under an international identification scheme, as described in the
            latest edition of the international standard ISO 4217 'Codes for
            the representation of currencies and funds'

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "amount": 'Amount',
        "currency": 'Currency'
    }

    def __init__(self,
                 amount=None,
                 currency=None):
        """Constructor for the Amount class"""

        # Initialize members of the class
        self.amount = amount 
        self.currency = currency 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        amount = dictionary.get("Amount") if dictionary.get("Amount") else None
        currency = dictionary.get("Currency") if dictionary.get("Currency") else None
        # Return an object of this model
        return cls(amount,
                   currency)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'amount={self.amount!r}, '
                f'currency={self.currency!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'amount={self.amount!s}, '
                f'currency={self.currency!s})')
