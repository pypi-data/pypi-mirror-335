# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from accountandtransactionapispecification.configuration import Configuration
from accountandtransactionapispecification.controllers.base_controller import BaseController
from accountandtransactionapispecification.configuration import Environment
from accountandtransactionapispecification.http.auth.o_auth_2 import OAuth2
from accountandtransactionapispecification.controllers.accounts_controller\
    import AccountsController
from accountandtransactionapispecification.controllers.balances_controller\
    import BalancesController
from accountandtransactionapispecification.controllers.beneficiaries_controller\
    import BeneficiariesController
from accountandtransactionapispecification.controllers.direct_debits_controller\
    import DirectDebitsController
from accountandtransactionapispecification.controllers.offers_controller\
    import OffersController
from accountandtransactionapispecification.controllers.party_controller\
    import PartyController
from accountandtransactionapispecification.controllers.scheduled_payments_controller\
    import ScheduledPaymentsController
from accountandtransactionapispecification.controllers.standing_orders_controller\
    import StandingOrdersController
from accountandtransactionapispecification.controllers.statements_controller\
    import StatementsController
from accountandtransactionapispecification.controllers.transactions_controller\
    import TransactionsController


class AccountandtransactionapispecificationClient(object):
    @LazyProperty
    def accounts(self):
        return AccountsController(self.global_configuration)

    @LazyProperty
    def balances(self):
        return BalancesController(self.global_configuration)

    @LazyProperty
    def beneficiaries(self):
        return BeneficiariesController(self.global_configuration)

    @LazyProperty
    def direct_debits(self):
        return DirectDebitsController(self.global_configuration)

    @LazyProperty
    def offers(self):
        return OffersController(self.global_configuration)

    @LazyProperty
    def party(self):
        return PartyController(self.global_configuration)

    @LazyProperty
    def scheduled_payments(self):
        return ScheduledPaymentsController(self.global_configuration)

    @LazyProperty
    def standing_orders(self):
        return StandingOrdersController(self.global_configuration)

    @LazyProperty
    def statements(self):
        return StatementsController(self.global_configuration)

    @LazyProperty
    def transactions(self):
        return TransactionsController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION, access_token=None,
                 bearer_auth_credentials=None, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, access_token=access_token,
            bearer_auth_credentials=bearer_auth_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['HTTPBearerAuthentication']}
        self.auth_managers['HTTPBearerAuthentication'] = OAuth2(
            self.config.bearer_auth_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

