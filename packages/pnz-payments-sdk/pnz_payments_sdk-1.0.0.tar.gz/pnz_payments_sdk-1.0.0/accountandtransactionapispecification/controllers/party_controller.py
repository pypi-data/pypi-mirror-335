# -*- coding: utf-8 -*-

"""
accountandtransactionapispecification

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from accountandtransactionapispecification.api_helper import APIHelper
from accountandtransactionapispecification.configuration import Server
from accountandtransactionapispecification.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from accountandtransactionapispecification.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from accountandtransactionapispecification.models.get_account_party_response import GetAccountPartyResponse
from accountandtransactionapispecification.models.get_party_response import GetPartyResponse
from accountandtransactionapispecification.exceptions.accounts_party_400_error_exception import AccountsParty400ErrorException
from accountandtransactionapispecification.exceptions.api_exception import APIException
from accountandtransactionapispecification.exceptions.accounts_party_403_error_exception import AccountsParty403ErrorException
from accountandtransactionapispecification.exceptions.accounts_party_500_error_exception import AccountsParty500ErrorException
from accountandtransactionapispecification.exceptions.accounts_party_503_error_exception import AccountsParty503ErrorException
from accountandtransactionapispecification.exceptions.party_400_error_exception import Party400ErrorException
from accountandtransactionapispecification.exceptions.party_403_error_exception import Party403ErrorException
from accountandtransactionapispecification.exceptions.party_500_error_exception import Party500ErrorException
from accountandtransactionapispecification.exceptions.party_503_error_exception import Party503ErrorException


class PartyController(BaseController):

    """A Controller to access Endpoints in the accountandtransactionapispecification API."""
    def __init__(self, config):
        super(PartyController, self).__init__(config)

    def get_account_party(self,
                          account_id,
                          x_fapi_auth_date=None,
                          x_fapi_customer_ip_address=None,
                          x_fapi_interaction_id=None,
                          x_merchant_ip_address=None,
                          x_customer_user_agent=None):
        """Does a GET request to /accounts/{AccountId}/party.

        Get Party related to an account

        Args:
            account_id (str): A unique identifier used to identify the account
                resource.
            x_fapi_auth_date (str, optional): The time when the Customer last
                logged in with the Third Party. All dates in the HTTP headers
                are represented as RFC 7231 Full Dates. An example is below:
                Sun, 10 Sep 2017 19:43:31 UTC
            x_fapi_customer_ip_address (str, optional): The Customer's IP
                address if the Customer is currently logged in with the Third
                Party.
            x_fapi_interaction_id (str, optional): An RFC4122 UID used as a
                correlation id.
            x_merchant_ip_address (str, optional): The IP address of the
                merchant when making account information requests through a
                Third Party.
            x_customer_user_agent (str, optional): The User-Agent of the
                application on the customer device that is used to make the
                account information request

        Returns:
            GetAccountPartyResponse: Response from the API. Account Party
                successfully retrieved

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/accounts/{AccountId}/party')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('AccountId')
                            .value(account_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-fapi-auth-date')
                          .value(x_fapi_auth_date))
            .header_param(Parameter()
                          .key('x-fapi-customer-ip-address')
                          .value(x_fapi_customer_ip_address))
            .header_param(Parameter()
                          .key('x-fapi-interaction-id')
                          .value(x_fapi_interaction_id))
            .header_param(Parameter()
                          .key('x-merchant-ip-address')
                          .value(x_merchant_ip_address))
            .header_param(Parameter()
                          .key('x-customer-user-agent')
                          .value(x_customer_user_agent))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('HTTPBearerAuthentication'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetAccountPartyResponse.from_dictionary)
            .local_error('400', 'Bad Request', AccountsParty400ErrorException)
            .local_error('401', 'Unauthorized', APIException)
            .local_error('403', 'Forbidden', AccountsParty403ErrorException)
            .local_error('405', 'Method Not Allowed', APIException)
            .local_error('406', 'Not Acceptable', APIException)
            .local_error('429', 'Too Many Requests', APIException)
            .local_error('500', 'Internal Server Error', AccountsParty500ErrorException)
            .local_error('501', 'Not Implemented', APIException)
            .local_error('503', 'Service Unavailable', AccountsParty503ErrorException)
        ).execute()

    def get_party(self,
                  x_fapi_auth_date=None,
                  x_fapi_customer_ip_address=None,
                  x_fapi_interaction_id=None,
                  x_merchant_ip_address=None,
                  x_customer_user_agent=None):
        """Does a GET request to /party.

        Get Party of logged in Customer

        Args:
            x_fapi_auth_date (str, optional): The time when the Customer last
                logged in with the Third Party. All dates in the HTTP headers
                are represented as RFC 7231 Full Dates. An example is below:
                Sun, 10 Sep 2017 19:43:31 UTC
            x_fapi_customer_ip_address (str, optional): The Customer's IP
                address if the Customer is currently logged in with the Third
                Party.
            x_fapi_interaction_id (str, optional): An RFC4122 UID used as a
                correlation id.
            x_merchant_ip_address (str, optional): The IP address of the
                merchant when making account information requests through a
                Third Party.
            x_customer_user_agent (str, optional): The User-Agent of the
                application on the customer device that is used to make the
                account information request

        Returns:
            GetPartyResponse: Response from the API. Account Party
                successfully retrieved

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/party')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-fapi-auth-date')
                          .value(x_fapi_auth_date))
            .header_param(Parameter()
                          .key('x-fapi-customer-ip-address')
                          .value(x_fapi_customer_ip_address))
            .header_param(Parameter()
                          .key('x-fapi-interaction-id')
                          .value(x_fapi_interaction_id))
            .header_param(Parameter()
                          .key('x-merchant-ip-address')
                          .value(x_merchant_ip_address))
            .header_param(Parameter()
                          .key('x-customer-user-agent')
                          .value(x_customer_user_agent))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('HTTPBearerAuthentication'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetPartyResponse.from_dictionary)
            .local_error('400', 'Bad Request', Party400ErrorException)
            .local_error('401', 'Unauthorized', APIException)
            .local_error('403', 'Forbidden', Party403ErrorException)
            .local_error('405', 'Method Not Allowed', APIException)
            .local_error('406', 'Not Acceptable', APIException)
            .local_error('429', 'Too Many Requests', APIException)
            .local_error('500', 'Internal Server Error', Party500ErrorException)
            .local_error('501', 'Not Implemented', APIException)
            .local_error('503', 'Service Unavailable', Party503ErrorException)
        ).execute()
