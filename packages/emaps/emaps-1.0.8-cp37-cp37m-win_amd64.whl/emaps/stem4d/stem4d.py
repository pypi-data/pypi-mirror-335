# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _stem4d
else:
    import _stem4d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _stem4d.SWIG_PyInstanceMethod_New
_swig_new_static_method = _stem4d.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


readDPDB = _stem4d.readDPDB
prepareSearch = _stem4d.prepareSearch
getImageCenter = _stem4d.getImageCenter
DPGetMask = _stem4d.DPGetMask
DPListMaskSelect = _stem4d.DPListMaskSelect
DPGetCurrentImage = _stem4d.DPGetCurrentImage
loadXImage = _stem4d.loadXImage
loadXTemplateMask = _stem4d.loadXTemplateMask
getXTemplateMask = _stem4d.getXTemplateMask
loadXMask = _stem4d.loadXMask
getXMask = _stem4d.getXMask
getFitMap = _stem4d.getFitMap
getFitImage = _stem4d.getFitImage
searchXPeaks = _stem4d.searchXPeaks
indexXPeaks = _stem4d.indexXPeaks
activate_license_once = _stem4d.activate_license_once
activate_license_bytoken_once = _stem4d.activate_license_bytoken_once
getLicenseInfo = _stem4d.getLicenseInfo
check_license_once = _stem4d.check_license_once
activate_exe_license_once = _stem4d.activate_exe_license_once
activate_exe_license_bytoken_once = _stem4d.activate_exe_license_bytoken_once
getExeLicenseInfo = _stem4d.getExeLicenseInfo
check_exe_license_once = _stem4d.check_exe_license_once
getExpImagePeaks = _stem4d.getExpImagePeaks
printIndexDetails = _stem4d.printIndexDetails
getBDF = _stem4d.getBDF
loadRawImage = _stem4d.loadRawImage
saveImage = _stem4d.saveImage
selectExSHImage = _stem4d.selectExSHImage
freeStem4d = _stem4d.freeStem4d
getDPListKDif = _stem4d.getDPListKDif
getXKDif = _stem4d.getXKDif
MAX_IMAGESIZE = _stem4d.MAX_IMAGESIZE
MIN_IMAGESIZE = _stem4d.MIN_IMAGESIZE
MAX_IMAGESTACK = _stem4d.MAX_IMAGESTACK
DEF_KERNEL_SIZE = _stem4d.DEF_KERNEL_SIZE
E_INT = _stem4d.E_INT
EM_INT = _stem4d.EM_INT
E_FLOAT = _stem4d.E_FLOAT
EM_FLOAT = _stem4d.EM_FLOAT
E_DOUBLE = _stem4d.E_DOUBLE
EM_DOUBLE = _stem4d.EM_DOUBLE
class edc_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    alpha = property(_stem4d.edc_t_alpha_get, _stem4d.edc_t_alpha_set)
    cc = property(_stem4d.edc_t_cc_get, _stem4d.edc_t_cc_set)
    sigma = property(_stem4d.edc_t_sigma_get, _stem4d.edc_t_sigma_set)
    img_center = property(_stem4d.edc_t_img_center_get, _stem4d.edc_t_img_center_set)

    def __repr__(self):
      return "Rotation angle: " + str(self.alpha) + \
            "\nCamera constant: " + str(self.cc) + \
            "\nPeak width: " + str(self.sigma) + \
            "\nDiffraction center: " + str(self.get_center())

    get_center = _swig_new_instance_method(_stem4d.edc_t_get_center)
    set_center = _swig_new_instance_method(_stem4d.edc_t_set_center)

    def __init__(self):
        _stem4d.edc_t_swiginit(self, _stem4d.new_edc_t())
    __swig_destroy__ = _stem4d.delete_edc_t

# Register edc_t in _stem4d:
_stem4d.edc_t_swigregister(edc_t)
cvar = _stem4d.cvar
LICENSE_TOKEN_LENGTH = cvar.LICENSE_TOKEN_LENGTH
LICENSE_ACTIVE = cvar.LICENSE_ACTIVE
LICENSE_NONEXISTENT = cvar.LICENSE_NONEXISTENT
LICENSE_EXPIRED = cvar.LICENSE_EXPIRED
LICENSE_OTHERS = cvar.LICENSE_OTHERS

class kdif_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cx = property(_stem4d.kdif_t_cx_get, _stem4d.kdif_t_cx_set)
    cy = property(_stem4d.kdif_t_cy_get, _stem4d.kdif_t_cy_set)
    rad = property(_stem4d.kdif_t_rad_get, _stem4d.kdif_t_rad_set)
    indx = property(_stem4d.kdif_t_indx_get, _stem4d.kdif_t_indx_set)
    ktype = property(_stem4d.kdif_t_ktype_get, _stem4d.kdif_t_ktype_set)

    del __repr__
    def __repr__(self):
      return "Center: (" + str(self.cx) + "," + str(self.cy) + ")" + \
             "\nRadius: " + str(self.rad) + \
             "\nMiller Index: " + str(self.get_mindex())


    get_mindex = _swig_new_instance_method(_stem4d.kdif_t_get_mindex)

    def __init__(self):
        _stem4d.kdif_t_swiginit(self, _stem4d.new_kdif_t())
    __swig_destroy__ = _stem4d.delete_kdif_t

# Register kdif_t in _stem4d:
_stem4d.kdif_t_swigregister(kdif_t)
class HEADER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ncol = property(_stem4d.HEADER_ncol_get, _stem4d.HEADER_ncol_set)
    nrow = property(_stem4d.HEADER_nrow_get, _stem4d.HEADER_nrow_set)
    nlayer = property(_stem4d.HEADER_nlayer_get, _stem4d.HEADER_nlayer_set)
    type = property(_stem4d.HEADER_type_get, _stem4d.HEADER_type_set)

    def __init__(self):
        _stem4d.HEADER_swiginit(self, _stem4d.new_HEADER())
    __swig_destroy__ = _stem4d.delete_HEADER

# Register HEADER in _stem4d:
_stem4d.HEADER_swigregister(HEADER)
class IMAGE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    h = property(_stem4d.IMAGE_h_get, _stem4d.IMAGE_h_set)
    ilayer = property(_stem4d.IMAGE_ilayer_get, _stem4d.IMAGE_ilayer_set)
    rmode = property(_stem4d.IMAGE_rmode_get, _stem4d.IMAGE_rmode_set)
    data = property(_stem4d.IMAGE_data_get, _stem4d.IMAGE_data_set)
    getImageData = _swig_new_instance_method(_stem4d.IMAGE_getImageData)
    setImage_from_numpy = _swig_new_instance_method(_stem4d.IMAGE_setImage_from_numpy)
    img_loaded = _swig_new_instance_method(_stem4d.IMAGE_img_loaded)
    get_width = _swig_new_instance_method(_stem4d.IMAGE_get_width)
    get_height = _swig_new_instance_method(_stem4d.IMAGE_get_height)

    def __init__(self):
        _stem4d.IMAGE_swiginit(self, _stem4d.new_IMAGE())
    __swig_destroy__ = _stem4d.delete_IMAGE

# Register IMAGE in _stem4d:
_stem4d.IMAGE_swigregister(IMAGE)
DPListPatternImage = _stem4d.DPListPatternImage
getCurrentXImage = _stem4d.getCurrentXImage
getCurrentXImage_new = _stem4d.getCurrentXImage_new
getMaskedImage = _stem4d.getMaskedImage

