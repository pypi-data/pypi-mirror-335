"""
    CTS Data Dictionary API

    An API for interacting with CTS Data Dictionary.  # noqa: E501

    The version of the OpenAPI document: 0.2
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401
from multiprocessing.pool import ApplyResult
import typing

from fds.sdk.ContentFeedsDataDictionary.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.ContentFeedsDataDictionary.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.ContentFeedsDataDictionary.exceptions import ApiException
from fds.sdk.ContentFeedsDataDictionary.model.basic_search_request import BasicSearchRequest
from fds.sdk.ContentFeedsDataDictionary.model.basic_search_response import BasicSearchResponse
from fds.sdk.ContentFeedsDataDictionary.model.data_item import DataItem
from fds.sdk.ContentFeedsDataDictionary.model.navigator_sources_response import NavigatorSourcesResponse
from fds.sdk.ContentFeedsDataDictionary.model.product import Product
from fds.sdk.ContentFeedsDataDictionary.model.table_code_field_info_response import TableCodeFieldInfoResponse





class NavigatorApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        self.navigator_basic_search_post_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (BasicSearchResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/navigator/basic_search',
                'operation_id': 'navigator_basic_search_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'basic_search_request',
                ],
                'required': [
                    'basic_search_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'basic_search_request':
                        (BasicSearchRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'basic_search_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

        self.navigator_data_items_product_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: ([DataItem],),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/navigator/data_items/{Product_id}',
                'operation_id': 'navigator_data_items_product_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'product_id',
                ],
                'required': [
                    'product_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'product_id':
                        (str,),
                },
                'attribute_map': {
                    'product_id': 'Product_id',
                },
                'location_map': {
                    'product_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.navigator_products_get_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: ([Product],),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/navigator/products',
                'operation_id': 'navigator_products_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.navigator_sources_data_item_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (NavigatorSourcesResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/navigator/sources/{DataItem_id}',
                'operation_id': 'navigator_sources_data_item_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_item_id',
                    'product_id',
                ],
                'required': [
                    'data_item_id',
                    'product_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_item_id':
                        (str,),
                    'product_id':
                        (str,),
                },
                'attribute_map': {
                    'data_item_id': 'DataItem_id',
                    'product_id': 'Product_id',
                },
                'location_map': {
                    'data_item_id': 'path',
                    'product_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.navigator_sources_get_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (NavigatorSourcesResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/navigator/sources',
                'operation_id': 'navigator_sources_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'product_id',
                ],
                'required': [
                    'product_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'product_id':
                        (str,),
                },
                'attribute_map': {
                    'product_id': 'Product_id',
                },
                'location_map': {
                    'product_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.navigator_table_fields_table_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (TableCodeFieldInfoResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/navigator/table_fields/{Table_id}',
                'operation_id': 'navigator_table_fields_table_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'table_id',
                    'data_item_id',
                ],
                'required': [
                    'table_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'table_id':
                        (str,),
                    'data_item_id':
                        (str,),
                },
                'attribute_map': {
                    'table_id': 'Table_id',
                    'data_item_id': 'DataItem_id',
                },
                'location_map': {
                    'table_id': 'path',
                    'data_item_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )


    @staticmethod
    def apply_kwargs_defaults(kwargs, return_http_data_only, async_req):
        kwargs["async_req"] = async_req
        kwargs["_return_http_data_only"] = return_http_data_only
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")


    def navigator_basic_search_post(
        self,
        basic_search_request,
        **kwargs
    ) -> BasicSearchResponse:
        """Returns the data items (along with the products they belong to) that contain at least one of the search terms as a substring of either their name or description.  # noqa: E501

        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            basic_search_request (BasicSearchRequest): A list of search terms (each term must be at least two characters).

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            BasicSearchResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['basic_search_request'] = \
            basic_search_request
        return self.navigator_basic_search_post_endpoint.call_with_http_info(**kwargs)

    def navigator_basic_search_post_with_http_info(
        self,
        basic_search_request,
        **kwargs
    ) -> typing.Tuple[BasicSearchResponse, int, typing.MutableMapping]:
        """Returns the data items (along with the products they belong to) that contain at least one of the search terms as a substring of either their name or description.  # noqa: E501

        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            basic_search_request (BasicSearchRequest): A list of search terms (each term must be at least two characters).

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            BasicSearchResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['basic_search_request'] = \
            basic_search_request
        return self.navigator_basic_search_post_endpoint.call_with_http_info(**kwargs)

    def navigator_basic_search_post_async(
        self,
        basic_search_request,
        **kwargs
    ) -> "ApplyResult[BasicSearchResponse]":
        """Returns the data items (along with the products they belong to) that contain at least one of the search terms as a substring of either their name or description.  # noqa: E501

        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            basic_search_request (BasicSearchRequest): A list of search terms (each term must be at least two characters).

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[BasicSearchResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['basic_search_request'] = \
            basic_search_request
        return self.navigator_basic_search_post_endpoint.call_with_http_info(**kwargs)

    def navigator_basic_search_post_with_http_info_async(
        self,
        basic_search_request,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[BasicSearchResponse, int, typing.MutableMapping]]":
        """Returns the data items (along with the products they belong to) that contain at least one of the search terms as a substring of either their name or description.  # noqa: E501

        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            basic_search_request (BasicSearchRequest): A list of search terms (each term must be at least two characters).

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(BasicSearchResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['basic_search_request'] = \
            basic_search_request
        return self.navigator_basic_search_post_endpoint.call_with_http_info(**kwargs)


    def navigator_data_items_product_id_get(
        self,
        product_id,
        **kwargs
    ) -> typing.List[DataItem]:
        """Get the list of data items associated with a product for Navigator.  # noqa: E501

        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            product_id (str): The id for the Product to fetch the list of data items for.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            typing.List[DataItem]
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['product_id'] = \
            product_id
        return self.navigator_data_items_product_id_get_endpoint.call_with_http_info(**kwargs)

    def navigator_data_items_product_id_get_with_http_info(
        self,
        product_id,
        **kwargs
    ) -> typing.Tuple[typing.List[DataItem], int, typing.MutableMapping]:
        """Get the list of data items associated with a product for Navigator.  # noqa: E501

        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            product_id (str): The id for the Product to fetch the list of data items for.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            typing.List[DataItem]
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['product_id'] = \
            product_id
        return self.navigator_data_items_product_id_get_endpoint.call_with_http_info(**kwargs)

    def navigator_data_items_product_id_get_async(
        self,
        product_id,
        **kwargs
    ) -> "ApplyResult[typing.List[DataItem]]":
        """Get the list of data items associated with a product for Navigator.  # noqa: E501

        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            product_id (str): The id for the Product to fetch the list of data items for.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[typing.List[DataItem]]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['product_id'] = \
            product_id
        return self.navigator_data_items_product_id_get_endpoint.call_with_http_info(**kwargs)

    def navigator_data_items_product_id_get_with_http_info_async(
        self,
        product_id,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[typing.List[DataItem], int, typing.MutableMapping]]":
        """Get the list of data items associated with a product for Navigator.  # noqa: E501

        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            product_id (str): The id for the Product to fetch the list of data items for.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(typing.List[DataItem], int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['product_id'] = \
            product_id
        return self.navigator_data_items_product_id_get_endpoint.call_with_http_info(**kwargs)


    def navigator_products_get(
        self,
        **kwargs
    ) -> typing.List[Product]:
        """Get the list of products for Navigator.  # noqa: E501

        This method makes a synchronous HTTP request. Returns the http data only


        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            typing.List[Product]
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        return self.navigator_products_get_endpoint.call_with_http_info(**kwargs)

    def navigator_products_get_with_http_info(
        self,
        **kwargs
    ) -> typing.Tuple[typing.List[Product], int, typing.MutableMapping]:
        """Get the list of products for Navigator.  # noqa: E501

        This method makes a synchronous HTTP request. Returns http data, http status and headers


        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            typing.List[Product]
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        return self.navigator_products_get_endpoint.call_with_http_info(**kwargs)

    def navigator_products_get_async(
        self,
        **kwargs
    ) -> "ApplyResult[typing.List[Product]]":
        """Get the list of products for Navigator.  # noqa: E501

        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult


        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[typing.List[Product]]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        return self.navigator_products_get_endpoint.call_with_http_info(**kwargs)

    def navigator_products_get_with_http_info_async(
        self,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[typing.List[Product], int, typing.MutableMapping]]":
        """Get the list of products for Navigator.  # noqa: E501

        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult


        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(typing.List[Product], int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        return self.navigator_products_get_endpoint.call_with_http_info(**kwargs)


    def navigator_sources_data_item_id_get(
        self,
        data_item_id,
        product_id,
        **kwargs
    ) -> NavigatorSourcesResponse:
        """Get a list of sources where the specified data item can be found, for each delivery method, filtered to the appearances of the given data item within the specified product.  # noqa: E501

        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            data_item_id (str): The id for the DataItem to fetch the sources for.
            product_id (str): The id for the Product to filter down the sources returned on.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            NavigatorSourcesResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['data_item_id'] = \
            data_item_id
        kwargs['product_id'] = \
            product_id
        return self.navigator_sources_data_item_id_get_endpoint.call_with_http_info(**kwargs)

    def navigator_sources_data_item_id_get_with_http_info(
        self,
        data_item_id,
        product_id,
        **kwargs
    ) -> typing.Tuple[NavigatorSourcesResponse, int, typing.MutableMapping]:
        """Get a list of sources where the specified data item can be found, for each delivery method, filtered to the appearances of the given data item within the specified product.  # noqa: E501

        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            data_item_id (str): The id for the DataItem to fetch the sources for.
            product_id (str): The id for the Product to filter down the sources returned on.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            NavigatorSourcesResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['data_item_id'] = \
            data_item_id
        kwargs['product_id'] = \
            product_id
        return self.navigator_sources_data_item_id_get_endpoint.call_with_http_info(**kwargs)

    def navigator_sources_data_item_id_get_async(
        self,
        data_item_id,
        product_id,
        **kwargs
    ) -> "ApplyResult[NavigatorSourcesResponse]":
        """Get a list of sources where the specified data item can be found, for each delivery method, filtered to the appearances of the given data item within the specified product.  # noqa: E501

        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            data_item_id (str): The id for the DataItem to fetch the sources for.
            product_id (str): The id for the Product to filter down the sources returned on.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[NavigatorSourcesResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['data_item_id'] = \
            data_item_id
        kwargs['product_id'] = \
            product_id
        return self.navigator_sources_data_item_id_get_endpoint.call_with_http_info(**kwargs)

    def navigator_sources_data_item_id_get_with_http_info_async(
        self,
        data_item_id,
        product_id,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[NavigatorSourcesResponse, int, typing.MutableMapping]]":
        """Get a list of sources where the specified data item can be found, for each delivery method, filtered to the appearances of the given data item within the specified product.  # noqa: E501

        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            data_item_id (str): The id for the DataItem to fetch the sources for.
            product_id (str): The id for the Product to filter down the sources returned on.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(NavigatorSourcesResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['data_item_id'] = \
            data_item_id
        kwargs['product_id'] = \
            product_id
        return self.navigator_sources_data_item_id_get_endpoint.call_with_http_info(**kwargs)


    def navigator_sources_get(
        self,
        product_id,
        **kwargs
    ) -> NavigatorSourcesResponse:
        """Get a list of sources by delivery method for the given product_id  # noqa: E501

        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            product_id (str): The id for the Product to filter down the sources returned on.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            NavigatorSourcesResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['product_id'] = \
            product_id
        return self.navigator_sources_get_endpoint.call_with_http_info(**kwargs)

    def navigator_sources_get_with_http_info(
        self,
        product_id,
        **kwargs
    ) -> typing.Tuple[NavigatorSourcesResponse, int, typing.MutableMapping]:
        """Get a list of sources by delivery method for the given product_id  # noqa: E501

        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            product_id (str): The id for the Product to filter down the sources returned on.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            NavigatorSourcesResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['product_id'] = \
            product_id
        return self.navigator_sources_get_endpoint.call_with_http_info(**kwargs)

    def navigator_sources_get_async(
        self,
        product_id,
        **kwargs
    ) -> "ApplyResult[NavigatorSourcesResponse]":
        """Get a list of sources by delivery method for the given product_id  # noqa: E501

        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            product_id (str): The id for the Product to filter down the sources returned on.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[NavigatorSourcesResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['product_id'] = \
            product_id
        return self.navigator_sources_get_endpoint.call_with_http_info(**kwargs)

    def navigator_sources_get_with_http_info_async(
        self,
        product_id,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[NavigatorSourcesResponse, int, typing.MutableMapping]]":
        """Get a list of sources by delivery method for the given product_id  # noqa: E501

        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            product_id (str): The id for the Product to filter down the sources returned on.

        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(NavigatorSourcesResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['product_id'] = \
            product_id
        return self.navigator_sources_get_endpoint.call_with_http_info(**kwargs)


    def navigator_table_fields_table_id_get(
        self,
        table_id,
        **kwargs
    ) -> TableCodeFieldInfoResponse:
        """Get the list of fields associated with a table for Navigator, and the code information for the specified data item, if applicable.  # noqa: E501

        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            table_id (str): The id for the Table to fetch the fields for.

        Keyword Args:
            data_item_id (str): The id for the DataItem. This is required in case the data item is represented as a code in Standard DataFeeds.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            TableCodeFieldInfoResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['table_id'] = \
            table_id
        return self.navigator_table_fields_table_id_get_endpoint.call_with_http_info(**kwargs)

    def navigator_table_fields_table_id_get_with_http_info(
        self,
        table_id,
        **kwargs
    ) -> typing.Tuple[TableCodeFieldInfoResponse, int, typing.MutableMapping]:
        """Get the list of fields associated with a table for Navigator, and the code information for the specified data item, if applicable.  # noqa: E501

        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            table_id (str): The id for the Table to fetch the fields for.

        Keyword Args:
            data_item_id (str): The id for the DataItem. This is required in case the data item is represented as a code in Standard DataFeeds.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            TableCodeFieldInfoResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['table_id'] = \
            table_id
        return self.navigator_table_fields_table_id_get_endpoint.call_with_http_info(**kwargs)

    def navigator_table_fields_table_id_get_async(
        self,
        table_id,
        **kwargs
    ) -> "ApplyResult[TableCodeFieldInfoResponse]":
        """Get the list of fields associated with a table for Navigator, and the code information for the specified data item, if applicable.  # noqa: E501

        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            table_id (str): The id for the Table to fetch the fields for.

        Keyword Args:
            data_item_id (str): The id for the DataItem. This is required in case the data item is represented as a code in Standard DataFeeds.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[TableCodeFieldInfoResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['table_id'] = \
            table_id
        return self.navigator_table_fields_table_id_get_endpoint.call_with_http_info(**kwargs)

    def navigator_table_fields_table_id_get_with_http_info_async(
        self,
        table_id,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[TableCodeFieldInfoResponse, int, typing.MutableMapping]]":
        """Get the list of fields associated with a table for Navigator, and the code information for the specified data item, if applicable.  # noqa: E501

        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            table_id (str): The id for the Table to fetch the fields for.

        Keyword Args:
            data_item_id (str): The id for the DataItem. This is required in case the data item is represented as a code in Standard DataFeeds.. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(TableCodeFieldInfoResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['table_id'] = \
            table_id
        return self.navigator_table_fields_table_id_get_endpoint.call_with_http_info(**kwargs)


