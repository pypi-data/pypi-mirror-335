name: Build Wheels
run-name: ${{ github.event_name == 'workflow_dispatch' && 'Manual Build Wheels' || github.ref_type == 'tag' && format('Build Wheels for tag {0}', github.ref_name) || format('Build Wheels for {0}', github.ref_name) }}

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual triggering


jobs:
  # make source dist
  make_sdist:
    name: Make source dist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python -m pip install build

      - name: Make source dist
        run: |
          python -m build --sdist

      - name: Get version info
        run: |
          # Set version suffix based on tag or branch
          if [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref }}" == refs/tags/v* ]]; then
            # Extract version from tag (removing the 'v' prefix)
            TAG_VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
            echo "VERSION_SUFFIX=$TAG_VERSION-" >> $GITHUB_ENV
          else
            # Use empty suffix for non-tag builds
            echo "VERSION_SUFFIX=" >> $GITHUB_ENV
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: miscgeom-${{ env.VERSION_SUFFIX }}source
          path: dist/*.tar.gz
  
  # Build wheels on Linux
  build_linux_wheels:
    name: Build python ${{ matrix.cibw_python }} ${{matrix.cibw_arch}} wheels on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest]
        cibw_python: ["cp312-*", "cp313-*"]
        cibw_manylinux: [manylinux2014]
        cibw_arch: ["x86_64", "aarch64"]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up QEMU
        if: ${{ matrix.cibw_arch == 'aarch64' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Install build dependencies
        shell: bash
        run: |
          python -m pip install numpy>=2.0.0 meson-python

      - name: Build the wheel
        shell: bash
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_arch }}
          CIBW_SKIP: "*-musllinux*"
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.cibw_manylinux }}
      
      - name: Set version info
        shell: bash
        run: |
          # Extract Python version
          echo "PY_VERSION=$(echo ${{ matrix.cibw_python }} | cut -d- -f1)" >> $GITHUB_ENV
          
          # Set version suffix based on tag or branch
          if [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref }}" == refs/tags/v* ]]; then
            # Extract version from tag (removing the 'v' prefix)
            TAG_VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
            echo "VERSION_SUFFIX=$TAG_VERSION-" >> $GITHUB_ENV
          else
            # Use empty suffix for non-tag builds
            echo "VERSION_SUFFIX=" >> $GITHUB_ENV
          fi

      - name: Upload the wheel
        uses: actions/upload-artifact@v4
        with:
          name: miscgeom-${{ env.VERSION_SUFFIX }}${{ env.PY_VERSION }}-${{ matrix.cibw_manylinux }}-${{ matrix.cibw_arch }}
          path: ./dist/*.whl

  # Build wheels on macOS
  build_osx_wheels:
    name: Build python ${{ matrix.cibw_python }} ${{matrix.cibw_arch}} wheels on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [macos-latest, macos-14]
        cibw_python: ["cp312-*", "cp313-*"]
        include:
          - os: macos-latest
            cibw_arch: x86_64
          - os: macos-14
            cibw_arch: arm64            
    
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Install build dependencies
        run: |
          python -m pip install numpy>=2.0.0 meson-python

      - name: Build the wheel
        shell: bash
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_arch }}

      - name: Set version info
        shell: bash
        run: |
          # Extract Python version
          echo "PY_VERSION=$(echo ${{ matrix.cibw_python }} | cut -d- -f1)" >> $GITHUB_ENV
          
          # Set version suffix based on tag or branch
          if [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref }}" == refs/tags/v* ]]; then
            # Extract version from tag (removing the 'v' prefix)
            TAG_VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
            echo "VERSION_SUFFIX=$TAG_VERSION-" >> $GITHUB_ENV
          else
            # Use empty suffix for non-tag builds
            echo "VERSION_SUFFIX=" >> $GITHUB_ENV
          fi
      
      - name: Upload the wheel
        uses: actions/upload-artifact@v4
        with:
          name: miscgeom-${{ env.VERSION_SUFFIX }}${{ env.PY_VERSION }}-macosx-${{ matrix.cibw_arch }}
          path: ./dist/*.whl
  

  # Build wheels on Windows
  build_windows_wheels:
    name: Build python ${{ matrix.cibw_python }} ${{matrix.cibw_arch}} wheels on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-latest]
        cibw_python: ["cp312-*", "cp313-*"]
        cibw_arch: ["AMD64"]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Install build dependencies
        run: |
          python -m pip install numpy>=2.0.0 meson-python

      - name: Build the wheel
        shell: bash
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_WINDOWS: ${{ matrix.cibw_arch }}

      - name: Set version info
        shell: bash
        run: |
          # Extract Python version
          echo "PY_VERSION=$(echo ${{ matrix.cibw_python }} | cut -d- -f1)" >> $GITHUB_ENV
          
          # Set version suffix based on tag or branch
          if [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref }}" == refs/tags/v* ]]; then
            # Extract version from tag (removing the 'v' prefix)
            TAG_VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
            echo "VERSION_SUFFIX=$TAG_VERSION-" >> $GITHUB_ENV
          else
            # Use empty suffix for non-tag builds
            echo "VERSION_SUFFIX=" >> $GITHUB_ENV
          fi

      - name: Upload the wheel
        uses: actions/upload-artifact@v4
        with:
          name: miscgeom-${{ env.VERSION_SUFFIX }}${{ env.PY_VERSION }}-win-${{ matrix.cibw_arch }}
          path: ./dist/*.whl

  # publish to pypi
  publish_to_pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - make_sdist
      - build_linux_wheels
      - build_osx_wheels
      - build_windows_wheels

    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/miscgeom
    
    permissions:
      id-token: write
    
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: miscgeom-*
          merge-multiple: true
      
      - name: Display downloaded wheels
        run: |
          echo "Downloaded wheels:"
          ls -la dist/
          echo "Total wheels: $(find dist -name '*.whl' | wc -l)"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true
