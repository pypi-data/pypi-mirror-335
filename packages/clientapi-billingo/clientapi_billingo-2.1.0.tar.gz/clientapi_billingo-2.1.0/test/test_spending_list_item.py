# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.14
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from clientapi_billingo.models.spending_list_item import SpendingListItem

class TestSpendingListItem(unittest.TestCase):
    """SpendingListItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SpendingListItem:
        """Test SpendingListItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SpendingListItem`
        """
        model = SpendingListItem()
        if include_optional:
            return SpendingListItem(
                id = 56,
                organization_id = 56,
                category = 'advertisement',
                paid_at = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                fulfillment_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                partner = clientapi_billingo.models.spending_partner.SpendingPartner(
                    id = 56, 
                    name = '', 
                    tax_code = '', 
                    address = clientapi_billingo.models.address.Address(
                        country_code = '', 
                        post_code = '', 
                        city = '', 
                        address = '', ), 
                    iban = '', 
                    swift = '', 
                    account_number = '', 
                    phone = '', 
                    internal_comment = '', 
                    group_member_tax_number = '', ),
                invoice_number = '',
                currency = 'AED',
                conversion_rate = 1.337,
                total_gross = 1.337,
                total_gross_local = 1.337,
                total_vat_amount = 1.337,
                total_vat_amount_local = 1.337,
                invoice_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                payment_method = 'aruhitel',
                comment = '',
                is_created_by_nav = True
            )
        else:
            return SpendingListItem(
        )
        """

    def testSpendingListItem(self):
        """Test SpendingListItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
