# coding: utf-8

"""
    Billingo API v3

    This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.

    The version of the OpenAPI document: 3.0.14
    Contact: hello@billingo.hu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class Entitlement(str, Enum):
    """
     * `AAM` - Alanyi adómentesség * `ANTIQUES` - Különbözet szerinti szabályozás - gyűjteménydarabok és régiségek - * `ARTWORK` - Különbözet szerinti szabályozás - műalkotások - * `ATK` - Áfa tv. tárgyi hatályán kívüli ügylet * `EAM` - Áfamentes termékexport, azzal egy tekintet alá eső értékesítések, nemzetközi közlekedéshez kapcsolódó áfamentes ügyletek (Áfa tv. 98-109. §) * `EUE` - EU más tagállamában áfaköteles (áfa fizetésére az értékesítő köteles) * `EUFAD37` - Áfa tv. 37. § (1) bekezdése alapján a szolgáltatás teljesítése helye az EU más tagállama (áfa fizetésére a vevő köteles) * `EUFADE` - Áfa tv. egyéb rendelkezése szerint a teljesítés helye EU más tagállama (áfa fizetésére a vevő kötelezett) * `HO` - Áfa tv. szerint EU-n kívül teljesített ügylet * `KBAET` - Más tagállamba irányuló áfamentes termékértékesítés (Áfa tv. 89. §) * `NAM_1` - Áfamentes közvetítői tevékenység (Áfa tv. 110. §) * `NAM_2` - Termékek nemzetközi forgalmához kapcsolódó áfamentes ügylet (Áfa tv. 111-118. §) * `SECOND_HAND` - Különbözet szerinti szabályozás - használt cikkek - * `TAM` - Tevékenység közérdekű jellegére vagy egyéb sajátos jellegére tekintettel áfamentes (Áfa tv. 85-87.§) * `TRAVEL_AGENCY` - Különbözet szerinti szabályozás - utazási irodák -
    """

    """
    allowed enum values
    """
    AAM = 'AAM'
    ANTIQUES = 'ANTIQUES'
    ARTWORK = 'ARTWORK'
    ATK = 'ATK'
    EAM = 'EAM'
    EUE = 'EUE'
    EUFAD37 = 'EUFAD37'
    EUFADE = 'EUFADE'
    HO = 'HO'
    KBAET = 'KBAET'
    NAM_1 = 'NAM_1'
    NAM_2 = 'NAM_2'
    SECOND_HAND = 'SECOND_HAND'
    TAM = 'TAM'
    TRAVEL_AGENCY = 'TRAVEL_AGENCY'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Entitlement from a JSON string"""
        return cls(json.loads(json_str))


