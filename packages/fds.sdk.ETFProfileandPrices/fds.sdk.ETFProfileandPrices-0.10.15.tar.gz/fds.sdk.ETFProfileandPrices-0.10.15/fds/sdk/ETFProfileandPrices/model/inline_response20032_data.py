"""
    Prime Developer Trial

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.ETFProfileandPrices.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.ETFProfileandPrices.exceptions import ApiAttributeError


def lazy_import():
    from fds.sdk.ETFProfileandPrices.model.inline_response20032_data_expense_ratio import InlineResponse20032DataExpenseRatio
    from fds.sdk.ETFProfileandPrices.model.inline_response20032_data_max_capital_gains_rate import InlineResponse20032DataMaxCapitalGainsRate
    globals()['InlineResponse20032DataExpenseRatio'] = InlineResponse20032DataExpenseRatio
    globals()['InlineResponse20032DataMaxCapitalGainsRate'] = InlineResponse20032DataMaxCapitalGainsRate


class InlineResponse20032Data(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'max_capital_gains_rate': (InlineResponse20032DataMaxCapitalGainsRate,),  # noqa: E501
            'dividend_treatment': (str,),  # noqa: E501
            'distribute_k1': (str,),  # noqa: E501
            'tax_type': (str,),  # noqa: E501
            'tax_on_distributions': (str,),  # noqa: E501
            'expense_ratio': (InlineResponse20032DataExpenseRatio,),  # noqa: E501
            'potential_cost_increase_date': (date,),  # noqa: E501
            'contract_advisory_fee': (float,),  # noqa: E501
            'capital_gains': (float,),  # noqa: E501
            'capital_gains_distirbutions3_y': (float,),  # noqa: E501
            'management_expense_ratio': (float,),  # noqa: E501
            'management_fee': (float,),  # noqa: E501
            'trading_expense_ratio': (float,),  # noqa: E501
            'fee_waiver': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'max_capital_gains_rate': 'maxCapitalGainsRate',  # noqa: E501
        'dividend_treatment': 'dividendTreatment',  # noqa: E501
        'distribute_k1': 'distributeK1',  # noqa: E501
        'tax_type': 'taxType',  # noqa: E501
        'tax_on_distributions': 'taxOnDistributions',  # noqa: E501
        'expense_ratio': 'expenseRatio',  # noqa: E501
        'potential_cost_increase_date': 'potentialCostIncreaseDate',  # noqa: E501
        'contract_advisory_fee': 'contractAdvisoryFee',  # noqa: E501
        'capital_gains': 'capitalGains',  # noqa: E501
        'capital_gains_distirbutions3_y': 'capitalGainsDistirbutions3Y',  # noqa: E501
        'management_expense_ratio': 'managementExpenseRatio',  # noqa: E501
        'management_fee': 'managementFee',  # noqa: E501
        'trading_expense_ratio': 'tradingExpenseRatio',  # noqa: E501
        'fee_waiver': 'feeWaiver',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """InlineResponse20032Data - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            max_capital_gains_rate (InlineResponse20032DataMaxCapitalGainsRate): [optional]  # noqa: E501
            dividend_treatment (str): Describes whether dividend income received by the ETP is distributed to ETP shareholders or capitalised (reinvested) into the ETP, text and standardized value available. This data is available for all the Canada and Europe regions.. [optional]  # noqa: E501
            distribute_k1 (str): Flags ETPs that distribute K-1 tax forms. This data is available for the US regions.. [optional]  # noqa: E501
            tax_type (str): Type of the tax applicable on the distribution. This data is available for the US regions.. [optional]  # noqa: E501
            tax_on_distributions (str): Tax treatment of the ETP's regular distributions. This data is available for the US regions.. [optional]  # noqa: E501
            expense_ratio (InlineResponse20032DataExpenseRatio): [optional]  # noqa: E501
            potential_cost_increase_date (date): Expiration date of any fee waivers. This data is available for the US and Canada regions.. [optional]  # noqa: E501
            contract_advisory_fee (float): The advisors fee excluding any additional costs or fees; A subset of the total expense ratio. This data is available for the Canada regions.. [optional]  # noqa: E501
            capital_gains (float): Realized capital gains or losses reported on the ETP's most recent annual or semi-annual report. Gains must generally be paid out as a distribution at year-end, while losses can be banked to offset future gains. This data is available only for the US regions.. [optional]  # noqa: E501
            capital_gains_distirbutions3_y (float): The average annual capital gains paid out to shareholders over the past 3 calendar years, measured as a percent of net asset value (NAV) on the final trading day of each previous year. This data is available for the US region only.. [optional]  # noqa: E501
            management_expense_ratio (float): Total net annual cost associated with holding the ETP, expressed as a percentage. This data is available for the Canada regions.. [optional]  # noqa: E501
            management_fee (float): Annual fee collected by fund manager, expressed as a percentage. This data is available for the Canada region.. [optional]  # noqa: E501
            trading_expense_ratio (float): Estimated annual costs associated with trading the underlying holdings. This data is available for the Canada region.. [optional]  # noqa: E501
            fee_waiver (str): A reduction in annual ETP expenses, expressed as a percentage. This data is available for the Canada region.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """InlineResponse20032Data - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            max_capital_gains_rate (InlineResponse20032DataMaxCapitalGainsRate): [optional]  # noqa: E501
            dividend_treatment (str): Describes whether dividend income received by the ETP is distributed to ETP shareholders or capitalised (reinvested) into the ETP, text and standardized value available. This data is available for all the Canada and Europe regions.. [optional]  # noqa: E501
            distribute_k1 (str): Flags ETPs that distribute K-1 tax forms. This data is available for the US regions.. [optional]  # noqa: E501
            tax_type (str): Type of the tax applicable on the distribution. This data is available for the US regions.. [optional]  # noqa: E501
            tax_on_distributions (str): Tax treatment of the ETP's regular distributions. This data is available for the US regions.. [optional]  # noqa: E501
            expense_ratio (InlineResponse20032DataExpenseRatio): [optional]  # noqa: E501
            potential_cost_increase_date (date): Expiration date of any fee waivers. This data is available for the US and Canada regions.. [optional]  # noqa: E501
            contract_advisory_fee (float): The advisors fee excluding any additional costs or fees; A subset of the total expense ratio. This data is available for the Canada regions.. [optional]  # noqa: E501
            capital_gains (float): Realized capital gains or losses reported on the ETP's most recent annual or semi-annual report. Gains must generally be paid out as a distribution at year-end, while losses can be banked to offset future gains. This data is available only for the US regions.. [optional]  # noqa: E501
            capital_gains_distirbutions3_y (float): The average annual capital gains paid out to shareholders over the past 3 calendar years, measured as a percent of net asset value (NAV) on the final trading day of each previous year. This data is available for the US region only.. [optional]  # noqa: E501
            management_expense_ratio (float): Total net annual cost associated with holding the ETP, expressed as a percentage. This data is available for the Canada regions.. [optional]  # noqa: E501
            management_fee (float): Annual fee collected by fund manager, expressed as a percentage. This data is available for the Canada region.. [optional]  # noqa: E501
            trading_expense_ratio (float): Estimated annual costs associated with trading the underlying holdings. This data is available for the Canada region.. [optional]  # noqa: E501
            fee_waiver (str): A reduction in annual ETP expenses, expressed as a percentage. This data is available for the Canada region.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
